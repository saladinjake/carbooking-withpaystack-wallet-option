{"version":3,"sources":["../../../server/mongo_api/services/withdrawalService.js"],"names":["uuidv4","require","crypto","moment","GatewayTransaction","APIError","httpStatus","Customer","Transaction","simulateGatewayCall","card","amount","status","hex","randomBytes","Math","ceil","toString","slice","auth_code","parseInt","transactionId","paymentDate","authorizationCode","exports","withdrawal","accountNumber","gatewayResponse","gatewayTransaction","save","savedGatewayTransaction","message","BAD_GATEWAY","transaction","operation","reference","savedTransaction","findOne","savedCustomer","response","transform","customer","transformBalance"],"mappings":"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","sourcesContent":["const uuidv4 = require('uuid/v4');\nconst crypto = require('crypto');\nconst moment = require('moment-timezone');\nconst GatewayTransaction = require('../models/gatewayTransaction.model');\nconst APIError = require('../utils/APIError');\nconst httpStatus = require('http-status');\nconst Customer = require('../models/User.model');\nconst Transaction = require('../models/transaction.model');\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\nasync function simulateGatewayCall(card, amount) {\n  let status = 'success';\n  if (card === '4242424242424242') {\n    status = 'failure';\n  }\n\n  const hex = crypto\n    .randomBytes(Math.ceil(6 / 2))\n    .toString('hex')\n    .slice(0, 6);\n  const auth_code = parseInt(hex, 16);\n\n  return {\n    transactionId: uuidv4(),\n    status: status,\n    paymentDate: moment(),\n    amount: amount,\n    authorizationCode: auth_code,\n  };\n}\n\nexports.withdrawal = async (accountNumber, card, amount) => {\n  const gatewayResponse = await simulateGatewayCall(card, amount);\n  const gatewayTransaction = new GatewayTransaction(gatewayResponse);\n  const savedGatewayTransaction = await gatewayTransaction.save();\n  if (savedGatewayTransaction.status === 'failure') {\n    throw new APIError({\n      message: 'Withdrawal Rejected',\n      status: httpStatus.BAD_GATEWAY,\n    });\n  }\n\n  const transaction = new Transaction();\n  transaction.amount = -amount;\n  transaction.operation = 'withdrawal';\n  transaction.accountNumber = accountNumber;\n  transaction.reference = 'withdrawal_gateway_transaction:' + savedGatewayTransaction.transactionId;\n  const savedTransaction = await transaction.save();\n  const savedCustomer = await Customer.findOne({ accountNumber: accountNumber });\n  const response = {\n    transaction: transaction.transform(),\n    customer: savedCustomer.transformBalance(),\n  };\n  return response;\n};\n"],"file":"withdrawalService.js"}