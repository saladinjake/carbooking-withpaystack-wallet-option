{"version":3,"sources":["../../../server/mongo_api/services/sos_service.js"],"names":["MongooseDatabase","getInstance","Database","RedFlagService","request","response","body","user_id","location","filename","address","status","media","email","phone_number","plate_number","username","console","log","postData","NewRedflag","RedFlagModel","id","AutoincrementId","counter","save","then","data","redFlag","json","message","err","error","ErrorHandler","errors","validationError","find","length","Number","params","redflags","JSON","stringify","removeOne","deletedRedFlag","_id","redflagId","user","updateOne","editRedFlags","comment","editCommentRedFlag","send","redId","redflagStatus","redFlags","type","description","NewNotification","NotificationModel","notification","notifications"],"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","sourcesContent":["//import mongoose from 'mongoose';\nimport Database from '../models/db';\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\nimport { ResponseHandler } from '../helpers/response_handler';\nimport { ErrorHandler } from '../helpers/error_handler';\nimport RedFlagModel from '../models/SOS.model.js';\nimport NotificationModel from '../models/Notification.model';\nimport AutoincrementId from '../helpers/autoincrement_mongo.js';\n// Database.establishConnection();\nconst MongooseDatabase = Database.getInstance() || new Database();\nexport class RedFlagService {\n  static createRedFlag(request, response) {\n    const {\n      user_id,\n      location,\n      filename,\n      address,\n      status,\n      media,\n      email,\n      phone_number,\n      plate_number,\n      username,\n    } = request.body;\n    // let id = Number(user_id) || Number(request.body.user_id);\n    console.log('you user id : ' + user_id);\n    let postData = request.body;\n    const NewRedflag = new RedFlagModel({\n      id: new AutoincrementId(RedFlagModel).counter(),\n      user_id,\n      location,\n      address,\n      status,\n      email,\n      phone_number,\n      plate_number,\n      username,\n      media: [filename] || 'cant find it',\n    });\n\n    NewRedflag.save()\n      .then(data => {\n        const redFlag = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: redFlag.id,\n              message: 'Created sos record',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static allRedFlags(request, response) {\n    RedFlagModel.find()\n      .then(data => {\n        let redFlag = data;\n        if (redFlag.length === 0) {\n          redFlag = [\n            // {\n            //   id: 1,\n            //     user_id:5,\n            //     location:'89898888,09007667',\n            //     address:'lekki',\n            //     status:'unresolved'\n            // },\n          ];\n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                redFlag,\n                message: 'All redflags was retrieved successfully',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              redFlag,\n              message: 'All redflags was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static redFlagId(request, response) {\n    RedFlagModel.find({ id: Number(request.params.id) })\n      .then(data => {\n        const redFlag = data;\n        if (redFlag.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The id of the given red-flag was not found',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              redFlag,\n              message: 'Get a specific red-flag was successful',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static deleteRedFlag(request, response) {\n    RedFlagModel.find({ id: Number(request.params.id) })\n      .then(data => {\n        const redflags = data;\n\n        if (redflags.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The red-flag with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The red-flag with the given id does not exists',\n          });\n        }\n        RedFlagModel.removeOne({ id: Number(request.params.id) })\n          .then(data => {\n            const deletedRedFlag = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedRedFlag._id,\n                  message: 'red-flag record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            }),\n          );\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static editRedFlag(request, response) {\n    RedFlagModel.find({ id: Number(request.params.id) })\n      .then(redflagId => {\n        if (redflagId.length < 1) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The location with the given red-flag id does not exists',\n          });\n        }\n        const { location } = request.body;\n        if (Number(request.user.id) === Number(redflagId[0].user_id)) {\n          RedFlagModel.updateOne(\n            { id: Number(request.params.id) },\n            {\n              location: location,\n            },\n          )\n            .then(data => {\n              const editRedFlags = data;\n              return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    id: editRedFlags._id,\n                    editRedFlags,\n                    message: 'Updated red-flag record’s location',\n                  },\n                ],\n              });\n            })\n            .catch(error =>\n              response.status(400).json({\n                status: 400,\n                error: errors.validationError,\n              }),\n            );\n        } else {\n          return response.status(403).json({\n            status: 403,\n            error: 'You must signup or login to access this route',\n          });\n        }\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static editRedFlagComment(request, response) {\n    RedFlagModel.find({ id: request.params.id })\n      .then(redflagId => {\n        if (redflagId.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The comment with the given red-flag id does not exists',\n          });\n        }\n        const { comment } = request.body;\n        if (Number(request.user.id) === Number(redflagId[0].user_id)) {\n          RedFlagModel.updateOne(\n            { id: Number(request.params.id) },\n            {\n              comment: comment,\n            },\n          )\n            .then(data => {\n              const editCommentRedFlag = data;\n              return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    id: editCommentRedFlag._id,\n                    editCommentRedFlag,\n                    message: 'Updated red-flag record’s comment',\n                  },\n                ],\n              });\n            })\n            .catch(error =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n        } else {\n          return response.status(401).json({\n            status: 401,\n            error: 'You must signup or login to access this route',\n          });\n        }\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static updateRedFlagStatus(request, response) {\n    RedFlagModel.find({ id: Number(request.params.id) })\n      .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The status with the given red-flag id does not exists',\n          });\n        }\n        const { status } = request.body;\n        if (Number(request.user.id)) {\n          RedFlagModel.updateOne(\n            { id: Number(request.params.id) },\n            {\n              status: status,\n            },\n          )\n            .then(data => {\n              const redflagStatus = data;\n\n              return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    id: redflagStatus._id,\n                    message: 'Updated red-flag record’s status',\n                  },\n                ],\n              });\n            })\n            .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n        } else {\n          return response.status(401).json({\n            status: 401,\n            error: 'You must signup or login to access this route',\n          });\n        }\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static usersRedflags(request, response) {\n    // UserModel.find({user_id: request.params.id})\n    RedFlagModel.find({ user_id: Number(request.params.id) })\n      .then(data => {\n        const redFlags = data;\n        if (redFlags.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no red-flag record',\n          });\n        }\n        console.log(redFlags);\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              redFlags,\n              type: 'Red-flag',\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static sendNotifications(request, response) {\n    const { user_id, message, type, description } = request.body;\n    let id = Number(user_id) || Number(request.body.user_id);\n    console.log('you user id : ' + id);\n    let postData = request.body;\n    const NewNotification = new NotificationModel({\n      id: new AutoincrementId(NotificationModel).counter(),\n      user_id,\n      message,\n      type,\n      description,\n    });\n\n    NewNotification.save()\n      .then(data => {\n        const notification = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: notification.id,\n              message: 'Created sos record',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getNotifications(request, response) {\n    NotificationModel.find({ user_id: Number(request.params.id) })\n\n      .then(data => {\n        const notifications = data;\n        if (notifications.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no notifications record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              notifications,\n              type: 'notifications',\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n}\n"],"file":"sos_service.js"}