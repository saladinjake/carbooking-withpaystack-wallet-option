{"version":3,"sources":["../../../server/mongo_api/services/cars_services.js"],"names":["MongooseDatabase","getInstance","Database","CarsService","request","response","body","id","car_type","car_year","color","model","partner_id","status","images","plate_number","isOwnedByCompany","uid","Number","user_id","console","log","postData","NewCars","CarsModel","AutoincrementId","counter","save","then","data","Cars","json","message","err","error","ErrorHandler","errors","validationError","find","car_status","health_status","carsAvailable","length","cars","params","Carss","JSON","stringify","removeOne","deletedCars","_id","CarsId","user","updateOne","editCarss","type"],"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","sourcesContent":["//import mongoose from 'mongoose';\nimport Database from '../models/db';\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\nimport { ResponseHandler } from '../helpers/response_handler';\nimport { ErrorHandler } from '../helpers/error_handler';\nimport CarsModel from '../models/Cars.model.js';\nimport AutoincrementId from '../helpers/autoincrement_mongo.js';\n// Database.establishConnection();\nconst MongooseDatabase = Database.getInstance() || new Database();\nexport class CarsService {\n  static createCarProfile(request, response) {\n    const {\n      id,\n      car_type,\n      car_year,\n      color,\n      model,\n      partner_id,\n      status,\n      images,\n      plate_number,\n      isOwnedByCompany,\n    } = request.body;\n    let uid = Number(user_id) || Number(request.body.user_id);\n    console.log('you user id : ' + uid);\n    let postData = request.body;\n    const NewCars = new CarsModel({\n      id: new AutoincrementId(CarsModel).counter(),\n      car_type,\n      car_year,\n      color,\n      model,\n      partner_id,\n      status,\n      images,\n      plate_number,\n      isOwnedByCompany,\n    });\n\n    NewCars.save()\n      .then(data => {\n        const Cars = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: Cars.id,\n              message: 'Created car record',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getAllCars(request, response) {\n    CarsModel.find({ car_status: 'Active', health_status: 'Completed' }) //AND car_category= request.car_category\n      .then(data => {\n        let carsAvailable = data;\n        console.log(carsAvailable + 'all cars here');\n        if (carsAvailable.length === 0) {\n          cars = [];\n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                carsAvailable: cars,\n                message: 'All Cars was retrieved successfully',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              carsAvailable,\n              message: 'All Carss was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static carsId(request, response) {\n    CarsModel.find({ id: Number(request.params.id) })\n      .then(data => {\n        const Cars = data;\n        if (Cars.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The id of the given car was not found',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              Cars,\n              message: 'Get a specific car was successful',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static deleteCars(request, response) {\n    CarsModel.find({ id: Number(request.params.id) })\n      .then(data => {\n        const Carss = data;\n\n        if (Carss.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The car with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The car with the given id does not exists',\n          });\n        }\n        CarsModel.removeOne({ id: Number(request.params.id) })\n          .then(data => {\n            const deletedCars = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedCars._id,\n                  message: 'car record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            }),\n          );\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static editCars(request, response) {\n    CarsModel.find({ id: Number(request.params.id) })\n      .then(CarsId => {\n        if (CarsId.length < 1) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The   given car id does not exists',\n          });\n        }\n        const {\n          car_type,\n          car_year,\n          color,\n          model,\n          partner_id,\n          status,\n          images,\n          plate_number,\n          isOwnedByCompany,\n        } = request.body;\n        if (Number(request.user.id) === Number(CarsId[0].user_id)) {\n          CarsModel.updateOne(\n            { id: Number(request.params.id) },\n            {\n              car_type,\n              car_year,\n              color,\n              model,\n              partner_id,\n              status,\n              images,\n              plate_number,\n              isOwnedByCompany,\n            },\n          )\n            .then(data => {\n              const editCarss = data;\n              return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    id: editCarss._id,\n                    editCarss,\n                    message: 'Updated cars record’s detail',\n                  },\n                ],\n              });\n            })\n            .catch(error =>\n              response.status(400).json({\n                status: 400,\n                error: errors.validationError,\n              }),\n            );\n        } else {\n          return response.status(403).json({\n            status: 403,\n            error: 'You must signup or login to access this route',\n          });\n        }\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static usersCars(request, response) {\n    // UserModel.find({user_id: request.params.id})\n    CarsModel.find({ user_id: Number(request.params.id) })\n\n      .then(data => {\n        const Carss = data;\n        if (Carss.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no cars selected record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              Carss,\n              type: 'Red-flag',\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n}\n"],"file":"cars_services.js"}