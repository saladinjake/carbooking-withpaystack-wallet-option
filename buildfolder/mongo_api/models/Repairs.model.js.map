{"version":3,"sources":["../../../server/mongo_api/models/Repairs.model.js"],"names":["Promise","require","MechSchema","mongoose","Schema","id","type","Number","user_id","String","location","address","status","email","firstname","lastname","carbrand","description","images","Array","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addMech","user","callback","create","get","findOne","exec","then","err","Error","reject","listPlan","skip","limit","find","sort","created_at","module","exports","model"],"mappings":"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","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from 'mongoose';\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\n\nlet MechSchema = new mongoose.Schema(\n  {\n    id: {\n      type: Number,\n\n      default: 0,\n    },\n    user_id: {\n      type: String,\n    },\n    location: {\n      type: String,\n    },\n    address: {\n      type: String,\n    },\n    status: {\n      type: String,\n      // enum: ['Pending','O' 'Resolved','Denied',\"Completed\"],\n      default: 'Pending',\n    },\n    email: {\n      type: String,\n    },\n    firstname: {\n      type: String,\n    },\n    lastname: {\n      type: String,\n    },\n    carbrand: {\n      type: String,\n    },\n    description: {\n      type: String,\n    },\n    images: {\n      type: Array,\n    },\n  },\n  {\n    collection: 'mech_collections',\n    timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' },\n  },\n);\n\nMechSchema.set('toJSON', { getters: true, virtuals: true });\n\n/**\n * Statics\n */\nMechSchema.statics = {\n  // Add Intervention\n  addMech(user, callback) {\n    return this.create(user, callback);\n  },\n\n  get(id) {\n    return this.findOne(id)\n      .exec()\n      .then(user => {\n        if (user) {\n          return user;\n        }\n        const err = new Error('No such mech request category exists!');\n        return Promise.reject(err);\n      });\n  },\n\n  listPlan({ skip = 0, limit = 50 } = {}) {\n    return this.find()\n      .sort({ created_at: -1 })\n      .skip(+skip)\n      .limit(+limit)\n      .exec();\n  },\n};\n\nmodule.exports = mongoose.model('MechModel', MechSchema);\n"],"file":"Repairs.model.js"}