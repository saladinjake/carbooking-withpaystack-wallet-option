{"version":3,"sources":["../../../server/mongo_api/models/DriversNotifications.model.js"],"names":["Promise","require","DriversNotificationsSchema","mongoose","Schema","id","type","Number","user_id","String","description","created_at","Date","now","updated_at","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addDriversNotifications","user","callback","create","get","findOne","exec","then","err","Error","reject","listCars","skip","limit","find","sort","module","exports","model"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AADA,IAAMA,OAAO,2BAAGC,OAAO,CAAC,UAAD,CAAV,CAAb;;AAEA;;AACA;;AACA;AACA,IAAIC,0BAA0B,2BAAG,IAAIC,qBAASC,MAAb,CAC/B;AACEC,EAAAA,EAAE,EAAE;AACFC,IAAAA,IAAI,EAAEC,MADJ;AAGF,eAAS;AAHP,GADN;AAMEC,EAAAA,OAAO,EAAE;AACPF,IAAAA,IAAI,EAAEG;AADC,GANX;AASE;AACA;AAEA;AACAH,EAAAA,IAAI,EAAE;AACJA,IAAAA,IAAI,EAAEG,MADF;AAEJ,YAAM,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,OAAlC,EAA2C,aAA3C,EAA0D,SAA1D,CAFF;AAGJ,eAAS;AAHL,GAbR;AAkBEC,EAAAA,WAAW,EAAE;AACXJ,IAAAA,IAAI,EAAEG;AADK,GAlBf;AAsBEE,EAAAA,UAAU,EAAE;AACVL,IAAAA,IAAI,EAAEM,IADI;AAEV,eAASA,IAAI,CAACC;AAFJ,GAtBd;AA0BEC,EAAAA,UAAU,EAAE;AACVR,IAAAA,IAAI,EAAEM,IADI;AAEV,eAASA,IAAI,CAACC;AAFJ;AA1Bd,CAD+B,EAgC/B;AACEE,EAAAA,UAAU,EAAE,4BADd;AAEEC,EAAAA,UAAU,EAAE;AAAEC,IAAAA,SAAS,EAAE,YAAb;AAA2BC,IAAAA,SAAS,EAAE;AAAtC;AAFd,CAhC+B,CAAH,CAA9B;;AAsCAhB,0BAA0B,CAACiB,GAA3B,CAA+B,QAA/B,EAAyC;AAAEC,EAAAA,OAAO,EAAE,IAAX;AAAiBC,EAAAA,QAAQ,EAAE;AAA3B,CAAzC;AAEA;AACA;AACA;;;AACAnB,0BAA0B,CAACoB,OAA3B,GAAqC;AACnC;AACAC,EAAAA,uBAFmC,mCAEXC,IAFW,EAELC,QAFK,EAEK;AAAA;AAAA;AACtC,WAAO,KAAKC,MAAL,CAAYF,IAAZ,EAAkBC,QAAlB,CAAP;AACD,GAJkC;AAMnCE,EAAAA,GANmC,eAM/BtB,EAN+B,EAM3B;AAAA;AAAA;AACN,WAAO,KAAKuB,OAAL,CAAavB,EAAb,EACJwB,IADI,GAEJC,IAFI,CAEC,UAAAN,IAAI,EAAI;AAAA;AAAA;;AACZ,UAAIA,IAAJ,EAAU;AAAA;AAAA;AACR,eAAOA,IAAP;AACD,OAFD;AAAA;AAAA;;AAGA,UAAMO,GAAG,2BAAG,IAAIC,KAAJ,CAAU,sBAAV,CAAH,CAAT;AAJY;AAKZ,aAAOhC,OAAO,CAACiC,MAAR,CAAeF,GAAf,CAAP;AACD,KARI,CAAP;AASD,GAhBkC;AAkBnCG,EAAAA,QAlBmC,sBAkBK;AAAA,8GAAJ,EAAI;AAAA,yBAA7BC,IAA6B;AAAA,QAA7BA,IAA6B,qDAAtB,CAAsB;AAAA,0BAAnBC,KAAmB;AAAA,QAAnBA,KAAmB,sDAAX,EAAW;;AAAA;AAAA;AACtC,WAAO,KAAKC,IAAL,GACJC,IADI,CACC;AAAE3B,MAAAA,UAAU,EAAE,CAAC;AAAf,KADD,EAEJwB,IAFI,CAEC,CAACA,IAFF,EAGJC,KAHI,CAGE,CAACA,KAHH,EAIJP,IAJI,EAAP;AAKD;AAxBkC,CAArC;;AA2BAU,MAAM,CAACC,OAAP,GAAiBrC,qBAASsC,KAAT,CAAe,2BAAf,EAA4CvC,0BAA5C,CAAjB","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from 'mongoose';\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\nlet DriversNotificationsSchema = new mongoose.Schema(\n  {\n    id: {\n      type: Number,\n\n      default: 0,\n    },\n    user_id: {\n      type: String,\n    },\n    // message:{\n    //   type: String,\n\n    // },\n    type: {\n      type: String,\n      enum: ['success', 'failure', 'pending', 'error', 'information', 'payment'],\n      default: 'information',\n    },\n    description: {\n      type: String,\n    },\n\n    created_at: {\n      type: Date,\n      default: Date.now,\n    },\n    updated_at: {\n      type: Date,\n      default: Date.now,\n    },\n  },\n  {\n    collection: 'drvnotifcation_collections',\n    timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' },\n  },\n);\n\nDriversNotificationsSchema.set('toJSON', { getters: true, virtuals: true });\n\n/**\n * Statics\n */\nDriversNotificationsSchema.statics = {\n  // Add Intervention\n  addDriversNotifications(user, callback) {\n    return this.create(user, callback);\n  },\n\n  get(id) {\n    return this.findOne(id)\n      .exec()\n      .then(user => {\n        if (user) {\n          return user;\n        }\n        const err = new Error('No such user exists!');\n        return Promise.reject(err);\n      });\n  },\n\n  listCars({ skip = 0, limit = 50 } = {}) {\n    return this.find()\n      .sort({ created_at: -1 })\n      .skip(+skip)\n      .limit(+limit)\n      .exec();\n  },\n};\n\nmodule.exports = mongoose.model('DriversNotificationsModel', DriversNotificationsSchema);\n"],"file":"DriversNotifications.model.js"}