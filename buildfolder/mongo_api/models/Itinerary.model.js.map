{"version":3,"sources":["../../../server/mongo_api/models/Itinerary.model.js"],"names":["Promise","require","ItinerarySchema","mongoose","Schema","id","type","Number","plan_id","String","plan_category","status","certificate_id","certificate_date","Date","user_id","assigned_driver_id","assigned_driver_name","assigned_driver_email","assigned_driver_phone","user_plan_id","start_location","destination","start_time","pickup_time","end_time","drive_option","travel_option","no_hours","drivingschool","_user","Types","ObjectId","ref","username","email","phone_number","has_received_quote","has_received_payments","created_at","now","updated_at","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addItinerary","user","callback","create","get","findOne","exec","then","plan","err","Error","reject","listPlan","skip","limit","find","sort","module","exports","model"],"mappings":"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","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from 'mongoose';\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\nlet ItinerarySchema = new mongoose.Schema(\n  {\n    id: {\n      type: Number,\n      default: 0,\n    },\n\n    plan_id: {\n      type: String,\n    },\n\n    plan_category: {\n      type: String,\n    },\n\n    status: {\n      type: String,\n      default: 'Pending',\n    },\n    certificate_id: {\n      type: String,\n      default: 'No date',\n    },\n    certificate_date: {\n      type: Date,\n    },\n    user_id: {\n      type: String,\n    },\n\n    assigned_driver_id: {\n      type: String,\n    },\n\n    assigned_driver_name: {\n      type: String,\n    },\n\n    assigned_driver_email: {\n      type: String,\n    },\n    assigned_driver_phone: {\n      type: String,\n    },\n    user_plan_id: {\n      type: String,\n    },\n    start_location: {\n      type: String,\n    },\n    destination: {\n      type: String,\n    },\n    start_time: {\n      type: Date,\n    },\n\n    pickup_time: {\n      type: String,\n    },\n    end_time: {\n      type: String,\n    },\n    drive_option: {\n      type: String,\n      default: 'Driver Required',\n    },\n    travel_option: {\n      type: String,\n      default: 'intracity',\n    },\n    no_hours: {\n      type: String,\n    },\n    drivingschool: {\n      type: String,\n    },\n    _user: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'UserModel',\n    },\n\n    username: {\n      type: String,\n    },\n\n    email: {\n      type: String,\n    },\n    phone_number: {\n      type: String,\n    },\n    has_received_quote: {\n      type: String,\n      default: 'No',\n    },\n    has_received_payments: {\n      type: String,\n      default: 'No',\n    },\n\n    // status: {\n    //  type:String,\n    //  enum:[\"unpaid\",\"pending\",\"paid\"],\n    //  default: \"unprocessed\"\n    // },\n\n    created_at: {\n      type: Date,\n      default: Date.now,\n    },\n    updated_at: {\n      type: Date,\n      default: Date.now,\n    },\n  },\n  {\n    collection: 'useritinerary_collections',\n    timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' },\n  },\n);\n\nItinerarySchema.set('toJSON', { getters: true, virtuals: true });\n\nItinerarySchema.statics = {\n  // Add Intervention\n  addItinerary(user, callback) {\n    return this.create(user, callback);\n  },\n\n  get(id) {\n    return this.findOne(id)\n      .exec()\n      .then(plan => {\n        if (plan) {\n          return plan;\n        }\n        const err = new Error('No such itinerary exists!');\n        return Promise.reject(err);\n      });\n  },\n\n  listPlan({ skip = 0, limit = 50 } = {}) {\n    return this.find()\n      .sort({ created_at: -1 })\n      .skip(+skip)\n      .limit(+limit)\n      .exec();\n  },\n};\n\nmodule.exports = mongoose.model('ItineraryModel', ItinerarySchema);\n"],"file":"Itinerary.model.js"}