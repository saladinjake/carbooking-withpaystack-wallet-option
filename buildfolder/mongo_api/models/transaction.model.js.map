{"version":3,"sources":["../../../server/mongo_api/models/transaction.model.js"],"names":["mongoose","require","crypto","moment","omitBy","isNil","Customer","masterAccount","masterAccountPassword","operations","transactionSchema","Schema","operation","type","String","required","accountNumber","ref","destinationAccountNumber","amount","Number","reference","timestamps","pre","next","wasNew","isNew","save","post","doc","findOne","currentCustomer","balance","toFixed","savedCustomer","fee","tempAmount","Math","abs","transFee","Transaction","_id","savedTransFee","getMasterAccount","savedMasterAccount","method","transform","transformed","fields","forEach","field","statics","list","page","perPage","options","find","sort","createdAt","skip","limit","exec","model","module","exports"],"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","sourcesContent":["const mongoose = require('mongoose');\nconst crypto = require('crypto');\nconst moment = require('moment-timezone');\nconst { omitBy, isNil } = require('lodash');\nconst Customer = require('../models/User.model');\nconst { masterAccount, masterAccountPassword } = require('../config/vars');\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\n/**\n * Indicates type of operation\n */\nconst operations = ['deposit', 'withdrawal', 'transfer', 'fee'];\n\n/**\n * Transaction Schema\n * @private\n */\nconst transactionSchema = new mongoose.Schema(\n  {\n    operation: {\n      type: String,\n      required: true,\n      enum: operations,\n    },\n    accountNumber: {\n      type: 'Number',\n      ref: 'Customer',\n      required: true,\n    },\n    destinationAccountNumber: {\n      type: 'Number',\n      ref: 'Customer',\n    },\n    amount: {\n      type: Number,\n      default: 0,\n      required: true,\n    },\n    reference: {\n      type: String,\n    },\n  },\n  {\n    timestamps: true,\n  },\n);\n\n/**\n * Add your\n * - pre-save hooks\n * - validations\n * - virtuals\n */\n\ntransactionSchema.pre('save', async function save(next) {\n  this.wasNew = this.isNew;\n  return next();\n});\n\ntransactionSchema.post('save', async function save(doc, next) {\n  try {\n    if (this.wasNew) {\n      const currentCustomer = await Customer.findOne({ accountNumber: this.accountNumber });\n      currentCustomer.balance += this.amount;\n      currentCustomer.balance = currentCustomer.balance.toFixed(2);\n      const savedCustomer = await currentCustomer.save();\n    }\n\n    if (this.wasNew && this.operation === 'transfer' && this.amount < 0) {\n      let fee = 0;\n      let tempAmount = Math.abs(this.amount);\n\n      if (tempAmount <= 1000) {\n        fee = 8 + tempAmount * 0.03;\n      } else if (tempAmount > 1000 && tempAmount <= 5000) {\n        fee = 6 + tempAmount * 0.025;\n      } else if (tempAmount > 5000 && tempAmount <= 10000) {\n        fee = 4 + tempAmount * 0.02;\n      } else if (tempAmount > 10000) {\n        fee = 3 + tempAmount * 0.01;\n      }\n\n      if (fee > 0) {\n        const transFee = new Transaction();\n        transFee.amount = -fee;\n        transFee.amount = transFee.amount.toFixed(2);\n        transFee.operation = 'fee';\n        transFee.accountNumber = this.accountNumber;\n        transFee.reference = 'fee_from_transaction:' + this._id;\n        const savedTransFee = await transFee.save();\n\n        const masterAccount = await Customer.getMasterAccount();\n        masterAccount.balance -= savedTransFee.amount;\n        const savedMasterAccount = await masterAccount.save();\n      }\n    }\n\n    return next();\n  } catch (error) {\n    return next(error);\n  }\n});\n\n/**\n * Methods\n */\ntransactionSchema.method({\n  transform() {\n    const transformed = {};\n    const fields = [\n      'id',\n      'accountNumber',\n      'destinationAccountNumber',\n      'operation',\n      'amount',\n      'reference',\n      'createdAt',\n    ];\n\n    fields.forEach(field => {\n      transformed[field] = this[field];\n    });\n\n    return transformed;\n  },\n});\n\n/**\n * Statics\n */\ntransactionSchema.statics = {\n  /**\n   * List customers transactions in descending order of 'createdAt' timestamp.\n   *\n   * @param {number} skip - Number of transactions to be skipped.\n   * @param {number} limit - Limit number of transactions to be returned.\n   * @returns {Promise<Transaction[]>}\n   */\n  list({ page = 1, perPage = 30, accountNumber }) {\n    let options = omitBy({ accountNumber }, isNil);\n    if (accountNumber == masterAccount) {\n      options = { operation: 'fee' };\n    }\n\n    return this.find(options)\n      .sort({ createdAt: -1 })\n      .skip(perPage * (page - 1))\n      .limit(perPage)\n      .exec();\n  },\n};\n\nconst Transaction = mongoose.model('Transaction', transactionSchema);\n\nmodule.exports = Transaction;\n"],"file":"transaction.model.js"}