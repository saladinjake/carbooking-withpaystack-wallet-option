{"version":3,"sources":["../../../server/mongo_api/middlewares/user_sanitizer.js"],"names":["validNameRegex","user_typeRegex","usernameRegex","emailRegex","passwordRegex","phoneNumberRegex","lastnameRegex","handleError","response","message","code","status","json","error","SubmitEventValidator","request","next","body","email","test","console","log","UserModel","find","then","result","userExists","length","JSON","stringify","err","DriverModel","PartnerModel","firstname","lastname","user_type","username","phoneNumber","password","terms_and_cond"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","sourcesContent":["/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\nimport Database from '../models/db';\nimport ResponseHandler from '../helpers/response_handler';\nimport UserModel from '../models/User.model';\nimport DriverModel from '../models/Driver.model';\nimport PartnerModel from '../models/Partners.model';\nconst validNameRegex = /^[A-Za-z]{3,30}$/;\nconst user_typeRegex = /^[a-zA-Z]'?([a-zA-Z]|\\.| |-){3,}$/;\nconst usernameRegex = /^[A-Za-z0-9]{3,20}$/;\nconst emailRegex = /\\S+@\\S+\\.\\S+/;\nconst passwordRegex = /^[A-Za-z0-9]{6,}$/;\nconst phoneNumberRegex = /^(\\+?234|0)?[789]\\d{9}$/;\nconst lastnameRegex = /^[A-Za-z\\d_-]+$/;\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\nconst handleError = (response, message, code = 422) =>\n  response.status(code).json({\n    status: code,\n    error: message,\n  });\n\nexport default class SubmitEventValidator {\n  static checkIfUserDoesntExists(request, response, next) {\n    const { email } = request.body;\n\n    if (!emailRegex.test(email)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Invalid email sent',\n      });\n    }\n    console.log('email to check: ' + email);\n    UserModel.find({ email: email })\n\n      .then(result => {\n        const userExists = result;\n        if (userExists.length > 0) {\n          return next();\n        } else {\n          console.log('this user does not : ' + JSON.stringify(result));\n          return response.status(422).json({\n            status: 422,\n            error: 'User does not exist on this platform',\n          });\n        }\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: 'Email or Username must be unique: ' + err,\n        }),\n      );\n  }\n\n  static checkIfUserExists(request, response, next) {\n    const { email } = request.body;\n\n    if (!emailRegex.test(email)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Invalid email sent',\n      });\n    }\n    console.log('email to check: ' + email);\n    UserModel.find({ email: email })\n\n      .then(result => {\n        const userExists = result;\n        if (userExists.length > 0) {\n          console.log('this user exist : ' + JSON.stringify(result));\n          return response.status(409).json({\n            status: 409,\n            error: 'Email already exists',\n          });\n        } else {\n          return next();\n        }\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: 'Email or Username must be unique: ' + err,\n        }),\n      );\n  }\n\n  static checkIfUserIsBanned(request, response, next) {\n    const { email } = request.body;\n\n    if (!emailRegex.test(email)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Invalid email sent',\n      });\n    }\n    console.log('email to check: ' + email);\n    UserModel.find({ email: email, status: 'Active' })\n\n      .then(result => {\n        const userExists = result;\n        if (userExists.length <= 0) {\n          console.log('this user exist : ' + JSON.stringify(result));\n          return response.status(409).json({\n            status: 409,\n            error: 'User is either banned or suspended on this platform',\n          });\n        } else {\n          return next();\n        }\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: 'Email or Username must be unique: ' + err,\n        }),\n      );\n  }\n\n  static checkIfDriverExists(request, response, next) {\n    const { email } = request.body;\n\n    if (!emailRegex.test(email)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Invalid email sent',\n      });\n    }\n    console.log('email to check: ' + email);\n    DriverModel.find({ email: email })\n\n      .then(result => {\n        const userExists = result;\n        if (userExists.length > 0) {\n          console.log('this user exist : ' + JSON.stringify(result));\n          return response.status(409).json({\n            status: 409,\n            error: 'Email already exists',\n          });\n        } else {\n          return next();\n        }\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: 'Email or Username must be unique: ' + err,\n        }),\n      );\n  }\n\n  static checkIfPartnerExists(request, response, next) {\n    const { email } = request.body;\n\n    if (!emailRegex.test(email)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Invalid email sent',\n      });\n    }\n    console.log('email to check: ' + email);\n    PartnerModel.find({ email: email })\n\n      .then(result => {\n        const userExists = result;\n        if (userExists.length > 0) {\n          console.log('this user exist : ' + JSON.stringify(result));\n          return response.status(409).json({\n            status: 409,\n            error: 'Email already exists',\n          });\n        } else {\n          return next();\n        }\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: 'Email or Username must be unique: ' + err,\n        }),\n      );\n  }\n\n  static validateSignUp(request, response, next) {\n    const {\n      firstname,\n      lastname,\n      user_type,\n      username,\n      email,\n      phoneNumber,\n      password,\n      terms_and_cond,\n    } = request.body;\n\n    if (terms_and_cond == 'not selected') {\n      console.log('err terms');\n      return response.status(422).json({\n        status: 422,\n        error: 'Terms and conditions must be checked to sign up',\n      });\n    }\n    if (!(firstname && firstname.length)) {\n      console.log('err fn');\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter your firstname',\n      });\n    }\n    if (!validNameRegex.test(firstname)) {\n      console.log('err fn1');\n      return response.status(422).json({\n        status: 422,\n        error: 'firstname must be between 3 and 30 characters only',\n      });\n    }\n    if (!(lastname && lastname.length)) {\n      console.log('err ln');\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter your lastname',\n      });\n    }\n    if (!lastnameRegex.test(lastname)) {\n      console.log('err ln2');\n      return response.status(422).json({\n        status: 422,\n        error: 'lastname must be between 3 and 30 characters only',\n      });\n    }\n\n    if (!(user_type && user_type.length)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter your user_type',\n      });\n    }\n    if (user_type == 'Select Category') {\n      return response.status(422).json({\n        status: 422,\n        error: 'Please choose a plan category',\n      });\n    }\n\n    console.log(user_type);\n\n    if (!user_typeRegex.test(user_type)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'user_type must be a minimum of 3 charcaters',\n      });\n    }\n\n    if (!(username && username.length)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter your username',\n      });\n    }\n\n    if (!usernameRegex.test(username)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'username must contain between 3 and 30 alphanumeric characters only',\n      });\n    }\n    if (!(email && email.length)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter your email',\n      });\n    }\n\n    if (!emailRegex.test(email)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter a valid email',\n      });\n    }\n\n    if (!(phoneNumber && phoneNumber.length)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter your phone number',\n      });\n    }\n\n    if (!phoneNumberRegex.test(phoneNumber)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter a valid phone number',\n      });\n    }\n\n    if (!(password && password.length)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter your password',\n      });\n    }\n\n    if (!passwordRegex.test(password)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Password must be a minimum of 6 alphanumeric characters',\n      });\n    }\n\n    return next();\n  }\n\n  static validateLogin(request, response, next) {\n    const { email, password } = request.body;\n    if (!(email && email.length)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'email is required',\n      });\n    }\n    if (!emailRegex.test(email)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter a valid email',\n      });\n    }\n    if (!(password && password.length)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'password is required',\n      });\n    }\n\n    if (!emailRegex.test(email)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Invalid email sent',\n      });\n    }\n    console.log('email to check: ' + email);\n    var error = false;\n    UserModel.find({ email: email })\n      .then(result => {\n        console.log('this user exist : ' + JSON.stringify(result));\n        const userExists = result;\n        if (userExists.length < 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'Email does not exists',\n          });\n        } else if (userExists[0].email) {\n          return next();\n        } else {\n          return response.status(422).json({\n            status: 422,\n            error: 'Invalid credentials',\n          });\n        }\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: 'Email or Username must be unique',\n        }),\n      );\n  }\n}\n"],"file":"user_sanitizer.js"}