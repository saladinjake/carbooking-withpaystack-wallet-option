{"version":3,"sources":["../../../server/mongo_api/api/oldupload.js"],"names":["aws_upload","require","singleUpload","single","storage","multer","diskStorage","destination","req","file","cb","filename","originalname","upload","ApiUploads","router","multerConfig","next","console","log","ext","mimetype","split","fieldname","Date","now","fileFilter","image","startsWith","post","res","send","err","status","errors","title","detail","message","json","imageUrl"],"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","sourcesContent":["import UserController from '../controllers/user_controller';\nimport multer from 'multer';\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\nconst aws_upload = require('./services/aws_uploads');\nconst singleUpload = aws_upload.single('image');\n\n// Set file upload path and file name\nvar storage = multer.diskStorage({\n  destination: function(req, file, cb) {\n    // File upload will be placed in upload folder under public after successful upload\n    cb(null, './public/upload');\n  },\n  filename: function(req, file, cb) {\n    // Set the name of the file to its original name, or add other characters to distinguish the same file, such as file. originalname + new Date (). getTime (); use time to distinguish\n    cb(null, file.originalname);\n  },\n});\nvar upload = multer({\n  storage: storage,\n});\n\nclass ApiUploads {\n  constructor(router) {\n    this.router = router;\n  }\n  attachRoutes() {\n    // this.router.post('/image/uploads', UserController.handleImageUpload);\n    // this.router.post('/video/uploads', UserController.handleVideoUpload);\n    //this.router.post('/image/profile/avater', upload.single('image-upload'), function (req, res, next) {\n    //console.log(\"testing..\")\n    // The network path after file upload is spliced.\n\n    // });\n\n    //MULTER CONFIG: to get file photos to temp server storage\n    const multerConfig = {\n      //specify diskStorage (another option is memory)\n      storage: multer.diskStorage({\n        //specify destination\n        destination: function(req, file, next) {\n          next(null, './public/photo-storage');\n        },\n\n        //specify the filename to be unique\n        filename: function(req, file, next) {\n          console.log(file);\n          //get the file mimetype ie 'image/jpeg' split and prefer the second value ie'jpeg'\n          const ext = file.mimetype.split('/')[1];\n          //set the file fieldname to a unique name containing the original name, current datetime and the extension.\n          next(null, file.fieldname + '-' + Date.now() + '.' + ext);\n        },\n      }),\n\n      // filter out and prevent non-image files.\n      fileFilter: function(req, file, next) {\n        if (!file) {\n          next();\n        }\n\n        // only permit image mimetypes\n        const image = file.mimetype.startsWith('image/');\n        if (image) {\n          console.log('photo uploaded');\n          next(null, true);\n        } else {\n          console.log('file not supported');\n          //TODO:  A better message response to user on failure.\n          return next();\n        }\n      },\n    };\n\n    this.router.post('/image/profile/avater', multer(multerConfig).single('image-upload'), function(\n      req,\n      res,\n    ) {\n      //Here is where I could add functions to then get the url of the new photo\n      //And relocate that to a cloud storage solution with a callback containing its new url\n      //then ideally loading that into your database solution.   Use case - user uploading an avatar...\n      res.send(\n        'Complete! Check out your public/photo-storage folder.  Please note that files not encoded with an image mimetype are rejected. <a href=\"index.html\">try again</a>',\n      );\n    });\n\n    this.router.post('/image-upload', function(req, res) {\n      singleUpload(req, res, function(err) {\n        if (err) {\n          return res\n            .status(422)\n            .send({ errors: [{ title: 'Image Upload Error', detail: err.message }] });\n        }\n\n        return res.json({ imageUrl: req.file });\n      });\n    });\n  }\n}\n\nexport default ApiUploads;\n"],"file":"oldupload.js"}