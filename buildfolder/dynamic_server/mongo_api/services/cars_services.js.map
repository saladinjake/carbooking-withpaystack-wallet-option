{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/services/cars_services.js"],"names":["MongooseDatabase","getInstance","Database","CarsService","request","response","body","id","car_type","car_year","color","model","partner_id","status","images","plate_number","isOwnedByCompany","uid","Number","user_id","console","log","postData","NewCars","CarsModel","AutoincrementId","counter","save","then","data","Cars","json","message","err","error","ErrorHandler","errors","validationError","find","car_status","health_status","carsAvailable","length","cars","params","Carss","JSON","stringify","removeOne","deletedCars","_id","CarsId","user","updateOne","editCarss","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","sourcesContent":["//import mongoose from 'mongoose';\nimport Database from '../models/db';\n\n\nimport { ResponseHandler } from '../helpers/response_handler';\nimport { ErrorHandler } from '../helpers/error_handler';\nimport CarsModel from '../models/Cars.model.js';\nimport AutoincrementId from '../helpers/autoincrement_mongo.js';\n// Database.establishConnection();\nconst MongooseDatabase = Database.getInstance() || new Database();\nexport class CarsService {\n  static createCarProfile(request, response) {\n    const {\n            id,\n            car_type,\n            car_year,\n            color,\n            model,\n            partner_id,\n            status,\n            images,\n            plate_number,\n            isOwnedByCompany,\n  \n    } = request.body;\n    let uid = Number(user_id) || Number(request.body.user_id);\n    console.log('you user id : ' + uid);\n    let postData = request.body;\n    const NewCars = new CarsModel({ \n            id:  new AutoincrementId(CarsModel).counter(),\n            car_type,\n            car_year,\n            color,\n            model,\n            partner_id,\n            status,\n            images,\n            plate_number ,\n           isOwnedByCompany,\n      });\n\n    NewCars.save()\n      .then(data => {\n        const Cars = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: Cars.id,\n              message: 'Created car record',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getAllCars(request, response) {\n    CarsModel.find({car_status:'Active',health_status:'Completed'})\n      .then(data => {\n        let carsAvailable = data;\n        console.log(carsAvailable+ \"all cars here\")\n        if (carsAvailable.length === 0) {\n           cars= [];\n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                carsAvailable:cars,\n                message: 'All Cars was retrieved successfully',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              carsAvailable,\n              message: 'All Carss was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static carsId(request, response) {\n    CarsModel.find({id: Number(request.params.id)})\n      .then(data => {\n        const Cars = data;\n        if (Cars.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The id of the given car was not found',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              Cars,\n              message: 'Get a specific car was successful',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static deleteCars(request, response) {\n    CarsModel.find({id: Number(request.params.id)})\n      .then(data => {\n        const Carss = data;\n\n        if ( Carss.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The car with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The car with the given id does not exists',\n          });\n        }\n        CarsModel.removeOne({id: Number(request.params.id)})\n          .then(data => {\n            const deletedCars = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedCars._id,\n                  message: 'car record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            }),\n          );\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static editCars(request, response) {\n    CarsModel.find({id: Number(request.params.id)})\n      .then(CarsId => {\n        if (CarsId.length < 1) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The   given car id does not exists',\n          });\n        }\n        const { \n           car_type,\n            car_year,\n            color,\n            model,\n            partner_id,\n            status,\n            images,\n            plate_number ,\n           isOwnedByCompany, } = request.body;\n        if ( Number(request.user.id) === Number(CarsId[0].user_id) )  {\n          CarsModel.updateOne({id: Number(request.params.id)}, {\n             \n            car_type,\n            car_year,\n            color,\n            model,\n            partner_id,\n            status,\n            images,\n            plate_number ,\n           isOwnedByCompany,\n             \n           }).then(data => {\n              const editCarss = data;\n              return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    id: editCarss._id,\n                    editCarss,\n                    message: 'Updated cars record’s detail',\n                  },\n                ],\n              });\n            })\n            .catch(error =>\n              response.status(400).json({\n                status: 400,\n                error: errors.validationError,\n              }),\n            );\n        } else {\n          return response.status(403).json({\n            status: 403,\n            error: 'You must signup or login to access this route',\n          });\n        }\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  \n\n  static usersCars(request, response) {\n    // UserModel.find({user_id: request.params.id})\n    CarsModel.find({ user_id: Number(request.params.id) })\n    \n      .then(data => {\n        const Carss = data;\n        if (Carss.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no cars selected record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              Carss,\n              type: 'Red-flag',\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n}\n"],"file":"cars_services.js"}