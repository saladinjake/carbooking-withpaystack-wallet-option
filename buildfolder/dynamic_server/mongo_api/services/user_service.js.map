{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/services/user_service.js"],"names":["dotenv","config","csv","require","uuidv4","sgMail","postmark","sendgridTransport","process","env","gmailTransport","MailConfig","GmailTransport","smtpTransport","SMTPTransport","request","initializePayment","verifyPayment","MongooseDatabase","getInstance","Database","BACKEND_API","readHTMLFile","path","callback","fs","readFile","encoding","err","html","UserService","req","res","review","UserPlanModel","username","body","rating","save","then","result","User","findOne","user","reviews","push","json","message","error","status","UserModel","password","email","params","response","templateDir","replacements","userEmail","STATUS","HelperOptions","from","to","subject","context","name","address","__dirname","template","handlebars","compile","htmlToSend","sendMail","info","console","log","send","msg","success","data","replacementObj","tokenSTR","link","tokenToSend","firstname","lastname","phoneNumber","user_type","TokenGenerator","hashPassword","trim","Newuser","id","AutoincrementId","counter","phone_number","is_admin","emailT","crypto","randomBytes","toString","emailtoken","EmailTokenMakerForSignUp","_userId","_id","email_confirm_token","ress","newUserMail","token","generateToken","ErrorHandler","errors","validationError","isVerified","checkIfPasswordMatch","isAdmin","profile","avatar","plan","plan_name","balance","notification_count","roles","test_certificate","account_num","accountNumber","from_mobile","type","sendFile","join","phone","result2","hashedStringToSend","Storage","setItem","ForgotModelToken","ForgotPasswordToken","email_to_reset","passwordResetsMail","plan_id","plan_id_to_pay","accountBalance","newDonor","String","Date","reference","amount","customer","full_name","metadata","donor","WalletModel","confirmPass","confirmPassword","getItem","find","userInfo","length","RolesAndPreviledgesModel","for_admins","previledges_info","view_bookings","view_quotations","view_transactions","view_payments","view_drivers","view_sos","view_partners","view_package","view_cars","view_tickets","view_faqs","view_users","view_admins","view_settings","manage_bookings","manage_quotations","manage_transactions","manage_payments","manage_drivers","manage_sos","manage_partners","manage_package","manage_cars","manage_tickets","manage_faqs","manage_users","manage_admins","manage_settings","view_car_inspection","view_drive_test","manage_drive_test","manage_car_inspection","users","updateMany","$set","multi","old_balance","currentBalance","passwordConfirm","certificate","itineraries","user_id","carsSelected","planName","price","planCategoryName","no_hours","NewUserPlan","plan_category_name","cars_on_plan","itineries","duration","ItineraryModel","JSON","stringify","remove","deletedUser","plan_category","start_location","destination","drive_option","start_time","travel_option","drivingschool","NewItinerary","Number","redId","updateOne","redflagStatus","NotificationModel","totalAvg","ratings","parseInt","ratings_average","certificate_id","end_time","cars_id","IndividualPlanModel","individualPlans","coperatePlanModel","coperatePlan","strigify","redflags","removeOne","deletedRedFlag","itinerary","RedFlagModel","plans","QuoteModel","quote","oldBalance","debit_amount","bal","has_updated","userItins","user_plan_id","has_received_payments","has_received_quote","userPlanInfo","fullname","form","amout","redirect","parse","url","authorization_url","query","trxref","ref","convertedBal","e","quotation_id","PaymentModel","findById","tranx","for_users","description","NewNotificationModel","now","startOfToday","getFullYear","getMonth","getDate","sort","field","allNotification","boolVerification","passwordComfirm","is_verified","admins","usergroup_set","is_active","drivers","PartnersModel","partners","totalCars","bankAccount","bankAccountName","bankAccountNumber","firstName","lastName","userName","businessName","EarningsModel","earnings","paymentDate","PaymentStatus","PaymentAmount","paymentReference","partnerId","partnerEmail","partnerBankAccount","vehicleId","vehicleName","vehiclePlateNo","pid","partner","paymentStatus","paymentAmount","corporatePlans","delete_type","plan_categories","max_car","car_max","CarsModel","health_status","$ne","inspections","confirmedInspectionDate","confirmedInspectionTime","date","time","NotificationEmail","DEPLOY_FRONT_URL","createdDate","car_id","InspectionModel","DriveTestModel","testDrive","test_center","test_center_address","previledges","previledges_description","usergroups_old","usergroup","value","SOSModel","redFlag","InterventionsModel","intervention","category","assigned_to","comment","NewCars","Cars","responses","question","answer","FAQModel","faqs","faq","carsAvailable","cars","car_status","car_type","car_model","car_year","assigned_driver_name","assigned_driver_email","assigned_driver_phone","partner_id","inspection_detail","plate_number","license","assigned_driver_id","images","inspectionDate","vehicleIdentificationNumber","inspectionTime","color","model","car","carModel","carYear","vehicleColor","plateNo","carDescription","imagePath","creator","date_created","carInfo","carsApi","GmailSettingModel","googleSettings","MechModel","mech","mongoose","NewEarnings","Types","ObjectId","vehicle","Earnings","FacebookSettingModel","facebookSettings","PaystackSettingModel","paystackSettings","SendgridEmailSettingModel","sendgridSettings","AwsS3Model","awsSettings","InstagramSettingModel","instagramSettings","test_secret_key","test_public_key","live_public_key","live_secret_key","api_mode","settings","manageBookings","createdDateOfQuotation","has_been_updated","manageBookingsDetail","usersPlan","pickup_time","certificate_date","today","created_at","$gte","exec","wallet","totalToday","todaySales_from_account","map","item","i","todaySales","yesterdayStart","setDate","setHours","yesterdayEnd","$gt","totalYest","yesterdaysSales","oneWeekAgo","totalWeek","weeklySales","lastMonths","$lte","docs","lastMonth","wallets","payments","quotations","payment_status","substring","AuditNotificationModel","audit","admin","module_name","message_type","logMessage","NewAuditTrail","retrievalComments","vehicleID","partnerID","partnerName","retrievalDate","hasBeenRevoked","RetrievalTrail","Retrieval","carsNotInUse","promiseList","promistList"],"mappingsmBAAOC,MAAP;;AAKA;;AACA;;AACA;AACA,IAAMC,GAAG,2BAAGC,OAAO,CAAC,YAAD,CAAV,CAAT;AACA,IAAMC,MAAM,2BAAGD,OAAO,CAAC,SAAD,CAAV,CAAZ;AACA,IAAME,MAAM,2BAAGF,OAAO,CAAC,gBAAD,CAAV,CAAZ;AAEA,IAAIG,QAAQ,2BAAGH,OAAO,CAAC,UAAD,CAAV,CAAZ;AA8CA,IAAMI,iBAAiB,2BAAGJ,OAAO,CAAC,+BAAD,CAAV,CAAvB,C,CACA;;;AAmBAK,OAAO,CAACC,GAAR,CAAY,8BAAZ,IAA8C,CAA9C;AAEA,IAAIC,cAAc,2BAAGC,kBAAWC,cAAd,CAAlB;AACA,IAAIC,aAAa,2BAAGF,kBAAWG,aAAd,CAAjB;;AAEA,mCAA6CX,OAAO,CAAC,oBAAD,CAAP,CAA8BY,mBAA9B,CAA7C;AAAA,IAAQC,iBAAR,QAAQA,iBAAR;AAAA,IAA2BC,aAA3B,QAA2BA,aAA3B;;AAEA,IAAMC,gBAAgB,4BAAG,0CAASC,WAAT,kCAA0B,IAAIC,cAAJ,EAA1B,CAAH,CAAtB;AACA,IAAIC,WAAW,4BAAG,6CAAH,CAAf;;;AAEA,IAAIC,YAAY,GAAG,SAAfA,YAAe,CAASC,IAAT,EAAeC,QAAf,EAAyB;AAAA;AAAA;;AAC1CC,iBAAGC,QAAH,CAAYH,IAAZ,EAAkB;AAAEI,IAAAA,QAAQ,EAAE;AAAZ,GAAlB,EAAyC,UAASC,GAAT,EAAcC,IAAd,EAAoB;AAAA;AAAA;;AAC3D,QAAID,GAAJ,EAAS;AAAA;AAAA;AACP,YAAMA,GAAN;AADO;AAEPJ,MAAAA,QAAQ,CAACI,GAAD,CAAR;AACD,KAHD,MAGO;AAAA;AAAA;AACLJ,MAAAA,QAAQ,CAAC,IAAD,EAAOK,IAAP,CAAR;AACD;AACF,GAPD;AAQD,CATD;;IAWaC,W;;;uFAg2FM,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA;AAC7B,UAAMC,MAAM,6BAAG,IAAIC,oBAAJ,EAAH,CAAZ;AAD6B;AAE7BD,MAAAA,MAAM,CAACE,QAAP,GAAkBJ,GAAG,CAACK,IAAJ,CAASD,QAA3B;AAF6B;AAG7BF,MAAAA,MAAM,CAACI,MAAP,GAAgBN,GAAG,CAACK,IAAJ,CAASC,MAAzB;AAH6B;AAI7BJ,MAAAA,MAAM,CAACG,IAAP,GAAcL,GAAG,CAACK,IAAJ,CAASA,IAAvB;AAJ6B;AAK7BH,MAAAA,MAAM,CACHK,IADH,GAEGC,IAFH,CAEQ,UAAAC,MAAM,EAAI;AAAA;AAAA;AACdC,QAAAA,IAAI,CAACC,OAAL,CAAa;AAAEP,UAAAA,QAAQ,EAAEF,MAAM,CAACE;AAAnB,SAAb,EAA4C,UAACP,GAAD,EAAMe,IAAN,EAAe;AAAA;AAAA;;AACzD,cAAIA,IAAJ,EAAU;AAAA;AAAA;AACR;AACA;AACAA,YAAAA,IAAI,CAACC,OAAL,CAAaC,IAAb,CAAkBZ,MAAlB;AAHQ;AAIRU,YAAAA,IAAI,CAACL,IAAL;AAJQ;AAKRN,YAAAA,GAAG,CAACc,IAAJ,CAAS;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAAT;AACD,WAND;AAAA;AAAA;AAOD,SARD;AASD,OAZH,WAaS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdhB,QAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEE,UAAAA,KAAK,EAALA;AAAF,SAArB;AACD,OAfH;AAgBD,K;mFAEY,UAACjB,GAAD,EAAMC,GAAN,EAAc;AAAA;AACzB,UAAMW,IAAI,6BAAG,IAAIO,qBAAJ,EAAH,CAAV;AADyB;AAEzBP,MAAAA,IAAI,CAACR,QAAL,GAAgBJ,GAAG,CAACK,IAAJ,CAASe,QAAzB;AAFyB;AAGzBR,MAAAA,IAAI,CAACS,KAAL,GAAarB,GAAG,CAACK,IAAJ,CAASgB,KAAtB;AAHyB;AAIzBT,MAAAA,IAAI,CACDL,IADH,GAEGC,IAFH,CAEQ,UAAAC,MAAM,EAAI;AAAA;AAAA;AACdR,QAAAA,GAAG,CAACc,IAAJ,CAAS;AAAEC,UAAAA,OAAO,EAAE,eAAX;AAA4BP,UAAAA,MAAM,EAANA;AAA5B,SAAT;AACD,OAJH,WAKS,UAAAQ,KAAK,EAAI;AAAA;AAAA;AACdhB,QAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEE,UAAAA,KAAK,EAALA;AAAF,SAArB;AACD,OAPH;AAQD,K;gFAMS,UAACjB,GAAD,EAAMC,GAAN,EAAc;AAAA;AAAA;AACtBS,MAAAA,IAAI,CAACC,OAAL,CAAa;AAAEP,QAAAA,QAAQ,EAAEJ,GAAG,CAACsB,MAAJ,CAAWlB;AAAvB,OAAb,EACE;AADF,OAEGI,IAFH,CAEQ,UAAAC,MAAM,EAAI;AAAA;AAAA;AACdR,QAAAA,GAAG,CAACc,IAAJ,CAASN,MAAT;AACD,OAJH,WAKS,UAAAQ,KAAK,EAAI;AAAA;AAAA;AACdhB,QAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEE,UAAAA,KAAK,EAALA;AAAF,SAArB;AACD,OAPH;AAQD,K;;;;;WAj5FD,2BAAyBjC,OAAzB,EAAkCuC,QAAlC,EAA4CC,WAA5C,EAAyDC,YAAzD,EAAuEC,SAAvE,EAAgG;AAAA,UAAdC,MAAc,kGAAL,GAAK;AAAA;AAC9F;AACA,UAAIC,aAAa,4BAAG;AAClBC,QAAAA,IAAI,EAAE,iCADY;AACuB;AACzCC,QAAAA,EAAE,EAAEJ,SAFc;AAEH;AACfK,QAAAA,OAAO,EAAE,cAHS;AAIlBjC,QAAAA,IAAI,EAAE,MAJY;AAKlBkC,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAE,cADC;AAEPZ,UAAAA,KAAK,EAAE,oBAFA;AAGPa,UAAAA,OAAO,EAAE;AAHF;AALS,OAAH,CAAjB,CAF8F,CAc9F;AACA;AACA;;AAhB8F;AAkB9F3C,MAAAA,YAAY,CAAC4C,SAAS,GAAGX,WAAb,EAA0B,UAAS3B,GAAT,EAAcC,IAAd,EAAoB;AAAA;AACxD,YAAIsC,QAAQ,4BAAGC,uBAAWC,OAAX,CAAmBxC,IAAnB,CAAH,CAAZ,CADwD,CAExD;;AACA,YAAIyC,UAAU,4BAAGH,QAAQ,CAACX,YAAD,CAAX,CAAd;AAHwD;AAKxDG,QAAAA,aAAa,CAAC9B,IAAd,GAAqByC,UAArB;AALwD;AAMxDzD,QAAAA,aAAa,CAAC0D,QAAd,CAAuBZ,aAAvB,EAAsC,UAACX,KAAD,EAAQwB,IAAR,EAAiB;AAAA;AAAA;;AACrD,cAAIxB,KAAJ,EAAW;AAAA;AAAA;AACTyB,YAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ,EADS,CAET;;AAFS;AAGT,mBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAE5B;AAAP,aAA1B,CAAP;AACD,WAJD;AAAA;AAAA,WADqD,CAMrD;AACA;AACA;;;AARqD;AASrD,iBAAOM,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAE1B,YAAAA,MAAM,EAAE,GAAV;AAAe4B,YAAAA,OAAO,EAAE,IAAxB;AAA8BD,YAAAA,GAAG,EAAE,yBAAnC;AAA8DE,YAAAA,IAAI,EAAEN;AAApE,WAFD,CAAP,CATqD,CAYrD;AACD,SAbD;AAcD,OApBW,CAAZ;AAqBD;;;WAED,4BACEzD,OADF,EAEEuC,QAFF,EAGEG,SAHF,EAIEF,WAJF,EAOE;AAAA,UAFAwB,cAEA,kGAFiB;AAAE5C,QAAAA,QAAQ,EAAE;AAAZ,OAEjB;AAAA,UADA6C,QACA;AAAA;AACA,UAAIrB,aAAa,4BAAG;AAClBC,QAAAA,IAAI,EAAE,iCADY;AACuB;AACzCC,QAAAA,EAAE,EAAEJ,SAFc;AAGlBK,QAAAA,OAAO,EAAE,eAHS;AAIlBjC,QAAAA,IAAI,EAAE,MAJY;AAKlBkC,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAE,cADC;AAEPZ,UAAAA,KAAK,EAAE,oBAFA;AAGPa,UAAAA,OAAO,EAAE;AAHF;AALS,OAAH,CAAjB;AADA;AAaA3C,MAAAA,YAAY,CAAC4C,SAAS,GAAGX,WAAb,EAA0B,UAAS3B,GAAT,EAAcC,IAAd,EAAoB;AAAA;AACxD,YAAIsC,QAAQ,4BAAGC,uBAAWC,OAAX,CAAmBxC,IAAnB,CAAH,CAAZ;AACA,YAAI2B,YAAY,4BAAG;AACjBrB,UAAAA,QAAQ,EAAE4C,cAAc,CAAC5C,QADR;AACkB;AACnC8C,UAAAA,IAAI,EAAE5D,WAAW,GAAG,wBAAd,GAAyC2D;AAF9B,SAAH,CAAhB;AAIA,YAAIV,UAAU,4BAAGH,QAAQ,CAACX,YAAD,CAAX,CAAd;AANwD;AAQxDG,QAAAA,aAAa,CAAC9B,IAAd,GAAqByC,UAArB;AARwD;AASxDzD,QAAAA,aAAa,CAAC0D,QAAd,CAAuBZ,aAAvB,EAAsC,UAACX,KAAD,EAAQwB,IAAR,EAAiB;AAAA;AAAA;;AACrD,cAAIxB,KAAJ,EAAW;AAAA;AAAA;AACT;AACA;AACA,mBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAE5B;AAAP,aAA1B,CAAP;AACD,WAJD;AAAA;AAAA,WADqD,CAMrD;AACA;AACA;;AACD,SATD;AAUD,OAnBW,CAAZ;AAoBD;;;WAED,qBACEjC,OADF,EAEEuC,QAFF,EAGEd,MAHF,EAOE;AAAA,UAHAe,WAGA,kGAHc,2CAGd;AAAA,UAFA2B,WAEA;AAAA,UADAjC,MACA,kGADS,GACT;AAAA;AACA,UAAIU,aAAa,4BAAG;AAClBC,QAAAA,IAAI,EAAE,iCADY;AACuB;AACzCC,QAAAA,EAAE,EAAErB,MAAM,CAACY,KAFO;AAEA;AAClBU,QAAAA,OAAO,EAAE,0BAHS;AAIlBjC,QAAAA,IAAI,EAAE,MAJY;AAKlBkC,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAE,cADC;AAEPZ,UAAAA,KAAK,EAAE,oBAFA;AAGPa,UAAAA,OAAO,EAAE;AAHF;AALS,OAAH,CAAjB;AADA;AAaA3C,MAAAA,YAAY,CAAC4C,SAAS,GAAGX,WAAb,EAA0B,UAAS3B,GAAT,EAAcC,IAAd,EAAoB;AAAA;AACxD,YAAIsC,QAAQ,4BAAGC,uBAAWC,OAAX,CAAmBxC,IAAnB,CAAH,CAAZ;AACA,YAAI2B,YAAY,4BAAG;AACjBrB,UAAAA,QAAQ,EAAEK,MAAM,CAACL,QADA;AAEjB8C,UAAAA,IAAI,EAAE5D,WAAW,GAAG,qBAAd,GAAsC6D;AAF3B,SAAH,CAAhB;AAIA,YAAIZ,UAAU,4BAAGH,QAAQ,CAACX,YAAD,CAAX,CAAd;AANwD;AAQxDG,QAAAA,aAAa,CAAC9B,IAAd,GAAqByC,UAArB;AARwD;AASxDzD,QAAAA,aAAa,CAAC0D,QAAd,CAAuBZ,aAAvB,EAAsC,UAACX,KAAD,EAAQwB,IAAR,EAAiB;AAAA;AAAA;;AACrD,cAAIxB,KAAJ,EAAW;AAAA;AAAA;AACTyB,YAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADS;AAET,mBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAE5B;AAAP,aAA1B,CAAP;AACD,WAHD;AAAA;AAAA;;AADqD;AAKrDyB,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AALqD;AAMrDD,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EANqD,CAOrD;AACD,SARD;AASD,OAlBW,CAAZ;AAmgBAAczD,OAAd,EAAuBuC,QAAvB,EAAiC;AAAA;;AAC/B,2CAAiFvC,OAAO,CAACqB,IAAzF;AAAA,UAAM+C,SAAN,SAAMA,SAAN;AAAA,UAAiBC,QAAjB,SAAiBA,QAAjB;AAAA,UAA2BjD,QAA3B,SAA2BA,QAA3B;AAAA,UAAqCiB,KAArC,SAAqCA,KAArC;AAAA,UAA4CiC,WAA5C,SAA4CA,WAA5C;AAAA,UAAyDC,SAAzD,SAAyDA,SAAzD;AAAA,UAAoEnC,QAApE,SAAoEA,QAApE;;AAD+B;AAG/BsB,MAAAA,OAAO,CAACC,GAAR,CAAYvB,QAAZ;AAH+B;AAI/BA,MAAAA,QAAQ,GAAGoC,gCAAeC,YAAf,CAA4BrC,QAAQ,CAACsC,IAAT,EAA5B,CAAX;AAEA,UAAMC,OAAO,4BAAG,IAAIxC,qBAAJ,CAAc;AAC5ByC,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoB1C,qBAApB,EAA+B2C,OAA/B,EADwB;AAE5BV,QAAAA,SAAS,EAATA,SAF4B;AAG5BC,QAAAA,QAAQ,EAARA,QAH4B;AAI5BE,QAAAA,SAAS,EAATA,SAJ4B;AAK5BnD,QAAAA,QAAQ,EAARA,QAL4B;AAM5BiB,QAAAA,KAAK,EAALA,KAN4B;AAO5B0C,QAAAA,YAAY,EAAET,WAPc;AAQ5BlC,QAAAA,QAAQ,EAARA,QAR4B;AAS5B4C,QAAAA,QAAQ,EAAE,KATkB,CAU5B;;AAV4B,OAAd,CAAH,CAAb;AAN+B;AAmB/BL,MAAAA,OAAO,CAACpD,IAAR,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,4BAAGmC,IAAH,CAAV;AACA,YAAMtC,MAAM,4BAAG;AACbmD,UAAAA,EAAE,EAAEhD,IAAI,CAACgD,EADI;AAEbvC,UAAAA,KAAK,EAAET,IAAI,CAACS,KAFC;AAGbjB,UAAAA,QAAQ,EAAEQ,IAAI,CAACR;AAHF,SAAH,CAAZ;AAKA,YAAI6D,MAAM,4BAAGC,mBAAOC,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC,CAAH,CAAV,CAPY,CAQZ;;AACA,YAAIC,UAAU,4BAAG,IAAIC,sBAAJ,CAA6B;AAC5CC,UAAAA,OAAO,EAAE3D,IAAI,CAAC4D,GAD8B;AAE5CC,UAAAA,mBAAmB,EAAER;AAFuB,SAA7B,CAAH,CAAd,CATY,CAcZ;;AAdY;AAeZI,QAAAA,UAAU,CAAC9D,IAAX,CAAgB,UAASV,GAAT,EAAc;AAAA;AAAA;;AAC5B,cAAIA,GAAJ,EAAS;AAAA;AAAA;AACP,mBAAO6C,OAAO,CAACC,GAAR,CAAY9C,GAAG,CAACmB,OAAhB,CAAP;AACD,WAFD;AAAA;AAAA;;AAD4B;AAI5B0B,UAAAA,OAAO,CAACC,GAAR,CAAY0B,UAAU,CAACI,mBAAvB,EAA4CJ,UAAU,CAACE,OAAvD,EAJ4B,CAM5B;;AAEA,cAAIG,IAAI,4BAAG3E,WAAW,CAAC4E,WAAZ,CACT3F,OADS,EAETuC,QAFS,EAGTd,MAHS,EAIT,2CAJS,EAKT4D,UAAU,CAACI,mBALF,EAMT,GANS,CAAH,CAAR;AASA,cAAMG,KAAK,4BAAGpB,gCAAeqB,aAAf,CAA6BpE,MAA7B,CAAH,CAAX;AAjB4B;AAmB5B,iBAAOc,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACE6B,cAAAA,KAAK,EAALA,KADF;AAEEhE,cAAAA,IAAI,EAAJA;AAFF,aADI,CAFyB;AAQ/BI,YAAAA,OAAO,EAAE;AARsB,WAA1B,CAAP;AAUD,SA7BD;AA8BD,OA9CH,WA+CS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OArDH;AAsDD;;;WAED,eAAahG,OAAb,EAAsBuC,QAAtB,EAAgC;AAAA;;AAC9B,2CAA4BvC,OAAO,CAACqB,IAApC;AAAA,UAAQgB,KAAR,SAAQA,KAAR;AAAA,UAAeD,QAAf,SAAeA,QAAf;;AAD8B;;AAE9BD,4BAAUR,OAAV,CAAkB;AAAEU,QAAAA,KAAK,EAAEA;AAAT,OAAlB,EACGb,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;;AAAA;AACZ,YAAMnC,IAAI,4BAAGmC,IAAH,CAAV;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,CAACqE,UAAjB;AAFY;;AAIZ,YAAI,CAACrE,IAAL,EAAW;AAAA;AAAA;AACT,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAJY;;AAWZ,YAAI,CAACL,IAAI,CAACqE,UAAV,EAAsB;AAAA;AAAA;AACpB,iBAAO1D,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,yOAEuDI,KAFvD;AAF0B,WAA1B,CAAP;AAMD,SAPD;AAAA;AAAA,SAXY,CAmBZ;AACA;;;AApBY;;AAqBZ,YAAI,CAACmC,gCAAe0B,oBAAf,CAAoC9D,QAApC,EAA8CR,IAAI,CAACQ,QAAnD,CAAL,EAAmE;AAAA;AAAA;AACjE,iBAAOG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA,SArBY,CA4BZ;;;AAEA,YAAMR,MAAM;AACVmD,UAAAA,EAAE,EAAEhD,IAAI,CAACgD,EADC;AAEVY,UAAAA,GAAG,EAAE5D,IAAI,CAAC4D,GAFA;AAGVnD,UAAAA,KAAK,EAAET,IAAI,CAACS,KAHF;AAIV8D,UAAAA,OAAO,EAAEvE,IAAI,CAACoD,QAJJ;AAKViB,UAAAA,UAAU,EAAErE,IAAI,CAACqE,UALP;AAMV7B,UAAAA,SAAS,EAAExC,IAAI,CAACwC,SANN;AAOVC,UAAAA,QAAQ,EAAEzC,IAAI,CAACyC,QAPL;AAQVjD,UAAAA,QAAQ,EAAEQ,IAAI,CAACR,QARL;AASVgF,UAAAA,OAAO,EAAExE,IAAI,CAACyE,MATJ;AAUVC,UAAAA,IAAI,EAAE1E,IAAI,CAAC2E,SAVD;AAWVC,UAAAA,OAAO,EAAE5E,IAAI,CAAC4E,OAXJ;AAYVC,UAAAA,kBAAkB,EAAE7E,IAAI,CAAC6E,kBAZf;AAaVlC,UAAAA,SAAS,EAAE3C,IAAI,CAAC2C;AAbN,+DAcA3C,IAAI,CAACR,QAdL,0DAeGQ,IAAI,CAACmD,YAfR,oDAgBHnD,IAAI,CAAC8E,KAhBF,+DAiBQ9E,IAAI,CAAC+E,gBAjBb,UAAZ;AAmBA,YAAMf,KAAK,4BAAGpB,gCAAeqB,aAAf,CAA6BpE,MAA7B,CAAH,CAAX,CAjDY,CAmDZ;AACA;;AApDY;AAqDZ,eAAOc,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE6B,YAAAA,KAAK,EAALA,KADF;AAEEhE,YAAAA,IAAI;AACFgD,cAAAA,EAAE,EAAEhD,IAAI,CAACgD,EADP;AAEFY,cAAAA,GAAG,EAAE5D,IAAI,CAAC4D,GAFR;AAGFnD,cAAAA,KAAK,EAAET,IAAI,CAACS,KAHV;AAIF8D,cAAAA,OAAO,EAAEvE,IAAI,CAACoD,QAJZ;AAKFiB,cAAAA,UAAU,EAAErE,IAAI,CAACqE,UALf;AAMF7B,cAAAA,SAAS,EAAExC,IAAI,CAACwC,SANd;AAOFhD,cAAAA,QAAQ,EAAEQ,IAAI,CAACR,QAPb;AAQFgF,cAAAA,OAAO,EAAExE,IAAI,CAACyE,MARZ;AASFE,cAAAA,SAAS,EAAE3E,IAAI,CAAC2E,SATd;AAUFC,cAAAA,OAAO,EAAE5E,IAAI,CAAC4E,OAVZ;AAWFC,cAAAA,kBAAkB,EAAE7E,IAAI,CAAC6E,kBAXvB;AAYFlC,cAAAA,SAAS,EAAE3C,IAAI,CAAC2C,SAZd;AAaFqC,cAAAA,WAAW,EAAEhF,IAAI,CAACiF;AAbhB,mEAcQjF,IAAI,CAACR,QAdb,0DAeWQ,IAAI,CAACmD,YAfhB,oDAgBKnD,IAAI,CAAC8E,KAhBV,+DAiBgB9E,IAAI,CAAC+E,gBAjBrB;AAFN,WADI,CAFyB;AA0B/B3E,UAAAA,OAAO,EAAE;AA1BsB,SAA1B,CAAP,CArDY,CAiFZ;AACD,OAnFH,WAoFS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,eAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAxFN;AA0FD,K,CAED;;;;WACA,sBAAoBhG,OAApB,EAA6BuC,QAA7B,EAAuC;AAAA;;AACrC,2CAAiFvC,OAAO,CAACqB,IAAzF;AAAA,UAAM+C,SAAN,SAAMA,SAAN;AAAA,UAAiBC,QAAjB,SAAiBA,QAAjB;AAAA,UAA2BjD,QAA3B,SAA2BA,QAA3B;AAAA,UAAqCiB,KAArC,SAAqCA,KAArC;AAAA,UAA4CiC,WAA5C,SAA4CA,WAA5C;AAAA,UAAyDC,SAAzD,SAAyDA,SAAzD;AAAA,UAAoEnC,QAApE,SAAoEA,QAApE;;AADqC;AAGrCsB,MAAAA,OAAO,CAACC,GAAR,CAAYvB,QAAZ;AAHqC;AAIrCA,MAAAA,QAAQ,GAAGoC,gCAAeC,YAAf,CAA4BrC,QAAQ,CAACsC,IAAT,EAA5B,CAAX;AAEA,UAAIoC,WAAW,4BAAG,KAAH,CAAf;AANqC;;AAOrC,UAAI9G,OAAO,CAACqB,IAAR,CAAayF,WAAb,IAA4B,IAAhC,EAAsC;AAAA;AAAA;AACpCA,QAAAA,WAAW,GAAG,IAAd;AACD,OAFD;AAAA;AAAA;;AAPqC;AAWrCpD,MAAAA,OAAO,CAACC,GAAR,CAAYvB,QAAZ;AAEA,UAAIsE,KAAK,4BAAG,EAAH,CAAT;AAbqC;;AAcrC,UAAI1G,OAAO,CAACqB,IAAR,CAAaqF,KAAjB,EAAwB;AAAA;AAAA;AACtBA,QAAAA,KAAK,GAAG1G,OAAO,CAACqB,IAAR,CAAaqF,KAArB;AACD,OAFD,MAEO;AAAA;AAAA;AACLA,QAAAA,KAAK,GAAG,MAAR;AACD;;AAED,UAAM/B,OAAO,4BAAG,IAAIxC,qBAAJ,CAAc;AAC5ByC,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoB1C,qBAApB,EAA+B2C,OAA/B,EADwB;AAE5BV,QAAAA,SAAS,EAATA,SAF4B;AAG5BC,QAAAA,QAAQ,EAARA,QAH4B;AAI5BE,QAAAA,SAAS,EAATA,SAJ4B;AAK5BnD,QAAAA,QAAQ,EAARA,QAL4B;AAM5BiB,QAAAA,KAAK,EAALA,KAN4B;AAO5B0C,QAAAA,YAAY,EAAET,WAPc;AAQ5BlC,QAAAA,QAAQ,EAARA,QAR4B;AAS5B4C,QAAAA,QAAQ,EAAE,KATkB;AAU5BiB,QAAAA,UAAU,EAAE,IAVgB;AAW5BS,QAAAA,KAAK,EAALA,KAX4B,CAY5B;;AAZ4B,OAAd,CAAH,CAAb;AApBqC;AAmCrC/B,MAAAA,OAAO,CAACpD,IAAR,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,4BAAGmC,IAAH,CAAV;AACA,YAAMtC,MAAM,4BAAG;AACbmD,UAAAA,EAAE,EAAEhD,IAAI,CAACgD,EADI;AAEbvC,UAAAA,KAAK,EAAET,IAAI,CAACS,KAFC;AAGbjB,UAAAA,QAAQ,EAAEQ,IAAI,CAACR;AAHF,SAAH,CAAZ;AAKA,YAAI6D,MAAM,4BAAGC,mBAAOC,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC,CAAH,CAAV,CAPY,CAQZ;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA,YAAMQ,KAAK,4BAAGpB,gCAAeqB,aAAf,CAA6BpE,MAA7B,CAAH,CAAX;AArBY;AAsBZ,eAAOc,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE6B,YAAAA,KAAK,EAALA,KADF;AAEEhE,YAAAA,IAAI,EAAJA;AAFF,WADI,CAFyB;AAQ/BI,UAAAA,OAAO,EAAE;AARsB,SAA1B,CAAP,CAtBY,CAiCZ;AACD,OAnCH,WAoCS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA1CH;AA2CD;;;WAED,qBAAmBhG,OAAnB,EAA4BuC,QAA5B,EAAsC;AAAA;;AACpC,4CAA4BvC,OAAO,CAACqB,IAApC;AAAA,UAAQgB,KAAR,SAAQA,KAAR;AAAA,UAAeD,QAAf,SAAeA,QAAf;;AADoC;;AAEpCD,4BAAUR,OAAV,CAAkB;AAAEU,QAAAA,KAAK,EAAEA;AAAT,OAAlB,EACGb,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;;AAAA;AACZ,YAAMnC,IAAI,6BAAGmC,IAAH,CAAV;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,CAACqE,UAAjB;AAFY;;AAIZ,YAAI,CAACrE,IAAL,EAAW;AAAA;AAAA;AACT,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAJY;;AAWZ,YAAI,CAACL,IAAI,CAACqE,UAAV,EAAsB;AAAA;AAAA;AACpB,iBAAO1D,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,yOAEuDI,KAFvD;AAF0B,WAA1B,CAAP;AAMD,SAPD;AAAA;AAAA,SAXY,CAmBZ;AACA;;;AApBY;;AAqBZ,YAAI,CAACmC,gCAAe0B,oBAAf,CAAoC9D,QAApC,EAA8CR,IAAI,CAACQ,QAAnD,CAAL,EAAmE;AAAA;AAAA;AACjE,iBAAOG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA,SArBY,CA4BZ;;;AAEA,YAAMR,MAAM;AACVmD,UAAAA,EAAE,EAAEhD,IAAI,CAACgD,EADC;AAEVY,UAAAA,GAAG,EAAE5D,IAAI,CAAC4D,GAFA;AAGVnD,UAAAA,KAAK,EAAET,IAAI,CAACS,KAHF;AAIV8D,UAAAA,OAAO,EAAEvE,IAAI,CAACoD,QAJJ;AAKViB,UAAAA,UAAU,EAAErE,IAAI,CAACqE,UALP;AAMV7B,UAAAA,SAAS,EAAExC,IAAI,CAACwC,SANN;AAOVhD,UAAAA,QAAQ,EAAEQ,IAAI,CAACR,QAPL;AAQVgF,UAAAA,OAAO,EAAExE,IAAI,CAACyE,MARJ;AASVC,UAAAA,IAAI,EAAE1E,IAAI,CAAC2E,SATD;AAUVC,UAAAA,OAAO,EAAE5E,IAAI,CAAC4E,OAVJ;AAWVC,UAAAA,kBAAkB,EAAE7E,IAAI,CAAC6E,kBAXf;AAYVlC,UAAAA,SAAS,EAAE3C,IAAI,CAAC2C;AAZN,+DAaA3C,IAAI,CAACR,QAbL,0DAcGQ,IAAI,CAACmD,YAdR,oDAeHnD,IAAI,CAAC8E,KAfF,+DAgBQ9E,IAAI,CAAC+E,gBAhBb,UAAZ;AAkBA,YAAMf,KAAK,6BAAGpB,gCAAeqB,aAAf,CAA6BpE,MAA7B,CAAH,CAAX,CAhDY,CAkDZ;AACA;;AAnDY;AAoDZ,eAAOc,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE6B,YAAAA,KAAK,EAALA,KADF;AAEEhE,YAAAA,IAAI;AACFgD,cAAAA,EAAE,EAAEhD,IAAI,CAACgD,EADP;AAEFY,cAAAA,GAAG,EAAE5D,IAAI,CAAC4D,GAFR;AAGFnD,cAAAA,KAAK,EAAET,IAAI,CAACS,KAHV;AAIF8D,cAAAA,OAAO,EAAEvE,IAAI,CAACoD,QAJZ;AAKFiB,cAAAA,UAAU,EAAErE,IAAI,CAACqE,UALf;AAMF7B,cAAAA,SAAS,EAAExC,IAAI,CAACwC,SANd;AAOFhD,cAAAA,QAAQ,EAAEQ,IAAI,CAACR,QAPb;AAQFgF,cAAAA,OAAO,EAAExE,IAAI,CAACyE,MARZ;AASFE,cAAAA,SAAS,EAAE3E,IAAI,CAAC2E,SATd;AAUFC,cAAAA,OAAO,EAAE5E,IAAI,CAAC4E,OAVZ;AAWFC,cAAAA,kBAAkB,EAAE7E,IAAI,CAAC6E,kBAXvB;AAYFlC,cAAAA,SAAS,EAAE3C,IAAI,CAAC2C,SAZd;AAaFqC,cAAAA,WAAW,EAAEhF,IAAI,CAACiF;AAbhB,oEAcQjF,IAAI,CAACR,QAdb,2DAeWQ,IAAI,CAACmD,YAfhB,qDAgBKnD,IAAI,CAAC8E,KAhBV,gEAiBgB9E,IAAI,CAAC+E,gBAjBrB;AAFN,WADI,CAFyB;AA0B/B3E,UAAAA,OAAO,EAAE;AA1BsB,SAA1B,CAAP,CApDY,CAgFZ;AACD,OAlFH,WAmFS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,eAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAvFN;AAyFD;;;WAED,gBAAchG,OAAd,EAAuBuC,QAAvB,EAAiC;AAAA;AAAE;;;WAEnC,0BAAwBvB,GAAxB,EAA6BC,GAA7B,EAAkC;AAAA;AAAA;;AAChC;AACAqE,6BAAyB3D,OAAzB,CAAiC;AAAE8D,QAAAA,mBAAmB,EAAEzE,GAAG,CAACsB,MAAJ,CAAWsC;AAAlC,OAAjC,EAAyE,UAAS/D,GAAT,EAAc+E,KAAd,EAAqB;AAAA;AAAA;;AAC5F,YAAI,CAACA,KAAL,EACE;AAAA;AAAA;AAAA,iBAAO3E,GAAG,CACPiB,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AACJmD,YAAAA,IAAI,EAAE,cADF;AAEJlD,YAAAA,GAAG,EAAE;AAFD,WAFD,CAAP;AAKK,SANP;AAAA;AAAA,SAD4F,CAS5F;;;AAT4F;;AAU5F1B,8BAAUR,OAAV,CAAkB;AAAE6D,UAAAA,GAAG,EAAEI,KAAK,CAACL;AAAb,SAAlB,EAA0C,UAAS1E,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5D,cAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT;AACA,mBAAOX,GAAG,CAAC+F,QAAJ,CAAaxG,iBAAKyG,IAAL,CAAU9D,SAAS,GAAG,sCAAtB,CAAb,CAAP;AACD,WAHD;AAAA;AAAA;;AAD4D;;AAK5D,cAAIvB,IAAI,CAACqE,UAAT,EAAqB;AAAA;AAAA;AACnB;AACA,mBAAOhF,GAAG,CAAC+F,QAAJ,CAAaxG,iBAAKyG,IAAL,CAAU9D,SAAS,GAAG,wCAAtB,CAAb,CAAP;AACD,WAHD;AAAA;AAAA,WAL4D,CAU5D;;;AAV4D;AAW5DvB,UAAAA,IAAI,CAACqE,UAAL,GAAkB,IAAlB;AAX4D;AAY5DrE,UAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAc;AAAA;AAAA;;AACtB,gBAAIA,GAAJ,EAAS;AAAA;AAAA;AACP,qBAAOI,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,gBAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,eAArB,CAAP;AACD,aAFD;AAAA;AAAA,aADsB,CAItB;;;AAJsB;;AAMtB,gBAAIJ,IAAI,CAAC8E,KAAL,IAAc,mBAAlB,EAAuC;AAAA;AAAA;AACrC,qBAAOzF,GAAG,CAAC+F,QAAJ,CAAaxG,iBAAKyG,IAAL,CAAU9D,SAAS,GAAG,wCAAtB,CAAb,CAAP;AACD,aAFD;AAAA;AAAA;;AANsB;AAStB,mBAAOlC,GAAG,CAAC+F,QAAJ,CACLxG,iBAAKyG,IAAL,CAAU9D,SAAS,GAAG,+CAAtB,CADK,CAAP;AAGD,WAZD;AAaD,SAzBD;AA0BD,OApCD;AAqCD;;;WAED,oBAAkBnD,OAAlB,EAA2BuC,QAA3B,EAAqC;AAAA;AAAA;;AACnCJ,4BAAUR,OAAV,CAAkB;AAAEU,QAAAA,KAAK,EAAErC,OAAO,CAACqB,IAAR,CAAagB;AAAtB,OAAlB,EAAiD,UAASxB,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AACnE,YAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CAAC,EAAD,CAFyB;AAG/B/B,YAAAA,OAAO,EAAE;AAHsB,WAA1B,CAAP;AAKD,SAND;AAAA;AAAA;;AADmE;AASnE,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE1B,YAAAA,KAAK,EAAET,IAAI,CAACS,KADd;AAEE6E,YAAAA,KAAK,EAAEtF,IAAI,CAACmD,YAFd;AAGE3D,YAAAA,QAAQ,EAAEQ,IAAI,CAACR;AAHjB,WADI,CAFyB;AAS/BY,UAAAA,OAAO,EAAE;AATsB,SAA1B,CAAP;AAWD,OApBD;AAqBD;AAED;AACF;AACA;;;;WACE,yBAAuBhB,GAAvB,EAA4BC,GAA5B,EAAiC;AAAA;AAAA;;AAC/BkB,4BAAUR,OAAV,CAAkB;AAAEU,QAAAA,KAAK,EAAErB,GAAG,CAACsB,MAAJ,CAAWsC;AAApB,OAAlB,EAA4C,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC9D,YAAI,CAACA,IAAL,EACE;AAAA;AAAA;AAAA,iBAAOX,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAArB,CAAP;AAAuF,SADzF;AAAA;AAAA;;AAD8D;;AAI9D,YAAIjC,IAAI,CAACqE,UAAT,EACE;AAAA;AAAA;AAAA,iBAAOhF,GAAG,CAAC+F,QAAJ,CAAaxG,iBAAKyG,IAAL,CAAU9D,SAAS,GAAG,8BAAtB,CAAb,CAAP;AAA2E,SAD7E;AAAA;AAAA,SAJ8D,CAO9D;;;AACA,YAAIyC,KAAK,6BAAG,IAAIN,sBAAJ,CAA6B;AACvCC,UAAAA,OAAO,EAAE3D,IAAI,CAACgD,EADyB;AAEvCa,UAAAA,mBAAmB,EAAEP,mBAAOC,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC;AAFkB,SAA7B,CAAH,CAAT,CAR8D,CAY9D;;AAZ8D;AAa9DQ,QAAAA,KAAK,CAACrE,IAAN,CAAW,UAASV,GAAT,EAAc;AAAA;AAAA;;AACvB,cAAIA,GAAJ,EAAS;AAAA;AAAA;AACP,mBAAOI,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAArB,CAAP;AACD,WAFD;AAAA;AAAA;;AAIA,cAAIP,MAAM,6BAAG;AACXmD,YAAAA,EAAE,EAAEhD,IAAI,CAACgD,EADE;AAEXxD,YAAAA,QAAQ,EAAEQ,IAAI,CAACR,QAFJ;AAGXgD,YAAAA,SAAS,EAAExC,IAAI,CAACwC,SAHL;AAIX/B,YAAAA,KAAK,EAAET,IAAI,CAACS;AAJD,WAAH,CAAV;AAOA,cAAI8E,OAAO,6BAAG;AACZvC,YAAAA,EAAE,EAAEhD,IAAI,CAACgD,EADG;AAEZxD,YAAAA,QAAQ,EAAEQ,IAAI,CAACR,QAFH;AAGZgD,YAAAA,SAAS,EAAExC,IAAI,CAACwC,SAHJ;AAIZ/B,YAAAA,KAAK,EAAET,IAAI,CAACS;AAJA,WAAH,CAAX;AAZuB;AAmBvBtB,UAAAA,WAAW,CAAC4E,WAAZ,CACE3E,GADF,EAEEC,GAFF,EAGEkG,OAHF,EAIE,2CAJF,EAKEvB,KAAK,CAACH,mBALR,EAME,GANF;AASA,cAAMG,KAAK,6BAAGpB,gCAAeqB,aAAf,CAA6BpE,MAA7B,CAAH,CAAX;AA5BuB;AA6BvB,iBAAOR,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAC1BG,YAAAA,MAAM,EAAE,GADkB;AAE1B6B,YAAAA,IAAI,EAAE,CACJ;AACE6B,cAAAA,KAAK,EAALA,KADF;AAEEnE,cAAAA,MAAM,EAANA;AAFF,aADI,CAFoB;AAQ1BO,YAAAA,OAAO,EAAE;AARiB,WAArB,CAAP;AAUD,SAvCD;AAwCD,OArDD;AAsDD;;;WAED,wBAAsBhB,GAAtB,EAA2BC,GAA3B,EAAgC;AAAA;AAC9B,UAAIoB,KAAK,6BAAGrB,GAAG,CAACK,IAAJ,CAASgB,KAAZ,CAAT;AAD8B;;AAE9BF,4BAAUR,OAAV,CAAkB;AAAEU,QAAAA,KAAK,EAAEA;AAAT,OAAlB,EAAoC,UAASxB,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AACtD,YAAI,CAACA,IAAL,EACE;AAAA;AAAA;AAAA,iBAAOX,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAArB,CAAP;AAAuF,SADzF;AAAA;AAAA;;AAEA,YAAIuD,kBAAkB,6BAAGlC,mBAAOC,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC,CAAH,CAAtB;AAHsD;;AAKtDiC,4BAAQC,OAAR,CAAgB,QAAhB,EAA0BF,kBAA1B,EALsD,CAMtD;;;AACA,YAAIG,gBAAgB,6BAAG,IAAIC,+BAAJ,CAAwB;AAC7CjC,UAAAA,OAAO,EAAE3D,IAAI,CAACgD,EAD+B;AAE7Ca,UAAAA,mBAAmB,EAAE2B,kBAFwB;AAG7CK,UAAAA,cAAc,EAAEpF;AAH6B,SAAxB,CAAH,CAApB,CAPsD,CAatD;;AAbsD;AActDkF,QAAAA,gBAAgB,CAAChG,IAAjB,CAAsB,UAASV,GAAT,EAAc;AAAA;AAAA;;AAClC,cAAIA,GAAJ,EAAS;AAAA;AAAA;AACP,mBAAOI,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAArB,CAAP;AACD,WAFD;AAAA;AAAA;;AADkC;AAKlCjB,UAAAA,WAAW,CAAC2G,kBAAZ,CACE1G,GADF,EAEEC,GAFF,EAGEW,IAAI,CAACS,KAHP,EAIE,sCAJF,EAKE;AAAEjB,YAAAA,QAAQ,EAAEQ,IAAI,CAACR;AAAjB,WALF,EAMEgG,kBANF;AALkC;AAalC,iBAAOnG,GAAG,CACPiB,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEC,YAAAA,GAAG,EAAE,6CAAP;AAAsD3B,YAAAA,MAAM,EAAE;AAA9D,WAFD,CAAP;AAGD,SAhBD;AAiBD,OA/BD;AAgCD;;;WAED,8BAA4BlB,GAA5B,EAAiCC,GAAjC,EAAsC;AAAA;AAAA;AACpC,aAAOA,GAAG,CAAC+F,QAAJ,CAAaxG,iBAAKyG,IAAL,CAAU9D,SAAS,GAAG,sBAAtB,CAAb,CAAP;AACD;;;WAED,qCAAmCnC,GAAnC,EAAwCC,GAAxC,EAA6C;AAAA;AAC3C,UAAImB,QAAQ,6BAAGpB,GAAG,CAACK,IAAJ,CAASe,QAAZ,CAAZ;AACA,UAAIC,KAAK,6BAAGrB,GAAG,CAACK,IAAJ,CAASgB,KAAZ,CAAT,CAF2C,CAI3C;AAEA;AAEA;;AAR2C;;AAS3CF,4BAAUR,OAAV,CAAkB;AAAEU,QAAAA,KAAK,EAAEA;AAAT,OAAlB,EAAoC,UAASxB,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AACtD,YAAI,CAACA,IAAL,EACE;AAAA;AAAA;AAAA,iBAAOX,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAArB,CAAP;AAAsF,SADxF;AAAA;AAAA,SADsD,CAGtD;AAEA;;;AALsD;AAMtDjC,QAAAA,IAAI,CAACQ,QAAL,GAAgBoC,gCAAeC,YAAf,CAA4BrC,QAAQ,CAACsC,IAAT,EAA5B,CAAhB;AANsD;AAOtD9C,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAc;AAAA;AAAA;;AACtB,cAAIA,GAAJ,EAAS;AAAA;AAAA;AACP,mBAAOI,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAArB,CAAP;AACD,WAFD;AAAA;AAAA;;AADsB;AAItB,iBAAOf,GAAG,CACPiB,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEC,YAAAA,GAAG,EAAE,qDAAP;AAA8D3B,YAAAA,MAAM,EAAE;AAAtE,WAFD,CAAP,CAJsB,CAOtB;AACD,SARD;AASD,OAhBD;AAiBD;;;WAED,0BAAwBlC,OAAxB,EAAiCuC,QAAjC,EAA2C;AAAA;AACzC,UAAIF,KAAK,6BAAGrB,GAAG,CAACK,IAAJ,CAASgB,KAAZ,CAAT;AACA,UAAIsF,OAAO,6BAAG3G,GAAG,CAACK,IAAJ,CAASsG,OAAZ,CAAX,CAFyC,CAIzC;AAEA;AAEA;;AARyC;;AASzCxF,4BAAUR,OAAV,CAAkB;AAAEU,QAAAA,KAAK,EAAEA;AAAT,OAAlB,EAAoC,UAASxB,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AACtD,YAAI,CAACA,IAAL,EACE;AAAA;AAAA;AAAA,iBAAOX,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAArB,CAAP;AAAsF,SADxF;AAAA;AAAA,SADsD,CAGtD;AAEA;;;AALsD;AAMtDjC,QAAAA,IAAI,CAACgG,cAAL,GAAsB,4BAAAD,OAAO,iCAAI,YAAJ,CAA7B;AANsD;AAOtD/F,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAc;AAAA;AAAA;;AACtB,cAAIA,GAAJ,EAAS;AAAA;AAAA;AACP,mBAAOI,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAArB,CAAP;AACD,WAFD;AAAA;AAAA;;AADsB;AAItB,iBAAOf,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,YAAAA,GAAG,EAAE,+BAAP;AAAwC3B,YAAAA,MAAM,EAAE;AAAhD,WAArB,CAAP,CAJsB,CAKtB;AACD,SAND;AAOD,OAdD;AAeD;;;WAED,0BAAwBlC,OAAxB,EAAiCuC,QAAjC,EAA2C;AAAA;AACzC,UAAIF,KAAK,6BAAGrB,GAAG,CAACsB,MAAJ,CAAWsC,EAAd,CAAT,CADyC,CAGzC;AAEA;AAEA;;AAPyC;;AAQzCzC,4BAAUR,OAAV,CAAkB;AAAEU,QAAAA,KAAK,EAAEA;AAAT,OAAlB,EAAoC,UAASxB,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AACtD,YAAI,CAACA,IAAL,EACE;AAAA;AAAA;AAAA,iBAAOX,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAArB,CAAP;AAAsF,SADxF;AAAA;AAAA,SADsD,CAGtD;AAEA;;;AACA,YAAI8D,OAAO,6BAAG,4BAAA/F,IAAI,CAACgG,cAAL,iCAAuB,YAAvB,CAAH,CAAX;AANsD;AAOtDhG,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAc;AAAA;AAAA;;AACtB,cAAIA,GAAJ,EAAS;AAAA;AAAA;AACP,mBAAOI,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAArB,CAAP;AACD,WAFD;AAAA;AAAA;;AADsB;AAItB,iBAAOf,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAE+D,YAAAA,OAAO,EAAEA,OAAX;AAAoBzF,YAAAA,MAAM,EAAE;AAA5B,WAArB,CAAP,CAJsB,CAKtB;AACD,SAND;AAOD,OAdD;AAeD;;;WAED,gCAA8BlB,GAA9B,EAAmCC,GAAnC,EAAwC;AAAA;AACtC,UAAIuF,OAAO,6BAAGxF,GAAG,CAACK,IAAJ,CAASwG,cAAZ,CAAX;AACA,UAAIxF,KAAK,6BAAGrB,GAAG,CAACK,IAAJ,CAASgB,KAAZ,CAAT,CAFsC,CAItC;AAEA;AAEA;;AARsC;;AAStCF,4BAAUR,OAAV,CAAkB;AAAEU,QAAAA,KAAK,EAAEA;AAAT,OAAlB,EAAoC,UAASxB,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AACtD,YAAI,CAACA,IAAL,EACE;AAAA;AAAA;AAAA,iBAAOX,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAArB,CAAP;AAAsF,SADxF;AAAA;AAAA,SADsD,CAGtD;AAEA;;;AALsD;AAMtDjC,QAAAA,IAAI,CAAC4E,OAAL,GAAeA,OAAf;AANsD;AAOtD5E,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAc;AAAA;AAAA;;AACtB,cAAIA,GAAJ,EAAS;AAAA;AAAA;AACP,mBAAOI,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAArB,CAAP;AACD,WAFD;AAAA;AAAA,WADsB,CAKtB;;;AAEA,cAAM8F,QAAQ,6BAAG;AACflD,YAAAA,EAAE,EAAE,IAAImD,MAAJ,CAAW,IAAIC,IAAJ,EAAX,CADW;AAEfC,YAAAA,SAAS,EAATA,SAFe;AAGfC,YAAAA,MAAM,EAAEA,MAAM,GAAG,GAHF;AAIf7F,YAAAA,KAAK,EAAE8F,QAAQ,CAAC9F,KAJD;AAKf+F,YAAAA,SAAS,EAAEC,QAAQ,CAACD,SALL;AAMfrD,YAAAA,YAAY,EAAZA;AANe,WAAH,CAAd;AASA,cAAMuD,KAAK,6BAAG,IAAIC,uBAAJ,CAAgBT,QAAhB,CAAH,CAAX;AAhBsB;AAkBtBQ,UAAAA,KAAK,CAAC/G,IAAN,GAAaC,IAAb,CAAkB,UAAC8G,KAAD,EAAQrG,KAAR,EAAkB;AAAA;AAAA;;AAClC,gBAAI,CAACqG,KAAL,EAAY;AAAA;AAAA;AACV5E,cAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADU;AAEV,qBAAOhB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,gBAAAA,GAAG,EAAE5B;AAAP,eAArB,CAAP;AACD,aAHD;AAAA;AAAA;;AADkC;AAKlC,mBAAOhB,GAAG,CACPiB,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEC,cAAAA,GAAG,EAAE,sCAAP;AAA+C3B,cAAAA,MAAM,EAAE;AAAvD,aAFD,CAAP;AAGD,WARD,EAlBsB,CA4BtB;AACD,SA7BD;AA8BD,OArCD;AAsCD;;;WAED,+BAA6BlB,GAA7B,EAAkCC,GAAlC,EAAuC;AAAA;AACrC,UAAImB,QAAQ,6BAAGpB,GAAG,CAACK,IAAJ,CAASe,QAAZ,CAAZ;AACA,UAAIoG,WAAW,6BAAGxH,GAAG,CAACK,IAAJ,CAASoH,eAAZ,CAAf;AAFqC;;AAGrC,UAAIrG,QAAQ,IAAIoG,WAAhB,EAA6B;AAAA;AAAA;AAC3B9E,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAD2B;AAE3B,eAAO1C,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,UAAAA,GAAG,EAAE;AAAP,SAArB,CAAP;AACD,OAHD;AAAA;AAAA,OAHqC,CAOrC;AAEA;;;AATqC;;AAUrC2D,sCAAoB7F,OAApB,CAA4B;AAAE8D,QAAAA,mBAAmB,EAAE4B,oBAAQqB,OAAR,CAAgB,QAAhB;AAAvB,OAA5B,EAAgF,UAC9E7H,GAD8E,EAE9E+E,KAF8E,EAG9E;AAAA;AAAA;AACAlC,QAAAA,OAAO,CAACC,GAAR,CAAYiC,KAAZ;AADA;AAEAlC,QAAAA,OAAO,CAACC,GAAR,CAAY0D,oBAAQqB,OAAR,CAAgB,QAAhB,CAAZ;AAFA;;AAGA,YAAI,CAAC9C,KAAL,EAAY;AAAA;AAAA;AACVlC,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AADU;AAEVD,UAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AAFU;AAGV,iBAAOI,GAAG,CACPiB,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AACJmD,YAAAA,IAAI,EAAE,cADF;AAEJlD,YAAAA,GAAG,EAAE;AAFD,WAFD,CAAP;AAMD,SATD;AAAA;AAAA,SAHA,CAcA;;;AAdA;;AAeA1B,8BAAUR,OAAV,CAAkB;AAAEU,UAAAA,KAAK,EAAEuD,KAAK,CAAC6B;AAAf,SAAlB,EAAmD,UAAS5G,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AACrE,cAAI,CAACA,IAAL,EACE;AAAA;AAAA;AAAA,mBAAOX,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,cAAAA,GAAG,EAAE;AAAP,aAArB,CAAP;AAAsF,WADxF;AAAA;AAAA;;AADqE;;AAGrE,cAAIjC,IAAI,CAACS,KAAL,IAAcuD,KAAK,CAAC6B,cAAxB,EACE;AAAA;AAAA;AAAA,mBAAOxG,GAAG,CACPiB,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEmD,cAAAA,IAAI,EAAE,gBAAR;AAA0BlD,cAAAA,GAAG,EAAE;AAA/B,aAFD,CAAP;AAE+E,WAHjF;AAAA;AAAA,WAHqE,CAQrE;;;AARqE;AASrEjC,UAAAA,IAAI,CAACQ,QAAL,GAAgBoC,gCAAeC,YAAf,CAA4BrC,QAAQ,CAACsC,IAAT,EAA5B,CAAhB;AATqE;AAUrE9C,UAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAc;AAAA;AAAA;;AACtB,gBAAIA,GAAJ,EAAS;AAAA;AAAA;AACP,qBAAOI,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,gBAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,eAArB,CAAP;AACD,aAFD;AAAA;AAAA;;AADsB;AAItB,mBAAOf,GAAG,CACPiB,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEC,cAAAA,GAAG,EAAE,qDAAP;AAA8D3B,cAAAA,MAAM,EAAE;AAAtE,aAFD,CAAP,CAJsB,CAOtB;AACD,WARD;AASD,SAnBD;AAoBD,OAtCD;AAuCD;;;WAED,qBAAmBlC,OAAnB,EAA4BuC,QAA5B,EAAsC;AAAA;AAAA;;AACpC;AAEA;AACAJ,4BAAUwG,IAAV,CAAe;AAAEtG,QAAAA,KAAK,EAAErC,OAAO,CAACsC,MAAR,CAAesC;AAAxB,OAAf,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AAAA;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBI,IAAlC;AAEA,YAAM6E,QAAQ,6BAAG7E,IAAH,CAAd,CAHY,CAGW;;AAHX;;AAIZ,YAAI6E,QAAQ,CAACC,MAAT,IAAmB,CAAvB,EAA0B;AAAA;AAAA;AACxB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAJY;AAUZ,eAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE6E,YAAAA,QAAQ,EAARA,QADF;AAEE5G,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OApBH,WAqBS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,eAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAzBN;AA2BD;;;WAmCD,2BAAyBhG,OAAzB,EAAkCuC,QAAlC,EAA4C;AAAA;AAAA;AAC1C;AAEAmB,MAAAA,OAAO,CAACC,GAAR,CAAY3D,OAAO,CAACsC,MAAR,CAAeoE,KAAf,GAAuB,cAAnC;AAH0C;;AAK1CoC,sCAAyBnH,OAAzB,CACE;AAAEoH,QAAAA,UAAU,EAAE,IAAd;AAAoBC,QAAAA,gBAAgB,EAAEhJ,OAAO,CAACsC,MAAR,CAAeoE;AAArD,OADF,EAEE,UAAS7F,GAAT,EAAc6F,KAAd,EAAqB;AAAA;AAAA;;AACnB,YAAI,CAACA,KAAL,EAAY;AAAA;AAAA;AACV,iBAAOnE,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA,SADmB,CAKnB;AACA;;;AANmB;AAOnB6C,QAAAA,KAAK,CAACxE,MAAN,GAAewE,KAAK,CAACxE,MAArB;AAPmB;AAQnBwE,QAAAA,KAAK,CAACuC,aAAN,GAAsBvC,KAAK,CAACuC,aAA5B;AARmB;AASnBvC,QAAAA,KAAK,CAACwC,eAAN,GAAwBxC,KAAK,CAACwC,eAA9B;AATmB;AAUnBxC,QAAAA,KAAK,CAACyC,iBAAN,GAA0BzC,KAAK,CAACyC,iBAAhC;AAVmB;AAWnBzC,QAAAA,KAAK,CAAC0C,aAAN,GAAsB1C,KAAK,CAAC0C,aAA5B;AAXmB;AAYnB1C,QAAAA,KAAK,CAAC2C,YAAN,GAAqB3C,KAAK,CAAC2C,YAA3B;AAZmB;AAanB3C,QAAAA,KAAK,CAAC4C,QAAN,GAAiB5C,KAAK,CAAC4C,QAAvB;AAbmB;AAcnB5C,QAAAA,KAAK,CAAC6C,aAAN,GAAsB7C,KAAK,CAAC6C,aAA5B;AAdmB;AAenB7C,QAAAA,KAAK,CAAC8C,YAAN,GAAqB9C,KAAK,CAAC8C,YAA3B;AAfmB;AAgBnB9C,QAAAA,KAAK,CAAC+C,SAAN,GAAkB/C,KAAK,CAAC+C,SAAxB;AAhBmB;AAiBnB/C,QAAAA,KAAK,CAACgD,YAAN,GAAqBhD,KAAK,CAACgD,YAA3B;AAjBmB;AAkBnBhD,QAAAA,KAAK,CAACiD,SAAN,GAAkBjD,KAAK,CAACiD,SAAxB;AAlBmB;AAmBnBjD,QAAAA,KAAK,CAACkD,UAAN,GAAmBlD,KAAK,CAACkD,UAAzB;AAnBmB;AAoBnBlD,QAAAA,KAAK,CAACmD,WAAN,GAAoBnD,KAAK,CAACmD,WAA1B;AApBmB;AAqBnBnD,QAAAA,KAAK,CAACoD,aAAN,GAAsBpD,KAAK,CAACoD,aAA5B;AArBmB;AAuBnBpD,QAAAA,KAAK,CAACqD,eAAN,GAAwBrD,KAAK,CAACqD,eAA9B;AAvBmB;AAwBnBrD,QAAAA,KAAK,CAACsD,iBAAN,GAA0BtD,KAAK,CAACsD,iBAAhC;AAxBmB;AAyBnBtD,QAAAA,KAAK,CAACuD,mBAAN,GAA4BvD,KAAK,CAACuD,mBAAlC;AAzBmB;AA0BnBvD,QAAAA,KAAK,CAACwD,eAAN,GAAwBxD,KAAK,CAACwD,eAA9B;AA1BmB;AA2BnBxD,QAAAA,KAAK,CAACyD,cAAN,GAAuBzD,KAAK,CAACyD,cAA7B;AA3BmB;AA4BnBzD,QAAAA,KAAK,CAAC0D,UAAN,GAAmB1D,KAAK,CAAC0D,UAAzB;AA5BmB;AA6BnB1D,QAAAA,KAAK,CAAC2D,eAAN,GAAwB3D,KAAK,CAAC2D,eAA9B;AA7BmB;AA8BnB3D,QAAAA,KAAK,CAAC4D,cAAN,GAAuB5D,KAAK,CAAC4D,cAA7B;AA9BmB;AA+BnB5D,QAAAA,KAAK,CAAC6D,WAAN,GAAoB7D,KAAK,CAAC6D,WAA1B;AA/BmB;AAgCnB7D,QAAAA,KAAK,CAAC8D,cAAN,GAAuB9D,KAAK,CAAC8D,cAA7B;AAhCmB;AAiCnB9D,QAAAA,KAAK,CAAC+D,WAAN,GAAoB/D,KAAK,CAAC+D,WAA1B;AAjCmB;AAkCnB/D,QAAAA,KAAK,CAACgE,YAAN,GAAqBhE,KAAK,CAACgE,YAA3B;AAlCmB;AAmCnBhE,QAAAA,KAAK,CAACiE,aAAN,GAAsBjE,KAAK,CAACiE,aAA5B;AAnCmB;AAoCnBjE,QAAAA,KAAK,CAACkE,eAAN,GAAwBlE,KAAK,CAACkE,eAA9B;AApCmB;AAsCnBlE,QAAAA,KAAK,CAACmE,mBAAN,GAA4BnE,KAAK,CAACmE,mBAAlC;AAtCmB;AAuCnBnE,QAAAA,KAAK,CAACoE,eAAN,GAAwBpE,KAAK,CAACoE,eAA9B;AAvCmB;AAyCnBpE,QAAAA,KAAK,CAACqE,iBAAN,GAA0BrE,KAAK,CAACqE,iBAAhC;AAzCmB;AA0CnBrE,QAAAA,KAAK,CAACsE,qBAAN,GAA8BtE,KAAK,CAACsE,qBAApC;AA1CmB;AA4CnBtE,QAAAA,KAAK,CAACnF,IAAN,CAAW,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC7B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,YAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAHD;AAAA;AAAA;;AAD6B;AAM7B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAZ,EAN6B,CAQ7B;;AAR6B;;AAS7BO,gCAAUwG,IAAV,CAAe;AAAEjC,YAAAA,KAAK,EAAE1G,OAAO,CAACsC,MAAR,CAAeoE;AAAxB,WAAf,EAAgD,UAAS7F,GAAT,EAAcoK,KAAd,EAAqB;AAAA;AAAA;;AACnE,gBAAI,CAACA,KAAL,EAAY;AAAA;AAAA;AACV,qBAAO1I,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEC,gBAAAA,GAAG,EAAE;AAAP,eAFD,CAAP;AAGD,aAJD;AAAA;AAAA;;AADmE;AAOnEH,YAAAA,OAAO,CAACC,GAAR,CAAY+C,KAAK,CAACiD,SAAlB,EAA6BjD,KAAK,CAAC8C,YAAnC,EAAiD9C,KAAK,CAAC2C,YAAvD;AAPmE;;AAQnElH,kCAAU+I,UAAV,CACE;AAAExE,cAAAA,KAAK,EAAE,IAAIqB,MAAJ,CAAW/H,OAAO,CAACsC,MAAR,CAAeoE,KAA1B;AAAT,aADF,EAEE;AACEyE,cAAAA,IAAI,EAAE;AACJlC,gBAAAA,aAAa,EAAEvC,KAAK,CAACuC,aADjB;AAEJC,gBAAAA,eAAe,EAAExC,KAAK,CAACwC,eAFnB;AAGJC,gBAAAA,iBAAiB,EAAEzC,KAAK,CAACyC,iBAHrB;AAIJC,gBAAAA,aAAa,EAAE1C,KAAK,CAAC0C,aAJjB;AAKJC,gBAAAA,YAAY,EAAE3C,KAAK,CAAC2C,YALhB;AAMJC,gBAAAA,QAAQ,EAAE5C,KAAK,CAAC4C,QANZ;AAOJC,gBAAAA,aAAa,EAAE7C,KAAK,CAAC6C,aAPjB;AAQJC,gBAAAA,YAAY,EAAE9C,KAAK,CAAC8C,YARhB;AASJC,gBAAAA,SAAS,EAAE/C,KAAK,CAAC+C,SATb;AAUJC,gBAAAA,YAAY,EAAEhD,KAAK,CAACgD,YAVhB;AAWJC,gBAAAA,SAAS,EAAEjD,KAAK,CAACiD,SAXb;AAYJC,gBAAAA,UAAU,EAAElD,KAAK,CAACkD,UAZd;AAaJC,gBAAAA,WAAW,EAAEnD,KAAK,CAACmD,WAbf;AAcJC,gBAAAA,aAAa,EAAEpD,KAAK,CAACoD,aAdjB;AAgBJC,gBAAAA,eAAe,EAAErD,KAAK,CAACqD,eAhBnB;AAiBJC,gBAAAA,iBAAiB,EAAEtD,KAAK,CAACsD,iBAjBrB;AAkBJC,gBAAAA,mBAAmB,EAAEvD,KAAK,CAACuD,mBAlBvB;AAmBJC,gBAAAA,eAAe,EAAExD,KAAK,CAACwD,eAnBnB;AAoBJC,gBAAAA,cAAc,EAAEzD,KAAK,CAACyD,cApBlB;AAqBJC,gBAAAA,UAAU,EAAE1D,KAAK,CAAC0D,UArBd;AAsBJC,gBAAAA,eAAe,EAAE3D,KAAK,CAAC2D,eAtBnB;AAuBJC,gBAAAA,cAAc,EAAE5D,KAAK,CAAC4D,cAvBlB;AAwBJC,gBAAAA,WAAW,EAAE7D,KAAK,CAAC6D,WAxBf;AAyBJC,gBAAAA,cAAc,EAAE9D,KAAK,CAAC8D,cAzBlB;AA0BJC,gBAAAA,WAAW,EAAE/D,KAAK,CAAC+D,WA1Bf;AA2BJC,gBAAAA,YAAY,EAAEhE,KAAK,CAACgE,YA3BhB;AA4BJC,gBAAAA,aAAa,EAAEjE,KAAK,CAACiE,aA5BjB;AA6BJC,gBAAAA,eAAe,EAAElE,KAAK,CAACkE,eA7BnB;AA+BJE,gBAAAA,eAAe,EAAEpE,KAAK,CAACoE,eA/BnB;AAgCJD,gBAAAA,mBAAmB,EAAEnE,KAAK,CAACmE,mBAhCvB;AAiCJE,gBAAAA,iBAAiB,EAAErE,KAAK,CAACqE,iBAjCrB;AAkCJC,gBAAAA,qBAAqB,EAAEtE,KAAK,CAACsE;AAlCzB;AADR,aAFF,EAwCE;AAAEI,cAAAA,KAAK,EAAE;AAAT,aAxCF,EA0CE,UAASvK,GAAT,EAAcY,MAAd,EAAsB;AAAA;AAAA;;AACpB,kBAAIZ,GAAJ,EAAS;AAAA;AAAA;AACP6C,gBAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEPI,gBAAAA,GAAG,CAAC2C,IAAJ,CAAS/C,GAAT;AACD,eAHD,MAGO;AAAA;AAAA;;AACLsB,sCAAUwG,IAAV,CAAe;AAAEtG,kBAAAA,KAAK,EAAErC,OAAO,CAACsC,MAAR,CAAesC;AAAxB,iBAAf,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AAAA;AACZL,kBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBI,IAAlC;AAEA,sBAAM6E,QAAQ,6BAAG7E,IAAH,CAAd,CAHY,CAGW;;AAHX;;AAIZ,sBAAI6E,QAAQ,CAACC,MAAT,IAAmB,CAAvB,EAA0B;AAAA;AAAA;AACxB,2BAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,sBAAAA,MAAM,EAAE,GADuB;AAE/BD,sBAAAA,KAAK,EAAE;AAFwB,qBAA1B,CAAP;AAID,mBALD;AAAA;AAAA;;AAJY;AAUZ,yBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,oBAAAA,MAAM,EAAE,GADuB;AAE/B6B,oBAAAA,IAAI,EAAE,CACJ;AACE6E,sBAAAA,QAAQ,EAARA,QADF;AAEE5G,sBAAAA,OAAO,EAAE;AAFX,qBADI;AAFyB,mBAA1B,CAAP;AASD,iBApBH,WAqBS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,yBAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,oBAAAA,MAAM,EAAE,GADgB;AAExBD,oBAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,mBAA1B;AAGE,iBAzBN;AA2BD;AACF,aA3EH;AA6ED,WArFD;AAsFD,SA/FD;AAgGD,OA9IH;AAgJD;;;WAED,4BAA0BhG,OAA1B,EAAmCuC,QAAnC,EAA6C;AAAA;AAAA;;AAC3CJ,4BAAUwG,IAAV,CAAe;AAAEtG,QAAAA,KAAK,EAAErC,OAAO,CAACsC,MAAR,CAAesC;AAAxB,OAAf,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AAAA;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBI,IAAlC;AAEA,YAAM6E,QAAQ,6BAAG7E,IAAH,CAAd,CAHY,CAGW;;AAHX;;AAIZ,YAAI6E,QAAQ,CAACC,MAAT,IAAmB,CAAvB,EAA0B;AAAA;AAAA;AACxB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAJY;AAWZ,eAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE6E,YAAAA,QAAQ,EAARA,QADF;AAEE5G,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OArBH,WAsBS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,eAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OA1BN;AA4BD;;;WAED,uBAAqBhG,OAArB,EAA8BuC,QAA9B,EAAwC;AAAA;;AACtC,4CAAwCvC,OAAO,CAACqB,IAAhD;AAAA,UAAQgK,WAAR,SAAQA,WAAR;AAAA,UAAqBC,cAArB,SAAqBA,cAArB;;AADsC;;AAGtCnJ,4BAAUR,OAAV,CAAkB;AAAEU,QAAAA,KAAK,EAAErC,OAAO,CAACsC,MAAR,CAAesC;AAAxB,OAAlB,EAAgD,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAClE,YAAI,CAACA,IAAL,EACE;AAAA;AAAA;AAAA,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AAA4F,SAD9F;AAAA;AAAA;;AADkE;AAIlEjC,QAAAA,IAAI,CAACyJ,WAAL,GAAmB,4BAAAA,WAAW,iCAAIzJ,IAAI,CAACyJ,WAAT,CAA9B;AAJkE;AAKlEzJ,QAAAA,IAAI,CAAC4E,OAAL,GAAe,4BAAA8E,cAAc,iCAAI1J,IAAI,CAAC4E,OAAT,CAA7B;AALkE;AAMlE5E,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAFD;AAAA;AAAA;;AAD4B;AAI5B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB,EAJ4B,CAK5B;;AAL4B;AAM5B,iBAAOW,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,YAAAA,OAAO,EAAE,IAAX;AAAiBD,YAAAA,GAAG,EAAE;AAAtB,WAFD,CAAP;AAGD,SATD;AAUD,OAhBD;AAiBD;;;WAED,uBAAqB7D,OAArB,EAA8BuC,QAA9B,EAAwC;AAAA;;AACtC,4CAWIvC,OAAO,CAACqB,IAXZ;AAAA,UACE+C,SADF,SACEA,SADF;AAAA,UAEEC,QAFF,SAEEA,QAFF;AAAA,UAGEjD,QAHF,SAGEA,QAHF;AAAA,UAIEgB,QAJF,SAIEA,QAJF;AAAA,UAKEmJ,eALF,SAKEA,eALF;AAAA,UAMEjH,WANF,SAMEA,WANF;AAAA,UAOE+B,MAPF,SAOEA,MAPF;AAAA,UAQEmF,WARF,SAQEA,WARF;AAAA,UASEjH,SATF,SASEA,SATF;AAAA,UAUElC,KAVF,SAUEA,KAVF;;AADsC;;AActC,UAAI,4BAAAD,QAAQ,CAACyG,MAAT,iCAAmB0C,eAAe,CAAC1C,MAAnC,CAAJ,EAA+C;AAAA;AAAA;;AAC7C,YAAIzG,QAAQ,IAAImJ,eAAhB,EAAiC;AAAA;AAAA;AAC/B7H,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAD+B;AAE/B,iBAAO1C,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAArB,CAAP;AACD,SAHD;AAAA;AAAA;AAID,OALD;AAAA;AAAA;;AAdsC;;AAqBtC1B,4BAAUR,OAAV,CAAkB;AAAEU,QAAAA,KAAK,EAAErC,OAAO,CAACsC,MAAR,CAAesC;AAAxB,OAAlB,EAAgD,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAClE,YAAI,CAACA,IAAL,EACE;AAAA;AAAA;AAAA,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AAA4F,SAD9F;AAAA;AAAA;;AADkE;;AAIlE,YAAI,4BAAAzB,QAAQ,IAAI,WAAZ,iCAA2BmJ,eAAe,IAAI,WAA9C,CAAJ,EAA+D;AAAA;AAAA;AAC7D3J,UAAAA,IAAI,CAACQ,QAAL,GAAgBR,IAAI,CAACQ,QAArB;AAD6D;AAE7DsB,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAS/B,IAAI,CAACQ,QAA1B;AACD,SAHD,MAGO;AAAA;AAAA;AACLR,UAAAA,IAAI,CAACQ,QAAL,GAAgBoC,gCAAeC,YAAf,CAA4BrC,QAAQ,CAACsC,IAAT,EAA5B,CAAhB;AADK;AAELhB,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAe/B,IAAI,CAACQ,QAAhC;AACD;;AAViE;AAYlEsB,QAAAA,OAAO,CAACC,GAAR,CAAY0C,MAAZ,EAZkE,CAalE;;AAbkE;AAclEzE,QAAAA,IAAI,CAACyE,MAAL,GAAc,4BAAAA,MAAM,iCAAIzE,IAAI,CAACyE,MAAT,CAApB;AAdkE;AAelEzE,QAAAA,IAAI,CAACR,QAAL,GAAgB,4BAAAA,QAAQ,iCAAIQ,IAAI,CAACR,QAAT,CAAxB;AAfkE;AAgBlEQ,QAAAA,IAAI,CAACS,KAAL,GAAa,4BAAAA,KAAK,iCAAIT,IAAI,CAACS,KAAT,CAAlB;AAhBkE;AAkBlET,QAAAA,IAAI,CAAC8E,KAAL,GAAa,4BAAAnC,SAAS,iCAAI3C,IAAI,CAAC2C,SAAT,CAAtB;AAlBkE;AAmBlE3C,QAAAA,IAAI,CAACwC,SAAL,GAAiB,4BAAAA,SAAS,iCAAIxC,IAAI,CAACwC,SAAT,CAA1B;AAnBkE;AAoBlExC,QAAAA,IAAI,CAACyC,QAAL,GAAgB,4BAAAA,QAAQ,iCAAIzC,IAAI,CAACyC,QAAT,CAAxB;AApBkE;AAqBlEzC,QAAAA,IAAI,CAACmD,YAAL,GAAoB,4BAAAT,WAAW,iCAAI1C,IAAI,CAACmD,YAAT,CAA/B;AArBkE;AAsBlEnD,QAAAA,IAAI,CAAC+E,gBAAL,GAAwB,4BAAA6E,WAAW,iCAAI5J,IAAI,CAAC+E,gBAAT,CAAnC;AAtBkE;AAuBlE/E,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,YAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAHD;AAAA;AAAA;;AAD4B;AAK5B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB,EAL4B,CAM5B;;AAN4B;AAO5B,iBAAOW,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,YAAAA,OAAO,EAAE,IAAX;AAAiBD,YAAAA,GAAG,EAAE;AAAtB,WAFD,CAAP;AAGD,SAVD;AAWD,OAlCD;AAmCD,K,CAED;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;WAEA,qBAAmB7D,OAAnB,EAA4BuC,QAA5B,EAAsC;AAAA;;AACpC,6CAWIvC,OAAO,CAACqB,IAXZ;AAAA,UACEsG,OADF,UACEA,OADF;AAAA,UAEE8D,WAFF,UAEEA,WAFF;AAAA,UAGEC,OAHF,UAGEA,OAHF;AAAA,UAIEC,YAJF,UAIEA,YAJF;AAAA,UAKEC,QALF,UAKEA,QALF;AAAA,UAMEC,KANF,UAMEA,KANF;AAAA,UAOEC,gBAPF,UAOEA,gBAPF;AAAA,UAQEC,QARF,UAQEA,QARF;AAAA,UASE3K,QATF,UASEA,QATF;AAAA,UAUEiB,KAVF,UAUEA,KAVF;;AAaA,UAAM2J,WAAW,6BAAG,IAAI7K,oBAAJ,CAAkB;AACpCyD,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoB1D,oBAApB,EAAmC2D,OAAnC,EADgC;AAEpC4G,QAAAA,OAAO,EAAPA,OAFoC;AAGpCG,QAAAA,KAAK,EAALA,KAHoC;AAIpCI,QAAAA,kBAAkB,EAAEH,gBAJgB;AAKpCvF,QAAAA,SAAS,EAAEqF,QALyB;AAMpCM,QAAAA,YAAY,EAAEP,YANsB;AAOpCQ,QAAAA,SAAS,EAAEV,WAPyB;AAQpCW,QAAAA,QAAQ,EAAEL,QAR0B;AASpCA,QAAAA,QAAQ,EAAEA,QAT0B;AAUpC3K,QAAAA,QAAQ,EAAEA,QAV0B;AAWpCiB,QAAAA,KAAK,EAAEA,KAX6B;AAYpCsF,QAAAA,OAAO,EAAPA;AAZoC,OAAlB,CAAH,CAAjB;AAdoC;AA6BpCqE,MAAAA,WAAW,CAACzK,IAAZ,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,6BAAGmC,IAAH,CAAV;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB;AAFY;AAIZ,eAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEnC,YAAAA,IAAI,EAAJA;AADF,WADI,CAFyB;AAO/BI,UAAAA,OAAO,EAAE;AAPsB,SAA1B,CAAP;AASD,OAdH,WAeS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,sBAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OArBH,EA7BoC,CAoDpC;AACD;;;WAED,yBAAuBhG,OAAvB,EAAgCuC,QAAhC,EAA0C;AAAA;AAAA;;AACxC8J,4BAAe1D,IAAf,CAAoB;AAAEhB,QAAAA,OAAO,EAAE3H,OAAO,CAACsC,MAAR,CAAesC;AAA1B,OAApB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,6BAAGmC,IAAH,CAAV;AADY;;AAGZ,YAAInC,IAAI,CAACiH,MAAL,IAAe,CAAnB,EAAsB;AAAA;AAAA;AACpBnF,UAAAA,OAAO,CAACC,GAAR,CACE2I,IAAI,CAACC,SAAL,CAAe;AACbrK,YAAAA,MAAM,EAAE,GADK;AAEbD,YAAAA,KAAK,EAAE;AAFM,WAAf,CADF;AADoB;AAOpB,iBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SAXD;AAAA;AAAA;;AAHY;;AAgBZoK,8BAAeG,MAAf,CAAsB;AAAE7E,UAAAA,OAAO,EAAE3H,OAAO,CAACsC,MAAR,CAAesC;AAA1B,SAAtB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAM0I,WAAW,6BAAG1I,IAAH,CAAjB;AADY;AAEZxB,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExB6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAE6H,WAAW,CAACjH,GADlB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFkB,WAA1B;AASD,SAZH,WAaS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdyB,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SAnBH;AAoBD,OArCH,WAsCS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdyB,QAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA5CH;AA6CD;;;WAED,4BAA0BhG,OAA1B,EAAmCuC,QAAnC,EAA6C;AAAA;;AAAA;;AAC3C;AAEA,6CAgBIvC,OAAO,CAACqB,IAhBZ;AAAA,UACEqL,aADF,UACEA,aADF;AAAA,UAEEC,cAFF,UAEEA,cAFF;AAAA,UAGEC,WAHF,UAGEA,WAHF;AAAA,UAIEC,YAJF,UAIEA,YAJF;AAAA,UAKEd,QALF,UAKEA,QALF;AAAA,UAOExF,SAPF,UAOEA,SAPF;AAAA,UAQErE,MARF,UAQEA,MARF;AAAA,UASE4K,UATF,UASEA,UATF;AAAA,UAUEC,aAVF,UAUEA,aAVF;AAAA,UAWEC,aAXF,UAWEA,aAXF;AAAA,UAYE5L,QAZF,UAYEA,QAZF;AAAA,UAaEiB,KAbF,UAaEA,KAbF;AAAA,UAcE0C,YAdF,UAcEA,YAdF;AAAA,UAeE4C,OAfF,UAeEA,OAfF;;AAkBA,UAAMsF,YAAY,6BAAG,IAAIZ,qBAAJ;AACnBzH,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoBwH,qBAApB,EAAoCvH,OAApC,EADe;AAEnB4H,QAAAA,aAAa,EAAbA,aAFmB;AAGnBC,QAAAA,cAAc,EAAdA,cAHmB;AAInBC,QAAAA,WAAW,EAAXA,WAJmB;AAKnBG,QAAAA,aAAa,EAAEF,YALI;AAMnBA,QAAAA,YAAY,EAAZA,YANmB;AAOnBd,QAAAA,QAAQ,EAARA;AAPmB,4EAQnBgB,aARmB,kEASnBxG,SATmB,+DAUnBrE,MAVmB,mEAWnB4K,UAXmB,sEAYnBC,aAZmB,sEAanBC,aAbmB,gEAcVhN,OAAO,CAAC4B,IAAR,CAAagD,EAdH,iEAenBxD,QAfmB,8DAgBnBiB,KAhBmB,qEAiBnB0C,YAjBmB,gEAkBnB4C,OAlBmB,oBAAH,CAAlB;AArB2C;AA0C3CsF,MAAAA,YAAY,CAAC1L,IAAb,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,6BAAGmC,IAAH,CAAV;AACA,YAAMtC,MAAM,6BAAG;AACbiL,UAAAA,aAAa,EAAE9K,IAAI,CAAC8K,aADP;AAEbC,UAAAA,cAAc,EAAE/K,IAAI,CAAC+K,cAFR;AAGbC,UAAAA,WAAW,EAAEhL,IAAI,CAACgL,WAHL;AAIbC,UAAAA,YAAY,EAAEjL,IAAI,CAACiL,YAJN;AAKbd,UAAAA,QAAQ,EAAEnK,IAAI,CAACmK,QALF;AAMbgB,UAAAA,aAAa,EAAEnL,IAAI,CAACmL,aANP;AAObxG,UAAAA,SAAS,EAATA,SAPa;AAQbrE,UAAAA,MAAM,EAANA,MARa;AASb4K,UAAAA,UAAU,EAAVA,UATa;AAUbE,UAAAA,aAAa,EAAbA,aAVa;AAWb5L,UAAAA,QAAQ,EAAEQ,IAAI,CAACR,QAXF;AAYbiB,UAAAA,KAAK,EAAET,IAAI,CAACS,KAZC,CAab;;AAba,SAAH,CAAZ;AAFY;AAkBZ,eAAOE,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEtC,YAAAA,MAAM,EAANA;AADF,WADI,CAFyB;AAO/BO,UAAAA,OAAO,EAAE;AAPsB,SAA1B,CAAP;AASD,OA5BH,WA6BS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OAnCH;AAoCD;;;WAED,gCAA8BhG,OAA9B,EAAuCuC,QAAvC,EAAiD;AAAA;AAAA;;AAC/C8J,4BAAe1D,IAAf,CAAoB;AAAE+C,QAAAA,OAAO,EAAEwB,MAAM,CAAClN,OAAO,CAACsC,MAAR,CAAesC,EAAhB;AAAjB,OAApB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AAAA;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAcI,IAA1B;AAEA,YAAM6E,QAAQ,6BAAG7E,IAAH,CAAd,CAHY,CAGW;;AAHX;;AAIZ,YAAI6E,QAAQ,CAACC,MAAT,IAAmB,CAAvB,EAA0B;AAAA;AAAA;AACxB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAJY;AAUZ,eAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE6E,YAAAA,QAAQ,EAARA,QADF;AAEE5G,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OApBH,WAqBS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,eAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAzBN;AA2BD;;;WAED,wCAAsChG,OAAtC,EAA+CuC,QAA/C,EAAyD;AAAA;AAAA;;AACvDpB,2BAAcwH,IAAd,CAAmB;AAAE/D,QAAAA,EAAE,EAAEsI,MAAM,CAAClN,OAAO,CAACsC,MAAR,CAAesC,EAAhB;AAAZ,OAAnB,EACGpD,IADH,CACQ,UAAA2L,KAAK,EAAI;AAAA;AAAA;;AACb,YAAIA,KAAK,CAACtE,MAAN,IAAgB,CAApB,EAAuB;AAAA;AAAA;AACrB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAMA,+CAAmBjC,OAAO,CAACqB,IAA3B;AAAA,YAAQa,MAAR,UAAQA,MAAR;;AAPa;;AASbf,6BAAciM,SAAd,CACE;AAAExI,UAAAA,EAAE,EAAEsI,MAAM,CAAClN,OAAO,CAACsC,MAAR,CAAesC,EAAhB;AAAZ,SADF,EAEE;AACE1C,UAAAA,MAAM,EAAEA;AADV,SAFF,EAMGV,IANH,CAMQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAMsJ,aAAa,6BAAGtJ,IAAH,CAAnB;AADY;AAGZ,iBAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAEyI,aAAa,CAAC7H,GADpB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFyB,WAA1B,CAAP;AASD,SAlBH,WAmBS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,iBAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAGE,SAvBN;AAyBD,OAnCH,WAoCS,UAAA/D,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AACxB1B,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAxCN;AA0CD;;;WAED,kCAAgChG,OAAhC,EAAyCuC,QAAzC,EAAmD;AAAA;AAAA;;AACjD+K,+BAAkB3E,IAAlB,CAAuB;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAvB,EACGpD,IADH,CACQ,UAAA2L,KAAK,EAAI;AAAA;AAAA;;AACb,YAAIA,KAAK,CAACtE,MAAN,IAAgB,CAApB,EAAuB;AAAA;AAAA;AACrB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAE,GADN;AAEE5C,cAAAA,OAAO,EAAE;AAFX,aADI;AAFyB,WAA1B,CAAP;AASD,SAVD;AAAA;AAAA;;AAWA,+CAAmBhC,OAAO,CAACqB,IAA3B;AAAA,YAAQa,MAAR,UAAQA,MAAR;;AAZa;;AAcboL,iCAAkBF,SAAlB,CACE;AAAE5H,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SADF,EAEE;AACE1C,UAAAA,MAAM,EAAE;AADV,SAFF,EAMGV,IANH,CAMQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAMsJ,aAAa,6BAAGtJ,IAAH,CAAnB;AADY;AAGZ,iBAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAEyI,aAAa,CAAC7H,GADpB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFyB,WAA1B,CAAP;AASD,SAlBH,WAmBS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,iBAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAGE,SAvBN;AAyBD,OAxCH,WAyCS,UAAA/D,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AACxB1B,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OA7CN;AA+CD;;;WAED,+BAA6BhG,OAA7B,EAAsCuC,QAAtC,EAAgD;AAAA;AAAA;;AAC9C8J,4BAAe1D,IAAf,CAAoB;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAApB,EACGpD,IADH,CACQ,UAAA2L,KAAK,EAAI;AAAA;AAAA;;AACb,YAAIA,KAAK,CAACtE,MAAN,IAAgB,CAApB,EAAuB;AAAA;AAAA;AACrB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAMA,+CAAmBjC,OAAO,CAACqB,IAA3B;AAAA,YAAQa,MAAR,UAAQA,MAAR;;AAPa;;AASbmK,8BAAee,SAAf,CACE;AAAE5H,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SADF,EAEE;AACE1C,UAAAA,MAAM,EAAEA;AADV,SAFF,EAMGV,IANH,CAMQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAMsJ,aAAa,6BAAGtJ,IAAH,CAAnB;AADY;AAGZ,iBAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAEyI,aAAa,CAAC7H,GADpB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFyB,WAA1B,CAAP;AASD,SAlBH,WAmBS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,iBAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAGE,SAvBN;AAyBD,OAnCH,WAoCS,UAAA/D,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AACxB1B,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAxCN;AA0CD;;;WAED,6BAA2BhG,OAA3B,EAAoCuC,QAApC,EAA8C;AAAA;AAAA;;AAC5CJ,4BAAUwG,IAAV,CAAe;AAAEtG,QAAAA,KAAK,EAAErC,OAAO,CAACsC,MAAR,CAAesC;AAAxB,OAAf,EACGpD,IADH,CACQ,UAAA2L,KAAK,EAAI;AAAA;AAAA;;AACb,YAAIA,KAAK,CAACtE,MAAN,IAAgB,CAApB,EAAuB;AAAA;AAAA;AACrB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAMA,YAAIsL,QAAQ,6BAAG,CAAH,CAAZ;;AACA,+CAAoBvN,OAAO,CAACqB,IAA5B;AAAA,YAAQmM,OAAR,UAAQA,OAAR;;AARa;;AASb,YAAI,CAACC,QAAQ,CAACN,KAAK,CAACO,eAAP,EAAwB,EAAxB,CAAb,EAA0C;AAAA;AAAA;AACxCH,UAAAA,QAAQ,GAAGE,QAAQ,CAACN,KAAK,CAACO,eAAP,EAAwB,EAAxB,CAAR,GAAsCD,QAAQ,CAACD,OAAD,EAAU,EAAV,CAAzD;AACD,SAFD,MAEO;AAAA;AAAA;AACLD,UAAAA,QAAQ,GAAGE,QAAQ,CAACN,KAAK,CAACO,eAAP,EAAwB,EAAxB,CAAR,GAAsCD,QAAQ,CAACD,OAAD,EAAU,EAAV,CAAzD;AACD;;AAbY;AAebD,QAAAA,QAAQ,GAAGA,QAAQ,GAAG,CAAtB;AAfa;;AAiBbpL,8BAAUiL,SAAV,CACE;AAAE/K,UAAAA,KAAK,EAAErC,OAAO,CAACsC,MAAR,CAAesC;AAAxB,SADF,EAEE;AACE8I,UAAAA,eAAe,EAAEH;AADnB,SAFF,EAMG/L,IANH,CAMQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAMsJ,aAAa,6BAAGtJ,IAAH,CAAnB;AADY;AAGZ,iBAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAEyI,aAAa,CAAC7H,GADpB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFyB,WAA1B,CAAP;AASD,SAlBH,WAmBS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,iBAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAGE,SAvBN;AAyBD,OA3CH,WA4CS,UAAA/D,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AACxB1B,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAhDN;AAkDD;;;WAED,mCAAiChG,OAAjC,EAA0CuC,QAA1C,EAAoD;AAAA;AAAA;;AAClD8J,4BAAe1D,IAAf,CAAoB;AAAE/D,QAAAA,EAAE,EAAEsI,MAAM,CAAClN,OAAO,CAACsC,MAAR,CAAesC,EAAhB;AAAZ,OAApB,EACGpD,IADH,CACQ,UAAA2L,KAAK,EAAI;AAAA;AAAA;;AACb,YAAIA,KAAK,CAACtE,MAAN,IAAgB,CAApB,EAAuB;AAAA;AAAA;AACrB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAMA,+CAAmBjC,OAAO,CAACqB,IAA3B;AAAA,YAAQa,MAAR,UAAQA,MAAR;;AAPa;;AASbmK,8BAAee,SAAf,CACE;AAAExI,UAAAA,EAAE,EAAEsI,MAAM,CAAClN,OAAO,CAACsC,MAAR,CAAesC,EAAhB;AAAZ,SADF,EAEE;AACE1C,UAAAA,MAAM,EAAEA;AADV,SAFF,EAMGV,IANH,CAMQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAMsJ,aAAa,6BAAGtJ,IAAH,CAAnB;AADY;AAGZ,iBAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAEyI,aAAa,CAAC7H,GADpB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFyB,WAA1B,CAAP;AASD,SAlBH,WAmBS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,iBAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAGE,SAvBN;AAyBD,OAnCH,WAoCS,UAAA/D,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AACxB1B,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAxCN;AA0CD;;;WAED,8BAA4BhG,OAA5B,EAAqCuC,QAArC,EAA+C;AAAA;;AAC7C,6CAWIvC,OAAO,CAACqB,IAXZ;AAAA,UACEsM,cADF,UACEA,cADF;AAAA,UAEEhB,cAFF,UAEEA,cAFF;AAAA,UAGEC,WAHF,UAGEA,WAHF;AAAA,UAIEb,QAJF,UAIEA,QAJF;AAAA,UAKEe,UALF,UAKEA,UALF;AAAA,UAMEc,QANF,UAMEA,QANF;AAAA,UAOEf,YAPF,UAOEA,YAPF;AAAA,UAQEnB,OARF,UAQEA,OARF;AAAA,UASEqB,aATF,UASEA,aATF;AAAA,UAUEc,OAVF,UAUEA,OAVF;;AAD6C;;AAc7CxB,4BAAe1K,OAAf,CAAuB;AAAE+J,QAAAA,OAAO,EAAE1L,OAAO,CAACsC,MAAR,CAAesC;AAA1B,OAAvB,EAAuD,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AACzE,YAAI,CAACA,IAAL,EACE;AAAA;AAAA;AAAA,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AAA4F,SAD9F;AAAA;AAAA;;AADyE;AAIzEH,QAAAA,OAAO,CAACC,GAAR,CAAY0C,MAAZ,EAJyE,CAKzE;;AALyE;AAOzEzE,QAAAA,IAAI,CAAC+L,cAAL,GAAsBA,cAAtB;AAPyE;AAQzE/L,QAAAA,IAAI,CAAC+K,cAAL,GAAsBA,cAAtB;AARyE;AASzE/K,QAAAA,IAAI,CAACgL,WAAL,GAAmBA,WAAnB;AATyE;AAUzEhL,QAAAA,IAAI,CAACmK,QAAL,GAAgBA,QAAhB;AAVyE;AAWzEnK,QAAAA,IAAI,CAACkL,UAAL,GAAkBA,UAAlB;AAXyE;AAYzElL,QAAAA,IAAI,CAACgM,QAAL,GAAgBA,QAAhB;AAZyE;AAazEhM,QAAAA,IAAI,CAACiL,YAAL,GAAoBA,YAApB;AAbyE;AAczEjL,QAAAA,IAAI,CAAC8J,OAAL,GAAeA,OAAf;AAdyE;AAezE9J,QAAAA,IAAI,CAACmL,aAAL,GAAqBA,aAArB;AAfyE;AAgBzEnL,QAAAA,IAAI,CAACiM,OAAL,GAAeA,OAAf;AAhByE;AAiBzEjM,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAFD;AAAA;AAAA;;AAD4B;AAI5B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB,EAJ4B,CAK5B;;AAL4B;AAM5B,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEE,YAAAA,OAAO,EAAE,IAAX;AAAiBD,YAAAA,GAAG,EAAE;AAAtB,WAA1B,CAAP;AACD,SAPD;AAQD,OAzBD;AA0BD;;;WAED,yBAAuB7D,OAAvB,EAAgCuC,QAAhC,EAA0C;AAAA;AAAA;;AACxCuL,iCAAoBnF,IAApB,GAEGnH,IAFH,CAEQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMgK,eAAe,6BAAGhK,IAAH,CAArB;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AAFY;;AAGZ,YAAIgK,eAAe,CAAClF,MAAhB,KAA2B,CAA/B,EAAkC;AAAA;AAAA;AAChC,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAHY;AASZ,eAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEgK,YAAAA,eAAe,EAAfA,eADF;AAEE/L,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OApBH,WAqBS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAzBN;AA2BD;;;WAED,uBAAqBhG,OAArB,EAA8BuC,QAA9B,EAAwC;AAAA;AAAA;;AACtCyL,+BACGrF,IADH,GAGGnH,IAHH,CAGQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMkK,YAAY,6BAAGlK,IAAH,CAAlB;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AAFY;;AAGZ,YAAIkK,YAAY,CAACpF,MAAb,KAAwB,CAA5B,EAA+B;AAAA;AAAA;AAC7B,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAHY;AASZ,eAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEkK,YAAAA,YAAY,EAAZA,YADF;AAEEjM,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OArBH,WAsBS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OA1BN;AA4BD;;;WAED,oBAAkBhG,OAAlB,EAA2BuC,QAA3B,EAAqC;AAAA;;AACnC,6CAUIvC,OAAO,CAACqB,IAVZ;AAAA,UACEsM,cADF,UACEA,cADF;AAAA,UAEEhB,cAFF,UAEEA,cAFF;AAAA,UAGEC,WAHF,UAGEA,WAHF;AAAA,UAIEb,QAJF,UAIEA,QAJF;AAAA,UAKEe,UALF,UAKEA,UALF;AAAA,UAMEc,QANF,UAMEA,QANF;AAAA,UAOEf,YAPF,UAOEA,YAPF;AAAA,UAQEnB,OARF,UAQEA,OARF;AAAA,UASEqB,aATF,UASEA,aATF;;AADmC;;AAanCV,4BAAe1K,OAAf,CAAuB;AAAEiD,QAAAA,EAAE,EAAE5E,OAAO,CAACsC,MAAR,CAAesC;AAArB,OAAvB,EAAkD,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AACpE,YAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT8B,UAAAA,OAAO,CAACC,GAAR,CAAY2I,IAAI,CAAC4B,QAAL,CAAcrN,GAAd,CAAZ;AADS;AAET,iBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAHD;AAAA;AAAA,SADoE,CAMpE;;;AANoE;AAQpEjC,QAAAA,IAAI,CAAC+L,cAAL,GAAsBA,cAAtB;AARoE;AASpE/L,QAAAA,IAAI,CAAC+K,cAAL,GAAsBA,cAAtB;AAToE;AAUpE/K,QAAAA,IAAI,CAACgL,WAAL,GAAmBA,WAAnB;AAVoE;AAWpEhL,QAAAA,IAAI,CAACmK,QAAL,GAAgBA,QAAhB;AAXoE;AAYpEnK,QAAAA,IAAI,CAACkL,UAAL,GAAkBA,UAAlB;AAZoE;AAapElL,QAAAA,IAAI,CAACgM,QAAL,GAAgBA,QAAhB;AAboE;AAcpEhM,QAAAA,IAAI,CAACiL,YAAL,GAAoBA,YAApB;AAdoE;AAepEjL,QAAAA,IAAI,CAAC8J,OAAL,GAAeA,OAAf;AAfoE;AAgBpE9J,QAAAA,IAAI,CAACmL,aAAL,GAAqBA,aAArB;AAhBoE;AAkBpEnL,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,YAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAHD;AAAA;AAAA;;AAD4B;AAK5B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB,EAL4B,CAM5B;;AAN4B;AAO5B,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEE,YAAAA,OAAO,EAAE,IAAX;AAAiBD,YAAAA,GAAG,EAAE;AAAtB,WAA1B,CAAP;AACD,SARD;AASD,OA3BD;AA4BD;;;WAED,oBAAkB7D,OAAlB,EAA2BuC,QAA3B,EAAqC;AAAA;AAAA;;AACnCpB,2BAAcwH,IAAd,CAAmB;AAAE/D,QAAAA,EAAE,EAAE5E,OAAO,CAACsC,MAAR,CAAesC;AAArB,OAAnB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMoK,QAAQ,6BAAGpK,IAAH,CAAd;AADY;;AAGZ,YAAIoK,QAAQ,CAACtF,MAAT,IAAmB,CAAvB,EAA0B;AAAA;AAAA;AACxBnF,UAAAA,OAAO,CAACC,GAAR,CACE2I,IAAI,CAACC,SAAL,CAAe;AACbrK,YAAAA,MAAM,EAAE,GADK;AAEbD,YAAAA,KAAK,EAAE;AAFM,WAAf,CADF;AADwB;AAOxB,iBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SAXD;AAAA;AAAA;;AAHY;;AAeZd,6BAAciN,SAAd,CAAwB;AAAExJ,UAAAA,EAAE,EAAE5E,OAAO,CAACsC,MAAR,CAAesC;AAArB,SAAxB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAMsK,cAAc,6BAAGtK,IAAH,CAApB;AADY;AAEZxB,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExB6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAEyJ,cAAc,CAAC7I,GADrB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFkB,WAA1B;AASD,SAZH,WAaS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,iBAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAGE,SAjBN;AAmBD,OAnCH,WAoCS,UAAA/D,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAxCN;AA0CD;;;WAED,yBAAuBhG,OAAvB,EAAgCuC,QAAhC,EAA0C;AAAA;AAAA;;AACxC8J,4BAAe1D,IAAf,GAEGnH,IAFH,CAEQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMuK,SAAS,6BAAGvK,IAAH,CAAf;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAYI,IAAI,GAAG,oBAAnB;AAFY;;AAGZ,YAAIuK,SAAS,CAACzF,MAAV,KAAqB,CAAzB,EAA4B;AAAA;AAAA;AAC1B,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAHY;AASZ,eAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEuK,YAAAA,SAAS,EAATA,SADF;AAGEtM,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OArBH,WAsBS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OA1BN;AA4BD;;;WAED,2BAAyBhG,OAAzB,EAAkCuC,QAAlC,EAA4C;AAAA;AAAA;;AAC1C8J,4BAAe1D,IAAf,CAAoB;AAAEtG,QAAAA,KAAK,EAAErC,OAAO,CAACsC,MAAR,CAAesC;AAAxB,OAApB,EAEGpD,IAFH,CAEQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMuK,SAAS,6BAAGvK,IAAH,CAAf;AADY;;AAEZ,YAAIuK,SAAS,CAACzF,MAAV,KAAqB,CAAzB,EAA4B;AAAA;AAAA;AAC1B,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAFY;AAQZ,eAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEuK,YAAAA,SAAS,EAATA,SADF;AAGEtM,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OApBH,WAqBS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAzBN;AA2BD;;;WAED,6BAA2BhG,OAA3B,EAAoCuC,QAApC,EAA8C;AAAA;AAAA;AAC5CgM,MAAAA,YAAY,CAAC5F,IAAb,CAAkB;AAAE/D,QAAAA,EAAE,EAAEsI,MAAM,CAAClN,OAAO,CAACsC,MAAR,CAAesC,EAAhB;AAAZ,OAAlB,EACGpD,IADH,CACQ,UAAA2L,KAAK,EAAI;AAAA;AAAA;;AACb,YAAIA,KAAK,CAACtE,MAAN,IAAgB,CAApB,EAAuB;AAAA;AAAA;AACrB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAMA,+CAAmBjC,OAAO,CAACqB,IAA3B;AAAA,YAAQa,MAAR,UAAQA,MAAR;;AAPa;;AAQb,YAAIgL,MAAM,CAAClN,OAAO,CAAC4B,IAAR,CAAagD,EAAd,CAAV,EAA6B;AAAA;AAAA;AAC3B2J,UAAAA,YAAY,CAACnB,SAAb,CACE;AAAExI,YAAAA,EAAE,EAAEsI,MAAM,CAAClN,OAAO,CAACsC,MAAR,CAAesC,EAAhB;AAAZ,WADF,EAEE;AACE1C,YAAAA,MAAM,EAAEA;AADV,WAFF,EAMGV,IANH,CAMQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,gBAAMsJ,aAAa,6BAAGtJ,IAAH,CAAnB;AADY;AAGZ,mBAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,cAAAA,MAAM,EAAE,GADuB;AAE/B6B,cAAAA,IAAI,EAAE,CACJ;AACEa,gBAAAA,EAAE,EAAEyI,aAAa,CAAC7H,GADpB;AAEExD,gBAAAA,OAAO,EAAE;AAFX,eADI;AAFyB,aAA1B,CAAP;AASD,WAlBH,WAmBS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,mBAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,cAAAA,MAAM,EAAE,GADgB;AAExBD,cAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,aAA1B;AAGE,WAvBN;AAyBD,SA1BD,MA0BO;AAAA;AAAA;AACL,iBAAOzD,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID;AACF,OAzCH,WA0CS,UAAAA,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AACxB1B,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OA9CN;AAgDD;;;WAED,0BAAwBhG,OAAxB,EAAiCuC,QAAjC,EAA2C;AAAA;AAAA;;AACzCpB,2BAAcwH,IAAd,CAAmB;AAAEtG,QAAAA,KAAK,EAAErC,OAAO,CAACsC,MAAR,CAAesC;AAAxB,OAAnB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMyK,KAAK,6BAAGzK,IAAH,CAAX;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAY6K,KAAZ,EAFY,CAGZ;AACA;AACA;AACA;AACA;AACA;;AARY;AASZ,eAAOjM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEyK,YAAAA,KAAK,EAALA,KADF;AAGExM,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OApBH,WAqBS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAzBN;AA2BD;;;WAED,+BAA6BhG,OAA7B,EAAsCuC,QAAtC,EAAgD;AAAA;AAAA;;AAC9CkM,6BAAW9F,IAAX,CAAgB;AAAEhB,QAAAA,OAAO,EAAE,IAAII,MAAJ,CAAW/H,OAAO,CAACsC,MAAR,CAAesC,EAA1B;AAAX,OAAhB,EAEGpD,IAFH,CAEQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAM2K,KAAK,6BAAG3K,IAAH,CAAX;AADY;;AAEZ,YAAI2K,KAAK,CAAC7F,MAAN,KAAiB,CAArB,EAAwB;AAAA;AAAA;AACtB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAFY;AAQZ,eAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE2K,YAAAA,KAAK,EAALA,KADF;AAGE1M,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OApBH,WAqBS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAzBN;AA2BD;;;WAED,qBAAmBhG,OAAnB,EAA4BuC,QAA5B,EAAsC;AAAA;;AACpC,6CAAqCvC,OAAO,CAACqB,IAA7C;AAAA,UAAQsN,UAAR,UAAQA,UAAR;AAAA,UAAoBC,YAApB,UAAoBA,YAApB;;AADoC;;AAGpCzM,4BAAUR,OAAV,CAAkB;AAAEU,QAAAA,KAAK,EAAErC,OAAO,CAACsC,MAAR,CAAesC;AAAxB,OAAlB,EAAgD,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAClE,YAAIiN,GAAG,6BAAG3B,MAAM,CAACtL,IAAI,CAAC4E,OAAN,CAAN,GAAuB0G,MAAM,CAAC0B,YAAD,CAAhC,CAAP;AADkE;AAElEhN,QAAAA,IAAI,CAAC4E,OAAL,GAAe,IAAIuB,MAAJ,CAAW8G,GAAX,CAAf;AAFkE;AAIlEjN,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAFD;AAAA;AAAA;;AAD4B;AAK5B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAZ;AAL4B;AAM5B,iBAAOW,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAE1B,YAAAA,MAAM,EAAE,GAAV;AAAe4B,YAAAA,OAAO,EAAE,IAAxB;AAA8BD,YAAAA,GAAG,EAAE;AAAnC,WAFD,CAAP;AAGD,SATD;AAUD,OAdD;AAeD;;;WAED,0BAAwB7D,OAAxB,EAAiCuC,QAAjC,EAA2C;AAAA;;AACzC,6CAAwCvC,OAAO,CAACqB,IAAhD;AAAA,UAAQa,MAAR,UAAQA,MAAR;AAAA,UAAgBgG,MAAhB,UAAgBA,MAAhB;AAAA,UAAwB4G,WAAxB,UAAwBA,WAAxB;;AADyC;;AAGzC3N,2BAAcQ,OAAd,CAAsB;AAAEgG,QAAAA,OAAO,EAAE,IAAII,MAAJ,CAAW/H,OAAO,CAACsC,MAAR,CAAesC,EAA1B;AAAX,OAAtB,EAAkE,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;AACpF;AACAA,QAAAA,IAAI,CAACM,MAAL,GAAc,4BAAAA,MAAM,iCAAIN,IAAI,CAACM,MAAT,CAApB;AAFoF;AAIpFN,QAAAA,IAAI,CAACiK,KAAL,GAAa,4BAAA3D,MAAM,iCAAItG,IAAI,CAACiK,KAAT,CAAnB;AAJoF;AAMpFjK,QAAAA,IAAI,CAACkN,WAAL,GAAmB,4BAAAA,WAAW,iCAAIlN,IAAI,CAACkN,WAAT,CAA9B;AAEA,YAAIC,SAAS,6BAAGnN,IAAI,CAACuK,SAAR,CAAb,CARoF,CAUpF;AACA;AACA;AAEA;;AAdoF;AAgBpFvK,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAFD;AAAA;AAAA;;AAD4B;;AAK5Bb,+BAAc+J,UAAd,CACE;AAAEvD,YAAAA,OAAO,EAAE3H,OAAO,CAACsC,MAAR,CAAesC;AAA1B,WADF,EAEE;AACEuG,YAAAA,IAAI,EAAE;AACJjJ,cAAAA,MAAM,EAAEA,MADJ;AAEJ2J,cAAAA,KAAK,EAAE3D,MAFH;AAGJ4G,cAAAA,WAAW,EAAEA,WAHT;AAIJ,sCAAwB5M;AAJpB;AADR,WAFF,EAUE;AAAEkJ,YAAAA,KAAK,EAAE;AAAT,WAVF,EAWE,UAASvK,GAAT,EAAcY,MAAd,EAAsB;AAAA;AAAA;;AACpB,gBAAIZ,GAAJ,EAAS;AAAA;AAAA;AACP6C,cAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP0B,cAAAA,QAAQ,CAACqB,IAAT,CAAc/C,GAAd;AACD,aAHD,MAGO;AAAA;AAAA;AACL6C,cAAAA,OAAO,CAACC,GAAR,CAAYlC,MAAZ;AADK;AAEL,qBAAOc,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AACJ1B,gBAAAA,MAAM,EAAE,GADJ;AAEJ4B,gBAAAA,OAAO,EAAE,IAFL;AAGJD,gBAAAA,GAAG,EAAE;AAHD,eAFD,CAAP;AAOD;AACF,WAzBH,EAL4B,CAiC5B;;AACD,SAlCD;AAmCD,OAnDD;AAoDD;;;WAED,0BAAwB7D,OAAxB,EAAiCuC,QAAjC,EAA2C;AAAA;;AACzC,6CAMIvC,OAAO,CAACqB,IANZ;AAAA,UACEa,MADF,UACEA,MADF;AAAA,UAGE8M,YAHF,UAGEA,YAHF;AAAA,UAIEC,qBAJF,UAIEA,qBAJF;AAAA,UAKEC,kBALF,UAKEA,kBALF,CADyC,CASzC;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AApByC;;AAsBzC7C,4BAAenB,UAAf,CACE;AAAEvD,QAAAA,OAAO,EAAE,IAAII,MAAJ,CAAW/H,OAAO,CAACsC,MAAR,CAAesC,EAA1B;AAAX,OADF,EAEE;AACEuG,QAAAA,IAAI,EAAE;AACJjJ,UAAAA,MAAM,EAAEA,MADJ;AAEJ;AACA8M,UAAAA,YAAY,EAAE,IAAIjH,MAAJ,CAAW/H,OAAO,CAACsC,MAAR,CAAesC,EAA1B,CAHV;AAIJqK,UAAAA,qBAAqB,EAAEA,qBAJnB;AAKJC,UAAAA,kBAAkB,EAAEA;AALhB;AADR,OAFF,EAWE;AAAE9D,QAAAA,KAAK,EAAE;AAAT,OAXF,EAYE,UAASvK,GAAT,EAAcY,MAAd,EAAsB;AAAA;AAAA;;AACpB,YAAIZ,GAAJ,EAAS;AAAA;AAAA;AACP6C,UAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEPI,UAAAA,GAAG,CAAC2C,IAAJ,CAAS/C,GAAT;AACD,SAHD,MAGO;AAAA;AAAA;AACL6C,UAAAA,OAAO,CAACC,GAAR,CAAYlC,MAAZ;AADK;AAEL,iBAAOc,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AACJ1B,YAAAA,MAAM,EAAE,GADJ;AAEJ4B,YAAAA,OAAO,EAAE,IAFL;AAGJD,YAAAA,GAAG,EAAE;AAHD,WAFD,CAAP;AAOD;AACF,OA1BH;AA4BD;;;WAED,2BAAyB7D,OAAzB,EAAkCuC,QAAlC,EAA4C;AAAA;;AAC1C,6CAAwCvC,OAAO,CAACqB,IAAhD;AAAA,UAAQa,MAAR,UAAQA,MAAR;AAAA,UAAgBgG,MAAhB,UAAgBA,MAAhB;AAAA,UAAwB4G,WAAxB,UAAwBA,WAAxB;;AAD0C;;AAG1CL,6BAAW9M,OAAX,CAAmB;AAAEgG,QAAAA,OAAO,EAAE,IAAII,MAAJ,CAAW/H,OAAO,CAACsC,MAAR,CAAesC,EAA1B;AAAX,OAAnB,EAA+D,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;AACjF;AACAA,QAAAA,IAAI,CAACM,MAAL,GAAc,4BAAAA,MAAM,iCAAIN,IAAI,CAACM,MAAT,CAApB;AAFiF;AAIjFN,QAAAA,IAAI,CAACsG,MAAL,GAAc,4BAAAA,MAAM,iCAAItG,IAAI,CAACsG,MAAT,CAApB;AAJiF;AAKjFtG,QAAAA,IAAI,CAACkN,WAAL,GAAmB,6BAAAA,WAAW,kCAAIlN,IAAI,CAACkN,WAAT,CAA9B;AALiF;AAOjFlN,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAFD;AAAA;AAAA;;AAD4B;AAI5B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB;AAJ4B;AAM5B,iBAAOW,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAE1B,YAAAA,MAAM,EAAE,GAAV;AAAe4B,YAAAA,OAAO,EAAE,IAAxB;AAA8BD,YAAAA,GAAG,EAAE;AAAnC,WAFD,CAAP;AAGD,SATD;AAUD,OAjBD;AAkBD;;;WAED,wBAAsB7D,OAAtB,EAA+BuC,QAA/B,EAAyC;AAAA;AAAA;;AACvCpB,2BAAcwH,IAAd,CAAmB;AAAE/D,QAAAA,EAAE,EAAEsI,MAAM,CAAClN,OAAO,CAACsC,MAAR,CAAesC,EAAhB;AAAZ,OAAnB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AAAA;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAcI,IAA1B;AAEA,YAAMoL,YAAY,6BAAGpL,IAAH,CAAlB,CAHY,CAGe;;AAHf;;AAIZ,YAAIoL,YAAY,CAACtG,MAAb,IAAuB,CAA3B,EAA8B;AAAA;AAAA;AAC5B,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAJY;AAUZ,eAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEoL,YAAAA,YAAY,EAAZA,YADF;AAEEnN,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OApBH,WAqBS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,eAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAzBN;AA2BD;;;WAED,4BAA0BhF,GAA1B,EAA+BC,GAA/B,EAAoC;AAAA;;AAClC,6CAMID,GAAG,CAACK,IANR;AAAA,UACE+N,QADF,UACEA,QADF;AAAA,UAEE/M,KAFF,UAEEA,KAFF;AAAA,UAGE6F,MAHF,UAGEA,MAHF;AAAA,UAIEnD,YAJF,UAIEA,YAJF;;AADkC;AAQlCrB,MAAAA,OAAO,CAACC,GAAR,CAAYyL,QAAZ,EAAsB/M,KAAtB,EAA6B6F,MAA7B,EARkC,CASlC;;AAEA,UAAMmH,IAAI,6BAAG;AACXD,QAAAA,QAAQ,EAARA,QADW;AAEX/M,QAAAA,KAAK,EAALA,KAFW;AAGX6F,QAAAA,MAAM,EAANA,MAHW;AAIXnD,QAAAA,YAAY,EAAZA;AAJW,OAAH,CAAV;AAXkC;AAiBlCsK,MAAAA,IAAI,CAAChH,QAAL,GAAgB;AACdD,QAAAA,SAAS,EAAEiH,IAAI,CAACD;AADF,OAAhB;AAjBkC;AAoBlCC,MAAAA,IAAI,CAACnH,MAAL,IAAe,GAAf;AApBkC;AAqBlCmH,MAAAA,IAAI,CAACC,KAAL,IAAc,GAAd;AArBkC;AAuBlCrP,MAAAA,iBAAiB,CAACoP,IAAD,EAAO,UAACpN,KAAD,EAAQZ,IAAR,EAAiB;AAAA;AAAA;AACvCqC,QAAAA,OAAO,CAACC,GAAR,CAAYtC,IAAZ;AADuC;;AAEvC,YAAIY,KAAJ,EAAW;AAAA;AAAA;AACT;AACAyB,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AAFS;AAGT,iBAAOhB,GAAG,CAACsO,QAAJ,CAAa,QAAb,CAAP;AACD,SAJD;AAAA;AAAA;;AAKA,YAAIhN,QAAQ,6BAAG+J,IAAI,CAACkD,KAAL,CAAWnO,IAAX,CAAH,CAAZ;AAEA,YAAIoO,GAAG,6BAAGlN,QAAQ,CAACwB,IAAT,CAAc2L,iBAAjB,CAAP,CATuC,CAWvC;AACA;AACA;;AAbuC;AAevC,eAAOzO,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAC1BG,UAAAA,MAAM,EAAE,GADkB;AAE1BF,UAAAA,OAAO,2GAAiGyN,GAAjG;AAFmB,SAArB,CAAP;AAKD,OApBgB,CAAjB;AAqBD;;;WAED,0BAAwBzO,GAAxB,EAA6BC,GAA7B,EAAkC;AAAA;;AAChC,6CAA8BD,GAAG,CAAC2O,KAAlC;AAAA,UAAQ1H,SAAR,UAAQA,SAAR;AAAA,UAAmB2H,MAAnB,UAAmBA,MAAnB,CADgC,CAEhC;;;AACA,UAAMC,GAAG,6BAAG5H,SAAH,CAAT;AAHgC;AAIhC/H,MAAAA,aAAa,CAAC2P,GAAD,EAAM,UAAC5N,KAAD,EAAQZ,IAAR,EAAiB;AAAA;AAAA;;AAClC,YAAIY,KAAJ,EAAW;AAAA;AAAA;AACT;AACAyB,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AAFS;AAGT,iBAAOhB,GAAG,CAACsO,QAAJ,CAAa,QAAb,CAAP;AACD,SAJD;AAAA;AAAA;;AAMA,YAAIhN,QAAQ,6BAAG+J,IAAI,CAACkD,KAAL,CAAWnO,IAAX,CAAH,CAAZ;AAPkC;AAQlCqC,QAAAA,OAAO,CAACC,GAAR,CAAY2I,IAAI,CAACC,SAAL,CAAehK,QAAQ,CAACwB,IAAxB,IAAgC,YAA5C;;AAEA,+CAAoExB,QAAQ,CAACwB,IAA7E;AAAA,YAAQa,EAAR,UAAQA,EAAR;AAAA,YAAYqD,SAAZ,UAAYA,SAAZ;AAAA,YAAuBC,MAAvB,UAAuBA,MAAvB;AAAA,YAA+BC,QAA/B,UAA+BA,QAA/B;AAAA,YAAyCE,QAAzC,UAAyCA,QAAzC;AAAA,YAAmDtD,YAAnD,UAAmDA,YAAnD;;AAVkC;AAWlCrB,QAAAA,OAAO,CAACC,GAAR,CAAYiB,EAAZ,EAAgBqD,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,EAA6CpD,YAA7C,EAA2DoD,QAAQ,CAACjB,KAApE;AAEA,YAAMY,QAAQ,6BAAG;AACflD,UAAAA,EAAE,EAAE,IAAImD,MAAJ,CAAWnD,EAAX,CADW;AAEfqD,UAAAA,SAAS,EAATA,SAFe;AAGfC,UAAAA,MAAM,EAAEA,MAAM,GAAG,GAHF;AAIf7F,UAAAA,KAAK,EAAE8F,QAAQ,CAAC9F,KAJD;AAKf+F,UAAAA,SAAS,EAAEC,QAAQ,CAACD,SALL;AAMfrD,UAAAA,YAAY,EAAZA;AANe,SAAH,CAAd;AASA,YAAMuD,KAAK,6BAAG,IAAIC,uBAAJ,CAAgBT,QAAhB,CAAH,CAAX;AAtBkC;AAwBlCQ,QAAAA,KAAK,CACF/G,IADH,GAEGC,IAFH,CAEQ,UAAC8G,KAAD,EAAQrG,KAAR,EAAkB;AAAA;AAAA;;AACtB,cAAI,CAACqG,KAAL,EAAY;AAAA;AAAA;AACV5E,YAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADU;AAEV,mBAAOhB,GAAG,CAACsO,QAAJ,CAAa,eAAb,CAAP;AACD,WAHD;AAAA;AAAA;;AADsB;;AAMtBpN,gCAAUR,OAAV,CAAkB;AAAEU,YAAAA,KAAK,EAAE8F,QAAQ,CAAC9F;AAAlB,WAAlB,EAA6C,UAASxB,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC/D,gBAAI,CAACA,IAAL,EACE;AAAA;AAAA;AAAA,qBAAOX,GAAG,CACPiB,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEC,gBAAAA,GAAG,EAAE;AAAP,eAFD,CAAP;AAEmE,aAHrE;AAAA;AAAA;;AAIA,gBAAIiM,YAAY,6BAAG5C,MAAM,CAAChF,MAAD,CAAN,GAAiB,GAApB,CAAhB;AAL+D;AAM/DtG,YAAAA,IAAI,CAAC4E,OAAL,GAAe0G,MAAM,CAACtL,IAAI,CAAC4E,OAAN,CAAN,GAAuBsJ,YAAtC;AAN+D;AAO/DlO,YAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,kBAAIf,GAAJ,EAAS;AAAA;AAAA;AACP,uBAAOI,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,kBAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,iBAArB,CAAP;AACD,eAFD;AAAA;AAAA,eAD4B,CAI5B;AACA;;;AAL4B;AAM5Bf,cAAAA,GAAG,CAACsO,QAAJ,CAAa,qBAAqBjH,KAAK,CAAC9C,GAAxC;AACD,aAPD;AAQD,WAfD;AAgBD,SAxBH,WAyBS,UAAAuK,CAAC,EAAI;AAAA;AAAA;AACVrM,UAAAA,OAAO,CAACC,GAAR,CAAYoM,CAAZ;AADU;AAEV9O,UAAAA,GAAG,CAACsO,QAAJ,CAAa,eAAb;AACD,SA5BH;AA6BD,OArDY,CAAb;AAsDD;;;WAED,6BAA2BvP,OAA3B,EAAoCuC,QAApC,EAA8C;AAAA;;AAC5C;AAEA,6CASIvC,OAAO,CAACqB,IATZ;AAAA,UACEa,MADF,UACEA,MADF;AAAA,UAEE+F,SAFF,UAEEA,SAFF;AAAA,UAGEN,OAHF,UAGEA,OAHF;AAAA,UAIEqI,YAJF,UAIEA,YAJF;AAAA,UAKE9H,MALF,UAKEA,MALF;AAAA,UAME9G,QANF,UAMEA,QANF;AAAA,UAOEiB,KAPF,UAOEA,KAPF;AAAA,UAQE0C,YARF,UAQEA,YARF,CAH4C,CAc5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA,UAAMkI,YAAY,6BAAG,IAAIgD,yBAAJ,CAAiB;AACpCrL,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoBoL,yBAApB,EAAkCnL,OAAlC,EADgC;AAEpC5C,QAAAA,MAAM,EAAE,YAF4B;AAGpC+F,QAAAA,SAAS,EAATA,SAHoC;AAIpCN,QAAAA,OAAO,EAAPA,OAJoC;AAKpCqI,QAAAA,YAAY,EAAZA,YALoC;AAMpC9H,QAAAA,MAAM,EAANA,MANoC;AAOpC9G,QAAAA,QAAQ,EAARA,QAPoC;AAQpCiB,QAAAA,KAAK,EAALA,KARoC;AASpC0C,QAAAA,YAAY,EAAZA;AAToC,OAAjB,CAAH,CAAlB;AA3B4C;AAuC5CkI,MAAAA,YAAY,CAAC1L,IAAb,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,6BAAGmC,IAAH,CAAV;AACA,YAAMtC,MAAM;AACVwG,UAAAA,SAAS,EAATA,SADU;AAEVN,UAAAA,OAAO,EAAPA,OAFU;AAGVqI,UAAAA,YAAY,EAAZA,YAHU;AAIV9H,UAAAA,MAAM,EAANA,MAJU;AAKV9G,UAAAA,QAAQ,EAARA,QALU;AAMViB,UAAAA,KAAK,EAALA,KANU;AAOV0C,UAAAA,YAAY,EAAZA;AAPU,oBAQHnD,IAAI,CAACS,KARF,EAAZ;AAFY;AAcZ,eAAOE,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEtC,YAAAA,MAAM,EAANA;AADF,WADI,CAFyB;AAO/BO,UAAAA,OAAO,EAAE;AAPsB,SAA1B,CAAP;AASD,OAxBH,WAyBS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA/BH;AAgCD;;;WAED,yBAAuBhF,GAAvB,EAA4BC,GAA5B,EAAiC;AAAA;AAC/B,UAAM2D,EAAE,6BAAG,IAAImD,MAAJ,CAAW/G,GAAG,CAACsB,MAAJ,CAAWsC,EAAtB,CAAH,CAAR;AAD+B;;AAE/B2D,8BAAY2H,QAAZ,CAAqBtL,EAArB,EACGpD,IADH,CACQ,UAAC8G,KAAD,EAAQrG,KAAR,EAAkB;AAAA;AAAA;;AACtB,YAAI,CAACqG,KAAL,EAAY;AAAA;AAAA;AACV;AACA5E,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AAFU;AAGVhB,UAAAA,GAAG,CAACsO,QAAJ,CAAa,eAAb;AACD,SAJD;AAAA;AAAA,SADsB,CAOtB;;;AAPsB;AAQtB,eAAOtO,GAAG,CAAC+F,QAAJ,CAAaxG,iBAAKyG,IAAL,CAAU9D,SAAS,GAAG,wCAAtB,CAAb,CAAP;AACD,OAVH,WAWS,UAAA4M,CAAC,EAAI;AAAA;AAAA;AACVrM,QAAAA,OAAO,CAACC,GAAR,CAAYoM,CAAZ;AADU;AAEV9O,QAAAA,GAAG,CAACsO,QAAJ,CAAa,eAAb;AACD,OAdH;AAeD;;;WAED,yBAAuBvO,GAAvB,EAA4BC,GAA5B,EAAiC;AAAA;AAC/B,UAAM2D,EAAE,6BAAG,IAAImD,MAAJ,CAAW/G,GAAG,CAACsB,MAAJ,CAAWsC,EAAtB,CAAH,CAAR;AAD+B;;AAE/B2D,8BAAYI,IAAZ,CAAiB;AAAEtG,QAAAA,KAAK,EAAErB,GAAG,CAACsB,MAAJ,CAAWsC;AAApB,OAAjB,EACGpD,IADH,CACQ,UAAC8G,KAAD,EAAQrG,KAAR,EAAkB;AAAA;AAAA;;AACtB,YAAI,CAACqG,KAAL,EAAY;AAAA;AAAA;AACV;AACA5E,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AAFU;AAGVhB,UAAAA,GAAG,CAACsO,QAAJ,CAAa,eAAb;AACD,SAJD;AAAA;AAAA;;AAKA,YAAMY,KAAK,6BAAG7H,KAAH,CAAX;AANsB;AAOtB5E,QAAAA,OAAO,CAACC,GAAR,CAAYwM,KAAK,GAAG,cAApB;AAPsB;AAQtB,eAAOlP,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAC1BG,UAAAA,MAAM,EAAE,GADkB;AAE1B6B,UAAAA,IAAI,EAAE,CACJ;AACEoM,YAAAA,KAAK,EAALA,KADF;AAEEnO,YAAAA,OAAO,EAAE;AAFX,WADI;AAFoB,SAArB,CAAP;AASD,OAlBH,WAmBS,UAAA+N,CAAC,EAAI;AAAA;AAAA;AACVrM,QAAAA,OAAO,CAACC,GAAR,CAAYoM,CAAZ;AADU;AAEV9O,QAAAA,GAAG,CAACsO,QAAJ,CAAa,eAAb;AACD,OAtBH;AAuBD;;;WAED,0BAAwBvO,GAAxB,EAA6BC,GAA7B,EAAkC;AAAA;AAChC,UAAM2D,EAAE,6BAAG,IAAImD,MAAJ,CAAW/G,GAAG,CAACsB,MAAJ,CAAWsC,EAAtB,CAAH,CAAR;AADgC;;AAEhCqL,gCAAatH,IAAb,CAAkB;AAAEtG,QAAAA,KAAK,EAAErB,GAAG,CAACsB,MAAJ,CAAWsC;AAApB,OAAlB,EACGpD,IADH,CACQ,UAAC8G,KAAD,EAAQrG,KAAR,EAAkB;AAAA;AAAA;;AACtB,YAAI,CAACqG,KAAL,EAAY;AAAA;AAAA;AACV;AACA5E,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AAFU;AAGVhB,UAAAA,GAAG,CAACsO,QAAJ,CAAa,eAAb;AACD,SAJD;AAAA;AAAA;;AAKA,YAAMY,KAAK,6BAAG7H,KAAH,CAAX;AANsB;AAOtB5E,QAAAA,OAAO,CAACC,GAAR,CAAYwM,KAAK,GAAG,cAApB;AAPsB;AAQtB,eAAOlP,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAC1BG,UAAAA,MAAM,EAAE,GADkB;AAE1B6B,UAAAA,IAAI,EAAE,CACJ;AACEoM,YAAAA,KAAK,EAALA,KADF;AAEEnO,YAAAA,OAAO,EAAE;AAFX,WADI;AAFoB,SAArB,CAAP;AASD,OAlBH,WAmBS,UAAA+N,CAAC,EAAI;AAAA;AAAA;AACVrM,QAAAA,OAAO,CAACC,GAAR,CAAYoM,CAAZ;AADU;AAEV9O,QAAAA,GAAG,CAACsO,QAAJ,CAAa,eAAb;AACD,OAtBH;AAuBD;;;WAED,4BAA0BvO,GAA1B,EAA+BC,GAA/B,EAAoC;AAAA;AAClC,UAAM2D,EAAE,6BAAG,IAAImD,MAAJ,CAAW/G,GAAG,CAACsB,MAAJ,CAAWsC,EAAtB,CAAH,CAAR;AADkC;;AAElC6J,6BAAW9F,IAAX,CAAgB;AAAEtG,QAAAA,KAAK,EAAErB,GAAG,CAACsB,MAAJ,CAAWsC;AAApB,OAAhB,EACGpD,IADH,CACQ,UAAC8G,KAAD,EAAQrG,KAAR,EAAkB;AAAA;AAAA;;AACtB,YAAI,CAACqG,KAAL,EAAY;AAAA;AAAA;AACV;AACA5E,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AAFU;AAGVhB,UAAAA,GAAG,CAACsO,QAAJ,CAAajP,WAAW,GAAG,QAA3B;AACD,SAJD;AAAA;AAAA;;AAKA,YAAM6P,KAAK,6BAAG7H,KAAH,CAAX;AANsB;AAOtB5E,QAAAA,OAAO,CAACC,GAAR,CAAYwM,KAAK,GAAG,cAApB;AAPsB;AAQtB,eAAOlP,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAC1BG,UAAAA,MAAM,EAAE,GADkB;AAE1B6B,UAAAA,IAAI,EAAE,CACJ;AACEoM,YAAAA,KAAK,EAALA,KADF;AAEEnO,YAAAA,OAAO,EAAE;AAFX,WADI;AAFoB,SAArB,CAAP;AASD,OAlBH,WAmBS,UAAA+N,CAAC,EAAI;AAAA;AAAA;AACVrM,QAAAA,OAAO,CAACC,GAAR,CAAYoM,CAAZ;AADU;AAEV9O,QAAAA,GAAG,CAACsO,QAAJ,CAAajP,WAAW,GAAG,QAA3B;AACD,OAtBH;AAuBD;;;WAED,yBAAuBN,OAAvB,EAAgCuC,QAAhC,EAA0C;AAAA;AAAA;;AACxCkM,6BAAW9F,IAAX,CAAgB;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAhB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,6BAAGmC,IAAH,CAAV;AADY;;AAGZ,YAAInC,IAAI,CAACiH,MAAL,IAAe,CAAnB,EAAsB;AAAA;AAAA;AACpBnF,UAAAA,OAAO,CAACC,GAAR,CACE2I,IAAI,CAACC,SAAL,CAAe;AACbrK,YAAAA,MAAM,EAAE,GADK;AAEbD,YAAAA,KAAK,EAAE;AAFM,WAAf,CADF;AADoB;AAOpB,iBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SAXD;AAAA;AAAA;;AAHY;;AAgBZwM,+BAAWjC,MAAX,CAAkB;AAAEhH,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SAAlB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAM0I,WAAW,6BAAG1I,IAAH,CAAjB;AADY;AAEZxB,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExB6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAE6H,WAAW,CAACjH,GADlB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFkB,WAA1B;AASD,SAZH,WAaS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdyB,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SAnBH;AAoBD,OArCH,WAsCS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdyB,QAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA5CH;AA6CD;;;WAED,uBAAqBhG,OAArB,EAA8BuC,QAA9B,EAAwC;AAAA;AAAA;;AACtC0N,gCAAatH,IAAb,CAAkB;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAlB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,6BAAGmC,IAAH,CAAV;AADY;;AAGZ,YAAInC,IAAI,CAACiH,MAAL,IAAe,CAAnB,EAAsB;AAAA;AAAA;AACpBnF,UAAAA,OAAO,CAACC,GAAR,CACE2I,IAAI,CAACC,SAAL,CAAe;AACbrK,YAAAA,MAAM,EAAE,GADK;AAEbD,YAAAA,KAAK,EAAE;AAFM,WAAf,CADF;AADoB;AAOpB,iBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SAXD;AAAA;AAAA;;AAHY;;AAgBZgO,kCAAazD,MAAb,CAAoB;AAAEhH,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SAApB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAM0I,WAAW,6BAAG1I,IAAH,CAAjB;AADY;AAEZxB,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExB6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAE6H,WAAW,CAACjH,GADlB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFkB,WAA1B;AASD,SAZH,WAaS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdyB,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SAnBH;AAoBD,OArCH,WAsCS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdyB,QAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA5CH;AA6CD;;;WAED,sBAAoBhG,OAApB,EAA6BuC,QAA7B,EAAuC;AAAA;AAAA;;AACrCgG,8BAAYI,IAAZ,CAAiB;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAjB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,6BAAGmC,IAAH,CAAV;AADY;;AAGZ,YAAInC,IAAI,CAACiH,MAAL,IAAe,CAAnB,EAAsB;AAAA;AAAA;AACpBnF,UAAAA,OAAO,CAACC,GAAR,CACE2I,IAAI,CAACC,SAAL,CAAe;AACbrK,YAAAA,MAAM,EAAE,GADK;AAEbD,YAAAA,KAAK,EAAE;AAFM,WAAf,CADF;AADoB;AAOpB,iBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SAXD;AAAA;AAAA;;AAHY;;AAgBZsG,gCAAYiE,MAAZ,CAAmB;AAAEhH,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SAAnB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAM0I,WAAW,6BAAG1I,IAAH,CAAjB;AADY;AAEZxB,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExB6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAE6H,WAAW,CAACjH,GADlB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFkB,WAA1B;AASD,SAZH,WAaS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdyB,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SAnBH;AAoBD,OArCH,WAsCS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdyB,QAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA5CH;AA6CD;;;WAED,6BAA2BhG,OAA3B,EAAoCuC,QAApC,EAA8C;AAAA;AAC5C,UAAMqC,EAAE,6BAAG,IAAImD,MAAJ,CAAW/H,OAAO,CAACsC,MAAR,CAAesC,EAA1B,CAAH,CAAR;AAD4C;AAE5ClB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,EAAZ;AAF4C;;AAG5C0I,+BAAkB3E,IAAlB,CAAuB;AAAE+C,QAAAA,OAAO,EAAE1L,OAAO,CAACsC,MAAR,CAAesC,EAA1B;AAA8BwL,QAAAA,SAAS,EAAE;AAAzC,OAAvB,EACG5O,IADH,CACQ,UAAC8G,KAAD,EAAQrG,KAAR,EAAkB;AAAA;AAAA;;AACtB,YAAI,CAACqG,KAAL,EAAY;AAAA;AAAA;AACV;AACA5E,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AACD,SAHD;AAAA;AAAA;;AAIA,YAAMkO,KAAK,6BAAG7H,KAAH,CAAX;AALsB;AAMtB5E,QAAAA,OAAO,CAACC,GAAR,CAAYwM,KAAK,GAAG,cAApB;AANsB;AAOtB,eAAO5N,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEoM,YAAAA,KAAK,EAALA,KADF;AAEEnO,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OAjBH,WAkBS,UAAA+N,CAAC,EAAI;AAAA;AAAA;AACVrM,QAAAA,OAAO,CAACC,GAAR,CAAYoM,CAAZ;AADU;AAEV9O,QAAAA,GAAG,CAACsO,QAAJ,CAAajP,WAAW,GAAG,QAA3B;AACD,OArBH;AAsBD;;;WAED,0BAAwBN,OAAxB,EAAiCuC,QAAjC,EAA2C;AAAA;;AACzC;AACA,6CAAqCvC,OAAO,CAACqB,IAA7C;AAAA,UAAMqK,OAAN,UAAMA,OAAN;AAAA,UAAe3E,IAAf,UAAeA,IAAf;AAAA,UAAqBsJ,WAArB,UAAqBA,WAArB;;AACA,UAAID,SAAS,6BAAG,IAAH,CAAb;AAHyC;;AAKzC,UAAIpQ,OAAO,CAACqB,IAAR,CAAa+O,SAAjB,EAA4B;AAAA;AAAA;AAC1BA,QAAAA,SAAS,GAAG,KAAZ;AACD,OAFD;AAAA;AAAA;;AAIA,UAAME,oBAAoB,6BAAG,IAAIhD,wBAAJ,CAAsB;AACjD1I,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoByI,wBAApB,EAAuCxI,OAAvC,EAD6C;AAEjD4G,QAAAA,OAAO,EAAPA,OAFiD;AAGjD3E,QAAAA,IAAI,EAAJA,IAHiD;AAIjDsJ,QAAAA,WAAW,EAAXA,WAJiD;AAKjDD,QAAAA,SAAS,EAATA,SALiD,CAOjD;;AAPiD,OAAtB,CAAH,CAA1B;AATyC;AAmBzCE,MAAAA,oBAAoB,CAAC/O,IAArB,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,6BAAGmC,IAAH,CAAV;AADY;AAGZ,eAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEnC,YAAAA,IAAI,EAAJA,IADF;AAEEI,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP,CAHY,CAaZ;AACA;AACA;AACA;AACD,OAlBH,WAmBS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OAzBH;AA0BD;;;WAED,4BAA0BhG,OAA1B,EAAmCuC,QAAnC,EAA6C;AAAA;AAC3C,UAAIgO,GAAG,6BAAG,IAAIvI,IAAJ,EAAH,CAAP;AACA,UAAIwI,YAAY,6BAAG,IAAIxI,IAAJ,CAASuI,GAAG,CAACE,WAAJ,EAAT,EAA4BF,GAAG,CAACG,QAAJ,EAA5B,EAA4CH,GAAG,CAACI,OAAJ,EAA5C,CAAH,CAAhB,CAF2C,CAI3C;;AAJ2C;;AAK3CrD,+BAAkB3E,IAAlB,CAAuB;AAAEyH,QAAAA,SAAS,EAAE;AAAb,OAAvB,EAA4C,IAA5C,EAAkD;AAAEQ,QAAAA,IAAI,EAAE;AAAEC,UAAAA,KAAK,EAAE,CAAC;AAAV;AAAR,OAAlD,EACGrP,IADH,CACQ,UAAC8G,KAAD,EAAQrG,KAAR,EAAkB;AAAA;AAAA;;AACtB,YAAI,CAACqG,KAAL,EAAY;AAAA;AAAA;AACV;AACA5E,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AACD,SAHD;AAAA;AAAA;;AAIA,YAAM6O,eAAe,6BAAGxI,KAAH,CAArB,CALsB,CAMtB;;AANsB;AAOtB,eAAO/F,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE+M,YAAAA,eAAe,EAAfA,eADF;AAEE9O,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OAjBH,WAkBS,UAAA+N,CAAC,EAAI;AAAA;AAAA;AACVrM,QAAAA,OAAO,CAACC,GAAR,CAAYoM,CAAZ;AADU;AAEV9O,QAAAA,GAAG,CAACsO,QAAJ,CAAajP,WAAW,GAAG,QAA3B;AACD,OArBH;AAsBD;;;WAsDD;AAEA,4BAAsBN,OAAtB,EAA+BuC,QAA/B,EAAyC;AAAA;AAAE;;;WAE3C,qBAAmBvC,OAAnB,EAA4BuC,QAA5B,EAAsC;AAAA;AAAA;;AACpCJ,4BAAUwG,IAAV,CAAe;AAAE3D,QAAAA,QAAQ,EAAE,KAAZ;AAAmB0B,QAAAA,KAAK,EAAE;AAA1B,OAAf,EACGlF,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMkH,KAAK,6BAAGlH,IAAH,CAAX;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAYsH,KAAZ,EAAmB,0BAAnB;AAFY;;AAGZ,YAAIA,KAAK,CAACpC,MAAN,KAAiB,CAArB,EAAwB;AAAA;AAAA;AACtB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAG/B6B,YAAAA,IAAI,EAAE,CACJ;AACEkH,cAAAA,KAAK,EAAE,EADT;AAGEjJ,cAAAA,OAAO,EAAE;AAHX,aADI;AAHyB,WAA1B,CAAP;AAWD,SAZD;AAAA;AAAA;;AAHY;AAgBZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEkH,YAAAA,KAAK,EAALA,KADF;AAGEjJ,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OA3BH,WA4BS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAhCN;AAkCD;;;WAED,oBAAkBhG,OAAlB,EAA2BuC,QAA3B,EAAqC;AAAA;AAAA;;AACnCJ,4BAAUwG,IAAV,CAAe;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAf,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,6BAAGmC,IAAH,CAAV;AADY;;AAGZ,YAAInC,IAAI,CAACiH,MAAL,IAAe,CAAnB,EAAsB;AAAA;AAAA;AACpBnF,UAAAA,OAAO,CAACC,GAAR,CACE2I,IAAI,CAACC,SAAL,CAAe;AACbrK,YAAAA,MAAM,EAAE,GADK;AAEbD,YAAAA,KAAK,EAAE;AAFM,WAAf,CADF;AADoB;AAOpB,iBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SAXD;AAAA;AAAA;;AAHY;;AAgBZE,8BAAUqK,MAAV,CAAiB;AAAEhH,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SAAjB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAM0I,WAAW,6BAAG1I,IAAH,CAAjB;AADY;AAEZxB,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExB6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAE6H,WAAW,CAACjH,GADlB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFkB,WAA1B;AASD,SAZH,WAaS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdyB,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SAnBH;AAoBD,OArCH,WAsCS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdyB,QAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA5CH;AA6CD;;;WAED,uBAAqBhG,OAArB,EAA8BuC,QAA9B,EAAwC;AAAA;AACtC,UAAIwO,gBAAJ;;AACA,6CAaI/Q,OAAO,CAACqB,IAbZ;AAAA,UACE+C,SADF,UACEA,SADF;AAAA,UAEEC,QAFF,UAEEA,QAFF;AAAA,UAGEjD,QAHF,UAGEA,QAHF;AAAA,UAIEiB,KAJF,UAIEA,KAJF;AAAA,UAKED,QALF,UAKEA,QALF;AAAA,UAME4O,eANF,UAMEA,eANF;AAAA,UAOE1M,WAPF,UAOEA,WAPF;AAAA,UAQE+B,MARF,UAQEA,MARF;AAAA,UASEmF,WATF,UASEA,WATF;AAAA,UAUEjH,SAVF,UAUEA,SAVF;AAAA,UAWErC,MAXF,UAWEA,MAXF;AAAA,UAYE+O,WAZF,UAYEA,WAZF;;AAFsC;;AAiBtC,UAAIA,WAAW,IAAI,OAAnB,EAA4B;AAAA;AAAA;AAC1BF,QAAAA,gBAAgB,GAAG,KAAnB;AACD,OAFD,MAEO;AAAA;AAAA;AACLA,QAAAA,gBAAgB,GAAG,IAAnB;AACD;;AArBqC;AAuBtC3O,MAAAA,QAAQ,GAAGoC,gCAAeC,YAAf,CAA4BrC,QAAQ,CAACsC,IAAT,EAA5B,CAAX;AAEA,UAAMC,OAAO,6BAAG,IAAIxC,qBAAJ,CAAc;AAC5ByC,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoB1C,qBAApB,EAA+B2C,OAA/B,EADwB;AAE5BV,QAAAA,SAAS,EAATA,SAF4B;AAG5BC,QAAAA,QAAQ,EAARA,QAH4B;AAI5BjD,QAAAA,QAAQ,EAARA,QAJ4B;AAK5BiB,QAAAA,KAAK,EAALA,KAL4B;AAM5BD,QAAAA,QAAQ,EAARA,QAN4B;AAQ5B2C,QAAAA,YAAY,EAAET,WARc;AAS5B+B,QAAAA,MAAM,EAAEA,MAToB;AAU5BmF,QAAAA,WAAW,EAAXA,WAV4B;AAW5BjH,QAAAA,SAAS,EAATA,SAX4B;AAY5BrC,QAAAA,MAAM,EAAE,QAZoB;AAa5B8C,QAAAA,QAAQ,EAAE,KAbkB;AAc5BiB,QAAAA,UAAU,EAAE8K;AAdgB,OAAd,CAAH,CAAb;AAzBsC;AA0CtCpM,MAAAA,OAAO,CAACpD,IAAR,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,6BAAGmC,IAAH,CAAV;AACA,YAAMtC,MAAM,6BAAG;AACbmD,UAAAA,EAAE,EAAEhD,IAAI,CAACgD,EADI;AAEbvC,UAAAA,KAAK,EAAET,IAAI,CAACS,KAFC;AAGbjB,UAAAA,QAAQ,EAAEQ,IAAI,CAACR;AAHF,SAAH,CAAZ;AAMA,YAAMwE,KAAK,6BAAGpB,gCAAeqB,aAAf,CAA6BpE,MAA7B,CAAH,CAAX;AARY;AASZ,eAAOc,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE6B,YAAAA,KAAK,EAALA,KADF;AAEEhE,YAAAA,IAAI,EAAJA;AAFF,WADI,CAFyB;AAQ/BI,UAAAA,OAAO,EAAE;AARsB,SAA1B,CAAP;AAUD,OApBH,WAqBS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA3BH;AA4BD;;;WAED,2BAAyBhG,OAAzB,EAAkCuC,QAAlC,EAA4C;AAAA;AAC1C,UAAIwO,gBAAJ;;AACA,6CAYI/Q,OAAO,CAACqB,IAZZ;AAAA,UACE+C,SADF,UACEA,SADF;AAAA,UAEEC,QAFF,UAEEA,QAFF;AAAA,UAGEjD,QAHF,UAGEA,QAHF;AAAA,UAIEgB,QAJF,UAIEA,QAJF;AAAA,UAKEkC,WALF,UAKEA,WALF;AAAA,UAMEkH,WANF,UAMEA,WANF;AAAA,UAOEjH,SAPF,UAOEA,SAPF;AAAA,UAQElC,KARF,UAQEA,KARF;AAAA,UASEH,MATF,UASEA,MATF;AAAA,UAUEmE,MAVF,UAUEA,MAVF;AAAA,UAWE4K,WAXF,UAWEA,WAXF;;AAF0C;AAgB1CvN,MAAAA,OAAO,CAACC,GAAR,CAAYsN,WAAW,GAAG,wBAA1B;AAhB0C;;AAkB1C,UAAIA,WAAW,IAAI,OAAnB,EAA4B;AAAA;AAAA;AAC1BF,QAAAA,gBAAgB,GAAG,KAAnB;AACD,OAFD,MAEO;AAAA;AAAA;;AAAA,YAAIE,WAAW,IAAI,MAAnB,EAA2B;AAAA;AAAA;AAChCF,UAAAA,gBAAgB,GAAG,IAAnB;AACD,SAFM;AAAA;AAAA;AAEN;;AAtByC;;AAwB1C,UAAI,CAAC3O,QAAQ,CAACyG,MAAd,EAAsB;AAAA;AAAA;AACpBnF,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AADoB;AAEpB,eAAO1C,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,UAAAA,GAAG,EAAE;AAAP,SAArB,CAAP;AACD,OAHD;AAAA;AAAA;;AAxB0C;;AA6B1C1B,4BAAUR,OAAV,CAAkB;AAAE6D,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAlB,EAA8C,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAChE,YAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA;;AADgE;;AAIhE,YAAIzB,QAAQ,IAAI,WAAhB,EAA6B;AAAA;AAAA;AAC3BR,UAAAA,IAAI,CAACQ,QAAL,GAAgBR,IAAI,CAACQ,QAArB;AAD2B;AAE3BsB,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAS/B,IAAI,CAACQ,QAA1B;AACD,SAHD,MAGO;AAAA;AAAA;AACLR,UAAAA,IAAI,CAACQ,QAAL,GAAgBoC,gCAAeC,YAAf,CAA4BrC,QAAQ,CAACsC,IAAT,EAA5B,CAAhB;AADK;AAELhB,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAe/B,IAAI,CAACQ,QAAhC;AACD,SAV+D,CAYhE;;;AAZgE;AAchER,QAAAA,IAAI,CAACR,QAAL,GAAgB,6BAAAA,QAAQ,kCAAIQ,IAAI,CAACR,QAAT,CAAxB;AAdgE;AAehEQ,QAAAA,IAAI,CAACS,KAAL,GAAa,6BAAAA,KAAK,kCAAIT,IAAI,CAACS,KAAT,CAAlB;AAfgE;AAgBhET,QAAAA,IAAI,CAACM,MAAL,GAAc,6BAAAA,MAAM,kCAAIN,IAAI,CAACM,MAAT,CAApB;AAhBgE;AAiBhEN,QAAAA,IAAI,CAACyE,MAAL,GAAc,6BAAAA,MAAM,kCAAIzE,IAAI,CAACyE,MAAT,CAApB;AAjBgE;AAkBhEzE,QAAAA,IAAI,CAAC2C,SAAL,GAAiB,6BAAAA,SAAS,kCAAI3C,IAAI,CAAC2C,SAAT,CAA1B;AAlBgE;AAmBhE3C,QAAAA,IAAI,CAACwC,SAAL,GAAiB,6BAAAA,SAAS,kCAAIxC,IAAI,CAACwC,SAAT,CAA1B;AAnBgE;AAoBhExC,QAAAA,IAAI,CAACyC,QAAL,GAAgB,6BAAAA,QAAQ,kCAAIzC,IAAI,CAACyC,QAAT,CAAxB;AApBgE;AAqBhEzC,QAAAA,IAAI,CAACmD,YAAL,GAAoB,6BAAAT,WAAW,kCAAI1C,IAAI,CAACmD,YAAT,CAA/B;AArBgE;AAsBhEnD,QAAAA,IAAI,CAAC+E,gBAAL,GAAwB,6BAAA6E,WAAW,kCAAI5J,IAAI,CAAC+E,gBAAT,CAAnC,CAtBgE,CAuBhE;;AAvBgE;AAwBhE/E,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,YAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAHD;AAAA;AAAA;;AAD4B;AAK5B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB,EAL4B,CAM5B;;AAN4B;AAO5B,iBAAOW,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,YAAAA,OAAO,EAAE,IAAX;AAAiBD,YAAAA,GAAG,EAAE;AAAtB,WAFD,CAAP;AAGD,SAVD;AAWD,OAnCD;AAoCD;;;WAED,uCAAqC7D,OAArC,EAA8CuC,QAA9C,EAAwD;AAAA;;AACtD,6CAAuBvC,OAAO,CAACqB,IAA/B;AAAA,UAAQ4E,UAAR,UAAQA,UAAR;;AADsD;;AAGtD9D,4BAAUR,OAAV,CAAkB;AAAE6D,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAlB,EAA8C,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAChE,YAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA;;AADgE;AAIhEjC,QAAAA,IAAI,CAACqE,UAAL,GAAkB,6BAAAA,UAAU,kCAAIrE,IAAI,CAACqE,UAAT,CAA5B;AAJgE;AAKhErE,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,YAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAHD;AAAA;AAAA;;AAD4B;AAK5B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB,EAL4B,CAM5B;;AAN4B;AAO5B,iBAAOW,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,YAAAA,OAAO,EAAE,IAAX;AAAiBD,YAAAA,GAAG,EAAE;AAAtB,WAFD,CAAP;AAGD,SAVD;AAWD,OAhBD;AAiBD;;;WAED,sBAAoB7D,OAApB,EAA6BuC,QAA7B,EAAuC;AAAA;AAAA;;AACrCJ,4BAAUwG,IAAV,CAAe;AAAE3D,QAAAA,QAAQ,EAAE;AAAZ,OAAf,EACGxD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMmN,MAAM,6BAAGnN,IAAH,CAAZ;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAYuN,MAAM,GAAG,8BAArB;AAFY;;AAGZ,YAAIA,MAAM,CAACrI,MAAP,KAAkB,CAAtB,EAAyB;AAAA;AAAA;AACvB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEmN,cAAAA,MAAM,EAAE,EADV;AAGElP,cAAAA,OAAO,EAAE;AAHX,aADI;AAFyB,WAA1B,CAAP;AAUD,SAXD;AAAA;AAAA;;AAHY;AAeZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEmN,YAAAA,MAAM,EAANA,MADF;AAGElP,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OA1BH,WA2BS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdM,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OAhCH;AAiCD;;;WAED,qBAAmBhG,OAAnB,EAA4BuC,QAA5B,EAAsC;AAAA;AAAA;;AACpCJ,4BAAUwG,IAAV,CAAe;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAf,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,6BAAGmC,IAAH,CAAV;AADY;;AAGZ,YAAInC,IAAI,CAACiH,MAAL,IAAe,CAAnB,EAAsB;AAAA;AAAA;AACpBnF,UAAAA,OAAO,CAACC,GAAR,CACE2I,IAAI,CAACC,SAAL,CAAe;AACbrK,YAAAA,MAAM,EAAE,GADK;AAEbD,YAAAA,KAAK,EAAE;AAFM,WAAf,CADF;AADoB;AAOpB,iBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SAXD;AAAA;AAAA;;AAHY;;AAgBZE,8BAAUqK,MAAV,CAAiB;AAAEhH,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SAAjB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAM0I,WAAW,6BAAG1I,IAAH,CAAjB;AADY;AAEZxB,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExB6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAE6H,WAAW,CAACjH,GADlB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFkB,WAA1B;AASD,SAZH,WAaS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdyB,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SAnBH;AAoBD,OArCH,WAsCS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdyB,QAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA5CH;AA6CD;;;WAED,wBAAsBhG,OAAtB,EAA+BuC,QAA/B,EAAyC;AAAA;AACvC,UAAIwO,gBAAJ;;AACA,6CAaI/Q,OAAO,CAACqB,IAbZ;AAAA,UACE+C,SADF,UACEA,SADF;AAAA,UAEEC,QAFF,UAEEA,QAFF;AAAA,UAGEjD,QAHF,UAGEA,QAHF;AAAA,UAIEiB,KAJF,UAIEA,KAJF;AAAA,UAKED,QALF,UAKEA,QALF;AAAA,UAME4O,eANF,UAMEA,eANF;AAAA,UAOE1M,WAPF,UAOEA,WAPF;AAAA,UAQE+B,MARF,UAQEA,MARF;AAAA,UAUE9B,SAVF,UAUEA,SAVF;AAAA,UAWErC,MAXF,UAWEA,MAXF;AAAA,UAYE+O,WAZF,UAYEA,WAZF;;AAFuC;;AAiBvC,UAAIA,WAAW,IAAI,OAAnB,EAA4B;AAAA;AAAA;AAC1BF,QAAAA,gBAAgB,GAAG,KAAnB;AACD,OAFD,MAEO;AAAA;AAAA;AACLA,QAAAA,gBAAgB,GAAG,IAAnB;AACD;;AArBsC;AAuBvC3O,MAAAA,QAAQ,GAAGoC,gCAAeC,YAAf,CAA4BrC,QAAQ,CAACsC,IAAT,EAA5B,CAAX;AAvBuC;;AAyBvCoE,sCAAyBnH,OAAzB,CAAiC;AAAEoH,QAAAA,UAAU,EAAE,IAAd;AAAoBoI,QAAAA,aAAa,EAAE5M;AAAnC,OAAjC,EAAiF,UAC/E1D,GAD+E,EAE/E6F,KAF+E,EAG/E;AAAA;AAAA;;AACA,YAAI,CAACA,KAAL,EAAY;AAAA;AAAA;AACV,iBAAOnE,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA;;AADA;AAIAH,QAAAA,OAAO,CAACC,GAAR,CAAY+C,KAAZ;AAEA,YAAM/B,OAAO,6BAAG,IAAIxC,qBAAJ,CAAc;AAC5ByC,UAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoB1C,qBAApB,EAA+B2C,OAA/B,EADwB;AAE5BV,UAAAA,SAAS,EAATA,SAF4B;AAG5BC,UAAAA,QAAQ,EAARA,QAH4B;AAI5BjD,UAAAA,QAAQ,EAARA,QAJ4B;AAK5BiB,UAAAA,KAAK,EAALA,KAL4B;AAM5BD,UAAAA,QAAQ,EAARA,QAN4B;AAQ5B2C,UAAAA,YAAY,EAAET,WARc;AAS5B+B,UAAAA,MAAM,EAAEA,MAToB;AAU5B;AACAK,UAAAA,KAAK,EAAEnC,SAXqB;AAY5BrC,UAAAA,MAAM,EAAE,QAZoB;AAa5B8C,UAAAA,QAAQ,EAAE,IAbkB;AAc5BiB,UAAAA,UAAU,EAAE8K,gBAdgB;AAe5B9H,UAAAA,aAAa,EAAEvC,KAAK,CAACuC,aAfO;AAgB5BC,UAAAA,eAAe,EAAExC,KAAK,CAACwC,eAhBK;AAiB5BC,UAAAA,iBAAiB,EAAEzC,KAAK,CAACyC,iBAjBG;AAkB5BC,UAAAA,aAAa,EAAE1C,KAAK,CAAC0C,aAlBO;AAmB5BC,UAAAA,YAAY,EAAE3C,KAAK,CAAC2C,YAnBQ;AAoB5BC,UAAAA,QAAQ,EAAE5C,KAAK,CAAC4C,QApBY;AAqB5BC,UAAAA,aAAa,EAAE7C,KAAK,CAAC6C,aArBO;AAsB5BC,UAAAA,YAAY,EAAE9C,KAAK,CAAC8C,YAtBQ;AAuB5BC,UAAAA,SAAS,EAAE/C,KAAK,CAAC+C,SAvBW;AAwB5BC,UAAAA,YAAY,EAAEhD,KAAK,CAACgD,YAxBQ;AAyB5BC,UAAAA,SAAS,EAAEjD,KAAK,CAACiD,SAzBW;AA0B5BC,UAAAA,UAAU,EAAElD,KAAK,CAACkD,UA1BU;AA2B5BC,UAAAA,WAAW,EAAEnD,KAAK,CAACmD,WA3BS;AA4B5BC,UAAAA,aAAa,EAAEpD,KAAK,CAACoD,aA5BO;AA6B5BC,UAAAA,eAAe,EAAErD,KAAK,CAACqD,eA7BK;AA8B5BC,UAAAA,iBAAiB,EAAEtD,KAAK,CAACsD,iBA9BG;AA+B5BC,UAAAA,mBAAmB,EAAEvD,KAAK,CAACuD,mBA/BC;AAgC5BC,UAAAA,eAAe,EAAExD,KAAK,CAACwD,eAhCK;AAiC5BC,UAAAA,cAAc,EAAEzD,KAAK,CAACyD,cAjCM;AAkC5BC,UAAAA,UAAU,EAAE1D,KAAK,CAAC0D,UAlCU;AAmC5BC,UAAAA,eAAe,EAAE3D,KAAK,CAAC2D,eAnCK;AAoC5BC,UAAAA,cAAc,EAAE5D,KAAK,CAAC4D,cApCM;AAqC5BC,UAAAA,WAAW,EAAE7D,KAAK,CAAC6D,WArCS;AAsC5BC,UAAAA,cAAc,EAAE9D,KAAK,CAAC8D,cAtCM;AAuC5BC,UAAAA,WAAW,EAAE/D,KAAK,CAAC+D,WAvCS;AAwC5BC,UAAAA,YAAY,EAAEhE,KAAK,CAACgE,YAxCQ;AAyC5BC,UAAAA,aAAa,EAAEjE,KAAK,CAACiE,aAzCO;AA0C5BC,UAAAA,eAAe,EAAElE,KAAK,CAACkE,eA1CK;AA4C5BE,UAAAA,eAAe,EAAEpE,KAAK,CAACoE,eA5CK;AA6C5BC,UAAAA,iBAAiB,EAAErE,KAAK,CAACqE,iBA7CG;AA8C5BF,UAAAA,mBAAmB,EAAEnE,KAAK,CAACmE,mBA9CC;AA+C5BG,UAAAA,qBAAqB,EAAEtE,KAAK,CAACsE;AA/CD,SAAd,CAAH,CAAb;AANA;AAwDArG,QAAAA,OAAO,CAACpD,IAAR,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAMnC,IAAI,6BAAGmC,IAAH,CAAV;AAEA,cAAMtC,MAAM,6BAAG;AACbmD,YAAAA,EAAE,EAAEhD,IAAI,CAACgD,EADI;AAEbvC,YAAAA,KAAK,EAAET,IAAI,CAACS,KAFC;AAGbjB,YAAAA,QAAQ,EAAEQ,IAAI,CAACR;AAHF,WAAH,CAAZ;AAMA,cAAMwE,KAAK,6BAAGpB,gCAAeqB,aAAf,CAA6BpE,MAA7B,CAAH,CAAX;AATY;AAUZiC,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAZ;AAVY;AAWZ,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACE6B,cAAAA,KAAK,EAALA,KADF;AAEEhE,cAAAA,IAAI,EAAJA;AAFF,aADI,CAFyB;AAQ/BI,YAAAA,OAAO,EAAE;AARsB,WAA1B,CAAP;AAUD,SAtBH,WAuBS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,UAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SA7BH;AA8BD,OAzFD;AA0FD;;;WAED,4BAA0BhG,OAA1B,EAAmCuC,QAAnC,EAA6C;AAAA;AAC3C,UAAIwO,gBAAJ;;AAEA,6CAYI/Q,OAAO,CAACqB,IAZZ;AAAA,UACE+C,SADF,UACEA,SADF;AAAA,UAEEC,QAFF,UAEEA,QAFF;AAAA,UAGEjD,QAHF,UAGEA,QAHF;AAAA,UAIEgB,QAJF,UAIEA,QAJF;AAAA,UAKEkC,WALF,UAKEA,WALF;AAAA,UAME+B,MANF,UAMEA,MANF;AAAA,UAOEmF,WAPF,UAOEA,WAPF;AAAA,UAQEjH,SARF,UAQEA,SARF;AAAA,UASElC,KATF,UASEA,KATF;AAAA,UAUEH,MAVF,UAUEA,MAVF;AAAA,UAWE+O,WAXF,UAWEA,WAXF;;AAH2C;;AAiB3C,UAAIA,WAAW,IAAI,OAAnB,EAA4B;AAAA;AAAA;AAC1BF,QAAAA,gBAAgB,GAAG,KAAnB;AACD,OAFD,MAEO;AAAA;AAAA;AACLA,QAAAA,gBAAgB,GAAG,IAAnB;AACD;;AArB0C;;AAuB3C,UAAI,CAAC3O,QAAQ,CAACyG,MAAd,EAAsB;AAAA;AAAA;AACpBnF,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AADoB;AAEpB,eAAO1C,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,UAAAA,GAAG,EAAE;AAAP,SAArB,CAAP;AACD,OAHD;AAAA;AAAA;;AAvB2C;;AA4B3CiF,sCAAyBnH,OAAzB,CAAiC;AAAEoH,QAAAA,UAAU,EAAE,IAAd;AAAoBoI,QAAAA,aAAa,EAAE5M;AAAnC,OAAjC,EAAiF,UAC/E1D,GAD+E,EAE/E6F,KAF+E,EAG/E;AAAA;AAAA;;AACA,YAAI,CAACA,KAAL,EAAY;AAAA;AAAA;AACV,iBAAOnE,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA;;AADA;AAIAH,QAAAA,OAAO,CAACC,GAAR,CAAY+C,KAAZ;AAJA;;AAMAvE,8BAAUR,OAAV,CAAkB;AAAE6D,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SAAlB,EAA8C,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAChE,cAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT,mBAAOW,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEC,cAAAA,GAAG,EAAE;AAAP,aAFD,CAAP;AAGD,WAJD;AAAA;AAAA;;AADgE;;AAMhE,cAAIzB,QAAQ,IAAI,WAAhB,EAA6B;AAAA;AAAA;AAC3BR,YAAAA,IAAI,CAACQ,QAAL,GAAgBR,IAAI,CAACQ,QAArB;AAD2B;AAE3BsB,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAS/B,IAAI,CAACQ,QAA1B;AACD,WAHD,MAGO;AAAA;AAAA;AACLR,YAAAA,IAAI,CAACQ,QAAL,GAAgBoC,gCAAeC,YAAf,CAA4BrC,QAAQ,CAACsC,IAAT,EAA5B,CAAhB;AADK;AAELhB,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAe/B,IAAI,CAACQ,QAAhC;AACD,WAZ+D,CAchE;;;AAdgE;AAgBhER,UAAAA,IAAI,CAACR,QAAL,GAAgB,6BAAAA,QAAQ,kCAAIQ,IAAI,CAACR,QAAT,CAAxB;AAhBgE;AAiBhEQ,UAAAA,IAAI,CAACS,KAAL,GAAa,6BAAAA,KAAK,kCAAIT,IAAI,CAACS,KAAT,CAAlB;AAjBgE;AAkBhET,UAAAA,IAAI,CAACM,MAAL,GAAc,6BAAAA,MAAM,kCAAIN,IAAI,CAACM,MAAT,CAApB;AAlBgE;AAmBhEN,UAAAA,IAAI,CAACyE,MAAL,GAAc,6BAAAA,MAAM,kCAAIzE,IAAI,CAACyE,MAAT,CAApB;AAnBgE;AAoBhEzE,UAAAA,IAAI,CAAC8E,KAAL,GAAa,6BAAAnC,SAAS,kCAAI3C,IAAI,CAAC2C,SAAT,CAAtB;AApBgE;AAqBhE3C,UAAAA,IAAI,CAACwC,SAAL,GAAiB,6BAAAA,SAAS,kCAAIxC,IAAI,CAACwC,SAAT,CAA1B;AArBgE;AAsBhExC,UAAAA,IAAI,CAACyC,QAAL,GAAgB,6BAAAA,QAAQ,kCAAIzC,IAAI,CAACyC,QAAT,CAAxB;AAtBgE;AAuBhEzC,UAAAA,IAAI,CAACmD,YAAL,GAAoB,6BAAAT,WAAW,kCAAI1C,IAAI,CAACmD,YAAT,CAA/B;AAvBgE;AAwBhEnD,UAAAA,IAAI,CAAC+E,gBAAL,GAAwB,6BAAA6E,WAAW,kCAAI5J,IAAI,CAAC+E,gBAAT,CAAnC,CAxBgE,CAyBhE;;AAzBgE;AA2BhE/E,UAAAA,IAAI,CAACqH,aAAL,GAAqBvC,KAAK,CAACuC,aAA3B;AA3BgE;AA4BhErH,UAAAA,IAAI,CAACsH,eAAL,GAAuBxC,KAAK,CAACwC,eAA7B;AA5BgE;AA6BhEtH,UAAAA,IAAI,CAACuH,iBAAL,GAAyBzC,KAAK,CAACyC,iBAA/B;AA7BgE;AA8BhEvH,UAAAA,IAAI,CAACwH,aAAL,GAAqB1C,KAAK,CAAC0C,aAA3B;AA9BgE;AA+BhExH,UAAAA,IAAI,CAACyH,YAAL,GAAoB3C,KAAK,CAAC2C,YAA1B;AA/BgE;AAgChEzH,UAAAA,IAAI,CAAC0H,QAAL,GAAgB5C,KAAK,CAAC4C,QAAtB;AAhCgE;AAiChE1H,UAAAA,IAAI,CAAC2H,aAAL,GAAqB7C,KAAK,CAAC6C,aAA3B;AAjCgE;AAkChE3H,UAAAA,IAAI,CAAC4H,YAAL,GAAoB9C,KAAK,CAAC8C,YAA1B;AAlCgE;AAmChE5H,UAAAA,IAAI,CAAC6H,SAAL,GAAiB/C,KAAK,CAAC+C,SAAvB;AAnCgE;AAoChE7H,UAAAA,IAAI,CAAC8H,YAAL,GAAoBhD,KAAK,CAACgD,YAA1B;AApCgE;AAqChE9H,UAAAA,IAAI,CAAC+H,SAAL,GAAiBjD,KAAK,CAACiD,SAAvB;AArCgE;AAsChE/H,UAAAA,IAAI,CAACgI,UAAL,GAAkBlD,KAAK,CAACkD,UAAxB;AAtCgE;AAuChEhI,UAAAA,IAAI,CAACiI,WAAL,GAAmBnD,KAAK,CAACmD,WAAzB;AAvCgE;AAwChEjI,UAAAA,IAAI,CAACkI,aAAL,GAAqBpD,KAAK,CAACoD,aAA3B;AAxCgE;AA0ChElI,UAAAA,IAAI,CAACmI,eAAL,GAAuBrD,KAAK,CAACqD,eAA7B;AA1CgE;AA2ChEnI,UAAAA,IAAI,CAACoI,iBAAL,GAAyBtD,KAAK,CAACsD,iBAA/B;AA3CgE;AA4ChEpI,UAAAA,IAAI,CAACqI,mBAAL,GAA2BvD,KAAK,CAACuD,mBAAjC;AA5CgE;AA6ChErI,UAAAA,IAAI,CAACsI,eAAL,GAAuBxD,KAAK,CAACwD,eAA7B;AA7CgE;AA8ChEtI,UAAAA,IAAI,CAACuI,cAAL,GAAsBzD,KAAK,CAACyD,cAA5B;AA9CgE;AA+ChEvI,UAAAA,IAAI,CAACwI,UAAL,GAAkB1D,KAAK,CAAC0D,UAAxB;AA/CgE;AAgDhExI,UAAAA,IAAI,CAACyI,eAAL,GAAuB3D,KAAK,CAAC2D,eAA7B;AAhDgE;AAiDhEzI,UAAAA,IAAI,CAAC0I,cAAL,GAAsB5D,KAAK,CAAC4D,cAA5B;AAjDgE;AAkDhE1I,UAAAA,IAAI,CAAC2I,WAAL,GAAmB7D,KAAK,CAAC6D,WAAzB;AAlDgE;AAmDhE3I,UAAAA,IAAI,CAAC4I,cAAL,GAAsB9D,KAAK,CAAC8D,cAA5B;AAnDgE;AAoDhE5I,UAAAA,IAAI,CAAC6I,WAAL,GAAmB/D,KAAK,CAAC+D,WAAzB;AApDgE;AAqDhE7I,UAAAA,IAAI,CAAC8I,YAAL,GAAoBhE,KAAK,CAACgE,YAA1B;AArDgE;AAsDhE9I,UAAAA,IAAI,CAAC+I,aAAL,GAAqBjE,KAAK,CAACiE,aAA3B;AAtDgE;AAuDhE/I,UAAAA,IAAI,CAACgJ,eAAL,GAAuBlE,KAAK,CAACkE,eAA7B;AAvDgE;AAyDhEhJ,UAAAA,IAAI,CAACkJ,eAAL,GAAuBpE,KAAK,CAACoE,eAA7B;AAzDgE;AA0DhElJ,UAAAA,IAAI,CAACmJ,iBAAL,GAAyBrE,KAAK,CAACqE,iBAA/B;AA1DgE;AA2DhEnJ,UAAAA,IAAI,CAACiJ,mBAAL,GAA2BnE,KAAK,CAACmE,mBAAjC;AA3DgE;AA4DhEjJ,UAAAA,IAAI,CAACoJ,qBAAL,GAA6BtE,KAAK,CAACsE,qBAAnC;AA5DgE;AA8DhEpJ,UAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,gBAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,cAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,qBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,gBAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,eAA1B,CAAP;AACD,aAHD;AAAA;AAAA;;AAD4B;AAK5B0B,YAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB,EAL4B,CAM5B;;AAN4B;AAO5B,mBAAOW,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,cAAAA,OAAO,EAAE,IAAX;AAAiBD,cAAAA,GAAG,EAAE;AAAtB,aAFD,CAAP;AAGD,WAVD;AAWD,SAzED;AA0ED,OAnFD;AAoFD;;;WAED,wCAAsC7D,OAAtC,EAA+CuC,QAA/C,EAAyD;AAAA;;AACvD,6CAAuBvC,OAAO,CAACqB,IAA/B;AAAA,UAAQ4E,UAAR,UAAQA,UAAR;;AADuD;;AAGvD9D,4BAAUR,OAAV,CAAkB;AAAE6D,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAlB,EAA8C,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAChE,YAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA;;AADgE;AAIhEjC,QAAAA,IAAI,CAACqE,UAAL,GAAkB,6BAAAA,UAAU,kCAAIrE,IAAI,CAACqE,UAAT,CAA5B;AAJgE;AAKhErE,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,YAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAHD;AAAA;AAAA;;AAD4B;AAK5B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB,EAL4B,CAM5B;;AAN4B;AAO5B,iBAAOW,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,YAAAA,OAAO,EAAE,IAAX;AAAiBD,YAAAA,GAAG,EAAE;AAAtB,WAFD,CAAP;AAGD,SAVD;AAWD,OAhBD;AAiBD;;;WAED,uBAAqB7D,OAArB,EAA8BuC,QAA9B,EAAwC;AAAA;AAAA;;AACtCJ,4BAAUwG,IAAV,CAAe;AAAEyI,QAAAA,SAAS,EAAE,IAAb;AAAmB1K,QAAAA,KAAK,EAAE;AAA1B,OAAf,EACGlF,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMsN,OAAO,6BAAGtN,IAAH,CAAb;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAY0N,OAAZ,EAAqB,kBAArB;AAFY;;AAGZ,YAAIA,OAAO,CAACxI,MAAR,KAAmB,CAAvB,EAA0B;AAAA;AAAA;AACxB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEsN,cAAAA,OAAO,EAAE,EADX;AAGErP,cAAAA,OAAO,EAAE;AAHX,aADI;AAFyB,WAA1B,CAAP;AAUD,SAXD;AAAA;AAAA;;AAHY;AAeZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEsN,YAAAA,OAAO,EAAPA,OADF;AAGErP,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OA1BH,WA2BS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdM,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OAhCH;AAiCD;;;WAED,sBAAoBhG,OAApB,EAA6BuC,QAA7B,EAAuC;AAAA;AAAA;;AACrCJ,4BAAUwG,IAAV,CAAe;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC,EAAtB;AAA0B8B,QAAAA,KAAK,EAAE;AAAjC,OAAf,EACGlF,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,6BAAGmC,IAAH,CAAV;AADY;;AAGZ,YAAInC,IAAI,CAACiH,MAAL,IAAe,CAAnB,EAAsB;AAAA;AAAA;AACpBnF,UAAAA,OAAO,CAACC,GAAR,CACE2I,IAAI,CAACC,SAAL,CAAe;AACbrK,YAAAA,MAAM,EAAE,GADK;AAEbD,YAAAA,KAAK,EAAE;AAFM,WAAf,CADF;AADoB;AAOpB,iBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SAXD;AAAA;AAAA;;AAHY;;AAgBZE,8BAAUqK,MAAV,CAAiB;AAAEhH,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SAAjB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAM0I,WAAW,6BAAG1I,IAAH,CAAjB;AADY;AAEZxB,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExB6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAE6H,WAAW,CAACjH,GADlB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFkB,WAA1B;AASD,SAZH,WAaS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdyB,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SAnBH;AAoBD,OArCH,WAsCS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdyB,QAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA5CH;AA6CD;;;WAED,yBAAuBhG,OAAvB,EAAgCuC,QAAhC,EAA0C;AAAA;AACxC,UAAIwO,gBAAJ;;AAEA,6CAaI/Q,OAAO,CAACqB,IAbZ;AAAA,UACE+C,SADF,UACEA,SADF;AAAA,UAEEC,QAFF,UAEEA,QAFF;AAAA,UAGEjD,QAHF,UAGEA,QAHF;AAAA,UAIEiB,KAJF,UAIEA,KAJF;AAAA,UAKED,QALF,UAKEA,QALF;AAAA,UAME4O,eANF,UAMEA,eANF;AAAA,UAOE1M,WAPF,UAOEA,WAPF;AAAA,UAQE+B,MARF,UAQEA,MARF;AAAA,UASEmF,WATF,UASEA,WATF;AAAA,UAUEjH,SAVF,UAUEA,SAVF;AAAA,UAWErC,MAXF,UAWEA,MAXF;AAAA,UAYE+O,WAZF,UAYEA,WAZF;;AAHwC;;AAkBxC,UAAIA,WAAW,IAAI,OAAnB,EAA4B;AAAA;AAAA;AAC1BF,QAAAA,gBAAgB,GAAG,KAAnB;AACD,OAFD,MAEO;AAAA;AAAA;AACLA,QAAAA,gBAAgB,GAAG,IAAnB;AACD;;AAtBuC;AAwBxC3O,MAAAA,QAAQ,GAAGoC,gCAAeC,YAAf,CAA4BrC,QAAQ,CAACsC,IAAT,EAA5B,CAAX;AAEA,UAAMC,OAAO,6BAAG,IAAIxC,qBAAJ,CAAc;AAC5ByC,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoB1C,qBAApB,EAA+B2C,OAA/B,EADwB;AAE5BV,QAAAA,SAAS,EAATA,SAF4B;AAG5BC,QAAAA,QAAQ,EAARA,QAH4B;AAI5BjD,QAAAA,QAAQ,EAARA,QAJ4B;AAK5BiB,QAAAA,KAAK,EAALA,KAL4B;AAM5BD,QAAAA,QAAQ,EAARA,QAN4B;AAQ5B2C,QAAAA,YAAY,EAAET,WARc;AAS5B+B,QAAAA,MAAM,EAANA,MAT4B;AAU5BM,QAAAA,gBAAgB,EAAE6E,WAVU;AAY5BtJ,QAAAA,MAAM,EAAE,QAZoB;AAa5B8C,QAAAA,QAAQ,EAAE,KAbkB;AAc5BiB,QAAAA,UAAU,EAAE8K,gBAdgB;AAe5BrK,QAAAA,KAAK,EAAE;AAfqB,OAAd,CAAH,CAAb;AA1BwC;AA4CxC/B,MAAAA,OAAO,CAACpD,IAAR,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,6BAAGmC,IAAH,CAAV;AACA,YAAMtC,MAAM,6BAAG;AACbmD,UAAAA,EAAE,EAAEhD,IAAI,CAACgD,EADI;AAEbvC,UAAAA,KAAK,EAAET,IAAI,CAACS,KAFC;AAGbjB,UAAAA,QAAQ,EAAEQ,IAAI,CAACR;AAHF,SAAH,CAAZ;AAMA,YAAMwE,KAAK,6BAAGpB,gCAAeqB,aAAf,CAA6BpE,MAA7B,CAAH,CAAX;AARY;AASZ,eAAOc,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE6B,YAAAA,KAAK,EAALA,KADF;AAEEhE,YAAAA,IAAI,EAAJA;AAFF,WADI,CAFyB;AAQ/BI,UAAAA,OAAO,EAAE;AARsB,SAA1B,CAAP;AAUD,OApBH,WAqBS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA3BH;AA4BD;;;WAED,6BAA2BhG,OAA3B,EAAoCuC,QAApC,EAA8C;AAAA;AAC5C,UAAIwO,gBAAJ;;AAEA,6CAYI/Q,OAAO,CAACqB,IAZZ;AAAA,UACE+C,SADF,UACEA,SADF;AAAA,UAEEC,QAFF,UAEEA,QAFF;AAAA,UAGEjD,QAHF,UAGEA,QAHF;AAAA,UAIEgB,QAJF,UAIEA,QAJF;AAAA,UAKEkC,WALF,UAKEA,WALF;AAAA,UAME+B,MANF,UAMEA,MANF;AAAA,UAOEmF,WAPF,UAOEA,WAPF;AAAA,UAQEjH,SARF,UAQEA,SARF;AAAA,UASElC,KATF,UASEA,KATF;AAAA,UAUEH,MAVF,UAUEA,MAVF;AAAA,UAWE+O,WAXF,UAWEA,WAXF;;AAH4C;;AAiB5C,UAAIA,WAAW,IAAI,OAAnB,EAA4B;AAAA;AAAA;AAC1BF,QAAAA,gBAAgB,GAAG,KAAnB;AACD,OAFD,MAEO;AAAA;AAAA;AACLA,QAAAA,gBAAgB,GAAG,IAAnB;AACD;;AArB2C;;AAuB5C,UAAI,CAAC3O,QAAQ,CAACyG,MAAd,EAAsB;AAAA;AAAA;AACpBnF,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AADoB;AAEpB,eAAO1C,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,UAAAA,GAAG,EAAE;AAAP,SAArB,CAAP;AACD,OAHD;AAAA;AAAA;;AAvB4C;;AA4B5C1B,4BAAUR,OAAV,CAAkB;AAAE6D,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC,EAAtB;AAA0B8B,QAAAA,KAAK,EAAE;AAAjC,OAAlB,EAA0E,UAAS7F,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5F,YAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA;;AAD4F;;AAI5F,YAAIzB,QAAQ,IAAI,WAAhB,EAA6B;AAAA;AAAA;AAC3BR,UAAAA,IAAI,CAACQ,QAAL,GAAgBR,IAAI,CAACQ,QAArB;AAD2B;AAE3BsB,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAS/B,IAAI,CAACQ,QAA1B;AACD,SAHD,MAGO;AAAA;AAAA;AACLR,UAAAA,IAAI,CAACQ,QAAL,GAAgBoC,gCAAeC,YAAf,CAA4BrC,QAAQ,CAACsC,IAAT,EAA5B,CAAhB;AADK;AAELhB,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAe/B,IAAI,CAACQ,QAAhC;AACD,SAV2F,CAY5F;;;AAZ4F;AAc5FR,QAAAA,IAAI,CAACR,QAAL,GAAgB,6BAAAA,QAAQ,kCAAIQ,IAAI,CAACR,QAAT,CAAxB;AAd4F;AAe5FQ,QAAAA,IAAI,CAACS,KAAL,GAAa,6BAAAA,KAAK,kCAAIT,IAAI,CAACS,KAAT,CAAlB;AAf4F;AAgB5FT,QAAAA,IAAI,CAACM,MAAL,GAAc,6BAAAA,MAAM,kCAAIN,IAAI,CAACM,MAAT,CAApB;AAhB4F;AAiB5FN,QAAAA,IAAI,CAACyE,MAAL,GAAc,6BAAAA,MAAM,kCAAIzE,IAAI,CAACyE,MAAT,CAApB;AAjB4F;AAkB5FzE,QAAAA,IAAI,CAAC8E,KAAL,GAAa,6BAAAnC,SAAS,kCAAI3C,IAAI,CAAC2C,SAAT,CAAtB;AAlB4F;AAmB5F3C,QAAAA,IAAI,CAACwC,SAAL,GAAiB,6BAAAA,SAAS,kCAAIxC,IAAI,CAACwC,SAAT,CAA1B;AAnB4F;AAoB5FxC,QAAAA,IAAI,CAACyC,QAAL,GAAgB,6BAAAA,QAAQ,kCAAIzC,IAAI,CAACyC,QAAT,CAAxB;AApB4F;AAqB5FzC,QAAAA,IAAI,CAACmD,YAAL,GAAoB,6BAAAT,WAAW,kCAAI1C,IAAI,CAACmD,YAAT,CAA/B;AArB4F;AAsB5FnD,QAAAA,IAAI,CAAC+E,gBAAL,GAAwB,6BAAA6E,WAAW,kCAAI5J,IAAI,CAAC+E,gBAAT,CAAnC,CAtB4F,CAuB5F;;AAvB4F;AAwB5F/E,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,YAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAHD;AAAA;AAAA;;AAD4B;AAK5B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB,EAL4B,CAM5B;;AAN4B;AAO5B,iBAAOW,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,YAAAA,OAAO,EAAE,IAAX;AAAiBD,YAAAA,GAAG,EAAE;AAAtB,WAFD,CAAP;AAGD,SAVD;AAWD,OAnCD;AAoCD;;;WAED,yCAAuC7D,OAAvC,EAAgDuC,QAAhD,EAA0D;AAAA;;AACxD,8CAAuBvC,OAAO,CAACqB,IAA/B;AAAA,UAAQ4E,UAAR,UAAQA,UAAR;;AADwD;;AAGxD9D,4BAAUR,OAAV,CAAkB;AAAE6D,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAlB,EAA8C,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAChE,YAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA;;AADgE;AAIhEjC,QAAAA,IAAI,CAACqE,UAAL,GAAkB,6BAAAA,UAAU,kCAAIrE,IAAI,CAACqE,UAAT,CAA5B;AAJgE;AAKhErE,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,YAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAHD;AAAA;AAAA;;AAD4B;AAK5B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB,EAL4B,CAM5B;;AAN4B;AAO5B,iBAAOW,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,YAAAA,OAAO,EAAE,IAAX;AAAiBD,YAAAA,GAAG,EAAE;AAAtB,WAFD,CAAP;AAGD,SAVD;AAWD,OAhBD;AAiBD;;;WAED,wBAAsB7D,OAAtB,EAA+BuC,QAA/B,EAAyC;AAAA;AAAA;;AACvC+O,iCAAc3I,IAAd,GACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMwN,QAAQ,8BAAGxN,IAAH,CAAd;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAY4N,QAAQ,GAAG,oBAAvB;AAFY;;AAGZ,YAAIA,QAAQ,CAAC1I,MAAT,KAAoB,CAAxB,EAA2B;AAAA;AAAA;AACzB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEwN,cAAAA,QAAQ,EAAE,EADZ;AAGEvP,cAAAA,OAAO,EAAE;AAHX,aADI;AAFyB,WAA1B,CAAP;AAUD,SAXD;AAAA;AAAA;;AAHY;AAeZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEwN,YAAAA,QAAQ,EAARA,QADF;AAGEvP,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OA1BH,WA2BS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OA/BN;AAiCD;;;WAED,uBAAqBhG,OAArB,EAA8BuC,QAA9B,EAAwC;AAAA;AAAA;;AACtC+O,iCAAc3I,IAAd,CAAmB;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAnB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,8BAAGmC,IAAH,CAAV;AADY;;AAGZ,YAAInC,IAAI,CAACiH,MAAL,IAAe,CAAnB,EAAsB;AAAA;AAAA;AACpBnF,UAAAA,OAAO,CAACC,GAAR,CACE2I,IAAI,CAACC,SAAL,CAAe;AACbrK,YAAAA,MAAM,EAAE,GADK;AAEbD,YAAAA,KAAK,EAAE;AAFM,WAAf,CADF;AADoB;AAOpB,iBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SAXD;AAAA;AAAA;;AAHY;;AAgBZqP,mCAAc9E,MAAd,CAAqB;AAAEhH,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SAArB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAM0I,WAAW,8BAAG1I,IAAH,CAAjB;AADY;AAEZxB,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExB6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAE6H,WAAW,CAACjH,GADlB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFkB,WAA1B;AASD,SAZH,WAaS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdyB,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SAnBH;AAoBD,OArCH,WAsCS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdyB,QAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA5CH;AA6CD;;;WAED,0BAAwBhG,OAAxB,EAAiCuC,QAAjC,EAA2C;AAAA;;AAAA;AACzC,UAAIwO,gBAAJ;AACA,UAAI7N,OAAO,8BAAG,EAAH,CAAX;AAFyC;;AAGzC,UAAIlD,OAAO,CAACqB,IAAR,CAAa6B,OAAjB,EAA0B;AAAA;AAAA;AACxBA,QAAAA,OAAO,GAAGlD,OAAO,CAACqB,IAAR,CAAa6B,OAAvB;AACD,OAFD;AAAA;AAAA;;AAGA,8CAkBIlD,OAAO,CAACqB,IAlBZ;AAAA,UACE+C,SADF,UACEA,SADF;AAAA,UAEEC,QAFF,UAEEA,QAFF;AAAA,UAGEjD,QAHF,UAGEA,QAHF;AAAA,UAIEiB,KAJF,UAIEA,KAJF;AAAA,UAMED,QANF,UAMEA,QANF;AAAA,UAQEkC,WARF,UAQEA,WARF;AAAA,UASE+B,MATF,UASEA,MATF;AAAA,UAUEmF,WAVF,UAUEA,WAVF;AAAA,UAWEjH,SAXF,UAWEA,SAXF;AAAA,UAYErC,MAZF,UAYEA,MAZF;AAAA,UAaE+O,WAbF,UAaEA,WAbF;AAAA,UAcEO,SAdF,UAcEA,SAdF;AAAA,UAeEC,WAfF,UAeEA,WAfF;AAAA,UAgBEC,eAhBF,UAgBEA,eAhBF;AAAA,UAiBEC,iBAjBF,UAiBEA,iBAjBF;;AANyC;;AA0BzC,UAAIV,WAAW,IAAI,OAAnB,EAA4B;AAAA;AAAA;AAC1BF,QAAAA,gBAAgB,GAAG,KAAnB;AACD,OAFD,MAEO;AAAA;AAAA;AACLA,QAAAA,gBAAgB,GAAG,IAAnB;AACD;;AA9BwC;AAgCzC3O,MAAAA,QAAQ,GAAGoC,gCAAeC,YAAf,CAA4BrC,QAAQ,CAACsC,IAAT,EAA5B,CAAX;AAEA,UAAMC,OAAO,8BAAG,IAAI2M,0BAAJ;AACd1M,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoByM,0BAApB,EAAmCxM,OAAnC,EADU;AAEd8M,QAAAA,SAAS,EAAExN,SAFG;AAGdyN,QAAAA,QAAQ,EAAExN,QAHI;AAIdyN,QAAAA,QAAQ,EAAE1Q,QAJI;AAKd6B,QAAAA,IAAI,EAAEmB,SAAS,GAAG,GAAZ,GAAkBC,QALV;AAMdhC,QAAAA,KAAK,EAALA,KANc;AAOdD,QAAAA,QAAQ,EAARA,QAPc;AAQdc,QAAAA,OAAO,EAAEA,OARK;AASdsO,QAAAA,SAAS,EAATA,SATc;AAWdlN,QAAAA,WAAW,EAAEA,WAXC;AAYd4C,QAAAA,KAAK,EAAE5C,WAZO;AAad+B,QAAAA,MAAM,EAANA,MAbc;AAcd0L,QAAAA,YAAY,EAAEvG,WAdA;AAed9E,QAAAA,KAAK,EAAEnC,SAfO;AAgBdrC,QAAAA,MAAM,EAAEA,MAhBM;AAiBd+D,QAAAA,UAAU,EAAE8K;AAjBE,uEAkBdS,SAlBc,mEAoBdC,WApBc,uEAqBdC,eArBc,yEAsBdC,iBAtBc,mBAAH,CAAb;AAlCyC;AA2DzChN,MAAAA,OAAO,CAACpD,IAAR,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,8BAAGmC,IAAH,CAAV;AACA,YAAMtC,MAAM,8BAAG;AACbmD,UAAAA,EAAE,EAAEhD,IAAI,CAACgD,EADI;AAEbvC,UAAAA,KAAK,EAAET,IAAI,CAACS,KAFC;AAGbjB,UAAAA,QAAQ,EAAEQ,IAAI,CAACR;AAHF,SAAH,CAAZ;AAMA,YAAMwE,KAAK,8BAAGpB,gCAAeqB,aAAf,CAA6BpE,MAA7B,CAAH,CAAX;AARY;AASZ,eAAOc,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE6B,YAAAA,KAAK,EAALA,KADF;AAEEhE,YAAAA,IAAI,EAAJA;AAFF,WADI,CAFyB;AAQ/BI,UAAAA,OAAO,EAAE;AARsB,SAA1B,CAAP;AAUD,OApBH,WAqBS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA3BH;AA4BD;;;WAED,8BAA4BhG,OAA5B,EAAqCuC,QAArC,EAA+C;AAAA;AAC7C,UAAIwO,gBAAJ;;AACA,8CAkBI/Q,OAAO,CAACqB,IAlBZ;AAAA,UACE+C,SADF,UACEA,SADF;AAAA,UAEEC,QAFF,UAEEA,QAFF;AAAA,UAGEjD,QAHF,UAGEA,QAHF;AAAA,UAIEgB,QAJF,UAIEA,QAJF;AAAA,UAKEoP,SALF,UAKEA,SALF;AAAA,UAMElN,WANF,UAMEA,WANF;AAAA,UAOE+B,MAPF,UAOEA,MAPF;AAAA,UAQEmF,WARF,UAQEA,WARF;AAAA,UASEjH,SATF,UASEA,SATF;AAAA,UAUElC,KAVF,UAUEA,KAVF;AAAA,UAWEa,OAXF,UAWEA,OAXF;AAAA,UAYEhB,MAZF,UAYEA,MAZF;AAAA,UAaE+O,WAbF,UAaEA,WAbF;AAAA,UAeEQ,WAfF,UAeEA,WAfF;AAAA,UAgBEC,eAhBF,UAgBEA,eAhBF;AAAA,UAiBEC,iBAjBF,UAiBEA,iBAjBF;;AAF6C;;AAsB7C,UAAIV,WAAW,IAAI,OAAnB,EAA4B;AAAA;AAAA;AAC1BF,QAAAA,gBAAgB,GAAG,KAAnB;AACD,OAFD,MAEO;AAAA;AAAA;AACLA,QAAAA,gBAAgB,GAAG,IAAnB;AACD;;AA1B4C;;AA4B7C,UAAI,CAAC3O,QAAL,EAAe;AAAA;AAAA;AACbsB,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AADa;AAEb,eAAO1C,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,UAAAA,GAAG,EAAE;AAAP,SAArB,CAAP;AACD,OAHD;AAAA;AAAA;;AA5B6C;;AAiC7CyN,iCAAc3P,OAAd,CAAsB;AAAE6D,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAtB,EAAkD,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AACpE,YAAIf,GAAJ,EAAS;AAAA;AAAA;AACP,iBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA;;AADoE;;AAKpE,YAAI,CAACjC,IAAL,EAAW;AAAA;AAAA;AACT,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA;;AALoE;;AASpE,YAAIzB,QAAQ,KAAK,WAAjB,EAA8B;AAAA;AAAA;AAC5BR,UAAAA,IAAI,CAACQ,QAAL,GAAgBR,IAAI,CAACQ,QAArB;AAD4B;AAE5BsB,UAAAA,OAAO,CAACC,GAAR,CAAY,SAASvB,QAAT,GAAoB,IAApB,GAA2BR,IAAI,CAACQ,QAA5C;AACD,SAHD,MAGO;AAAA;AAAA;AACLR,UAAAA,IAAI,CAACQ,QAAL,GAAgBoC,gCAAeC,YAAf,CAA4BrC,QAAQ,CAACsC,IAAT,EAA5B,CAAhB;AADK;AAELhB,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAevB,QAAf,GAA0B,IAA1B,GAAiCR,IAAI,CAACQ,QAAlD;AACD,SAfmE,CAiBpE;;;AAjBoE;AAkBpER,QAAAA,IAAI,CAACyE,MAAL,GAAc,6BAAAA,MAAM,kCAAIzE,IAAI,CAACyE,MAAT,CAApB;AAlBoE;AAmBpEzE,QAAAA,IAAI,CAACkQ,QAAL,GAAgB,6BAAA1Q,QAAQ,kCAAIQ,IAAI,CAACkQ,QAAT,CAAxB;AAnBoE;AAoBpElQ,QAAAA,IAAI,CAACS,KAAL,GAAa,6BAAAA,KAAK,kCAAIT,IAAI,CAACS,KAAT,CAAlB;AApBoE;AAqBpET,QAAAA,IAAI,CAACmQ,YAAL,GAAoB,6BAAAvG,WAAW,kCAAI5J,IAAI,CAACmQ,YAAT,CAA/B;AArBoE;AAsBpEnQ,QAAAA,IAAI,CAAC8E,KAAL,GAAa,6BAAAnC,SAAS,kCAAI3C,IAAI,CAAC8E,KAAT,CAAtB;AAtBoE;AAuBpE9E,QAAAA,IAAI,CAACgQ,SAAL,GAAiB,6BAAAxN,SAAS,kCAAIxC,IAAI,CAACgQ,SAAT,CAA1B;AAvBoE;AAwBpEhQ,QAAAA,IAAI,CAACiQ,QAAL,GAAgB,6BAAAxN,QAAQ,kCAAIzC,IAAI,CAACiQ,QAAT,CAAxB;AAxBoE;AAyBpEjQ,QAAAA,IAAI,CAAC0C,WAAL,GAAmB,6BAAAA,WAAW,kCAAI1C,IAAI,CAAC0C,WAAT,CAA9B;AAzBoE;AA0BpE1C,QAAAA,IAAI,CAACM,MAAL,GAAc,6BAAAA,MAAM,kCAAIN,IAAI,CAACM,MAAT,CAApB;AA1BoE;AA2BpEN,QAAAA,IAAI,CAACsB,OAAL,GAAe,6BAAAA,OAAO,kCAAItB,IAAI,CAACsB,OAAT,CAAtB;AA3BoE;AA4BpEtB,QAAAA,IAAI,CAAC4P,SAAL,GAAiB,6BAAAA,SAAS,kCAAI5P,IAAI,CAAC4P,SAAT,CAA1B;AA5BoE;AA6BpE5P,QAAAA,IAAI,CAAC6P,WAAL,GAAmB,6BAAAA,WAAW,kCAAI7P,IAAI,CAAC6P,WAAT,CAA9B;AA7BoE;AA8BpE7P,QAAAA,IAAI,CAAC8P,eAAL,GAAuB,6BAAAA,eAAe,kCAAI9P,IAAI,CAAC8P,eAAT,CAAtC;AA9BoE;AA+BpE9P,QAAAA,IAAI,CAAC+P,iBAAL,GAAyB,6BAAAA,iBAAiB,kCAAI/P,IAAI,CAAC+P,iBAAT,CAA1C,CA/BoE,CAgCpE;;AAhCoE;AAiCpE/P,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAFD;AAAA;AAAA;;AAD4B;AAI5B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB,EAJ4B,CAK5B;;AAL4B;AAM5B,iBAAOW,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,YAAAA,OAAO,EAAE,IAAX;AAAiBD,YAAAA,GAAG,EAAE;AAAtB,WAFD,CAAP;AAGD,SATD;AAUD,OA3CD;AA4CD;;;WAED,0CAAwC7D,OAAxC,EAAiDuC,QAAjD,EAA2D;AAAA;;AACzD,8CAAuBvC,OAAO,CAACqB,IAA/B;AAAA,UAAQ4E,UAAR,UAAQA,UAAR;;AADyD;;AAGzDqL,iCAAc3P,OAAd,CAAsB;AAAE6D,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAtB,EAAkD,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AACpE,YAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA;;AADoE;AAIpEjC,QAAAA,IAAI,CAACqE,UAAL,GAAkB,6BAAAA,UAAU,kCAAIrE,IAAI,CAACqE,UAAT,CAA5B;AAJoE;AAKpErE,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,YAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAHD;AAAA;AAAA;;AAD4B;AAK5B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB,EAL4B,CAM5B;;AAN4B;AAO5B,iBAAOW,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,YAAAA,OAAO,EAAE,IAAX;AAAiBD,YAAAA,GAAG,EAAE;AAAtB,WAFD,CAAP;AAGD,SAVD;AAWD,OAhBD;AAiBD,K,CAED;;;;WACA,gCAA8B7D,OAA9B,EAAuCuC,QAAvC,EAAiD;AAAA;AAAA;;AAC/CyP,gCAAcrJ,IAAd,GACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMkO,QAAQ,8BAAGlO,IAAH,CAAd,CADY,CAEZ;;AAFY;;AAGZ,YAAIkO,QAAQ,CAACpJ,MAAT,KAAoB,CAAxB,EAA2B;AAAA;AAAA;AACzB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEkO,cAAAA,QAAQ,EAAE,EADZ;AAGEjQ,cAAAA,OAAO,EAAE;AAHX,aADI;AAFyB,WAA1B,CAAP;AAUD,SAXD;AAAA;AAAA;;AAHY;AAeZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEkO,YAAAA,QAAQ,EAARA,QADF;AAGEjQ,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OA1BH,WA2BS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OA/BN;AAiCD;;;WAED,gCAA8BhG,OAA9B,EAAuCuC,QAAvC,EAAiD;AAAA;AAAA;;AAC/CyP,gCAAcrJ,IAAd,CAAmB;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAnB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,8BAAGmC,IAAH,CAAV;AADY;;AAGZ,YAAInC,IAAI,CAACiH,MAAL,IAAe,CAAnB,EAAsB;AAAA;AAAA;AACpBnF,UAAAA,OAAO,CAACC,GAAR,CACE2I,IAAI,CAACC,SAAL,CAAe;AACbrK,YAAAA,MAAM,EAAE,GADK;AAEbD,YAAAA,KAAK,EAAE;AAFM,WAAf,CADF;AADoB;AAOpB,iBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SAXD;AAAA;AAAA;;AAHY;;AAgBZ+P,kCAAcxF,MAAd,CAAqB;AAAEhH,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SAArB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAM0I,WAAW,8BAAG1I,IAAH,CAAjB;AADY;AAEZxB,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExB6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAE6H,WAAW,CAACjH,GADlB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFkB,WAA1B;AASD,SAZH,WAaS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdyB,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SAnBH;AAoBD,OArCH,WAsCS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdyB,QAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA5CH;AA6CD;;;WAED,mCAAiChG,OAAjC,EAA0CuC,QAA1C,EAAoD;AAAA;;AAClD,8CAWIvC,OAAO,CAACqB,IAXZ;AAAA,UACE6Q,WADF,UACEA,WADF;AAAA,UAEEC,aAFF,UAEEA,aAFF;AAAA,UAGEC,aAHF,UAGEA,aAHF;AAAA,UAIEC,gBAJF,UAIEA,gBAJF;AAAA,UAKEC,SALF,UAKEA,SALF;AAAA,UAMEC,YANF,UAMEA,YANF;AAAA,UAOEC,kBAPF,UAOEA,kBAPF;AAAA,UAQEC,SARF,UAQEA,SARF;AAAA,UASEC,WATF,UASEA,WATF;AAAA,UAUEC,cAVF,UAUEA,cAVF;;AAaA,UAAIC,GAAG,8BAAGN,SAAH,CAAP;AAEA,UAAM3N,OAAO,8BAAG,IAAIqN,yBAAJ,CAAkB;AAChCpN,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoBmN,yBAApB,EAAmClN,OAAnC,EAD4B;AAGhCoN,QAAAA,WAAW,EAAXA,WAHgC;AAIhCC,QAAAA,aAAa,EAAbA,aAJgC;AAKhCC,QAAAA,aAAa,EAAbA,aALgC;AAMhCC,QAAAA,gBAAgB,EAAhBA,gBANgC;AAOhCC,QAAAA,SAAS,EAATA,SAPgC;AAQhCC,QAAAA,YAAY,EAAZA,YARgC;AAShCC,QAAAA,kBAAkB,EAAlBA,kBATgC;AAUhCC,QAAAA,SAAS,EAATA,SAVgC;AAWhCC,QAAAA,WAAW,EAAXA,WAXgC;AAYhCC,QAAAA,cAAc,EAAdA,cAZgC;AAahCE,QAAAA,OAAO,EAAED;AAbuB,OAAlB,CAAH,CAAb;AAhBkD;AAgClDjO,MAAAA,OAAO,CAACpD,IAAR,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,8BAAGmC,IAAH,CAAV;AACA,YAAMtC,MAAM,8BAAG;AACbmD,UAAAA,EAAE,EAAEhD,IAAI,CAACgD,EADI;AAEbvC,UAAAA,KAAK,EAAET,IAAI,CAACS,KAFC;AAGbjB,UAAAA,QAAQ,EAAEQ,IAAI,CAACR;AAHF,SAAH,CAAZ;AAFY;AAQZ,eAAOmB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEnC,YAAAA,IAAI,EAAJA;AADF,WADI,CAFyB;AAO/BI,UAAAA,OAAO,EAAE;AAPsB,SAA1B,CAAP;AASD,OAlBH,WAmBS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OAzBH;AA0BD;;;WAED,sCAAoChG,OAApC,EAA6CuC,QAA7C,EAAuD;AAAA;;AACrD,8CAYIvC,OAAO,CAACqB,IAZZ;AAAA,UACE0F,IADF,UACEA,IADF;AAAA,UAEEmL,WAFF,UAEEA,WAFF;AAAA,UAGEC,aAHF,UAGEA,aAHF;AAAA,UAIEC,aAJF,UAIEA,aAJF;AAAA,UAKEC,gBALF,UAKEA,gBALF;AAAA,UAMEC,SANF,UAMEA,SANF;AAAA,UAOEC,YAPF,UAOEA,YAPF;AAAA,UAQEC,kBARF,UAQEA,kBARF;AAAA,UASEC,SATF,UASEA,SATF;AAAA,UAUEC,WAVF,UAUEA,WAVF;AAAA,UAWEC,cAXF,UAWEA,cAXF;;AAcA,UAAIC,GAAG,8BAAGN,SAAH,CAAP;AAfqD;;AAiBrDN,gCAAcrQ,OAAd,CAAsB;AAAE6D,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAtB,EAAkD,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AACpE,YAAIf,GAAJ,EAAS;AAAA;AAAA;AACP,iBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA;;AADoE;;AAKpE,YAAI,CAACjC,IAAL,EAAW;AAAA;AAAA;AACT,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA,SALoE,CASpE;;;AAToE;AAUpEjC,QAAAA,IAAI,CAACmF,IAAL,GAAY,6BAAAA,IAAI,kCAAInF,IAAI,CAACmF,IAAT,CAAhB;AAVoE;AAWpEnF,QAAAA,IAAI,CAACsQ,WAAL,GAAmB,6BAAAA,WAAW,kCAAItQ,IAAI,CAACsQ,WAAT,CAA9B;AAXoE;AAYpEtQ,QAAAA,IAAI,CAACkR,aAAL,GAAqB,6BAAAX,aAAa,kCAAIvQ,IAAI,CAACuQ,aAAT,CAAlC;AAZoE;AAapEvQ,QAAAA,IAAI,CAACmR,aAAL,GAAqB,6BAAAX,aAAa,kCAAIxQ,IAAI,CAACwQ,aAAT,CAAlC;AAboE;AAcpExQ,QAAAA,IAAI,CAACyQ,gBAAL,GAAwB,6BAAAA,gBAAgB,kCAAIzQ,IAAI,CAACyQ,gBAAT,CAAxC;AAdoE;AAepEzQ,QAAAA,IAAI,CAAC0Q,SAAL,GAAiB,6BAAAA,SAAS,kCAAI1Q,IAAI,CAAC0Q,SAAT,CAA1B;AAfoE;AAgBpE1Q,QAAAA,IAAI,CAAC2Q,YAAL,GAAoB,6BAAAA,YAAY,kCAAI3Q,IAAI,CAAC2Q,YAAT,CAAhC;AAhBoE;AAiBpE3Q,QAAAA,IAAI,CAAC4Q,kBAAL,GAA0B,6BAAAA,kBAAkB,kCAAI5Q,IAAI,CAAC4Q,kBAAT,CAA5C;AAjBoE;AAkBpE5Q,QAAAA,IAAI,CAAC6Q,SAAL,GAAiB,6BAAAA,SAAS,kCAAI7Q,IAAI,CAAC6Q,SAAT,CAA1B;AAlBoE;AAmBpE7Q,QAAAA,IAAI,CAAC8Q,WAAL,GAAmB,6BAAAA,WAAW,kCAAI9Q,IAAI,CAAC8Q,WAAT,CAA9B;AAnBoE;AAoBpE9Q,QAAAA,IAAI,CAAC+Q,cAAL,GAAsB,6BAAAA,cAAc,kCAAI/Q,IAAI,CAAC+Q,cAAT,CAApC;AApBoE;AAqBpE/Q,QAAAA,IAAI,CAACiR,OAAL,GAAe,6BAAAP,SAAS,kCAAI1Q,IAAI,CAAC0Q,SAAT,CAAxB,CArBoE,CAuBpE;;AAvBoE;AAwBpE1Q,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAFD;AAAA;AAAA;;AAD4B;AAI5B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB,EAJ4B,CAK5B;;AAL4B;AAM5B,iBAAOW,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,YAAAA,OAAO,EAAE,IAAX;AAAiBD,YAAAA,GAAG,EAAE;AAAtB,WAFD,CAAP;AAGD,SATD;AAUD,OAlCD;AAmCD;;;WAED,uBAAqB7D,OAArB,EAA8BuC,QAA9B,EAAwC;AAAA;AAAA;;AACtCJ,4BAAUwG,IAAV,CAAe;AAAEtG,QAAAA,KAAK,EAAErC,OAAO,CAACsC,MAAR,CAAesC;AAAxB,OAAf,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AAAA;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBI,IAAlC;AAEA,YAAMqC,OAAO,8BAAGrC,IAAH,CAAb,CAHY,CAGU;;AAHV;;AAIZ,YAAIqC,OAAO,CAACyC,MAAR,IAAkB,CAAtB,EAAyB;AAAA;AAAA;AACvB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAJY;AAUZ,eAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEqC,YAAAA,OAAO,EAAPA,OADF;AAEEpE,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OApBH,WAqBS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA1BH;AA2BD;;;WAED,6BAA2BhG,OAA3B,EAAoCuC,QAApC,EAA8C;AAAA;AAC5C,UAAIwO,gBAAJ;;AACA,8CAaI/Q,OAAO,CAACqB,IAbZ;AAAA,UACE+C,SADF,UACEA,SADF;AAAA,UAEEC,QAFF,UAEEA,QAFF;AAAA,UAGEjD,QAHF,UAGEA,QAHF;AAAA,UAIEgB,QAJF,UAIEA,QAJF;AAAA,UAMEkC,WANF,UAMEA,WANF;AAAA,UAOE+B,MAPF,UAOEA,MAPF;AAAA,UAQEmF,WARF,UAQEA,WARF;AAAA,UASEjH,SATF,UASEA,SATF;AAAA,UAUElC,KAVF,UAUEA,KAVF;AAAA,UAYE4O,WAZF,UAYEA,WAZF;;AAF4C;;AAiB5C,UAAI,CAAC7O,QAAQ,CAACyG,MAAd,EAAsB;AAAA;AAAA;AACpBnF,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AADoB;AAEpB,eAAO1C,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgB0B,IAAhB,CAAqB;AAAEC,UAAAA,GAAG,EAAE;AAAP,SAArB,CAAP;AACD,OAHD;AAAA;AAAA;;AAjB4C;;AAsB5C1B,4BAAUR,OAAV,CAAkB;AAAE6D,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAlB,EAA8C,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAChE,YAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA;;AADgE;;AAKhE,YAAIzB,QAAQ,IAAI,WAAhB,EAA6B;AAAA;AAAA;AAC3BR,UAAAA,IAAI,CAACQ,QAAL,GAAgBR,IAAI,CAACQ,QAArB;AAD2B;AAE3BsB,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAS/B,IAAI,CAACQ,QAA1B;AACD,SAHD,MAGO;AAAA;AAAA;AACLR,UAAAA,IAAI,CAACQ,QAAL,GAAgBoC,gCAAeC,YAAf,CAA4BrC,QAAQ,CAACsC,IAAT,EAA5B,CAAhB;AADK;AAELhB,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAe/B,IAAI,CAACQ,QAAhC;AACD,SAX+D,CAahE;;;AAbgE;AAchER,QAAAA,IAAI,CAACyE,MAAL,GAAc,6BAAAA,MAAM,kCAAIzE,IAAI,CAACyE,MAAT,CAApB;AAdgE;AAehEzE,QAAAA,IAAI,CAACR,QAAL,GAAgB,6BAAAA,QAAQ,kCAAIQ,IAAI,CAACR,QAAT,CAAxB;AAfgE;AAgBhEQ,QAAAA,IAAI,CAACS,KAAL,GAAa,6BAAAA,KAAK,kCAAIT,IAAI,CAACS,KAAT,CAAlB;AAhBgE;AAkBhET,QAAAA,IAAI,CAAC8E,KAAL,GAAa,6BAAAnC,SAAS,kCAAI3C,IAAI,CAAC2C,SAAT,CAAtB;AAlBgE;AAmBhE3C,QAAAA,IAAI,CAACwC,SAAL,GAAiB,6BAAAA,SAAS,kCAAIxC,IAAI,CAACwC,SAAT,CAA1B;AAnBgE;AAoBhExC,QAAAA,IAAI,CAACyC,QAAL,GAAgB,6BAAAA,QAAQ,kCAAIzC,IAAI,CAACyC,QAAT,CAAxB;AApBgE;AAqBhEzC,QAAAA,IAAI,CAACmD,YAAL,GAAoB,6BAAAT,WAAW,kCAAI1C,IAAI,CAACmD,YAAT,CAA/B;AArBgE;AAsBhEnD,QAAAA,IAAI,CAAC+E,gBAAL,GAAwB,6BAAA6E,WAAW,kCAAI5J,IAAI,CAAC+E,gBAAT,CAAnC,CAtBgE,CAuBhE;AACA;;AAxBgE;AAyBhE/E,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,YAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAHD;AAAA;AAAA;;AAD4B;AAK5B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB,EAL4B,CAM5B;;AAN4B;AAO5B,iBAAOW,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,YAAAA,OAAO,EAAE,IAAX;AAAiBD,YAAAA,GAAG,EAAE;AAAtB,WAFD,CAAP;AAGD,SAVD;AAWD,OApCD;AAqCD;;;WAED,yCAAuC7D,OAAvC,EAAgDuC,QAAhD,EAA0D;AAAA;;AACxD,8CAAuBvC,OAAO,CAACqB,IAA/B;AAAA,UAAQ4E,UAAR,UAAQA,UAAR;;AADwD;;AAGxD9D,4BAAUR,OAAV,CAAkB;AAAE6D,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAlB,EAA8C,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAChE,YAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT,iBAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA;;AADgE;AAIhEjC,QAAAA,IAAI,CAACqE,UAAL,GAAkB,6BAAAA,UAAU,kCAAIrE,IAAI,CAACqE,UAAT,CAA5B;AAJgE;AAKhErE,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,YAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAHD;AAAA;AAAA;;AAD4B;AAK5B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB,EAL4B,CAM5B;;AAN4B;AAO5B,iBAAOW,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,YAAAA,OAAO,EAAE,IAAX;AAAiBD,YAAAA,GAAG,EAAE;AAAtB,WAFD,CAAP;AAGD,SAVD;AAWD,OAhBD;AAiBD;;;WAED,2BAAyB7D,OAAzB,EAAkCuC,QAAlC,EAA4C;AAAA;AAAA;;AAC1CuL,iCAAoBnF,IAApB,GACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMgK,eAAe,8BAAGhK,IAAH,CAArB;AADY;AAGZL,QAAAA,OAAO,CAACC,GAAR,CAAYoK,eAAe,GAAG,4BAA9B;AAHY;;AAIZ,YAAIA,eAAe,CAAClF,MAAhB,KAA2B,CAA/B,EAAkC;AAAA;AAAA;AAChC,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEgK,cAAAA,eAAe,EAAE,EADnB;AAGE/L,cAAAA,OAAO,EAAE;AAHX,aADI;AAFyB,WAA1B,CAAP;AAUD,SAXD;AAAA;AAAA;;AAJY;AAiBZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEgK,YAAAA,eAAe,EAAfA,eADF;AAGE/L,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OA5BH,WA6BS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAjCN;AAmCD;;;WAED,oCAAkChG,OAAlC,EAA2CuC,QAA3C,EAAqD;AAAA;AAAA;;AACnDyL,+BACGrF,IADH,GAEGnH,IAFH,CAEQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMiP,cAAc,8BAAGjP,IAAH,CAApB;AADY;AAGZL,QAAAA,OAAO,CAACC,GAAR,CAAYqP,cAAc,GAAG,+BAA7B;AAHY;;AAIZ,YAAIA,cAAc,CAACnK,MAAf,KAA0B,CAA9B,EAAiC;AAAA;AAAA;AAC/B,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEiP,cAAAA,cAAc,EAAE,EADlB;AAGEhR,cAAAA,OAAO,EAAE;AAHX,aADI;AAFyB,WAA1B,CAAP;AAUD,SAXD;AAAA;AAAA;;AAJY;AAiBZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEiP,YAAAA,cAAc,EAAdA,cADF;AAGEhR,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OA7BH,WA8BS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAlCN;AAoCD;;;WAED,2BAAyBhG,OAAzB,EAAkCuC,QAAlC,EAA4C;AAAA;AAAA;AAC1CmB,MAAAA,OAAO,CAACC,GAAR,CAAY3D,OAAO,CAACsC,MAAR,GAAiB,SAA7B;AAD0C;;AAE1C,UAAItC,OAAO,CAACsC,MAAR,CAAe2Q,WAAf,IAA8B,YAAlC,EAAgD;AAAA;AAAA;;AAC9CnF,mCAAoBnF,IAApB,CAAyB;AAAEnD,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SAAzB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAMnC,IAAI,8BAAGmC,IAAH,CAAV;AADY;;AAGZ,cAAInC,IAAI,CAACiH,MAAL,IAAe,CAAnB,EAAsB;AAAA;AAAA;AACpBnF,YAAAA,OAAO,CAACC,GAAR,CACE2I,IAAI,CAACC,SAAL,CAAe;AACbrK,cAAAA,MAAM,EAAE,GADK;AAEbD,cAAAA,KAAK,EAAE;AAFM,aAAf,CADF;AADoB;AAOpB,mBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,cAAAA,MAAM,EAAE,GADuB;AAE/BD,cAAAA,KAAK,EAAE;AAFwB,aAA1B,CAAP;AAID,WAXD;AAAA;AAAA;;AAHY;;AAgBZ6L,qCAAoBtB,MAApB,CAA2B;AAAEhH,YAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,WAA3B,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,gBAAM0I,WAAW,8BAAG1I,IAAH,CAAjB;AADY;AAEZxB,YAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,cAAAA,MAAM,EAAE,GADgB;AAExB6B,cAAAA,IAAI,EAAE,CACJ;AACEa,gBAAAA,EAAE,EAAE6H,WAAW,CAACjH,GADlB;AAEExD,gBAAAA,OAAO,EAAE;AAFX,eADI;AAFkB,aAA1B;AASD,WAZH,WAaS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdyB,YAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,YAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,cAAAA,MAAM,EAAE,GADgB;AAExBD,cAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,aAA1B;AAID,WAnBH;AAoBD,SArCH,WAsCS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdyB,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SA5CH;AA6CD,OA9CD,MA8CO;AAAA;AAAA;;AAAA,YAAIhG,OAAO,CAACsC,MAAR,CAAe2Q,WAAf,IAA8B,WAAlC,EAA+C;AAAA;AAAA;;AACpDjF,mCACGrF,IADH,CACQ;AAAEnD,YAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,WADR,EAEGpD,IAFH,CAEQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,gBAAMnC,IAAI,8BAAGmC,IAAH,CAAV;AADY;;AAGZ,gBAAInC,IAAI,CAACiH,MAAL,IAAe,CAAnB,EAAsB;AAAA;AAAA;AACpBnF,cAAAA,OAAO,CAACC,GAAR,CACE2I,IAAI,CAACC,SAAL,CAAe;AACbrK,gBAAAA,MAAM,EAAE,GADK;AAEbD,gBAAAA,KAAK,EAAE;AAFM,eAAf,CADF;AADoB;AAOpB,qBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,gBAAAA,MAAM,EAAE,GADuB;AAE/BD,gBAAAA,KAAK,EAAE;AAFwB,eAA1B,CAAP;AAID,aAXD;AAAA;AAAA;;AAHY;;AAgBZ+L,qCACGxB,MADH,CACU;AAAEhH,cAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,aADV,EAEGpD,IAFH,CAEQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,kBAAM0I,WAAW,8BAAG1I,IAAH,CAAjB;AADY;AAEZxB,cAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,gBAAAA,MAAM,EAAE,GADgB;AAExB6B,gBAAAA,IAAI,EAAE,CACJ;AACEa,kBAAAA,EAAE,EAAE6H,WAAW,CAACjH,GADlB;AAEExD,kBAAAA,OAAO,EAAE;AAFX,iBADI;AAFkB,eAA1B;AASD,aAbH,WAcS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdyB,cAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,cAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,gBAAAA,MAAM,EAAE,GADgB;AAExBD,gBAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,eAA1B;AAID,aApBH;AAqBD,WAvCH,WAwCS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdyB,YAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,YAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,cAAAA,MAAM,EAAE,GADgB;AAExBD,cAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,aAA1B;AAID,WA9CH;AA+CD,SAhDM;AAAA;AAAA;AAgDN;AACF;;;WAED,uBAAqBhG,OAArB,EAA8BuC,QAA9B,EAAwC;AAAA;;AACtC,8CAA0EvC,OAAO,CAACqB,IAAlF;AAAA,UAAMkF,SAAN,UAAMA,SAAN;AAAA,UAAiB2M,eAAjB,UAAiBA,eAAjB;AAAA,UAAkChR,MAAlC,UAAkCA,MAAlC;AAAA,UAA0CmO,WAA1C,UAA0CA,WAA1C;AAAA,UAAuD8C,OAAvD,UAAuDA,OAAvD;AAAA,UAAgEtH,KAAhE,UAAgEA,KAAhE;;AAEA,UAAIlH,OAAJ;AACA,UAAI2B,IAAJ;AAJsC;;AAMtC,UAAI4M,eAAe,KAAK,YAAxB,EAAsC;AAAA;AAAA;AACpCvO,QAAAA,OAAO,GAAG,IAAImJ,0BAAJ,CAAwB;AAChClJ,UAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoBiJ,0BAApB,EAAyChJ,OAAzC,EAD4B;AAEhCyB,UAAAA,SAAS,EAATA,SAFgC;AAGhC2M,UAAAA,eAAe,EAAfA,eAHgC;AAIhChR,UAAAA,MAAM,EAANA,MAJgC;AAKhCmO,UAAAA,WAAW,EAAXA,WALgC;AAMhC+C,UAAAA,OAAO,EAAED,OANuB;AAOhCtH,UAAAA,KAAK,EAALA;AAPgC,SAAxB,CAAV;AADoC;AAWpClH,QAAAA,OAAO,CAACpD,IAAR,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AAAA;AACZuC,UAAAA,IAAI,GAAGvC,IAAP;AADY;AAGZ,iBAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEuC,cAAAA,IAAI,EAAJA;AADF,aADI,CAFyB;AAO/BtE,YAAAA,OAAO,EAAE;AAPsB,WAA1B,CAAP;AASD,SAbH,WAcS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,UAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SApBH;AAqBD,OAhCD,MAgCO;AAAA;AAAA;AACLrB,QAAAA,OAAO,GAAG,IAAIqJ,wBAAJ,CAAsB;AAC9BpJ,UAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoBmJ,wBAApB,EAAuClJ,OAAvC,EAD0B;AAE9ByB,UAAAA,SAAS,EAATA,SAF8B;AAG9B2M,UAAAA,eAAe,EAAfA,eAH8B;AAI9BhR,UAAAA,MAAM,EAANA,MAJ8B;AAK9BmO,UAAAA,WAAW,EAAXA,WAL8B;AAM9B+C,UAAAA,OAAO,EAAED,OANqB;AAO9BtH,UAAAA,KAAK,EAALA;AAP8B,SAAtB,CAAV;AADK;AAWLlH,QAAAA,OAAO,CAACpD,IAAR,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AAAA;AACZuC,UAAAA,IAAI,GAAGvC,IAAP;AADY;AAGZ,iBAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEuC,cAAAA,IAAI,EAAJA;AADF,aADI,CAFyB;AAO/BtE,YAAAA,OAAO,EAAE;AAPsB,WAA1B,CAAP;AASD,SAbH,WAcS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,UAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SApBH;AAqBD;AACF;;;WAED,iCAA+BhG,OAA/B,EAAwCuC,QAAxC,EAAkD;AAAA;;AAChD,8CAA4EvC,OAAO,CAACqB,IAApF;AAAA,UAAQkF,SAAR,UAAQA,SAAR;AAAA,UAAmB2M,eAAnB,UAAmBA,eAAnB;AAAA,UAAoC7C,WAApC,UAAoCA,WAApC;AAAA,UAAiD8C,OAAjD,UAAiDA,OAAjD;AAAA,UAA0DtH,KAA1D,UAA0DA,KAA1D;AAAA,UAAiE3J,MAAjE,UAAiEA,MAAjE;;AADgD;AAGhDwB,MAAAA,OAAO,CAACC,GAAR,CAAY4C,SAAS,GAAG,WAAxB;AAHgD;;AAKhD,UAAIA,SAAS,IAAI,YAAjB,EAA+B;AAAA;AAAA;AAC7B7C,QAAAA,OAAO,CAACC,GAAR,CAAY4C,SAAS,GAAG,SAAxB;AAD6B;;AAE7BuH,mCAAoBnM,OAApB,CAA4B;AAAE6D,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SAA5B,EAAwD,UAAS/D,GAAT,EAAcyF,IAAd,EAAoB;AAAA;AAAA;;AAC1E,cAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT,mBAAO/D,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAE;AAAP,aAA1B,CAAP;AACD,WAFD;AAAA;AAAA,WAD0E,CAK1E;AACA;;;AAN0E;AAO1EyC,UAAAA,IAAI,CAACC,SAAL,GAAiB,6BAAAA,SAAS,kCAAID,IAAI,CAACC,SAAT,CAA1B;AAP0E;AAQ1ED,UAAAA,IAAI,CAAC4M,eAAL,GAAuB,6BAAAA,eAAe,kCAAI5M,IAAI,CAAC4M,eAAT,CAAtC;AAR0E;AAU1E5M,UAAAA,IAAI,CAACuF,KAAL,GAAa,6BAAAA,KAAK,kCAAIvF,IAAI,CAACuF,KAAT,CAAlB;AAV0E;AAW1EvF,UAAAA,IAAI,CAAC+J,WAAL,GAAmB,6BAAAA,WAAW,kCAAI/J,IAAI,CAAC+J,WAAT,CAA9B;AAX0E;AAY1E/J,UAAAA,IAAI,CAAC8M,OAAL,GAAe,6BAAAD,OAAO,kCAAI7M,IAAI,CAAC8M,OAAT,CAAtB;AAZ0E;AAa1E9M,UAAAA,IAAI,CAACpE,MAAL,GAAc,6BAAAA,MAAM,kCAAIoE,IAAI,CAACpE,MAAT,CAApB;AAb0E;AAc1EoE,UAAAA,IAAI,CAAC/E,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,gBAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,cAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,qBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,gBAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,eAA1B,CAAP;AACD,aAHD;AAAA;AAAA;;AAD4B;AAK5B,mBAAOO,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,cAAAA,OAAO,EAAE,IAAX;AAAiBD,cAAAA,GAAG,EAAE;AAAtB,aAFD,CAAP;AAGD,WARD;AASD,SAvBD;AAwBD,OA1BD,MA0BO;AAAA;AAAA;;AACLmK,iCAAkBrM,OAAlB,CAA0B;AAAE6D,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SAA1B,EAAsD,UAAS/D,GAAT,EAAcyF,IAAd,EAAoB;AAAA;AAAA;;AACxE,cAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT,mBAAO/D,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAE;AAAP,aAA1B,CAAP;AACD,WAFD;AAAA;AAAA;;AADwE;AAKxEyC,UAAAA,IAAI,CAACC,SAAL,GAAiB,6BAAAA,SAAS,kCAAID,IAAI,CAACC,SAAT,CAA1B;AALwE;AAMxED,UAAAA,IAAI,CAAC4M,eAAL,GAAuB,6BAAAA,eAAe,kCAAI5M,IAAI,CAAC4M,eAAT,CAAtC;AANwE;AAQxE5M,UAAAA,IAAI,CAACuF,KAAL,GAAa,6BAAAA,KAAK,kCAAIvF,IAAI,CAACuF,KAAT,CAAlB;AARwE;AASxEvF,UAAAA,IAAI,CAAC+J,WAAL,GAAmB,6BAAAA,WAAW,kCAAI/J,IAAI,CAAC+J,WAAT,CAA9B;AATwE;AAUxE/J,UAAAA,IAAI,CAAC8M,OAAL,GAAe,6BAAAD,OAAO,kCAAI7M,IAAI,CAAC8M,OAAT,CAAtB;AAVwE;AAWxE9M,UAAAA,IAAI,CAACpE,MAAL,GAAc,6BAAAA,MAAM,kCAAIoE,IAAI,CAACpE,MAAT,CAApB;AAXwE;AAYxEoE,UAAAA,IAAI,CAAC/E,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,gBAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,cAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,qBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,gBAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,eAA1B,CAAP;AACD,aAHD;AAAA;AAAA;;AAD4B;AAK5B0B,YAAAA,OAAO,CAACC,GAAR,CAAY2C,IAAI,GAAG,OAAnB,EAL4B,CAM5B;;AAN4B;AAO5B,mBAAO/D,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,cAAAA,OAAO,EAAE,IAAX;AAAiBD,cAAAA,GAAG,EAAE;AAAtB,aAFD,CAAP;AAGD,WAVD;AAWD,SAvBD;AAwBD;AACF;;;WAED,0BAAwB7D,OAAxB,EAAiCuC,QAAjC,EAA2C;AAAA;AAAA;;AACzC8Q,4BAAU1K,IAAV,CAAe;AAAE2K,QAAAA,aAAa,EAAE;AAAEC,UAAAA,GAAG,EAAE;AAAP;AAAjB,OAAf,EACG/R,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMyP,WAAW,8BAAGzP,IAAH,CAAjB;AADY;AAGZL,QAAAA,OAAO,CAACC,GAAR,CAAY6P,WAAZ;AAHY;;AAKZ,YAAIA,WAAW,CAAC3K,MAAZ,KAAuB,CAA3B,EAA8B;AAAA;AAAA;AAC5B,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEyP,cAAAA,WAAW,EAAE,EADf;AAGExR,cAAAA,OAAO,EAAE;AAHX,aADI;AAFyB,WAA1B,CAAP;AAUD,SAXD;AAAA;AAAA;;AALY;AAkBZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEyP,YAAAA,WAAW,EAAXA,WADF;AAGExR,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OA7BH,WA8BS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAlCN;AAoCD;;;WAED,gCAA8BhG,OAA9B,EAAuCuC,QAAvC,EAAiD;AAAA;;AAC/C,8CASIvC,OAAO,CAACqB,IATZ;AAAA,UACEiS,aADF,UACEA,aADF;AAAA,UAEEG,uBAFF,UAEEA,uBAFF;AAAA,UAGEC,uBAHF,UAGEA,uBAHF;AAAA,UAIEnB,YAJF,UAIEA,YAJF;;AAD+C;;AAY/Cc,4BAAU1R,OAAV,CAAkB;AAAE6D,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAlB,EAA8C,UAAS/D,GAAT,EAAcyF,IAAd,EAAoB;AAAA;AAAA;;AAChE,YAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT,iBAAO/D,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA;;AADgE;AAKhEyC,QAAAA,IAAI,CAACgN,aAAL,GAAqB,6BAAAA,aAAa,kCAAIhN,IAAI,CAACgN,aAAT,CAAlC;AALgE;AAMhEhN,QAAAA,IAAI,CAACoN,uBAAL,GAA+B,6BAAAA,uBAAuB,kCAAIpN,IAAI,CAACoN,uBAAT,CAAtD;AANgE;AAOhEpN,QAAAA,IAAI,CAACmN,uBAAL,GAA+B,6BAAAA,uBAAuB,kCAAInN,IAAI,CAACmN,uBAAT,CAAtD;AAEA,YAAIE,IAAI,8BAAGrN,IAAI,CAACmN,uBAAR,CAAR;AACA,YAAIG,IAAI,8BAAGtN,IAAI,CAACoN,uBAAR,CAAR;AAVgE;AAYhEhQ,QAAAA,OAAO,CAACC,GAAR,CAAY+P,uBAAZ,EAAqCpN,IAAI,CAACmN,uBAA1C;AAZgE;;AAahE,YAAInN,IAAI,CAACpE,MAAL,IAAe,SAAnB,EAA8B;AAAA;AAAA;AAC5BoE,UAAAA,IAAI,CAACpE,MAAL,GAAc,WAAd;AACD,SAFD;AAAA;AAAA,SAbgE,CAgBhE;AACA;AACA;AACA;AACA;;;AApBgE;AAqBhEoE,QAAAA,IAAI,CAAC/E,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,YAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAGP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAJD;AAAA;AAAA,WAD4B,CAO5B;;;AAP4B;AAS5BjB,UAAAA,WAAW,CAAC8S,iBAAZ,CACE7T,OADF,EAEEuC,QAFF,EAGE,+CAHF,EAIE;AACEnB,YAAAA,QAAQ,EAAEmR,YADZ;AAEEkB,YAAAA,uBAAuB,EAAEE,IAF3B;AAGED,YAAAA,uBAAuB,EAAEE,IAH3B;AAIE1P,YAAAA,IAAI,EAAEzE,OAAO,CAACC,GAAR,CAAYoU;AAJpB,WAJF,EAUEvB,YAVF,EAWE,GAXF;AAT4B;AAuB5B,iBAAOhQ,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAE1B,YAAAA,MAAM,EAAE,GAAV;AAAe4B,YAAAA,OAAO,EAAE,IAAxB;AAA8BD,YAAAA,GAAG,EAAE;AAAnC,WAFD,CAAP;AAGD,SA1BD;AA2BD,OAhDD;AAiDD;;;WAED,6BAA2B7D,OAA3B,EAAoCuC,QAApC,EAA8C;AAAA;;AAC5C,8CASIvC,OAAO,CAACqB,IATZ;AAAA,UACED,QADF,UACEA,QADF;AAAA,UAEEiB,KAFF,UAEEA,KAFF;AAAA,UAGE0C,YAHF,UAGEA,YAHF;AAAA,UAIEsL,WAJF,UAIEA,WAJF;AAAA,UAKE0D,WALF,UAKEA,WALF;AAAA,UAMEH,IANF,UAMEA,IANF;AAAA,UAOE1R,MAPF,UAOEA,MAPF;AAAA,UAQE8R,MARF,UAQEA,MARF;;AAWA,UAAIrP,OAAJ;AACA,UAAI2B,IAAJ;AAb4C;AAe5C3B,MAAAA,OAAO,GAAG,IAAIsP,sBAAJ,CAAoB;AAC5BrP,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoBoP,sBAApB,EAAqCnP,OAArC,EADwB;AAE5B1D,QAAAA,QAAQ,EAARA,QAF4B;AAG5BiB,QAAAA,KAAK,EAALA,KAH4B;AAI5B0C,QAAAA,YAAY,EAAZA,YAJ4B;AAK5BsL,QAAAA,WAAW,EAAXA,WAL4B;AAM5B0D,QAAAA,WAAW,EAAXA,WAN4B;AAO5BH,QAAAA,IAAI,EAAJA,IAP4B;AAQ5B1R,QAAAA,MAAM,EAANA,MAR4B;AAS5B8R,QAAAA,MAAM,EAANA;AAT4B,OAApB,CAAV;AAf4C;AA2B5CrP,MAAAA,OAAO,CAACpD,IAAR,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AAAA;AACZuC,QAAAA,IAAI,GAAGvC,IAAP;AADY;AAGZ,eAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEuC,YAAAA,IAAI,EAAJA;AADF,WADI,CAFyB;AAO/BtE,UAAAA,OAAO,EAAE;AAPsB,SAA1B,CAAP;AASD,OAbH,WAcS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OApBH;AAqBD;;;WAED,0BAAwBhG,OAAxB,EAAiCuC,QAAjC,EAA2C;AAAA;AAAA;;AACzC0R,6BAAgBtL,IAAhB,CAAqB;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAArB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,8BAAGmC,IAAH,CAAV;AADY;;AAGZ,YAAInC,IAAI,CAACiH,MAAL,IAAe,CAAnB,EAAsB;AAAA;AAAA;AACpBnF,UAAAA,OAAO,CAACC,GAAR,CACE2I,IAAI,CAACC,SAAL,CAAe;AACbrK,YAAAA,MAAM,EAAE,GADK;AAEbD,YAAAA,KAAK,EAAE;AAFM,WAAf,CADF;AADoB;AAOpB,iBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SAXD;AAAA;AAAA;;AAHY;;AAgBZgS,+BAAgBzH,MAAhB,CAAuB;AAAEhH,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SAAvB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAM0I,WAAW,8BAAG1I,IAAH,CAAjB;AADY;AAEZxB,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExB6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAE6H,WAAW,CAACjH,GADlB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFkB,WAA1B;AASD,SAZH,WAaS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdyB,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SAnBH;AAoBD,OArCH,WAsCS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdyB,QAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA5CH;AA6CD;;;WAED,yBAAuBhG,OAAvB,EAAgCuC,QAAhC,EAA0C;AAAA;AAAA;;AACxC2R,4BAAevL,IAAf,GACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMoQ,SAAS,8BAAGpQ,IAAH,CAAf;AADY;AAGZL,QAAAA,OAAO,CAACC,GAAR,CAAYwQ,SAAS,GAAG,+BAAxB;AAHY;;AAIZ,YAAIA,SAAS,CAACtL,MAAV,KAAqB,CAAzB,EAA4B;AAAA;AAAA;AAC1B,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEoQ,cAAAA,SAAS,EAAE,EADb;AAGEnS,cAAAA,OAAO,EAAE;AAHX,aADI;AAFyB,WAA1B,CAAP;AAUD,SAXD;AAAA;AAAA;;AAJY;AAiBZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEoQ,YAAAA,SAAS,EAATA,SADF;AAGEnS,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OA5BH,WA6BS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAjCN;AAmCD;;;WAED,mCAAiChG,OAAjC,EAA0CuC,QAA1C,EAAoD;AAAA;;AAClD,8CASIvC,OAAO,CAACqB,IATZ;AAAA,UACED,QADF,UACEA,QADF;AAAA,UAEEiB,KAFF,UAEEA,KAFF;AAAA,UAGE0C,YAHF,UAGEA,YAHF;AAAA,UAIEiP,MAJF,UAIEA,MAJF;AAAA,UAKE9R,MALF,UAKEA,MALF;AAAA,UAMEmO,WANF,UAMEA,WANF;AAAA,UAQE0D,WARF,UAQEA,WARF;;AAWA,UAAIpP,OAAJ;AACA,UAAI2B,IAAJ;AAbkD;AAelD3B,MAAAA,OAAO,GAAG,IAAIuP,qBAAJ,CAAmB;AAC3BtP,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoBqP,qBAApB,EAAoCpP,OAApC,EADuB;AAE3B1D,QAAAA,QAAQ,EAARA,QAF2B;AAG3BiB,QAAAA,KAAK,EAALA,KAH2B;AAI3B0C,QAAAA,YAAY,EAAZA,YAJ2B;AAK3BiP,QAAAA,MAAM,EAANA,MAL2B;AAM3B9R,QAAAA,MAAM,EAAE,SANmB;AAO3BmO,QAAAA,WAAW,EAAXA,WAP2B;AAQ3B0D,QAAAA,WAAW,EAAXA;AAR2B,OAAnB,CAAV;AAfkD;AA0BlDpP,MAAAA,OAAO,CAACpD,IAAR,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AAAA;AACZuC,QAAAA,IAAI,GAAGvC,IAAP;AADY;AAGZ,eAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEuC,YAAAA,IAAI,EAAJA;AADF,WADI,CAFyB;AAO/BtE,UAAAA,OAAO,EAAE;AAPsB,SAA1B,CAAP;AASD,OAbH,WAcS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OApBH;AAqBD;;;WAED,4BAA0BhG,OAA1B,EAAmCuC,QAAnC,EAA6C;AAAA;;AAC3C,8CASIvC,OAAO,CAACqB,IATZ;AAAA,UACED,QADF,UACEA,QADF;AAAA,UAEEiB,KAFF,UAEEA,KAFF;AAAA,UAGE0C,YAHF,UAGEA,YAHF;AAAA,UAIEsL,WAJF,UAIEA,WAJF;AAAA,UAKE0D,WALF,UAKEA,WALF;AAAA,UAMEH,IANF,UAMEA,IANF;AAAA,UAOE1R,MAPF,UAOEA,MAPF;AAAA,UAQE8R,MARF,UAQEA,MARF;;AAWA,UAAIrP,OAAJ;AACA,UAAI2B,IAAJ;AAb2C;AAe3C3B,MAAAA,OAAO,GAAG,IAAIuP,qBAAJ,CAAmB;AAC3BtP,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoBqP,qBAApB,EAAoCpP,OAApC,EADuB;AAE3B1D,QAAAA,QAAQ,EAARA,QAF2B;AAG3BiB,QAAAA,KAAK,EAALA,KAH2B;AAI3B0C,QAAAA,YAAY,EAAZA,YAJ2B;AAK3BsL,QAAAA,WAAW,EAAXA,WAL2B;AAM3B0D,QAAAA,WAAW,EAAXA,WAN2B;AAO3BH,QAAAA,IAAI,EAAJA,IAP2B;AAQ3BQ,QAAAA,WAAW,EAAER,IARc;AAU3B1R,QAAAA,MAAM,EAANA,MAV2B;AAW3B8R,QAAAA,MAAM,EAANA;AAX2B,OAAnB,CAAV;AAf2C;AA6B3CrP,MAAAA,OAAO,CAACpD,IAAR,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AAAA;AACZuC,QAAAA,IAAI,GAAGvC,IAAP;AADY;AAGZ,eAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEuC,YAAAA,IAAI,EAAJA;AADF,WADI,CAFyB;AAO/BtE,UAAAA,OAAO,EAAE;AAPsB,SAA1B,CAAP;AASD,OAbH,WAcS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OApBH;AAqBD;;;WAED,0CAAwChG,OAAxC,EAAiDuC,QAAjD,EAA2D;AAAA;;AACzD,8CAA6CvC,OAAO,CAACqB,IAArD;AAAA,UAAQ+S,WAAR,UAAQA,WAAR;AAAA,UAAqBC,mBAArB,UAAqBA,mBAArB;;AADyD;;AAEzDlS,4BAAUR,OAAV,CAAkB;AAAE6D,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAlB,EAA8C,UAAS/D,GAAT,EAAcyF,IAAd,EAAoB;AAAA;AAAA;;AAChE,YAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT,iBAAO/D,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA,SADgE,CAKhE;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAZgE;AAahEyC,QAAAA,IAAI,CAAC8N,WAAL,GAAmB,6BAAAA,WAAW,kCAAI9N,IAAI,CAAC8N,WAAT,CAA9B;AAbgE;AAchE9N,QAAAA,IAAI,CAAC+N,mBAAL,GAA2B,6BAAAA,mBAAmB,kCAAI/N,IAAI,CAAC+N,mBAAT,CAA9C;AAdgE;AAehE/N,QAAAA,IAAI,CAAC/E,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,YAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAHD;AAAA;AAAA;;AAD4B;AAK5B,iBAAOO,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAE1B,YAAAA,MAAM,EAAE,GAAV;AAAe4B,YAAAA,OAAO,EAAE,IAAxB;AAA8BD,YAAAA,GAAG,EAAE;AAAnC,WAFD,CAAP;AAGD,SARD;AASD,OAxBD;AAyBD;;;WAED,+BAA6B7D,OAA7B,EAAsCuC,QAAtC,EAAgD;AAAA;;AAC9C,8CASIvC,OAAO,CAACqB,IATZ;AAAA,UAOEa,MAPF,UAOEA,MAPF;;AAD8C;;AAW9CgS,4BAAevS,OAAf,CAAuB;AAAE6D,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAvB,EAAmD,UAAS/D,GAAT,EAAcyF,IAAd,EAAoB;AAAA;AAAA;;AACrE,YAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT,iBAAO/D,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA,SADqE,CAKrE;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAZqE;AAarEyC,QAAAA,IAAI,CAACpE,MAAL,GAAc,6BAAAA,MAAM,kCAAIoE,IAAI,CAACpE,MAAT,CAApB;AAbqE;AAcrEoE,QAAAA,IAAI,CAAC/E,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,YAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAHD;AAAA;AAAA;;AAD4B;AAK5B,iBAAOO,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAE1B,YAAAA,MAAM,EAAE,GAAV;AAAe4B,YAAAA,OAAO,EAAE,IAAxB;AAA8BD,YAAAA,GAAG,EAAE;AAAnC,WAFD,CAAP;AAGD,SARD;AASD,OAvBD;AAwBD;;;WAED,yBAAuB7D,OAAvB,EAAgCuC,QAAhC,EAA0C;AAAA;AAAA;;AACxC2R,4BAAevL,IAAf,CAAoB;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAApB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,8BAAGmC,IAAH,CAAV;AADY;;AAGZ,YAAInC,IAAI,CAACiH,MAAL,IAAe,CAAnB,EAAsB;AAAA;AAAA;AACpBnF,UAAAA,OAAO,CAACC,GAAR,CACE2I,IAAI,CAACC,SAAL,CAAe;AACbrK,YAAAA,MAAM,EAAE,GADK;AAEbD,YAAAA,KAAK,EAAE;AAFM,WAAf,CADF;AADoB;AAOpB,iBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SAXD;AAAA;AAAA;;AAHY;;AAgBZiS,8BAAe1H,MAAf,CAAsB;AAAEhH,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SAAtB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAM0I,WAAW,8BAAG1I,IAAH,CAAjB;AADY;AAEZxB,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExB6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAE6H,WAAW,CAACjH,GADlB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFkB,WAA1B;AASD,SAZH,WAaS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdyB,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SAnBH;AAoBD,OArCH,WAsCS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdyB,QAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA5CH;AA6CD;;;WAED,2BAAyBhG,OAAzB,EAAkCuC,QAAlC,EAA4C;AAAA;AAAA;;AAC1C;AACA;AACAuG,sCAAyBH,IAAzB,GACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMkH,KAAK,8BAAGlH,IAAH,CAAX;AADY;;AAGZ,YAAIkH,KAAK,CAACpC,MAAN,KAAiB,CAArB,EAAwB;AAAA;AAAA;AACtB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEuQ,cAAAA,WAAW,EAAE,EADf;AAGEtS,cAAAA,OAAO,EAAE;AAHX,aADI;AAFyB,WAA1B,CAAP;AAUD,SAXD;AAAA;AAAA;;AAHY;AAgBZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEuQ,YAAAA,WAAW,EAAErJ,KADf;AAGEjJ,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OA3BH,WA4BS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAhCN;AAkCD;;;WAED,8BAA4BhG,OAA5B,EAAqCuC,QAArC,EAA+C;AAAA;;AAC7C,8CAAsEvC,OAAO,CAACqB,IAA9E;AAAA,UAAQkT,uBAAR,UAAQA,uBAAR;AAAA,UAAiCvL,gBAAjC,UAAiCA,gBAAjC;AAAA,UAAmDwL,cAAnD,UAAmDA,cAAnD;;AAEA,UAAI7P,OAAJ;AACA,UAAI2B,IAAJ;AAJ6C;AAM7C3B,MAAAA,OAAO,GAAG,IAAImE,+BAAJ,CAA6B;AACrClE,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoBiE,+BAApB,EAA8ChE,OAA9C,EADiC;AAErCyP,QAAAA,uBAAuB,EAAvBA,uBAFqC;AAGrCvL,QAAAA,gBAAgB,EAAhBA;AAHqC,OAA7B,CAAV;AAN6C;AAY7CrE,MAAAA,OAAO,CAACpD,IAAR,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AAAA;AACZuC,QAAAA,IAAI,GAAGvC,IAAP;AADY;;AAGZ+E,wCAAyBH,IAAzB,CAA8B;AAAEI,UAAAA,UAAU,EAAE;AAAd,SAA9B,EAAoD,UAASlI,GAAT,EAAcoK,KAAd,EAAqB;AAAA;AAAA;;AACvE,cAAI,CAACA,KAAL,EAAY;AAAA;AAAA;AACV,mBAAO1I,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEC,cAAAA,GAAG,EAAE;AAAP,aAFD,CAAP;AAGD,WAJD;AAAA;AAAA;;AAMA,cAAI4Q,SAAS,4EAAOD,cAAP,IAAuBxL,gBAAvB,GAAb;AAPuE;;AASvEF,0CAAyBoC,UAAzB,CACE;AAAEnC,YAAAA,UAAU,EAAE;AAAd,WADF,EAEE;AAAEoC,YAAAA,IAAI,EAAE;AAAEgG,cAAAA,aAAa,EAAEsD;AAAjB;AAAR,WAFF,EAGE;AAAErJ,YAAAA,KAAK,EAAE;AAAT,WAHF,EAIE,UAASvK,GAAT,EAAcY,MAAd,EAAsB;AAAA;AAAA;;AACpB,gBAAIZ,GAAJ,EAAS;AAAA;AAAA;AACP6C,cAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEPI,cAAAA,GAAG,CAAC2C,IAAJ,CAAS/C,GAAT;AACD,aAHD,MAGO;AAAA;AAAA;;AACLsB,oCAAUwG,IAAV,CAAe;AAAEyH,gBAAAA,SAAS,EAAE;AAAb,eAAf,EAAoC,UAASvP,GAAT,EAAcoK,KAAd,EAAqB;AAAA;AAAA;;AACvD,oBAAI,CAACA,KAAL,EAAY;AAAA;AAAA;AACV,yBAAO1I,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEC,oBAAAA,GAAG,EAAE;AAAP,mBAFD,CAAP;AAGD,iBAJD;AAAA;AAAA;;AADuD;;AAOvD1B,sCAAU+I,UAAV,CACE;AAAEkF,kBAAAA,SAAS,EAAE;AAAb,iBADF,EAEE;AAAEjF,kBAAAA,IAAI,EAAE;AAAEgG,oBAAAA,aAAa,EAAEsD;AAAjB;AAAR,iBAFF,EAGE;AAAErJ,kBAAAA,KAAK,EAAE;AAAT,iBAHF,EAIE,UAASvK,GAAT,EAAcY,MAAd,EAAsB;AAAA;AAAA;;AACpB,sBAAIZ,GAAJ,EAAS;AAAA;AAAA;AACP6C,oBAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEPI,oBAAAA,GAAG,CAAC2C,IAAJ,CAAS/C,GAAT;AACD,mBAHD,MAGO;AAAA;AAAA;AACL,2BAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,sBAAAA,MAAM,EAAE,GADuB;AAE/B6B,sBAAAA,IAAI,EAAE,CACJ;AACED,wBAAAA,OAAO,EAAE,IADX;AAEErC,wBAAAA,MAAM,EAANA;AAFF,uBADI,CAFyB;AAQ/BO,sBAAAA,OAAO,EAAE;AARsB,qBAA1B,CAAP;AAUD;AACF,iBApBH;AAsBD,eA7BD;AA8BD;AACF,WAxCH;AA0CD,SAnDD,EAHY,CAwDZ;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACD,OAnEH,WAoES,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA1EH,EAZ6C,CAwF7C;AACD;;;WAED,8BAA4BhG,OAA5B,EAAqCuC,QAArC,EAA+C;AAAA;;AAC7C,8CAqCIvC,OAAO,CAACqB,IArCZ;AAAA,UACE4H,aADF,UACEA,aADF;AAAA,UAEEC,eAFF,UAEEA,eAFF;AAAA,UAGEC,iBAHF,UAGEA,iBAHF;AAAA,UAIEC,aAJF,UAIEA,aAJF;AAAA,UAKEC,YALF,UAKEA,YALF;AAAA,UAMEC,QANF,UAMEA,QANF;AAAA,UAOEC,aAPF,UAOEA,aAPF;AAAA,UAQEC,YARF,UAQEA,YARF;AAAA,UASEC,SATF,UASEA,SATF;AAAA,UAUET,gBAVF,UAUEA,gBAVF;AAAA,UAWEU,YAXF,UAWEA,YAXF;AAAA,UAYEC,SAZF,UAYEA,SAZF;AAAA,UAaEC,UAbF,UAaEA,UAbF;AAAA,UAcEC,WAdF,UAcEA,WAdF;AAAA,UAeEC,aAfF,UAeEA,aAfF;AAAA,UAgBEe,mBAhBF,UAgBEA,mBAhBF;AAAA,UAiBEC,eAjBF,UAiBEA,eAjBF;AAAA,UAmBE5I,MAnBF,UAmBEA,MAnBF;AAAA,UAqBE6H,eArBF,UAqBEA,eArBF;AAAA,UAsBEC,iBAtBF,UAsBEA,iBAtBF;AAAA,UAuBEE,eAvBF,UAuBEA,eAvBF;AAAA,UAwBEC,cAxBF,UAwBEA,cAxBF;AAAA,UAyBEC,UAzBF,UAyBEA,UAzBF;AAAA,UA0BEC,eA1BF,UA0BEA,eA1BF;AAAA,UA2BEC,cA3BF,UA2BEA,cA3BF;AAAA,UA4BEL,mBA5BF,UA4BEA,mBA5BF;AAAA,UA6BEM,WA7BF,UA6BEA,WA7BF;AAAA,UA8BEC,cA9BF,UA8BEA,cA9BF;AAAA,UA+BEC,WA/BF,UA+BEA,WA/BF;AAAA,UAgCEG,eAhCF,UAgCEA,eAhCF;AAAA,UAiCEF,YAjCF,UAiCEA,YAjCF;AAAA,UAkCEC,aAlCF,UAkCEA,aAlCF;AAAA,UAmCEI,iBAnCF,UAmCEA,iBAnCF;AAAA,UAoCEC,qBApCF,UAoCEA,qBApCF;;AAD6C;;AAwC7ClC,sCAAyBnH,OAAzB,CAAiC;AAAE6D,QAAAA,GAAG,EAAE,IAAIuC,MAAJ,CAAW/H,OAAO,CAACsC,MAAR,CAAesC,EAA1B;AAAP,OAAjC,EAAyE,UAAS/D,GAAT,EAAc6F,KAAd,EAAqB;AAAA;AAAA;;AAC5F,YAAI,CAACA,KAAL,EAAY;AAAA;AAAA;AACV,iBAAOnE,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA,SAD4F,CAK5F;AACA;;;AAN4F;AAO5F6C,QAAAA,KAAK,CAACxE,MAAN,GAAe,6BAAAA,MAAM,kCAAIwE,KAAK,CAACxE,MAAV,CAArB;AAP4F;AAQ5FwE,QAAAA,KAAK,CAACuC,aAAN,GAAsB,6BAAAA,aAAa,kCAAIvC,KAAK,CAACuC,aAAV,CAAnC;AAR4F;AAS5FvC,QAAAA,KAAK,CAACwC,eAAN,GAAwB,6BAAAA,eAAe,kCAAIxC,KAAK,CAACwC,eAAV,CAAvC;AAT4F;AAU5FxC,QAAAA,KAAK,CAACyC,iBAAN,GAA0B,6BAAAA,iBAAiB,kCAAIzC,KAAK,CAACyC,iBAAV,CAA3C;AAV4F;AAW5FzC,QAAAA,KAAK,CAAC0C,aAAN,GAAsB,6BAAAA,aAAa,kCAAI1C,KAAK,CAAC0C,aAAV,CAAnC;AAX4F;AAY5F1C,QAAAA,KAAK,CAAC2C,YAAN,GAAqB,6BAAAA,YAAY,kCAAI3C,KAAK,CAAC2C,YAAV,CAAjC;AAZ4F;AAa5F3C,QAAAA,KAAK,CAAC4C,QAAN,GAAiB,6BAAAA,QAAQ,kCAAI5C,KAAK,CAAC4C,QAAV,CAAzB;AAb4F;AAc5F5C,QAAAA,KAAK,CAAC6C,aAAN,GAAsB,6BAAAA,aAAa,kCAAI7C,KAAK,CAAC6C,aAAV,CAAnC;AAd4F;AAe5F7C,QAAAA,KAAK,CAAC8C,YAAN,GAAqB,6BAAAA,YAAY,kCAAI9C,KAAK,CAAC8C,YAAV,CAAjC;AAf4F;AAgB5F9C,QAAAA,KAAK,CAAC+C,SAAN,GAAkB,6BAAAA,SAAS,kCAAI/C,KAAK,CAAC+C,SAAV,CAA3B;AAhB4F;AAiB5F/C,QAAAA,KAAK,CAACgD,YAAN,GAAqB,6BAAAA,YAAY,kCAAIhD,KAAK,CAACgD,YAAV,CAAjC;AAjB4F;AAkB5FhD,QAAAA,KAAK,CAACiD,SAAN,GAAkB,6BAAAA,SAAS,kCAAIjD,KAAK,CAACiD,SAAV,CAA3B;AAlB4F;AAmB5FjD,QAAAA,KAAK,CAACkD,UAAN,GAAmB,6BAAAA,UAAU,kCAAIlD,KAAK,CAACkD,UAAV,CAA7B;AAnB4F;AAoB5FlD,QAAAA,KAAK,CAACmD,WAAN,GAAoB,6BAAAA,WAAW,kCAAInD,KAAK,CAACmD,WAAV,CAA/B;AApB4F;AAqB5FnD,QAAAA,KAAK,CAACoD,aAAN,GAAsB,6BAAAA,aAAa,kCAAIpD,KAAK,CAACoD,aAAV,CAAnC;AArB4F;AAuB5FpD,QAAAA,KAAK,CAACoE,eAAN,GAAwB,6BAAAA,eAAe,kCAAIpE,KAAK,CAACoE,eAAV,CAAvC;AAvB4F;AAwB5FpE,QAAAA,KAAK,CAACmE,mBAAN,GAA4B,6BAAAA,mBAAmB,kCAAInE,KAAK,CAACmE,mBAAV,CAA/C;AAxB4F;AA0B5FnE,QAAAA,KAAK,CAACqD,eAAN,GAAwB,6BAAAA,eAAe,kCAAIrD,KAAK,CAACqD,eAAV,CAAvC;AA1B4F;AA2B5FrD,QAAAA,KAAK,CAACsD,iBAAN,GAA0B,6BAAAA,iBAAiB,kCAAItD,KAAK,CAACsD,iBAAV,CAA3C;AA3B4F;AA4B5FtD,QAAAA,KAAK,CAACuD,mBAAN,GAA4B,6BAAAA,mBAAmB,kCAAIvD,KAAK,CAACuD,mBAAV,CAA/C;AA5B4F;AA6B5FvD,QAAAA,KAAK,CAACwD,eAAN,GAAwB,6BAAAA,eAAe,kCAAIxD,KAAK,CAACwD,eAAV,CAAvC;AA7B4F;AA8B5FxD,QAAAA,KAAK,CAACyD,cAAN,GAAuB,6BAAAA,cAAc,kCAAIzD,KAAK,CAACyD,cAAV,CAArC;AA9B4F;AA+B5FzD,QAAAA,KAAK,CAAC0D,UAAN,GAAmB,6BAAAA,UAAU,kCAAI1D,KAAK,CAAC0D,UAAV,CAA7B;AA/B4F;AAgC5F1D,QAAAA,KAAK,CAAC2D,eAAN,GAAwB,6BAAAA,eAAe,kCAAI3D,KAAK,CAAC2D,eAAV,CAAvC;AAhC4F;AAiC5F3D,QAAAA,KAAK,CAAC4D,cAAN,GAAuB,6BAAAA,cAAc,kCAAI5D,KAAK,CAAC4D,cAAV,CAArC;AAjC4F;AAkC5F5D,QAAAA,KAAK,CAAC6D,WAAN,GAAoB,6BAAAA,WAAW,kCAAI7D,KAAK,CAAC6D,WAAV,CAA/B;AAlC4F;AAmC5F7D,QAAAA,KAAK,CAAC8D,cAAN,GAAuB,6BAAAA,cAAc,kCAAI9D,KAAK,CAAC8D,cAAV,CAArC;AAnC4F;AAoC5F9D,QAAAA,KAAK,CAAC+D,WAAN,GAAoB,6BAAAA,WAAW,kCAAI/D,KAAK,CAAC+D,WAAV,CAA/B;AApC4F;AAqC5F/D,QAAAA,KAAK,CAACgE,YAAN,GAAqB,6BAAAA,YAAY,kCAAIhE,KAAK,CAACgE,YAAV,CAAjC;AArC4F;AAsC5FhE,QAAAA,KAAK,CAACiE,aAAN,GAAsB,6BAAAA,aAAa,kCAAIjE,KAAK,CAACiE,aAAV,CAAnC;AAtC4F;AAuC5FjE,QAAAA,KAAK,CAACkE,eAAN,GAAwB,6BAAAA,eAAe,kCAAIlE,KAAK,CAACkE,eAAV,CAAvC;AAvC4F;AAyC5FlE,QAAAA,KAAK,CAACqE,iBAAN,GAA0B,6BAAAA,iBAAiB,kCAAIrE,KAAK,CAACqE,iBAAV,CAA3C;AAzC4F;AA0C5FrE,QAAAA,KAAK,CAACsE,qBAAN,GAA8B,6BAAAA,qBAAqB,kCAAItE,KAAK,CAACsE,qBAAV,CAAnD;AA1C4F;AA4C5FtE,QAAAA,KAAK,CAACnF,IAAN,CAAW,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC7B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,YAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAHD;AAAA;AAAA;;AAD6B;AAM7B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAZ,EAN6B,CAQ7B;;AAR6B;;AAS7BO,gCAAUwG,IAAV,CAAe;AAAEjC,YAAAA,KAAK,EAAEsC;AAAT,WAAf,EAA4C,UAASnI,GAAT,EAAcoK,KAAd,EAAqB;AAAA;AAAA;;AAC/D,gBAAI,CAACA,KAAL,EAAY;AAAA;AAAA;AACV,qBAAO1I,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEC,gBAAAA,GAAG,EAAE;AAAP,eAFD,CAAP;AAGD,aAJD;AAAA;AAAA;;AAD+D;;AAO/D1B,kCAAU+I,UAAV,CACE;AAAExE,cAAAA,KAAK,EAAEsC;AAAT,aADF,EAEE;AACEmC,cAAAA,IAAI,EAAE;AACJlC,gBAAAA,aAAa,EAAbA,aADI;AAEJC,gBAAAA,eAAe,EAAfA,eAFI;AAGJC,gBAAAA,iBAAiB,EAAjBA,iBAHI;AAIJC,gBAAAA,aAAa,EAAbA,aAJI;AAKJC,gBAAAA,YAAY,EAAZA,YALI;AAMJC,gBAAAA,QAAQ,EAARA,QANI;AAOJC,gBAAAA,aAAa,EAAbA,aAPI;AAQJC,gBAAAA,YAAY,EAAZA,YARI;AASJC,gBAAAA,SAAS,EAATA,SATI;AAUJC,gBAAAA,YAAY,EAAZA,YAVI;AAWJC,gBAAAA,SAAS,EAATA,SAXI;AAYJC,gBAAAA,UAAU,EAAVA,UAZI;AAaJC,gBAAAA,WAAW,EAAXA,WAbI;AAcJC,gBAAAA,aAAa,EAAbA,aAdI;AAeJ5H,gBAAAA,MAAM,EAANA,MAfI;AAiBJ6H,gBAAAA,eAAe,EAAfA,eAjBI;AAkBJC,gBAAAA,iBAAiB,EAAjBA,iBAlBI;AAmBJE,gBAAAA,eAAe,EAAfA,eAnBI;AAoBJC,gBAAAA,cAAc,EAAdA,cApBI;AAqBJC,gBAAAA,UAAU,EAAVA,UArBI;AAsBJC,gBAAAA,eAAe,EAAfA,eAtBI;AAuBJC,gBAAAA,cAAc,EAAdA,cAvBI;AAwBJL,gBAAAA,mBAAmB,EAAnBA,mBAxBI;AAyBJM,gBAAAA,WAAW,EAAXA,WAzBI;AA0BJC,gBAAAA,cAAc,EAAdA,cA1BI;AA2BJC,gBAAAA,WAAW,EAAXA,WA3BI;AA4BJG,gBAAAA,eAAe,EAAfA,eA5BI;AA6BJF,gBAAAA,YAAY,EAAZA,YA7BI;AA8BJC,gBAAAA,aAAa,EAAbA,aA9BI;AAgCJE,gBAAAA,mBAAmB,EAAnBA,mBAhCI;AAiCJC,gBAAAA,eAAe,EAAfA,eAjCI;AAkCJC,gBAAAA,iBAAiB,EAAjBA,iBAlCI;AAmCJC,gBAAAA,qBAAqB,EAArBA;AAnCI;AADR,aAFF,EAyCE;AAAEI,cAAAA,KAAK,EAAE;AAAT,aAzCF,EA2CE,UAASvK,GAAT,EAAcY,MAAd,EAAsB;AAAA;AAAA;;AACpB,kBAAIZ,GAAJ,EAAS;AAAA;AAAA;AACP6C,gBAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEPI,gBAAAA,GAAG,CAAC2C,IAAJ,CAAS/C,GAAT;AACD,eAHD,MAGO;AAAA;AAAA;AACL,uBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,kBAAAA,MAAM,EAAE,GADuB;AAE/B6B,kBAAAA,IAAI,EAAE,CACJ;AACED,oBAAAA,OAAO,EAAE,IADX;AAEErC,oBAAAA,MAAM,EAANA;AAFF,mBADI,CAFyB;AAQ/BO,kBAAAA,OAAO,EAAE;AARsB,iBAA1B,CAAP;AAUD;AACF,aA3DH;AA6DD,WApED;AAqED,SA9ED;AA+ED,OA3HD;AA4HD;;;WAED,iCAA+BhC,OAA/B,EAAwCuC,QAAxC,EAAkD;AAAA;;AAChD,8CAAsDvC,OAAO,CAACqB,IAA9D;AAAA,UAAQkT,uBAAR,UAAQA,uBAAR;AAAA,UAAiCvL,gBAAjC,UAAiCA,gBAAjC;;AADgD;;AAEhDF,sCAAyBnH,OAAzB,CAAiC;AAAE6D,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAjC,EAA6D,UAAS/D,GAAT,EAAcyF,IAAd,EAAoB;AAAA;AAAA;;AAC/E,YAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT,iBAAO/D,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA,SAD+E,CAK/E;AACA;;;AAN+E;AAO/EyC,QAAAA,IAAI,CAAC0C,gBAAL,GAAwB,6BAAAA,gBAAgB,kCAAI1C,IAAI,CAAC0C,gBAAT,CAAxC;AAP+E;AAQ/E1C,QAAAA,IAAI,CAACiO,uBAAL,GAA+B,6BAAAA,uBAAuB,kCAAIjO,IAAI,CAACiO,uBAAT,CAAtD;AAR+E;AAU/EjO,QAAAA,IAAI,CAAC/E,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,YAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAHD;AAAA;AAAA,WAD4B,CAM5B;;;AAN4B;AAO5B,iBAAOO,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,YAAAA,OAAO,EAAE,IAAX;AAAiBD,YAAAA,GAAG,EAAE;AAAtB,WAFD,CAAP;AAGD,SAVD;AAWD,OArBD;AAsBD;;;WAED,sCAAoC7D,OAApC,EAA6CuC,QAA7C,EAAuD;AAAA;;AACrD,8CAAyBvC,OAAO,CAACqB,IAAjC;AAAA,UAAQwP,KAAR,UAAQA,KAAR;AAAA,UAAe6D,KAAf,UAAeA,KAAf;;AADqD;;AAErDvS,4BAAUR,OAAV,CAAkB;AAAE6D,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAlB,EAA8C,UAAS/D,GAAT,EAAcyF,IAAd,EAAoB;AAAA;AAAA;;AAChE,YAAI,CAACA,IAAL,EAAW;AAAA;AAAA;AACT,iBAAO/D,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AACD,SAFD;AAAA;AAAA,SADgE,CAKhE;AACA;;;AANgE;AAOhEyC,QAAAA,IAAI,CAACuK,KAAD,CAAJ,GAAc,6BAAA6D,KAAK,kCAAIpO,IAAI,CAACuK,KAAD,CAAR,CAAnB;AAPgE;AAShEvK,QAAAA,IAAI,CAAC/E,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,YAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAHD;AAAA;AAAA;;AAD4B;AAK5B,iBAAOO,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,YAAAA,OAAO,EAAE,IAAX;AAAiBD,YAAAA,GAAG,EAAE;AAAtB,WAFD,CAAP;AAGD,SARD;AASD,OAlBD;AAmBD;;;WAED,2BAAyB7D,OAAzB,EAAkCuC,QAAlC,EAA4C;AAAA;AAAA;;AAC1C;AAEAuG,sCAAyBH,IAAzB,CAA8B;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAA9B,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,8BAAGmC,IAAH,CAAV;AADY;;AAGZ,YAAInC,IAAI,CAACiH,MAAL,IAAe,CAAnB,EAAsB;AAAA;AAAA;AACpBnF,UAAAA,OAAO,CAACC,GAAR,CACE2I,IAAI,CAACC,SAAL,CAAe;AACbrK,YAAAA,MAAM,EAAE,GADK;AAEbD,YAAAA,KAAK,EAAE;AAFM,WAAf,CADF;AADoB;AAOpB,iBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SAXD;AAAA;AAAA;;AAHY;;AAgBZ6G,wCAAyB0D,MAAzB,CAAgC;AAAEhH,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SAAhC,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAM0I,WAAW,8BAAG1I,IAAH,CAAjB;AADY;AAEZxB,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExB6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAE6H,WAAW,CAACjH,GADlB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFkB,WAA1B;AASD,SAZH,WAaS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdyB,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SAnBH;AAoBD,OArCH,WAsCS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdyB,QAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA5CH,EAH0C,CAiD1C;;AACD;;;WAED,mBAAiBhG,OAAjB,EAA0BuC,QAA1B,EAAoC;AAAA;AAAA;;AAClCoS,sBAAShM,IAAT,GACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAI6Q,OAAO,8BAAG7Q,IAAH,CAAX;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAYiR,OAAZ,EAAqB,YAArB;AAFY;;AAGZ,YAAIA,OAAO,CAAC/L,MAAR,KAAmB,CAAvB,EAA0B;AAAA;AAAA;AACxB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACE6Q,cAAAA,OAAO,EAAE,EADX;AAEE5S,cAAAA,OAAO,EAAE;AAFX,aADI;AAFyB,WAA1B,CAAP;AASD,SAVD;AAAA;AAAA;;AAHY;AAcZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE6Q,YAAAA,OAAO,EAAPA,OADF;AAEE5S,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OAxBH,WAyBS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,eAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OA7BN;AA+BD;;;WAED,yBAAuBhG,OAAvB,EAAgCuC,QAAhC,EAA0C;AAAA;AAAA;;AACxCoS,sBAAShM,IAAT,CAAc;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAd,EACGpD,IADH,CACQ,UAAA2L,KAAK,EAAI;AAAA;AAAA;;AACb,YAAIA,KAAK,CAACtE,MAAN,IAAgB,CAApB,EAAuB;AAAA;AAAA;AACrB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAMA,gDAAmBjC,OAAO,CAACqB,IAA3B;AAAA,YAAQa,MAAR,UAAQA,MAAR;;AAPa;;AASbyS,wBAASvH,SAAT,CACE;AAAE5H,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SADF,EAEE;AACE1C,UAAAA,MAAM,EAAEA;AADV,SAFF,EAMGV,IANH,CAMQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAMsJ,aAAa,8BAAGtJ,IAAH,CAAnB;AADY;AAGZ,iBAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAEyI,aAAa,CAAC7H,GADpB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFyB,WAA1B,CAAP;AASD,SAlBH,WAmBS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,UAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADY;AAEZ0B,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SAzBH;AA0BD,OApCH,WAqCS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdyB,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADc;AAEd0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA3CH;AA4CD;;;WAED,mBAAiBhG,OAAjB,EAA0BuC,QAA1B,EAAoC;AAAA;AAAA;;AAClCoS,sBAAShM,IAAT,CAAc;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAd,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,8BAAGmC,IAAH,CAAV;AADY;;AAGZ,YAAInC,IAAI,CAACiH,MAAL,IAAe,CAAnB,EAAsB;AAAA;AAAA;AACpBnF,UAAAA,OAAO,CAACC,GAAR,CACE2I,IAAI,CAACC,SAAL,CAAe;AACbrK,YAAAA,MAAM,EAAE,GADK;AAEbD,YAAAA,KAAK,EAAE;AAFM,WAAf,CADF;AADoB;AAOpB,iBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SAXD;AAAA;AAAA;;AAHY;;AAgBZ0S,wBAASnI,MAAT,CAAgB;AAAEhH,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SAAhB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAM0I,WAAW,8BAAG1I,IAAH,CAAjB;AADY;AAEZxB,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExB6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAE6H,WAAW,CAACjH,GADlB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFkB,WAA1B;AASD,SAZH,WAaS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdyB,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SAnBH;AAoBD,OArCH,WAsCS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdyB,QAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA5CH;AA6CD;;;WAED,sBAAoBhG,OAApB,EAA6BuC,QAA7B,EAAuC;AAAA;AAAA;;AACrCsS,2BAAmBlM,IAAnB,CAAwB;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAxB,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,8BAAGmC,IAAH,CAAV;AADY;;AAGZ,YAAInC,IAAI,CAACiH,MAAL,IAAe,CAAnB,EAAsB;AAAA;AAAA;AACpBnF,UAAAA,OAAO,CAACC,GAAR,CACE2I,IAAI,CAACC,SAAL,CAAe;AACbrK,YAAAA,MAAM,EAAE,GADK;AAEbD,YAAAA,KAAK,EAAE;AAFM,WAAf,CADF;AADoB;AAOpB,iBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SAXD;AAAA;AAAA;;AAHY;;AAgBZ4S,6BAAmBrI,MAAnB,CAA0B;AAAEhH,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SAA1B,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAM0I,WAAW,8BAAG1I,IAAH,CAAjB;AADY;AAEZxB,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExB6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAE6H,WAAW,CAACjH,GADlB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFkB,WAA1B;AASD,SAZH,WAaS,UAAAC,KAAK,EAAI;AAAA;AAAA;AACdyB,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SAnBH;AAoBD,OArCH,WAsCS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdyB,QAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADc;AAEdM,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA5CH;AA6CD;;;WAED,uBAAqBhG,OAArB,EAA8BuC,QAA9B,EAAwC;AAAA;AAAA;;AACtCsS,2BAAmBlM,IAAnB,GACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AAAA;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBI,IAAhC;AACA,YAAI+Q,YAAY,8BAAG/Q,IAAH,CAAhB;AAFY;;AAGZ,YAAI+Q,YAAY,CAACjM,MAAb,KAAwB,CAA5B,EAA+B;AAAA;AAAA;AAC7B,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACE+Q,cAAAA,YAAY,EAAE,EADhB;AAEE9S,cAAAA,OAAO,EAAE;AAFX,aADI;AAFyB,WAA1B,CAAP;AASD,SAVD;AAAA;AAAA,SAHY,CAcZ;;;AAdY;AAeZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE+Q,YAAAA,YAAY,EAAZA,YADF;AAEE9S,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OAzBH,WA0BS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA/BH;AAgCD;;;WAED,yBAAuBhG,OAAvB,EAAgCiB,GAAhC,EAAqC;AAAA;;AACnC,8CAUIjB,OAAO,CAACqB,IAVZ;AAAA,UACEa,MADF,UACEA,MADF;AAAA,UAEEa,OAFF,UAEEA,OAFF;AAAA,UAGEgS,QAHF,UAGEA,QAHF;AAAA,UAIExS,QAJF,UAIEA,QAJF;AAAA,UAKEnB,QALF,UAKEA,QALF;AAAA,UAME2D,YANF,UAMEA,YANF;AAAA,UAOE1C,KAPF,UAOEA,KAPF;AAAA,UAQE2S,WARF,UAQEA,WARF;AAAA,UASEC,OATF,UASEA,OATF;;AAYA,UAAMC,OAAO,8BAAG,IAAIL,oBAAJ,CAAuB;AACrCjQ,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoBgQ,oBAApB,EAAwC/P,OAAxC,EADiC;AAErC5C,QAAAA,MAAM,EAANA,MAFqC;AAGrC6S,QAAAA,QAAQ,EAARA,QAHqC;AAIrChS,QAAAA,OAAO,EAAPA,OAJqC;AAKrCR,QAAAA,QAAQ,EAARA,QALqC;AAMrCnB,QAAAA,QAAQ,EAARA,QANqC;AAOrC2D,QAAAA,YAAY,EAAZA,YAPqC;AAQrC1C,QAAAA,KAAK,EAALA,KARqC;AASrC2S,QAAAA,WAAW,EAAXA,WATqC;AAUrCC,QAAAA,OAAO,EAAPA;AAVqC,OAAvB,CAAH,CAAb;AAbmC;AA0BnCC,MAAAA,OAAO,CAAC3T,IAAR,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMoR,IAAI,8BAAGpR,IAAH,CAAV;AADY;AAEZ,eAAO9C,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAC1BG,UAAAA,MAAM,EAAE,GADkB;AAE1B6B,UAAAA,IAAI,EAAE,CACJ;AACEa,YAAAA,EAAE,EAAEuQ,IAAI,CAACvQ,EADX;AAEE5C,YAAAA,OAAO,EAAE;AAFX,WADI;AAFoB,SAArB,CAAP;AASD,OAZH,WAaS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADY;AAEZI,QAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AACnBG,UAAAA,MAAM,EAAE,GADW;AAEnBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFV,SAArB;AAID,OAnBH;AAoBD;;;WAED,6BAA2BhG,OAA3B,EAAoCoV,SAApC,EAA+C;AAAA;AAAA;;AAC7CP,2BAAmBlM,IAAnB,CAAwB;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAxB,EACGpD,IADH,CACQ,UAAA2L,KAAK,EAAI;AAAA;AAAA;;AACb,YAAIA,KAAK,CAACtE,MAAN,IAAgB,CAApB,EAAuB;AAAA;AAAA;AACrB,iBAAOuM,SAAS,CAAClT,MAAV,CAAiB,GAAjB,EAAsBH,IAAtB,CAA2B;AAChCG,YAAAA,MAAM,EAAE,GADwB;AAEhCD,YAAAA,KAAK,EAAE;AAFyB,WAA3B,CAAP;AAID,SALD;AAAA;AAAA;;AAMA,gDAQIjC,OAAO,CAACqB,IARZ;AAAA,YACEa,MADF,UACEA,MADF;AAAA,YAEE6S,QAFF,UAEEA,QAFF;AAAA,YAGExS,QAHF,UAGEA,QAHF;AAAA,YAIEnB,QAJF,UAIEA,QAJF;AAAA,YAKE2D,YALF,UAKEA,YALF;AAAA,YAME1C,KANF,UAMEA,KANF;AAAA,YAOE2S,WAPF,UAOEA,WAPF;;AAPa;;AAiBbH,6BAAmBzH,SAAnB,CACE;AAAE5H,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SADF,EAEE;AACE1C,UAAAA,MAAM,EAAE,6BAAAA,MAAM,kCAAIiL,KAAK,CAACjL,MAAV,CADhB;AAEE6S,UAAAA,QAAQ,EAAE,6BAAAA,QAAQ,kCAAI5H,KAAK,CAAC4H,QAAV,CAFpB;AAGE3T,UAAAA,QAAQ,EAAE,6BAAAA,QAAQ,kCAAI+L,KAAK,CAAC/L,QAAV,CAHpB;AAIE2D,UAAAA,YAAY,EAAE,6BAAAA,YAAY,kCAAIoI,KAAK,CAACpI,YAAV,CAJ5B;AAKE1C,UAAAA,KAAK,EAAE,6BAAAA,KAAK,kCAAI8K,KAAK,CAAC9K,KAAV,CALd;AAMEE,UAAAA,QAAQ,EAAE,6BAAAA,QAAQ,kCAAI4K,KAAK,CAAC5K,QAAV,CANpB;AAOEyS,UAAAA,WAAW,EAAE,6BAAAA,WAAW,kCAAI7H,KAAK,CAAC6H,WAAV;AAP1B,SAFF,EAYGxT,IAZH,CAYQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAMsJ,aAAa,8BAAGtJ,IAAH,CAAnB;AADY;AAGZ,iBAAOqR,SAAS,CAAClT,MAAV,CAAiB,GAAjB,EAAsBH,IAAtB,CAA2B;AAChCG,YAAAA,MAAM,EAAE,GADwB;AAEhC6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAEyI,aAAa,CAAC7H,GADpB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAF0B,WAA3B,CAAP;AASD,SAxBH,WAyBS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZuU,UAAAA,SAAS,CAAClT,MAAV,CAAiB,GAAjB,EAAsBH,IAAtB,CAA2B;AACzBG,YAAAA,MAAM,EAAE,GADiB;AAEzBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFJ,WAA3B;AAID,SA9BH;AA+BD,OAjDH,WAkDS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdmT,QAAAA,SAAS,CAAClT,MAAV,CAAiB,GAAjB,EAAsB0B,IAAtB,CAA2B;AACzB1B,UAAAA,MAAM,EAAE,GADiB;AAEzBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFJ,SAA3B;AAID,OAvDH;AAwDD;;;WAED,uCAAqChG,OAArC,EAA8CoV,SAA9C,EAAyD;AAAA;AAAA;;AACvDjT,4BAAUwG,IAAV,CAAe;AAAEtG,QAAAA,KAAK,EAAErC,OAAO,CAACsC,MAAR,CAAesC;AAAxB,OAAf,EACGpD,IADH,CACQ,UAAA2L,KAAK,EAAI;AAAA;AAAA;;AACb,YAAIA,KAAK,CAACtE,MAAN,IAAgB,CAApB,EAAuB;AAAA;AAAA;AACrB,iBAAOuM,SAAS,CAAClT,MAAV,CAAiB,GAAjB,EAAsBH,IAAtB,CAA2B;AAChCG,YAAAA,MAAM,EAAE,GADwB;AAEhCD,YAAAA,KAAK,EAAE;AAFyB,WAA3B,CAAP;AAID,SALD;AAAA;AAAA;;AAMA,gDAA+BjC,OAAO,CAACqB,IAAvC;AAAA,YAAQoF,kBAAR,UAAQA,kBAAR;;AAPa;;AASbtE,8BAAUiL,SAAV,CACE;AAAE5H,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SADF,EAEE;AACE6B,UAAAA,kBAAkB,EAAE,6BAAAA,kBAAkB,kCAAI0G,KAAK,CAAC1G,kBAAV;AADxC,SAFF,EAMGjF,IANH,CAMQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAMsJ,aAAa,8BAAGtJ,IAAH,CAAnB;AADY;AAGZ,iBAAOqR,SAAS,CAAClT,MAAV,CAAiB,GAAjB,EAAsBH,IAAtB,CAA2B;AAChCG,YAAAA,MAAM,EAAE,GADwB;AAEhC6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAEyI,aAAa,CAAC7H,GADpB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAF0B,WAA3B,CAAP;AASD,SAlBH,WAmBS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZuU,UAAAA,SAAS,CAAClT,MAAV,CAAiB,GAAjB,EAAsBH,IAAtB,CAA2B;AACzBG,YAAAA,MAAM,EAAE,GADiB;AAEzBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFJ,WAA3B;AAID,SAxBH;AAyBD,OAnCH,WAoCS,UAAA/D,KAAK,EAAI;AAAA;AAAA;AACdmT,QAAAA,SAAS,CAAClT,MAAV,CAAiB,GAAjB,EAAsB0B,IAAtB,CAA2B;AACzB1B,UAAAA,MAAM,EAAE,GADiB;AAEzBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFJ,SAA3B;AAID,OAzCH;AA0CD;;;WAED,sBAAoBhG,OAApB,EAA6BuC,QAA7B,EAAuC;AAAA;;AACrC,8CAAqCvC,OAAO,CAACqB,IAA7C;AAAA,UAAQgU,QAAR,UAAQA,QAAR;AAAA,UAAkBC,MAAlB,UAAkBA,MAAlB;AAAA,UAA0BpT,MAA1B,UAA0BA,MAA1B;;AAEA,UAAMgT,OAAO,8BAAG,IAAIK,eAAJ,CAAa;AAC3B3Q,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoB0Q,eAApB,EAA8BzQ,OAA9B,EADuB;AAE3BuQ,QAAAA,QAAQ,EAARA,QAF2B;AAG3BC,QAAAA,MAAM,EAANA,MAH2B;AAI3BpT,QAAAA,MAAM,EAANA;AAJ2B,OAAb,CAAH,CAAb;AAHqC;AAUrCgT,MAAAA,OAAO,CAAC3T,IAAR,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMoR,IAAI,8BAAGpR,IAAH,CAAV;AADY;AAEZ,eAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEa,YAAAA,EAAE,EAAEuQ,IAAI,CAACvQ,EADX;AAEE5C,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OAZH,WAaS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OAnBH;AAoBD;;;WAED,oBAAkBhG,OAAlB,EAA2BuC,QAA3B,EAAqC;AAAA;AAAA;;AACnCgT,sBAAS5M,IAAT,GACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAIyR,IAAI,8BAAGzR,IAAH,CAAR;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAY6R,IAAZ,EAAkB,MAAlB;AAFY;;AAGZ,YAAIA,IAAI,CAAC3M,MAAL,KAAgB,CAApB,EAAuB;AAAA;AAAA;AACrB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEyR,cAAAA,IAAI,EAAE,EADR;AAEExT,cAAAA,OAAO,EAAE;AAFX,aADI;AAFyB,WAA1B,CAAP;AASD,SAVD;AAAA;AAAA;;AAHY;AAcZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEyR,YAAAA,IAAI,EAAJA,IADF;AAEExT,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OAxBH,WAyBS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA9BH;AA+BD;;;WAED,0BAAwBhG,OAAxB,EAAiCuC,QAAjC,EAA2C;AAAA;AAAA;;AACzCgT,sBAAS5M,IAAT,CAAc;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAd,EACGpD,IADH,CACQ,UAAA2L,KAAK,EAAI;AAAA;AAAA;;AACb,YAAIA,KAAK,CAACtE,MAAN,IAAgB,CAApB,EAAuB;AAAA;AAAA;AACrB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAMA,gDAAqCjC,OAAO,CAACqB,IAA7C;AAAA,YAAQgU,QAAR,UAAQA,QAAR;AAAA,YAAkBC,MAAlB,UAAkBA,MAAlB;AAAA,YAA0BpT,MAA1B,UAA0BA,MAA1B;;AAPa;;AASbqT,wBAASnI,SAAT,CACE;AAAE5H,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SADF,EAEE;AACEyQ,UAAAA,QAAQ,EAAE,6BAAAA,QAAQ,kCAAIlI,KAAK,CAACkI,QAAV,CADpB;AAEEC,UAAAA,MAAM,EAAE,6BAAAA,MAAM,kCAAInI,KAAK,CAACmI,MAAV,CAFhB;AAGEpT,UAAAA,MAAM,EAAE,6BAAAA,MAAM,kCAAIiL,KAAK,CAACjL,MAAV;AAHhB,SAFF,EAQGV,IARH,CAQQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAM0R,GAAG,8BAAG1R,IAAH,CAAT;AADY;AAGZ,iBAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAE6Q,GAAG,CAACvT,MADV;AAEEF,cAAAA,OAAO,EAAE;AAFX,aADI;AAFyB,WAA1B,CAAP;AASD,SApBH,WAqBS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,iBAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAGE,SAzBN;AA2BD,OArCH,WAsCS,UAAA/D,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AACxB1B,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OA1CN;AA4CD;;;WAED,oBAAkBhG,OAAlB,EAA2BuC,QAA3B,EAAqC;AAAA;AAAA;;AACnC8Q,4BAAU1K,IAAV,GACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAI2R,aAAa,8BAAG3R,IAAH,CAAjB;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAY+R,aAAa,GAAG,eAA5B;AAFY;;AAGZ,YAAIA,aAAa,CAAC7M,MAAd,KAAyB,CAA7B,EAAgC;AAAA;AAAA;AAC9B8M,UAAAA,IAAI,GAAG,EAAP;AAD8B;AAG9B,iBAAOpT,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACE2R,cAAAA,aAAa,EAAE,EADjB;AAEE1T,cAAAA,OAAO,EAAE;AAFX,aADI;AAFyB,WAA1B,CAAP;AASD,SAZD;AAAA;AAAA;;AAHY;AAgBZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE2R,YAAAA,aAAa,EAAbA,aADF;AAEE1T,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OA1BH,WA2BS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,eAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OA/BN;AAiCD;;;WAED,0BAAwBhG,OAAxB,EAAiCuC,QAAjC,EAA2C;AAAA;;AACzC,8CAqBIvC,OAAO,CAACqB,IArBZ;AAAA,UACEa,MADF,UACEA,MADF;AAAA,UAEEoR,aAFF,UAEEA,aAFF;AAAA,UAGEsC,UAHF,UAGEA,UAHF;AAAA,UAIEC,QAJF,UAIEA,QAJF;AAAA,UAKEC,SALF,UAKEA,SALF;AAAA,UAMEzF,WANF,UAMEA,WANF;AAAA,UAOE0F,QAPF,UAOEA,QAPF;AAAA,UAQEC,oBARF,UAQEA,oBARF;AAAA,UASEC,qBATF,UASEA,qBATF;AAAA,UAUEC,qBAVF,UAUEA,qBAVF;AAAA,UAWEC,UAXF,UAWEA,UAXF;AAAA,UAYEC,iBAZF,UAYEA,iBAZF;AAAA,UAaEC,YAbF,UAaEA,YAbF;AAAA,UAcEC,OAdF,UAcEA,OAdF;AAAA,UAeEC,kBAfF,UAeEA,kBAfF;AAAA,UAgBEC,MAhBF,UAgBEA,MAhBF;AAAA,UAiBEC,cAjBF,UAiBEA,cAjBF;AAAA,UAkBEC,2BAlBF,UAkBEA,2BAlBF;AAAA,UAoBEC,cApBF,UAoBEA,cApBF;;AADyC;;AAwBzCtD,4BAAU1K,IAAV,CAAe;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAf,EACGpD,IADH,CACQ,UAAA2L,KAAK,EAAI;AAAA;AAAA;;AACb,YAAIA,KAAK,CAACtE,MAAN,IAAgB,CAApB,EAAuB;AAAA;AAAA;AACrB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAMA,gDAA6BjC,OAAO,CAACqB,IAArC;AAAA,YAAQgU,QAAR,UAAQA,QAAR;AAAA,YAAkBC,MAAlB,UAAkBA,MAAlB;;AAPa;;AASbjC,8BAAUjG,SAAV,CACE;AAAE5H,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SADF,EAEE;AACE1C,UAAAA,MAAM,EAAE,6BAAAA,MAAM,kCAAIiL,KAAK,CAACjL,MAAV,CADhB;AAEEoR,UAAAA,aAAa,EAAE,6BAAAA,aAAa,kCAAInG,KAAK,CAACmG,aAAV,CAF9B;AAGEsC,UAAAA,UAAU,EAAE,6BAAAA,UAAU,kCAAIzI,KAAK,CAACyI,UAAV,CAHxB;AAIEC,UAAAA,QAAQ,EAAE,6BAAAA,QAAQ,kCAAI1I,KAAK,CAAC0I,QAAV,CAJpB;AAKEC,UAAAA,SAAS,EAAE,6BAAAA,SAAS,kCAAI3I,KAAK,CAAC2I,SAAV,CALtB;AAMEzF,UAAAA,WAAW,EAAE,6BAAAA,WAAW,kCAAIlD,KAAK,CAACkD,WAAV,CAN1B;AAOE0F,UAAAA,QAAQ,EAAE,6BAAAA,QAAQ,kCAAI5I,KAAK,CAAC4I,QAAV,CAPpB;AAQEC,UAAAA,oBAAoB,EAAE,6BAAAA,oBAAoB,kCAAI7I,KAAK,CAAC6I,oBAAV,CAR5C;AASEC,UAAAA,qBAAqB,EAAE,6BAAAA,qBAAqB,kCAAI9I,KAAK,CAAC8I,qBAAV,CAT9C;AAUEC,UAAAA,qBAAqB,EAAE,6BAAAA,qBAAqB,kCAAI/I,KAAK,CAAC+I,qBAAV,CAV9C;AAWEC,UAAAA,UAAU,EAAE,6BAAAA,UAAU,kCAAIhJ,KAAK,CAACgJ,UAAV,CAXxB;AAYEC,UAAAA,iBAAiB,EAAE,6BAAAA,iBAAiB,kCAAIjJ,KAAK,CAACiJ,iBAAV,CAZtC;AAaEC,UAAAA,YAAY,EAAE,6BAAAA,YAAY,kCAAIlJ,KAAK,CAACkJ,YAAV,CAb5B;AAcEC,UAAAA,OAAO,EAAE,6BAAAA,OAAO,kCAAInJ,KAAK,CAACmJ,OAAV,CAdlB;AAeEC,UAAAA,kBAAkB,EAAE,6BAAAA,kBAAkB,kCAAIpJ,KAAK,CAACoJ,kBAAV,CAfxC;AAgBEC,UAAAA,MAAM,EAAE,6BAAAA,MAAM,kCAAIrJ,KAAK,CAACqJ,MAAV,CAhBhB;AAiBEC,UAAAA,cAAc,EAAE,6BAAAA,cAAc,kCAAItJ,KAAK,CAACsJ,cAAV,CAjBhC;AAkBEC,UAAAA,2BAA2B,EACzB,6BAAAA,2BAA2B,kCAAIvJ,KAAK,CAACuJ,2BAAV,CAnB/B;AAoBEC,UAAAA,cAAc,EAAE,6BAAAA,cAAc,kCAAIxJ,KAAK,CAACwJ,cAAV,CApBhC,CAqBE;;AArBF,SAFF,EA0BGnV,IA1BH,CA0BQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAM4R,IAAI,8BAAG5R,IAAH,CAAV;AADY;AAGZ,iBAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAE+Q,IAAI,CAACnQ,GADX;AAEEzB,cAAAA,IAAI,EAAE4R,IAFR;AAGE3T,cAAAA,OAAO,EAAE;AAHX,aADI;AAFyB,WAA1B,CAAP;AAUD,SAvCH,WAwCS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,iBAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAGE,SA5CN;AA8CD,OAxDH,WAyDS,UAAA/D,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AACxB1B,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OA7DN;AA+DD;;;WAED,sBAAoBhG,OAApB,EAA6BuC,QAA7B,EAAuC;AAAA;;AACrC,8CA0CIvC,OAAO,CAACqB,IA1CZ;AAAA,UACEa,MADF,UACEA,MADF;AAAA,UAEEoR,aAFF,UAEEA,aAFF;AAAA,UAGEsC,UAHF,UAGEA,UAHF;AAAA,UAIEgB,KAJF,UAIEA,KAJF;AAAA,UAKEC,KALF,UAKEA,KALF;AAAA,UAMEhB,QANF,UAMEA,QANF;AAAA,UAOEC,SAPF,UAOEA,SAPF;AAAA,UAQEzF,WARF,UAQEA,WARF;AAAA,UASE0F,QATF,UASEA,QATF;AAAA,UAUEC,oBAVF,UAUEA,oBAVF;AAAA,UAWEC,qBAXF,UAWEA,qBAXF;AAAA,UAYEC,qBAZF,UAYEA,qBAZF;AAAA,UAaEC,UAbF,UAaEA,UAbF;AAAA,UAcEC,iBAdF,UAcEA,iBAdF;AAAA,UAeEC,YAfF,UAeEA,YAfF;AAAA,UAgBEC,OAhBF,UAgBEA,OAhBF;AAAA,UAiBEC,kBAjBF,UAiBEA,kBAjBF;AAAA,UAkBEC,MAlBF,UAkBEA,MAlBF;AAAA,UAmBEM,GAnBF,UAmBEA,GAnBF;AAAA,UAqBEC,QArBF,UAqBEA,QArBF;AAAA,UAsBEL,2BAtBF,UAsBEA,2BAtBF;AAAA,UAwBEM,OAxBF,UAwBEA,OAxBF;AAAA,UA0BEC,YA1BF,UA0BEA,YA1BF;AAAA,UA4BEC,OA5BF,UA4BEA,OA5BF;AAAA,UA8BET,cA9BF,UA8BEA,cA9BF;AAAA,UAgCEE,cAhCF,UAgCEA,cAhCF;AAAA,UAkCEQ,cAlCF,UAkCEA,cAlCF;AAAA,UAoCEC,SApCF,UAoCEA,SApCF;AAAA,UAsCEC,OAtCF,UAsCEA,OAtCF;AAAA,UAwCEC,YAxCF,UAwCEA,YAxCF;AAAA,UAyCE/E,YAzCF,UAyCEA,YAzCF;;AA4CA,UAAM2C,OAAO,8BAAG,IAAI7B,qBAAJ,CAAc;AAC5BzO,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoBwO,qBAApB,EAA+BvO,OAA/B,EADwB;AAE5B5C,QAAAA,MAAM,EAANA,MAF4B;AAG5BoR,QAAAA,aAAa,EAAbA,aAH4B;AAI5BsC,QAAAA,UAAU,EAAVA,UAJ4B;AAK5BgB,QAAAA,KAAK,EAALA,KAL4B;AAM5BC,QAAAA,KAAK,EAAEf,SANqB;AAO5BD,QAAAA,QAAQ,EAARA,QAP4B;AAQ5BC,QAAAA,SAAS,EAATA,SAR4B;AAS5BzF,QAAAA,WAAW,EAAXA,WAT4B;AAU5B0F,QAAAA,QAAQ,EAARA,QAV4B;AAW5BC,QAAAA,oBAAoB,EAApBA,oBAX4B;AAY5BC,QAAAA,qBAAqB,EAArBA,qBAZ4B;AAa5BC,QAAAA,qBAAqB,EAArBA,qBAb4B;AAc5BC,QAAAA,UAAU,EAAVA,UAd4B;AAe5BC,QAAAA,iBAAiB,EAAjBA,iBAf4B;AAgB5BC,QAAAA,YAAY,EAAZA,YAhB4B;AAiB5BC,QAAAA,OAAO,EAAPA,OAjB4B;AAkB5BC,QAAAA,kBAAkB,EAAlBA,kBAlB4B;AAmB5BC,QAAAA,MAAM,EAANA,MAnB4B;AAoB5BM,QAAAA,GAAG,EAAHA,GApB4B;AAsB5BC,QAAAA,QAAQ,EAARA,QAtB4B;AAuB5BL,QAAAA,2BAA2B,EAA3BA,2BAvB4B;AAyB5BM,QAAAA,OAAO,EAAPA,OAzB4B;AA2B5BC,QAAAA,YAAY,EAAZA,YA3B4B;AA6B5BC,QAAAA,OAAO,EAAPA,OA7B4B;AA+B5BT,QAAAA,cAAc,EAAdA,cA/B4B;AAiC5BE,QAAAA,cAAc,EAAdA,cAjC4B;AAmC5BQ,QAAAA,cAAc,EAAdA,cAnC4B;AAqC5BC,QAAAA,SAAS,EAATA,SArC4B;AAuC5BC,QAAAA,OAAO,EAAPA,OAvC4B;AAyC5BC,QAAAA,YAAY,EAAZA,YAzC4B;AA0C5B/E,QAAAA,YAAY,EAAZA;AA1C4B,OAAd,CAAH,CAAb;AA7CqC;AA0FrC2C,MAAAA,OAAO,CAAC3T,IAAR,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMoR,IAAI,8BAAGpR,IAAH,CAAV;AADY;AAEZ,eAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEa,YAAAA,EAAE,EAAEuQ,IAAI,CAACvQ,EADX;AAEE5C,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OAZH,WAaS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OAnBH;AAoBD;;;WAED,qBAAmBhG,OAAnB,EAA4BuC,QAA5B,EAAsC;AAAA;AAAA;AACpC,aAAOA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,QAAAA,MAAM,EAAE,GADuB;AAE/B6B,QAAAA,IAAI,EAAE,CACJ;AACEwT,UAAAA,OAAO,EAAEC,oBADX;AAEExV,UAAAA,OAAO,EAAE;AAFX,SADI;AAFyB,OAA1B,CAAP,CADoC,CAWpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;;WAED,8BAA4BhC,OAA5B,EAAqCuC,QAArC,EAA+C;AAAA;AAAA;;AAC7CkV,gCAAkB9O,IAAlB,GACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAM2T,cAAc,8BAAG3T,IAAH,CAApB;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAY+T,cAAZ,EAA4B,0BAA5B;AAFY;;AAGZ,YAAIA,cAAc,CAAC7O,MAAf,KAA0B,CAA9B,EAAiC;AAAA;AAAA;AAC/B,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAHY;AASZ,eAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE2T,YAAAA,cAAc,EAAdA,cADF;AAGE1V,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OApBH,WAqBS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAzBN;AA2BD;;;WAED,uBAAqBhG,OAArB,EAA8BuC,QAA9B,EAAwC;AAAA;AAAA;;AACtCoV,0BAAUhP,IAAV,GACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAM6T,IAAI,8BAAG7T,IAAH,CAAV,CADY,CAEZ;;AAFY;;AAGZ,YAAI6T,IAAI,CAAC/O,MAAL,KAAgB,CAApB,EAAuB;AAAA;AAAA;AACrB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACE6T,cAAAA,IAAI,EAAE,EADR;AAGE5V,cAAAA,OAAO,EAAE;AAHX,aADI;AAFyB,WAA1B,CAAP;AAUD,SAXD;AAAA;AAAA;;AAHY;AAeZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE6T,YAAAA,IAAI,EAAJA,IADF;AAGE5V,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OA1BH,WA2BS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OA/BN;AAiCD;;;WAED,4BAA0BhG,OAA1B,EAAmCuC,QAAnC,EAA6C;AAAA;AAAA;;AAC3CoV,0BAAUhP,IAAV,CAAe;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAf,EACGpD,IADH,CACQ,UAAA2L,KAAK,EAAI;AAAA;AAAA;;AACb,YAAIA,KAAK,CAACtE,MAAN,IAAgB,CAApB,EAAuB;AAAA;AAAA;AACrB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAMA,gDAAmBjC,OAAO,CAACqB,IAA3B;AAAA,YAAQa,MAAR,UAAQA,MAAR;;AAPa;;AASbyV,4BAAUvK,SAAV,CACE;AAAE5H,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SADF,EAEE;AACE1C,UAAAA,MAAM,EAAEA;AADV,SAFF,EAMGV,IANH,CAMQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAMsJ,aAAa,8BAAGtJ,IAAH,CAAnB;AADY;AAGZ,iBAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAEyI,aAAa,CAAC7H,GADpB;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFyB,WAA1B,CAAP;AASD,SAlBH,WAmBS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,UAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADY;AAEZ0B,UAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAID,SAzBH;AA0BD,OApCH,WAqCS,UAAA/D,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AACxB1B,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAzCN;AA2CD;;;WAED,+BAA6BhG,OAA7B,EAAsCuC,QAAtC,EAAgD;AAAA;AAAA;;AAC9CyP,gCAAcrJ,IAAd,GACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMkO,QAAQ,8BAAGlO,IAAH,CAAd,CADY,CAEZ;;AAFY;;AAGZ,YAAIkO,QAAQ,CAACpJ,MAAT,KAAoB,CAAxB,EAA2B;AAAA;AAAA;AACzB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEkO,cAAAA,QAAQ,EAAE,EADZ;AAGEjQ,cAAAA,OAAO,EAAE;AAHX,aADI;AAFyB,WAA1B,CAAP;AAUD,SAXD;AAAA;AAAA;;AAHY;AAeZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEkO,YAAAA,QAAQ,EAARA,QADF;AAGEjQ,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OA1BH,WA2BS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OA/BN;AAiCD;;;WAED,kCAAgChG,OAAhC,EAAyCuC,QAAzC,EAAmD;AAAA;AACjD,UAAIsV,QAAQ,8BAAGzY,OAAO,CAAC,UAAD,CAAV,CAAZ;;AAEA,8CAWIY,OAAO,CAACqB,IAXZ;AAAA,UACE6Q,WADF,UACEA,WADF;AAAA,UAEEC,aAFF,UAEEA,aAFF;AAAA,UAGEC,aAHF,UAGEA,aAHF;AAAA,UAIEC,gBAJF,UAIEA,gBAJF;AAAA,UAKEC,SALF,UAKEA,SALF;AAAA,UAMEC,YANF,UAMEA,YANF;AAAA,UAOEC,kBAPF,UAOEA,kBAPF;AAAA,UAQEC,SARF,UAQEA,SARF;AAAA,UASEC,WATF,UASEA,WATF;AAAA,UAUEC,cAVF,UAUEA,cAVF;;AAaA,UAAMmF,WAAW,8BAAG,IAAI9F,yBAAJ,CAAkB;AACpCpN,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoBmN,yBAApB,EAAmClN,OAAnC,EADgC;AAEpCoN,QAAAA,WAAW,EAAXA,WAFoC;AAGpCY,QAAAA,aAAa,EAAEX,aAHqB;AAIpCY,QAAAA,aAAa,EAAEX,aAJqB;AAKpCC,QAAAA,gBAAgB,EAAhBA,gBALoC;AAMpCC,QAAAA,SAAS,EAATA,SANoC;AAOpCC,QAAAA,YAAY,EAAZA,YAPoC;AAQpCC,QAAAA,kBAAkB,EAAlBA,kBARoC;AASpCC,QAAAA,SAAS,EAAEoF,QAAQ,CAACE,KAAT,CAAeC,QAAf,CAAwBvF,SAAxB,CATyB;AAUpCC,QAAAA,WAAW,EAAXA,WAVoC;AAWpCC,QAAAA,cAAc,EAAdA,cAXoC;AAYpCE,QAAAA,OAAO,EAAEgF,QAAQ,CAACE,KAAT,CAAeC,QAAf,CAAwB1F,SAAxB,CAZ2B;AAapC2F,QAAAA,OAAO,EAAEJ,QAAQ,CAACE,KAAT,CAAeC,QAAf,CAAwBvF,SAAxB,CAb2B;AAcpC6E,QAAAA,YAAY,EAAE,IAAItP,IAAJ;AAdsB,OAAlB,CAAH,CAAjB;AAhBiD;AAiCjD8P,MAAAA,WAAW,CAACvW,IAAZ,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMmU,QAAQ,8BAAGnU,IAAH,CAAd;AADY;AAEZ,eAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEa,YAAAA,EAAE,EAAEsT,QAAQ,CAACtT,EADf;AAEE5C,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OAZH,WAaS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OAnBH;AAoBD;;;WAED,gCAA8BhG,OAA9B,EAAuCuC,QAAvC,EAAiD;AAAA;AAAA;;AAC/C4V,mCAAqBxP,IAArB,GACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMqU,gBAAgB,8BAAGrU,IAAH,CAAtB;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAYyU,gBAAZ,EAA8B,qCAA9B;AAFY;;AAGZ,YAAIA,gBAAgB,CAACvP,MAAjB,KAA4B,CAAhC,EAAmC;AAAA;AAAA;AACjC,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAHY;AASZ,eAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEqU,YAAAA,gBAAgB,EAAhBA,gBADF;AAGEpW,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OApBH,WAqBS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAzBN;AA2BD;;;WAED,gCAA8BhG,OAA9B,EAAuCuC,QAAvC,EAAiD;AAAA;AAAA;;AAC/C8V,mCAAqB1P,IAArB,GACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMuU,gBAAgB,8BAAGvU,IAAH,CAAtB;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAY2U,gBAAZ,EAA8B,qCAA9B;AAFY;;AAGZ,YAAIA,gBAAgB,CAACzP,MAAjB,KAA4B,CAAhC,EAAmC;AAAA;AAAA;AACjC,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAHY;AASZ,eAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEuU,YAAAA,gBAAgB,EAAhBA,gBADF;AAGEtW,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OApBH,WAqBS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAzBN;AA2BD;;;WAED,6BAA2BhG,OAA3B,EAAoCuC,QAApC,EAA8C;AAAA;AAAA;;AAC5CgW,wCAA0B5P,IAA1B,GACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMyU,gBAAgB,8BAAGzU,IAAH,CAAtB;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAY6U,gBAAZ,EAA8B,qCAA9B;AAFY;;AAGZ,YAAIA,gBAAgB,CAAC3P,MAAjB,KAA4B,CAAhC,EAAmC;AAAA;AAAA;AACjC,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAHY;AASZ,eAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEyU,YAAAA,gBAAgB,EAAhBA,gBADF;AAGExW,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OApBH,WAqBS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAzBN;AA2BD;;;WAED,gCAA8BhG,OAA9B,EAAuCuC,QAAvC,EAAiD;AAAA;AAAA;;AAC/CkW,qCAAW9P,IAAX,GACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAM2U,WAAW,8BAAG3U,IAAH,CAAjB;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAY+U,WAAZ,EAAyB,gCAAzB;AAFY;;AAGZ,YAAIA,WAAW,CAAC7P,MAAZ,KAAuB,CAA3B,EAA8B;AAAA;AAAA;AAC5B,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAHY;AASZ,eAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE2U,YAAAA,WAAW,EAAXA,WADF;AAGE1W,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OApBH,WAqBS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAzBN;AA2BD;;;WAED,iCAA+BhG,OAA/B,EAAwCuC,QAAxC,EAAkD;AAAA;AAAA;;AAChDoW,oCAAsBhQ,IAAtB,GACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAM6U,iBAAiB,8BAAG7U,IAAH,CAAvB;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAYiV,iBAAZ,EAA+B,sCAA/B;AAFY;;AAGZ,YAAIA,iBAAiB,CAAC/P,MAAlB,KAA6B,CAAjC,EAAoC;AAAA;AAAA;AAClC,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAHY;AASZ,eAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE6U,YAAAA,iBAAiB,EAAjBA,iBADF;AAGE5W,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OApBH,WAqBS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAzBN;AA2BD;;;WAED,8BAA4BhG,OAA5B,EAAqCuC,QAArC,EAA+C;AAAA;;AAC7C,8CAOIvC,OAAO,CAACqB,IAPZ;AAAA,UACEwX,eADF,UACEA,eADF;AAAA,UAEEC,eAFF,UAEEA,eAFF;AAAA,UAGEC,eAHF,UAGEA,eAHF;AAAA,UAIEC,eAJF,UAIEA,eAJF;AAAA,UAKEC,QALF,UAKEA,QALF;AAAA,UAMElS,IANF,UAMEA,IANF;;AAD6C;;AAU7C,cAAQA,IAAR;AACE,aAAK,QAAL;AAAA;AAAA;;AACE0Q,oCAAkB9V,OAAlB,CAA0B;AAAE6D,YAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,WAA1B,EAAsD,UAAS/D,GAAT,EAAcqY,QAAd,EAAwB;AAAA;AAAA;;AAC5E,gBAAI,CAACA,QAAL,EAAe;AAAA;AAAA;AACb,qBAAO3W,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEC,gBAAAA,GAAG,EAAE;AAAP,eAFD,CAAP;AAGD,aAJD;AAAA;AAAA;;AAD4E;AAM5EqV,YAAAA,QAAQ,CAACL,eAAT,GAA2B,6BAAAA,eAAe,kCAAIK,QAAQ,CAACL,eAAb,CAA1C;AAN4E;AAO5EK,YAAAA,QAAQ,CAACJ,eAAT,GAA2B,6BAAAA,eAAe,kCAAII,QAAQ,CAACJ,eAAb,CAA1C;AAP4E;AAS5EI,YAAAA,QAAQ,CAACF,eAAT,GAA2B,6BAAAA,eAAe,kCAAIE,QAAQ,CAACF,eAAb,CAA1C;AAT4E;AAU5EE,YAAAA,QAAQ,CAACH,eAAT,GAA2B,6BAAAA,eAAe,kCAAIG,QAAQ,CAACH,eAAb,CAA1C;AAV4E;AAW5EG,YAAAA,QAAQ,CAACD,QAAT,GAAoB,6BAAAA,QAAQ,kCAAIC,QAAQ,CAACD,QAAb,CAA5B;AAX4E;AAa5EC,YAAAA,QAAQ,CAAC3X,IAAT,CAAc,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAChC,kBAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,gBAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,uBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,kBAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,iBAA1B,CAAP;AACD,eAHD;AAAA;AAAA,eADgC,CAMhC;;;AANgC;AAOhC,qBAAOO,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,gBAAAA,OAAO,EAAE,IAAX;AAAiBD,gBAAAA,GAAG,EAAE;AAAtB,eAFD,CAAP;AAGD,aAVD;AAWD,WAxBD;;AADF;AA2BE;;AACF,aAAK,KAAL;AAAA;AAAA;;AACE4U,yCAAW9W,OAAX,CAAmB;AAAE6D,YAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,WAAnB,EAA+C,UAAS/D,GAAT,EAAcqY,QAAd,EAAwB;AAAA;AAAA;;AACrE,gBAAI,CAACA,QAAL,EAAe;AAAA;AAAA;AACb,qBAAO3W,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEC,gBAAAA,GAAG,EAAE;AAAP,eAFD,CAAP;AAGD,aAJD;AAAA;AAAA;;AADqE;AAOrEqV,YAAAA,QAAQ,CAACL,eAAT,GAA2B,6BAAAA,eAAe,kCAAIK,QAAQ,CAACL,eAAb,CAA1C;AAPqE;AAQrEK,YAAAA,QAAQ,CAACJ,eAAT,GAA2B,6BAAAA,eAAe,kCAAII,QAAQ,CAACJ,eAAb,CAA1C;AARqE;AAUrEI,YAAAA,QAAQ,CAACF,eAAT,GAA2B,6BAAAA,eAAe,kCAAIE,QAAQ,CAACF,eAAb,CAA1C;AAVqE;AAWrEE,YAAAA,QAAQ,CAACH,eAAT,GAA2B,6BAAAA,eAAe,kCAAIG,QAAQ,CAACH,eAAb,CAA1C;AAXqE;AAYrEG,YAAAA,QAAQ,CAACD,QAAT,GAAoB,6BAAAA,QAAQ,kCAAIC,QAAQ,CAACD,QAAb,CAA5B;AAZqE;AAcrEC,YAAAA,QAAQ,CAAC3X,IAAT,CAAc,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAChC,kBAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,gBAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,uBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,kBAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,iBAA1B,CAAP;AACD,eAHD;AAAA;AAAA,eADgC,CAMhC;;;AANgC;AAOhC,qBAAOO,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,gBAAAA,OAAO,EAAE,IAAX;AAAiBD,gBAAAA,GAAG,EAAE;AAAtB,eAFD,CAAP;AAGD,aAVD;AAWD,WAzBD;;AADF;AA4BE;;AACF,aAAK,UAAL;AAAA;AAAA;;AACEsU,uCAAqBxW,OAArB,CAA6B;AAAE6D,YAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,WAA7B,EAAyD,UAAS/D,GAAT,EAAcqY,QAAd,EAAwB;AAAA;AAAA;;AAC/E,gBAAI,CAACA,QAAL,EAAe;AAAA;AAAA;AACb,qBAAO3W,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEC,gBAAAA,GAAG,EAAE;AAAP,eAFD,CAAP;AAGD,aAJD;AAAA;AAAA;;AAD+E;AAM/EqV,YAAAA,QAAQ,CAACL,eAAT,GAA2B,6BAAAA,eAAe,kCAAIK,QAAQ,CAACL,eAAb,CAA1C;AAN+E;AAO/EK,YAAAA,QAAQ,CAACJ,eAAT,GAA2B,6BAAAA,eAAe,kCAAII,QAAQ,CAACJ,eAAb,CAA1C;AAP+E;AAS/EI,YAAAA,QAAQ,CAACF,eAAT,GAA2B,6BAAAA,eAAe,kCAAIE,QAAQ,CAACF,eAAb,CAA1C;AAT+E;AAU/EE,YAAAA,QAAQ,CAACH,eAAT,GAA2B,6BAAAA,eAAe,kCAAIG,QAAQ,CAACH,eAAb,CAA1C;AAV+E;AAW/EG,YAAAA,QAAQ,CAACD,QAAT,GAAoB,6BAAAA,QAAQ,kCAAIC,QAAQ,CAACD,QAAb,CAA5B;AAX+E;AAa/EC,YAAAA,QAAQ,CAAC3X,IAAT,CAAc,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAChC,kBAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,gBAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,uBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,kBAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,iBAA1B,CAAP;AACD,eAHD;AAAA;AAAA,eADgC,CAMhC;;;AANgC;AAOhC,qBAAOO,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,gBAAAA,OAAO,EAAE,IAAX;AAAiBD,gBAAAA,GAAG,EAAE;AAAtB,eAFD,CAAP;AAGD,aAVD;AAWD,WAxBD;;AADF;AA2BE;;AACF,aAAK,WAAL;AAAA;AAAA;;AACE8U,wCAAsBhX,OAAtB,CAA8B;AAAE6D,YAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,WAA9B,EAA0D,UAAS/D,GAAT,EAAcqY,QAAd,EAAwB;AAAA;AAAA;;AAChF,gBAAI,CAACA,QAAL,EAAe;AAAA;AAAA;AACb,qBAAO3W,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEC,gBAAAA,GAAG,EAAE;AAAP,eAFD,CAAP;AAGD,aAJD;AAAA;AAAA;;AADgF;AAOhFqV,YAAAA,QAAQ,CAACL,eAAT,GAA2B,6BAAAA,eAAe,kCAAIK,QAAQ,CAACL,eAAb,CAA1C;AAPgF;AAQhFK,YAAAA,QAAQ,CAACJ,eAAT,GAA2B,6BAAAA,eAAe,kCAAII,QAAQ,CAACJ,eAAb,CAA1C;AARgF;AAUhFI,YAAAA,QAAQ,CAACF,eAAT,GAA2B,6BAAAA,eAAe,kCAAIE,QAAQ,CAACF,eAAb,CAA1C;AAVgF;AAWhFE,YAAAA,QAAQ,CAACH,eAAT,GAA2B,6BAAAA,eAAe,kCAAIG,QAAQ,CAACH,eAAb,CAA1C;AAXgF;AAYhFG,YAAAA,QAAQ,CAACD,QAAT,GAAoB,6BAAAA,QAAQ,kCAAIC,QAAQ,CAACD,QAAb,CAA5B;AAZgF;AAchFC,YAAAA,QAAQ,CAAC3X,IAAT,CAAc,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAChC,kBAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,gBAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,uBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,kBAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,iBAA1B,CAAP;AACD,eAHD;AAAA;AAAA,eADgC,CAMhC;;;AANgC;AAOhC,qBAAOO,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,gBAAAA,OAAO,EAAE,IAAX;AAAiBD,gBAAAA,GAAG,EAAE;AAAtB,eAFD,CAAP;AAGD,aAVD;AAWD,WAzBD;;AADF;AA4BE;;AACF,aAAK,UAAL;AAAA;AAAA;;AACEwU,uCAAqB1W,OAArB,CAA6B;AAAE6D,YAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,WAA7B,EAAyD,UAAS/D,GAAT,EAAcqY,QAAd,EAAwB;AAAA;AAAA;;AAC/E,gBAAI,CAACA,QAAL,EAAe;AAAA;AAAA;AACb,qBAAO3W,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEC,gBAAAA,GAAG,EAAE;AAAP,eAFD,CAAP;AAGD,aAJD;AAAA;AAAA;;AAD+E;AAM/EqV,YAAAA,QAAQ,CAACL,eAAT,GAA2B,6BAAAA,eAAe,kCAAIK,QAAQ,CAACL,eAAb,CAA1C;AAN+E;AAO/EK,YAAAA,QAAQ,CAACJ,eAAT,GAA2B,6BAAAA,eAAe,kCAAII,QAAQ,CAACJ,eAAb,CAA1C;AAP+E;AAS/EI,YAAAA,QAAQ,CAACF,eAAT,GAA2B,6BAAAA,eAAe,kCAAIE,QAAQ,CAACF,eAAb,CAA1C;AAT+E;AAU/EE,YAAAA,QAAQ,CAACH,eAAT,GAA2B,6BAAAA,eAAe,kCAAIG,QAAQ,CAACH,eAAb,CAA1C;AAV+E;AAW/EG,YAAAA,QAAQ,CAACD,QAAT,GAAoB,6BAAAA,QAAQ,kCAAIC,QAAQ,CAACD,QAAb,CAA5B;AAX+E;AAa/EC,YAAAA,QAAQ,CAAC3X,IAAT,CAAc,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAChC,kBAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,gBAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,uBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,kBAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,iBAA1B,CAAP;AACD,eAHD;AAAA;AAAA,eADgC,CAMhC;;;AANgC;AAOhC,qBAAOO,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,gBAAAA,OAAO,EAAE,IAAX;AAAiBD,gBAAAA,GAAG,EAAE;AAAtB,eAFD,CAAP;AAGD,aAVD;AAWD,WAxBD;;AADF;AA2BE;;AACF,aAAK,UAAL;AAAA;AAAA;;AACE0U,4CAA0B5W,OAA1B,CAAkC;AAAE6D,YAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,WAAlC,EAA8D,UAAS/D,GAAT,EAAcqY,QAAd,EAAwB;AAAA;AAAA;;AACpF,gBAAI,CAACA,QAAL,EAAe;AAAA;AAAA;AACb,qBAAO3W,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEC,gBAAAA,GAAG,EAAE;AAAP,eAFD,CAAP;AAGD,aAJD;AAAA;AAAA;;AADoF;AAOpFqV,YAAAA,QAAQ,CAACL,eAAT,GAA2B,6BAAAA,eAAe,kCAAIK,QAAQ,CAACL,eAAb,CAA1C;AAPoF;AAQpFK,YAAAA,QAAQ,CAACJ,eAAT,GAA2B,6BAAAA,eAAe,kCAAII,QAAQ,CAACJ,eAAb,CAA1C;AARoF;AAUpFI,YAAAA,QAAQ,CAACF,eAAT,GAA2B,6BAAAA,eAAe,kCAAIE,QAAQ,CAACF,eAAb,CAA1C;AAVoF;AAWpFE,YAAAA,QAAQ,CAACH,eAAT,GAA2B,6BAAAA,eAAe,kCAAIG,QAAQ,CAACH,eAAb,CAA1C;AAXoF;AAYpFG,YAAAA,QAAQ,CAACD,QAAT,GAAoB,6BAAAA,QAAQ,kCAAIC,QAAQ,CAACD,QAAb,CAA5B;AAZoF;AAcpFC,YAAAA,QAAQ,CAAC3X,IAAT,CAAc,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAChC,kBAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,gBAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,uBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,kBAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,iBAA1B,CAAP;AACD,eAHD;AAAA;AAAA,eADgC,CAMhC;;;AANgC;AAOhC,qBAAOO,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAEE,gBAAAA,OAAO,EAAE,IAAX;AAAiBD,gBAAAA,GAAG,EAAE;AAAtB,eAFD,CAAP;AAGD,aAVD;AAWD,WAzBD;;AADF;AA4BE;AA3KJ;AA6KD;;;WAED,wBAAsB7D,OAAtB,EAA+BuC,QAA/B,EAAyC;AAAA;AAAA;AACvC,aAAOxB,WAAW,CAACoY,cAAZ,CAA2BnZ,OAA3B,EAAoCuC,QAApC,CAAP;AACD;;;WAED,uBAAqBvC,OAArB,EAA8BuC,QAA9B,EAAwC;AAAA;;AACtC,8CAWIvC,OAAO,CAACqB,IAXZ;AAAA,UACEsG,OADF,UACEA,OADF;AAAA,UAEEkE,KAFF,UAEEA,KAFF;AAAA,UAGE3J,MAHF,UAGEA,MAHF;AAAA,UAIEkG,SAJF,UAIEA,SAJF;AAAA,UAKE4H,YALF,UAKEA,YALF;AAAA,UAME3N,KANF,UAMEA,KANF;AAAA,UAOE4F,SAPF,UAOEA,SAPF;AAAA,UAQEC,MARF,UAQEA,MARF;AAAA,UASEkR,sBATF,UASEA,sBATF;AAAA,UAUErU,YAVF,UAUEA,YAVF;;AAaA,UAAMiH,WAAW,8BAAG,IAAIyC,sBAAJ,CAAe;AACjC7J,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoB4J,sBAApB,EAAgC3J,OAAhC,EAD6B;AAEjC6C,QAAAA,OAAO,EAAPA,OAFiC;AAGjCkE,QAAAA,KAAK,EAALA,KAHiC;AAIjC3J,QAAAA,MAAM,EAANA,MAJiC;AAKjCkG,QAAAA,SAAS,EAATA,SALiC;AAMjC4H,QAAAA,YAAY,EAAZA,YANiC;AAOjC3N,QAAAA,KAAK,EAALA,KAPiC;AAQjC4F,QAAAA,SAAS,EAATA,SARiC;AASjCC,QAAAA,MAAM,EAANA,MATiC;AAUjCkR,QAAAA,sBAAsB,EAAtBA,sBAViC;AAWjCrU,QAAAA,YAAY,EAAZA;AAXiC,OAAf,CAAH,CAAjB;AAdsC;AA4BtCiH,MAAAA,WAAW,CAACzK,IAAZ,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,8BAAGmC,IAAH,CAAV;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB;AAFY;AAIZ,eAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEnC,YAAAA,IAAI,EAAJA;AADF,WADI,CAFyB;AAO/BI,UAAAA,OAAO,EAAE;AAPsB,SAA1B,CAAP;AASD,OAdH,WAeS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,sBAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OArBH,EA5BsC,CAmDtC;AACD;;;WAED,8BAA4BhG,OAA5B,EAAqCuC,QAArC,EAA+C;AAAA;;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,8CAmBIvC,OAAO,CAACqB,IAnBZ;AAAA,UACEsG,OADF,UACEA,OADF;AAAA,UAEEoM,WAFF,UAEEA,WAFF;AAAA,UAGEtI,WAHF,UAGEA,WAHF;AAAA,UAIEC,OAJF,UAIEA,OAJF;AAAA,UAKEC,YALF,UAKEA,YALF;AAAA,UAOEE,KAPF,UAOEA,KAPF;AAAA,UASE3J,MATF,UASEA,MATF;AAAA,UAUE6J,QAVF,UAUEA,QAVF;AAAA,UAWEK,QAXF,UAWEA,QAXF;AAAA,UAYErH,YAZF,UAYEA,YAZF;AAAA,UAaE2H,aAbF,UAaEA,aAbF;AAAA,UAcEnG,SAdF,UAcEA,SAdF;AAAA,UAgBEnF,QAhBF,UAgBEA,QAhBF;AAAA,UAiBEiB,KAjBF,UAiBEA,KAjBF;AAAA,UAkBEgX,gBAlBF,UAkBEA,gBAlBF;;AAqBA,UAAMrN,WAAW,8BAAG,IAAI7K,oBAAJ,CAAkB;AACpCyD,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoB1D,oBAApB,EAAmC2D,OAAnC,EADgC;AAEpC6C,QAAAA,OAAO,EAAPA,OAFoC;AAIpCyR,QAAAA,sBAAsB,EAAErF,WAJY;AAKpC5H,QAAAA,SAAS,EAAEV,WALyB;AAMpCC,QAAAA,OAAO,EAAPA,OANoC;AAOpCQ,QAAAA,YAAY,EAAEP,YAPsB;AAQpC;AACAE,QAAAA,KAAK,EAALA,KAToC;AAUpC;AACA3J,QAAAA,MAAM,EAANA,MAXoC;AAYpC6J,QAAAA,QAAQ,EAARA,QAZoC;AAapCK,QAAAA,QAAQ,EAARA,QAboC;AAcpCrH,QAAAA,YAAY,EAAZA,YAdoC;AAgBpCkH,QAAAA,kBAAkB,EAAES,aAhBgB;AAgBD;AACnCnG,QAAAA,SAAS,EAATA,SAjBoC;AAiBzB;AAEXnF,QAAAA,QAAQ,EAARA,QAnBoC;AAoBpCiB,QAAAA,KAAK,EAALA,KApBoC;AAqBpCyM,QAAAA,WAAW,EAAE;AArBuB,OAAlB,CAAH,CAAjB;AApC6C;AA4D7C9C,MAAAA,WAAW,CAACzK,IAAZ,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,8BAAGmC,IAAH,CAAV;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB;AAFY;AAIZ,eAAOW,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEnC,YAAAA,IAAI,EAAJA;AADF,WADI,CAFyB;AAO/BI,UAAAA,OAAO,EAAE;AAPsB,SAA1B,CAAP;AASD,OAdH,WAeS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,sBAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OArBH,EA5D6C,CAmF7C;AACD;;;WAED,8BAA4BhG,OAA5B,EAAqCuC,QAArC,EAA+C;AAAA;AAAA;AAC7C,aAAOxB,WAAW,CAACuY,oBAAZ,CAAiCtZ,OAAjC,EAA0CuC,QAA1C,CAAP;AACD;;;WAED,6BAA2BvC,OAA3B,EAAoCuC,QAApC,EAA8C,CAC5C;;AAD4C;AAE7C;;;WAED,2BAAyBvC,OAAzB,EAAkCuC,QAAlC,EAA4C;AAAA;AAAA;;AAC1C8J,4BAAe1D,IAAf,GACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAM0H,WAAW,8BAAG1H,IAAH,CAAjB;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAYI,IAAI,GAAG,oBAAnB;AAFY;;AAGZ,YAAI0H,WAAW,CAAC5C,MAAZ,KAAuB,CAA3B,EAA8B;AAAA;AAAA;AAC5B,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACE0H,cAAAA,WAAW,EAAE,EADf;AAGEzJ,cAAAA,OAAO,EAAE;AAHX,aADI;AAFyB,WAA1B,CAAP;AAUD,SAXD;AAAA;AAAA;;AAHY;AAeZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE0H,YAAAA,WAAW,EAAXA,WADF;AAGEzJ,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OA1BH,WA2BS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OA/BN;AAiCD;;;WAED,yBAAuBhG,OAAvB,EAAgCuC,QAAhC,EAA0C;AAAA;AAAA;;AACxCpB,2BAAcwH,IAAd,GACE;AADF,OAEGnH,IAFH,CAEQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMwV,SAAS,8BAAGxV,IAAH,CAAf;AADY;AAEZL,QAAAA,OAAO,CAACC,GAAR,CAAYI,IAAI,GAAG,oBAAnB;AAFY;;AAGZ,YAAIwV,SAAS,CAAC1Q,MAAV,KAAqB,CAAzB,EAA4B;AAAA;AAAA;AAC1B,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEwV,cAAAA,SAAS,EAAE,EADb;AAGEvX,cAAAA,OAAO,EAAE;AAHX,aADI;AAFyB,WAA1B,CAAP;AAUD,SAXD;AAAA;AAAA;;AAHY;AAgBZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEwV,YAAAA,SAAS,EAATA,SADF;AAGEvX,YAAAA,OAAO,EAAE;AAHX,WADI;AAFyB,SAA1B,CAAP;AAUD,OA5BH,WA6BS,UAAAC,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAjCN;AAmCD;;;WAED,4BAA0BhG,OAA1B,EAAmCuC,QAAnC,EAA6C;AAAA;;AAAA;;AAC3C;AAEA,8CAqBIvC,OAAO,CAACqB,IArBZ;AAAA,UACEqL,aADF,UACEA,aADF;AAAA,UAEEC,cAFF,UAEEA,cAFF;AAAA,UAGEC,WAHF,UAGEA,WAHF;AAAA,UAIiBC,YAJjB,UAIEE,aAJF;AAAA,UAKEhB,QALF,UAKEA,QALF;AAAA,UAMEgB,aANF,UAMEA,aANF;AAAA,UAOExG,SAPF,UAOEA,SAPF;AAAA,UAQErE,MARF,UAQEA,MARF;AAAA,UASE4K,UATF,UASEA,UATF;AAAA,UAWEE,aAXF,UAWEA,aAXF;AAAA,UAYEtB,OAZF,UAYEA,OAZF;AAAA,UAaEtK,QAbF,UAaEA,QAbF;AAAA,UAcEiB,KAdF,UAcEA,KAdF;AAAA,UAeE0C,YAfF,UAeEA,YAfF;AAAA,UAgBE4C,OAhBF,UAgBEA,OAhBF;AAAA,UAiBEiG,QAjBF,UAiBEA,QAjBF;AAAA,UAkBE4L,WAlBF,UAkBEA,WAlBF;AAAA,UAmBE7L,cAnBF,UAmBEA,cAnBF;AAAA,UAoBE8L,gBApBF,UAoBEA,gBApBF;;AAuBA,UAAMxM,YAAY,8BAAG,IAAIZ,qBAAJ;AACnBzH,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoBwH,qBAApB,EAAoCvH,OAApC,EADe;AAEnB4H,QAAAA,aAAa,EAAbA,aAFmB;AAGnBC,QAAAA,cAAc,EAAdA,cAHmB;AAInBC,QAAAA,WAAW,EAAXA,WAJmB;AAKnBG,QAAAA,aAAa,EAAEF,YALI;AAMnBd,QAAAA,QAAQ,EAARA;AANmB,6EAOnBgB,aAPmB,mEAQnBxG,SARmB,gEASnBrE,MATmB,oEAUnB4K,UAVmB,uEAWnBC,aAXmB,uEAYnBC,aAZmB,iEAanBtB,OAbmB,kEAcnBtK,QAdmB,+DAenBiB,KAfmB,sEAgBnB0C,YAhBmB,iEAiBnB4C,OAjBmB,kEAkBnBiG,QAlBmB,qEAmBnB4L,WAnBmB,wEAoBnB7L,cApBmB,0EAqBnB8L,gBArBmB,qBAAH,CAAlB;AA1B2C;AAkD3CxM,MAAAA,YAAY,CAAC1L,IAAb,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,8BAAGmC,IAAH,CAAV;AACA,YAAMtC,MAAM,8BAAG;AACbiL,UAAAA,aAAa,EAAE9K,IAAI,CAAC8K,aADP;AAEbC,UAAAA,cAAc,EAAE/K,IAAI,CAAC+K,cAFR;AAGbC,UAAAA,WAAW,EAAEhL,IAAI,CAACgL,WAHL;AAIbC,UAAAA,YAAY,EAAEjL,IAAI,CAACiL,YAJN;AAKbd,UAAAA,QAAQ,EAAEnK,IAAI,CAACmK,QALF;AAMbgB,UAAAA,aAAa,EAAEnL,IAAI,CAACmL,aANP;AAObxG,UAAAA,SAAS,EAATA,SAPa;AAQbrE,UAAAA,MAAM,EAANA,MARa;AASb4K,UAAAA,UAAU,EAAVA,UATa;AAUbE,UAAAA,aAAa,EAAbA,aAVa;AAWb5L,UAAAA,QAAQ,EAAEQ,IAAI,CAACR,QAXF;AAYbiB,UAAAA,KAAK,EAAET,IAAI,CAACS,KAZC,CAab;;AAba,SAAH,CAAZ;AAFY;AAkBZ,eAAOE,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEtC,YAAAA,MAAM,EAANA;AADF,WADI,CAFyB;AAO/BO,UAAAA,OAAO,EAAE;AAPsB,SAA1B,CAAP;AASD,OA5BH,WA6BS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OAnCH;AAoCD;;;WAED,+BAA6BhG,OAA7B,EAAsCuC,QAAtC,EAAgD;AAAA;AAAA;;AAC9C8J,4BAAe1D,IAAf,CAAoB;AAAEnD,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAApB,EACGpD,IADH,CACQ,UAAA2L,KAAK,EAAI;AAAA;AAAA;;AACb,YAAIA,KAAK,CAACtE,MAAN,IAAgB,CAApB,EAAuB;AAAA;AAAA;AACrB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BD,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAMA,gDAMIjC,OAAO,CAACqB,IANZ;AAAA,YACEa,MADF,UACEA,MADF;AAAA,YAEEqU,kBAFF,UAEEA,kBAFF;AAAA,YAGEP,oBAHF,UAGEA,oBAHF;AAAA,YAIEC,qBAJF,UAIEA,qBAJF;AAAA,YAKEC,qBALF,UAKEA,qBALF;;AAPa;;AAeb7J,8BAAee,SAAf,CACE;AAAE5H,UAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,SADF,EAEE;AACE1C,UAAAA,MAAM,EAAE,6BAAAA,MAAM,kCAAIiL,KAAK,CAACjL,MAAV,CADhB;AAEEqU,UAAAA,kBAAkB,EAAE,6BAAAA,kBAAkB,kCAAIpJ,KAAK,CAAC6I,oBAAV,CAFxC;AAGEA,UAAAA,oBAAoB,EAAE,6BAAAA,oBAAoB,kCAAI7I,KAAK,CAAC6I,oBAAV,CAH5C;AAIEC,UAAAA,qBAAqB,EAAE,6BAAAA,qBAAqB,kCAAI9I,KAAK,CAAC8I,qBAAV,CAJ9C;AAKEC,UAAAA,qBAAqB,EAAE,6BAAAA,qBAAqB,kCAAI/I,KAAK,CAAC+I,qBAAV;AAL9C,SAFF,EAUG1U,IAVH,CAUQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,cAAM0R,GAAG,8BAAG1R,IAAH,CAAT;AADY;AAGZ,iBAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEa,cAAAA,EAAE,EAAE6Q,GAAG,CAACjQ,GADV;AAEExD,cAAAA,OAAO,EAAE;AAFX,aADI;AAFyB,WAA1B,CAAP;AASD,SAtBH,WAuBS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,iBAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,YAAAA,MAAM,EAAE,GADgB;AAExBD,YAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,WAA1B;AAGE,SA3BN;AA6BD,OA7CH,WA8CS,UAAA/D,KAAK,EACV;AAAA;AAAA;AAAA,eAAAM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AACxB1B,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OAlDN;AAoDD;;;WAED,6BAA2BhF,GAA3B,EAAgCC,GAAhC,EAAqC;AAAA;AAAA;;AACnCsH,8BAAYI,IAAZ,GACGnH,IADH,CACQ,UAAC8G,KAAD,EAAQrG,KAAR,EAAkB;AAAA;AAAA;;AACtB,YAAI,CAACqG,KAAL,EAAY;AAAA;AAAA;AACV;AACA5E,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AAFU;AAGVhB,UAAAA,GAAG,CAACsO,QAAJ,CAAajP,WAAW,GAAG,QAA3B;AACD,SAJD;AAAA;AAAA;;AAKA,YAAM6P,KAAK,8BAAG7H,KAAH,CAAX;AANsB;AAOtB5E,QAAAA,OAAO,CAACC,GAAR,CAAYwM,KAAZ;AAPsB;AAQtB,eAAOlP,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAC1BG,UAAAA,MAAM,EAAE,GADkB;AAE1B6B,UAAAA,IAAI,EAAE,CACJ;AACEoM,YAAAA,KAAK,EAALA,KADF;AAEEnO,YAAAA,OAAO,EAAE;AAFX,WADI;AAFoB,SAArB,CAAP;AASD,OAlBH,WAmBS,UAAA+N,CAAC,EAAI;AAAA;AAAA;AACVrM,QAAAA,OAAO,CAACC,GAAR,CAAYoM,CAAZ;AADU;AAEV9O,QAAAA,GAAG,CAACsO,QAAJ,CAAajP,WAAW,GAAG,QAA3B;AACD,OAtBH;AAuBD;;;WAED,kCAAgCN,OAAhC,EAAyCuC,QAAzC,EAAmD;AAAA;AACjD;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,UAAMgO,GAAG,8BAAG,IAAIvI,IAAJ,EAAH,CAAT;AACA,UAAM0R,KAAK,8BAAG,IAAI1R,IAAJ,CAASuI,GAAG,CAACE,WAAJ,EAAT,EAA4BF,GAAG,CAACG,QAAJ,EAA5B,EAA4CH,GAAG,CAACI,OAAJ,EAA5C,CAAH,CAAX;AArBiD;;AAsBjDV,gCAAatH,IAAb,CAAkB;AAAEgR,QAAAA,UAAU,EAAE;AAAEC,UAAAA,IAAI,EAAEF;AAAR;AAAd,OAAlB,EAAmDG,IAAnD,CAAwD,UAAShZ,GAAT,EAAciZ,MAAd,EAAsB;AAAA;AAAA;;AAC5E,YAAIjZ,GAAJ,EAAS;AAAA;AAAA;AACP,iBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/BF,YAAAA,OAAO,EAAE;AAFsB,WAA1B,CAAP;AAID,SALD;AAAA;AAAA;;AAOA,YAAI+X,UAAU,8BAAG,CAAH,CAAd;AACA,YAAIC,uBAAuB,8BAAGF,MAAM,CAACG,GAAP,CAAW,UAACC,IAAD,EAAOC,CAAP,EAAa;AAAA;AAAA;AACpDJ,UAAAA,UAAU,IAAIG,IAAI,CAAChS,MAAnB;AACD,SAF6B,CAAH,CAA3B;AAT4E;AAa5E,eAAO3F,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEqW,YAAAA,UAAU,EAAEL,UADd;AAEE/X,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OAtBD;AAuBD;;;WAED,sCAAoChC,OAApC,EAA6CuC,QAA7C,EAAuD;AAAA;AACrD,UAAI8X,cAAc,8BAAG,IAAIrS,IAAJ,EAAH,CAAlB;AADqD;AAErDqS,MAAAA,cAAc,CAACC,OAAf,CAAuBD,cAAc,CAAC1J,OAAf,KAA2B,CAAlD;AAFqD;AAGrD0J,MAAAA,cAAc,CAACE,QAAf,CAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAjC,EAHqD,CAIrD;;AAEA,UAAIC,YAAY,8BAAG,IAAIxS,IAAJ,EAAH,CAAhB;AANqD;AAOrDwS,MAAAA,YAAY,CAACF,OAAb,CAAqBE,YAAY,CAAC7J,OAAb,KAAyB,CAA9C;AAPqD;AAQrD6J,MAAAA,YAAY,CAACD,QAAb,CAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC,GAAlC;AARqD;;AAUrDtK,gCAAatH,IAAb,CAAkB;AAAEoL,QAAAA,WAAW,EAAE;AAAE0G,UAAAA,GAAG,EAAE,IAAIzS,IAAJ,CAASA,IAAI,CAACuI,GAAL,KAAa,KAAK,EAAL,GAAU,EAAV,GAAe,IAArC;AAAP;AAAf,OAAlB,EAAwFsJ,IAAxF,CACE,UAAShZ,GAAT,EAAciZ,MAAd,EAAsB;AAAA;AAAA;;AACpB,YAAIjZ,GAAJ,EAAS;AAAA;AAAA;AACP6C,UAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AACD,SAFD;AAAA;AAAA;;AAIA,YAAI6Z,SAAS,8BAAG,CAAH,CAAb;AACA,YAAIV,uBAAuB,8BAAGF,MAAM,CAACG,GAAP,CAAW,UAACC,IAAD,EAAOC,CAAP,EAAa;AAAA;AAAA;AACpDO,UAAAA,SAAS,IAAIR,IAAI,CAAChS,MAAlB;AACD,SAF6B,CAAH,CAA3B;AANoB;AAUpBxE,QAAAA,OAAO,CAACC,GAAR,CAAY+W,SAAZ;AAVoB;AAYpB,eAAOnY,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE4W,YAAAA,eAAe,EAAED,SADnB;AAEE1Y,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OAtBH;AAwBD;;;WAED,mCAAiChC,OAAjC,EAA0CuC,QAA1C,EAAoD;AAAA;AAClD,UAAIqY,UAAU,8BAAG5S,IAAI,CAAC,IAAIA,IAAJ,KAAa,IAAI,EAAJ,GAAS,EAAT,GAAc,EAAd,GAAmB,IAAjC,CAAP,CAAd,CADkD,CAGlD;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAvBkD;;AAyBlDiI,gCAAatH,IAAb,CAAkB;AAAEoL,QAAAA,WAAW,EAAE;AAAE6F,UAAAA,IAAI,EAAEgB;AAAR;AAAf,OAAlB,EAAyDf,IAAzD,CAA8D,UAAShZ,GAAT,EAAciZ,MAAd,EAAsB;AAAA;AAAA;;AAClF,YAAIjZ,GAAJ,EAAS;AAAA;AAAA;AACP6C,UAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AACD,SAFD;AAAA;AAAA;;AAIA,YAAIga,SAAS,8BAAG,CAAH,CAAb;AACA,YAAIb,uBAAuB,8BAAGF,MAAM,CAACG,GAAP,CAAW,UAACC,IAAD,EAAOC,CAAP,EAAa;AAAA;AAAA;AACpDU,UAAAA,SAAS,IAAIX,IAAI,CAAChS,MAAlB;AACD,SAF6B,CAAH,CAA3B;AANkF;AAUlF,eAAO3F,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE+W,YAAAA,WAAW,EAAED,SADf;AAEE7Y,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OAnBD;AAoBD;;;WAED,oCAAkChC,OAAlC,EAA2CuC,QAA3C,EAAqD;AAAA;AACnD,UAAMwY,UAAU,8BAAG,IAAI/S,IAAJ,CAAS,IAAIA,IAAJ,GAAW0I,QAAX,KAAwB,CAAjC,CAAH,CAAhB;AADmD;;AAEnDT,gCAAatH,IAAb,CACE;AACEoL,QAAAA,WAAW,EAAE;AACXiH,UAAAA,IAAI,EAAED;AADK;AADf,OADF,EAME,UAASla,GAAT,EAAcoa,IAAd,EAAoB;AAAA;AAAA;;AAClB,YAAIpa,GAAJ,EAAS;AAAA;AAAA;AACP6C,UAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AACD,SAFD;AAAA;AAAA;;AADkB;AAKlB,eAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEmX,YAAAA,SAAS,EAAED,IADb;AAEEjZ,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OApBH;AAsBD;;;WAED,0BAAwBhC,OAAxB,EAAiCuC,QAAjC,EAA2C;AAAA;AAAE;;;WAE7C,+BAA6BvC,OAA7B,EAAsCuC,QAAtC,EAAgD;AAAA;AAAE;;;WAElD,8BAA4BvB,GAA5B,EAAiCC,GAAjC,EAAsC;AAAA;AACpC,UAAM2D,EAAE,8BAAG,IAAImD,MAAJ,CAAW/G,GAAG,CAACsB,MAAJ,CAAWsC,EAAtB,CAAH,CAAR;AADoC;;AAEpC2D,8BAAYI,IAAZ,GACGnH,IADH,CACQ,UAAC8G,KAAD,EAAQrG,KAAR,EAAkB;AAAA;AAAA;;AACtB,YAAI,CAACqG,KAAL,EAAY;AAAA;AAAA;AACV;AACA5E,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AAFU;AAGVhB,UAAAA,GAAG,CAACsO,QAAJ,CAAajP,WAAW,GAAG,QAA3B;AACD,SAJD;AAAA;AAAA;;AAKA,YAAM6P,KAAK,8BAAG7H,KAAH,CAAX;AANsB;AAOtB5E,QAAAA,OAAO,CAACC,GAAR,CAAYwM,KAAK,GAAG,cAApB;AAPsB;AAQtB,eAAOlP,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAC1BG,UAAAA,MAAM,EAAE,GADkB;AAE1B6B,UAAAA,IAAI,EAAE,CACJ;AACEoX,YAAAA,OAAO,EAAEhL,KADX;AAEEnO,YAAAA,OAAO,EAAE;AAFX,WADI;AAFoB,SAArB,CAAP;AASD,OAlBH,WAmBS,UAAA+N,CAAC,EAAI;AAAA;AAAA;AACVrM,QAAAA,OAAO,CAACC,GAAR,CAAYoM,CAAZ;AADU;AAEV9O,QAAAA,GAAG,CAACsO,QAAJ,CAAajP,WAAW,GAAG,QAA3B;AACD,OAtBH;AAuBD;;;WAED,+BAA6BU,GAA7B,EAAkCC,GAAlC,EAAuC;AAAA;AACrC,UAAM2D,EAAE,8BAAG,IAAImD,MAAJ,CAAW/G,GAAG,CAACsB,MAAJ,CAAWsC,EAAtB,CAAH,CAAR;AADqC;;AAErCqL,gCAAatH,IAAb,GACGnH,IADH,CACQ,UAAC8G,KAAD,EAAQrG,KAAR,EAAkB;AAAA;AAAA;;AACtB,YAAI,CAACqG,KAAL,EAAY;AAAA;AAAA;AACV;AACA5E,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AAFU;AAGVhB,UAAAA,GAAG,CAACsO,QAAJ,CAAajP,WAAW,GAAG,QAA3B;AACD,SAJD;AAAA;AAAA;;AAKA,YAAM6P,KAAK,8BAAG7H,KAAH,CAAX;AANsB;AAOtB5E,QAAAA,OAAO,CAACC,GAAR,CAAYwM,KAAK,GAAG,cAApB;AAPsB;AAQtB,eAAOlP,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAC1BG,UAAAA,MAAM,EAAE,GADkB;AAE1B6B,UAAAA,IAAI,EAAE,CACJ;AACEqX,YAAAA,QAAQ,EAAEjL,KADZ;AAEEnO,YAAAA,OAAO,EAAE;AAFX,WADI;AAFoB,SAArB,CAAP;AASD,OAlBH,WAmBS,UAAA+N,CAAC,EAAI;AAAA;AAAA;AACVrM,QAAAA,OAAO,CAACC,GAAR,CAAYoM,CAAZ;AADU;AAEV9O,QAAAA,GAAG,CAACsO,QAAJ,CAAajP,WAAW,GAAG,QAA3B;AACD,OAtBH;AAuBD;;;WAED,iCAA+BU,GAA/B,EAAoCC,GAApC,EAAyC;AAAA;AACvC,UAAM2D,EAAE,8BAAG,IAAImD,MAAJ,CAAW/G,GAAG,CAACsB,MAAJ,CAAWsC,EAAtB,CAAH,CAAR;AADuC;;AAEvC6J,6BAAW9F,IAAX,GACGnH,IADH,CACQ,UAAC8G,KAAD,EAAQrG,KAAR,EAAkB;AAAA;AAAA;;AACtB,YAAI,CAACqG,KAAL,EAAY;AAAA;AAAA;AACV;AACA5E,UAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AAFU;AAGVhB,UAAAA,GAAG,CAACsO,QAAJ,CAAajP,WAAW,GAAG,QAA3B;AACD,SAJD;AAAA;AAAA;;AAKA,YAAM6P,KAAK,8BAAG7H,KAAH,CAAX;AANsB;AAOtB5E,QAAAA,OAAO,CAACC,GAAR,CAAYwM,KAAK,GAAG,yBAApB;AAPsB;AAQtB,eAAOlP,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAC1BG,UAAAA,MAAM,EAAE,GADkB;AAE1B6B,UAAAA,IAAI,EAAE,CACJ;AACEsX,YAAAA,UAAU,EAAElL,KADd;AAEEnO,YAAAA,OAAO,EAAE;AAFX,WADI;AAFoB,SAArB,CAAP;AASD,OAlBH,WAmBS,UAAA+N,CAAC,EAAI;AAAA;AAAA;AACVrM,QAAAA,OAAO,CAACC,GAAR,CAAYoM,CAAZ;AADU;AAEV9O,QAAAA,GAAG,CAACsO,QAAJ,CAAajP,WAAW,GAAG,QAA3B;AACD,OAtBH;AAuBD;;;WAED,oCAAkCN,OAAlC,EAA2CuC,QAA3C,EAAqD;AAAA;;AACnD,8CAQIvC,OAAO,CAACqB,IARZ;AAAA,UACEa,MADF,UACEA,MADF;AAAA,UAEEoZ,cAFF,UAEEA,cAFF;AAAA,UAGEjZ,KAHF,UAGEA,KAHF;AAAA,UAIEyM,WAJF,UAIEA,WAJF;AAAA,UAKEnH,OALF,UAKEA,OALF;AAAA,UAMEkE,KANF,UAMEA,KANF;AAAA,UAOEuN,sBAPF,UAOEA,sBAPF;;AADmD;;AAWnDjY,2BAAcQ,OAAd,CAAsB;AAAEgG,QAAAA,OAAO,EAAE3H,OAAO,CAACsC,MAAR,CAAesC;AAA1B,OAAtB,EAAsD,UAAS/D,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;AACxE;AACAA,QAAAA,IAAI,CAACM,MAAL,GAAc,6BAAAA,MAAM,kCAAIN,IAAI,CAACM,MAAT,CAApB;AAFwE;AAGxEN,QAAAA,IAAI,CAAC0Z,cAAL,GAAsB,6BAAAA,cAAc,kCAAI1Z,IAAI,CAAC0Z,cAAT,CAApC;AAHwE;AAIxE1Z,QAAAA,IAAI,CAACS,KAAL,GAAa,6BAAAA,KAAK,kCAAIT,IAAI,CAACS,KAAT,CAAlB;AAJwE;AAMxET,QAAAA,IAAI,CAACkN,WAAL,GAAmB,6BAAAA,WAAW,kCAAIlN,IAAI,CAACkN,WAAT,CAA9B;AANwE;AAOxElN,QAAAA,IAAI,CAAC+F,OAAL,GAAe,6BAAAA,OAAO,kCAAI/F,IAAI,CAAC+F,OAAT,CAAtB;AAPwE;AAQxE/F,QAAAA,IAAI,CAACiK,KAAL,GAAa,6BAAAA,KAAK,kCAAIjK,IAAI,CAACiK,KAAT,CAAlB;AARwE;AASxEjK,QAAAA,IAAI,CAACwX,sBAAL,GAA8B,6BAAAA,sBAAsB,kCAAIxX,IAAI,CAACwX,sBAAT,CAApD;AATwE;AAWxExX,QAAAA,IAAI,CAACL,IAAL,CAAU,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC5B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAFD;AAAA;AAAA;;AAD4B;AAI5B0B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAI,GAAG,OAAnB;AAJ4B;;AAM5BT,+BAAc+J,UAAd,CACE;AAAEvD,YAAAA,OAAO,EAAE3H,OAAO,CAACsC,MAAR,CAAesC;AAA1B,WADF,EAEE;AACEuG,YAAAA,IAAI,EAAE;AACJ;AACA,sCAAwBjJ;AAFpB;AADR,WAFF,EAQE;AAAEkJ,YAAAA,KAAK,EAAE;AAAT,WARF,EASE,UAASvK,GAAT,EAAcY,MAAd,EAAsB;AAAA;AAAA;;AACpB,gBAAIZ,GAAJ,EAAS;AAAA;AAAA;AACP6C,cAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP0B,cAAAA,QAAQ,CAACqB,IAAT,CAAc/C,GAAd;AACD,aAHD,MAGO;AAAA;AAAA;AACL6C,cAAAA,OAAO,CAACC,GAAR,CAAYlC,MAAZ;AADK;;AAGL,kBAAIG,IAAI,CAACM,MAAL,IAAe,QAAnB,EAA6B;AAAA;AAAA;AAC3BnB,gBAAAA,WAAW,CAAC8S,iBAAZ,CACE7T,OADF,EAEEuC,QAFF,EAGE,oCAHF,EAIE;AACEnB,kBAAAA,QAAQ,EAAEQ,IAAI,CAACR,QADjB;AAEEuG,kBAAAA,OAAO,EAAE/F,IAAI,CAAC+F,OAFhB;AAGEkE,kBAAAA,KAAK,EAAEjK,IAAI,CAACiK,KAHd;AAIE8H,kBAAAA,IAAI,EAAEyF,sBAAsB,CAACmC,SAAvB,CAAiC,CAAjC,EAAoC,EAApC,CAJR;AAKErX,kBAAAA,IAAI,EAAEzE,OAAO,CAACC,GAAR,CAAYoU,gBALpB;AAMEzD,kBAAAA,WAAW,EAAE;AANf,iBAJF,EAYEzO,IAAI,CAACS,KAZP,EAaE,GAbF;AAeD,eAhBD,MAgBO;AAAA;AAAA;AACLtB,gBAAAA,WAAW,CAAC8S,iBAAZ,CACE7T,OADF,EAEEuC,QAFF,EAGE,oCAHF,EAIE;AACEnB,kBAAAA,QAAQ,EAAEQ,IAAI,CAACR,QADjB;AAEEuG,kBAAAA,OAAO,EAAE/F,IAAI,CAAC+F,OAFhB;AAGEkE,kBAAAA,KAAK,EAAEjK,IAAI,CAACiK,KAHd;AAIE8H,kBAAAA,IAAI,EAAEyF,sBAAsB,CAACmC,SAAvB,CAAiC,CAAjC,EAAoC,EAApC,CAJR;AAKErX,kBAAAA,IAAI,EAAEzE,OAAO,CAACC,GAAR,CAAYoU,gBALpB;AAMEzD,kBAAAA,WAAW,EAAE;AANf,iBAJF,EAYEzO,IAAI,CAACS,KAZP,EAaE,GAbF;AAeD,eAnCI,CAqCL;;AACD;AACF,WApDH,EAN4B,CA4D5B;AACA;;AACD,SA9DD;AA+DD,OA1ED;AA2ED;;;WAED,oCAAkCrC,OAAlC,EAA2CuC,QAA3C,EAAqD;AAAA;;AACnD,8CAAqDvC,OAAO,CAACqB,IAA7D;AAAA,UAAQa,MAAR,UAAQA,MAAR;AAAA,UAAgB8M,YAAhB,UAAgBA,YAAhB;AAAA,UAA8BE,kBAA9B,UAA8BA,kBAA9B;;AACA,UAAID,qBAAqB,8BAAG,IAAH,CAAzB;AAFmD;;AAGnD,UAAIjP,OAAO,CAACqB,IAAR,CAAa4N,qBAAjB,EAAwC;AAAA;AAAA;AACtCA,QAAAA,qBAAqB,GAAGjP,OAAO,CAACqB,IAAR,CAAa4N,qBAArC;AACD,OAFD;AAAA;AAAA,OAHmD,CAOnD;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;AAxBmD;;AA0BnD5C,4BAAenB,UAAf,CACE;AAAEvD,QAAAA,OAAO,EAAEqH;AAAX,OADF,EAEE;AACE7D,QAAAA,IAAI,EAAE;AACJjJ,UAAAA,MAAM,EAAEA,MADJ;AAEJ8M,UAAAA,YAAY,EAAEA,YAFV;AAGJE,UAAAA,kBAAkB,EAAEA,kBAHhB;AAIJD,UAAAA,qBAAqB,EAAEA;AAJnB;AADR,OAFF,EAUE;AAAE7D,QAAAA,KAAK,EAAE;AAAT,OAVF,EAWE,UAASvK,GAAT,EAAcY,MAAd,EAAsB;AAAA;AAAA;;AACpB,YAAIZ,GAAJ,EAAS;AAAA;AAAA;AACP6C,UAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP0B,UAAAA,QAAQ,CAACqB,IAAT,CAAc/C,GAAd;AACD,SAHD,MAGO;AAAA;AAAA;AACL;AACA,iBAAO0B,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AACJ1B,YAAAA,MAAM,EAAE,GADJ;AAEJ4B,YAAAA,OAAO,EAAE,IAFL;AAGJD,YAAAA,GAAG,EAAE;AAHD,WAFD,CAAP;AAOD;AACF,OAzBH;AA2BD,K,CAED;;;;WAEA,8BAA4B7D,OAA5B,EAAqCuC,QAArC,EAA+C;AAAA;AAAA;AAC7C,aAAOA,QAAQ,CAACyE,QAAT,CAAkBxG,iBAAKyG,IAAL,CAAU9D,SAAS,GAAG,sBAAtB,CAAlB,CAAP;AACD;;;WAED,sBAAoBnD,OAApB,EAA6BuC,QAA7B,EAAuC;AAAA;AAAA;;AACrCJ,4BAAUwG,IAAV,CAAe;AAAEtG,QAAAA,KAAK,EAAErC,OAAO,CAACsC,MAAR,CAAesC;AAAxB,OAAf,EACGpD,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AAAA;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBI,IAAlC;AAEA,YAAM6E,QAAQ,8BAAG7E,IAAH,CAAd,CAHY,CAGW;;AAHX;;AAIZ,YAAI6E,QAAQ,CAACC,MAAT,IAAmB,CAAvB,EAA0B;AAAA;AAAA;AACxB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACE6E,cAAAA,QAAQ,EAARA,QADF;AAEE5G,cAAAA,OAAO,EAAE;AAFX,aADI;AAFyB,WAA1B,CAAP;AASD,SAVD;AAAA;AAAA;;AAJY;AAeZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE6E,YAAAA,QAAQ,EAARA,QADF;AAEE5G,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OAzBH,WA0BS,UAAAnB,GAAG,EACR;AAAA;AAAA;AAAA,eAAA0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAGE,OA9BN;AAgCD;;;WAED,mBAAiBhG,OAAjB,EAA0BuC,QAA1B,EAAoC;AAAA;AAAA;;AAClCiZ,oCAAuB7S,IAAvB,CAA4B,EAA5B,EACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AAAA;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBI,IAAlC;AAEA,YAAM0X,KAAK,8BAAG1X,IAAH,CAAX,CAHY,CAGQ;;AAHR;;AAIZ,YAAI0X,KAAK,CAAC5S,MAAN,IAAgB,CAApB,EAAuB;AAAA;AAAA;AACrB,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACE0X,cAAAA,KAAK,EAALA,KADF;AAEEzZ,cAAAA,OAAO,EAAE;AAFX,aADI;AAFyB,WAA1B,CAAP;AASD,SAVD;AAAA;AAAA;;AAJY;AAgBZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACE0X,YAAAA,KAAK,EAALA,KADF;AAEEzZ,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OA1BH,WA2BS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,4CAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OAjCH;AAkCD;;;WAED,qBAAmBhG,OAAnB,EAA4BuC,QAA5B,EAAsC;AAAA;;AACpC,8CAAmFvC,OAAO,CAACqB,IAA3F;AAAA,UAAMsS,IAAN,UAAMA,IAAN;AAAA,UAAY+H,KAAZ,UAAYA,KAAZ;AAAA,UAAmB9Z,IAAnB,UAAmBA,IAAnB;AAAA,UAAyB+Z,WAAzB,UAAyBA,WAAzB;AAAA,UAAsCzZ,MAAtC,UAAsCA,MAAtC;AAAA,UAA8C0Z,YAA9C,UAA8CA,YAA9C;AAAA,UAA4DC,UAA5D,UAA4DA,UAA5D;AAAA,UAAwExV,MAAxE,UAAwEA,MAAxE;;AAEA,UAAMyV,aAAa,8BAAG,IAAIN,6BAAJ,CAA2B;AAC/C5W,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoB2W,6BAApB,EAA4C1W,OAA5C,EAD2C;AAE/C6O,QAAAA,IAAI,EAAJA,IAF+C;AAG/C+H,QAAAA,KAAK,EAALA,KAH+C;AAI/C9Z,QAAAA,IAAI,EAAJA,IAJ+C;AAK/C+Z,QAAAA,WAAW,EAAXA,WAL+C;AAM/CzZ,QAAAA,MAAM,EAANA,MAN+C;AAO/C0Z,QAAAA,YAAY,EAAZA,YAP+C;AAQ/CC,QAAAA,UAAU,EAAVA,UAR+C;AAS/CxV,QAAAA,MAAM,EAANA;AAT+C,OAA3B,CAAH,CAAnB;AAHoC;AAepCyV,MAAAA,aAAa,CAACva,IAAd,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,8BAAGmC,IAAH,CAAV;AADY;AAEZ,eAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEnC,YAAAA,IAAI,EAAJA,IADF;AAEEI,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OAZH,WAaS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OAnBH;AAoBD;;;WAED,mBAAiBhG,OAAjB,EAA0BuC,QAA1B,EAAoC;AAAA;;AAClC,8CAeIvC,OAAO,CAACqB,IAfZ;AAAA,UACEa,MADF,UACEA,MADF;AAAA,UAGEoV,YAHF,UAGEA,YAHF;AAAA,UAIEyE,iBAJF,UAIEA,iBAJF;AAAA,UAKEpJ,cALF,UAKEA,cALF;AAAA,UAMED,WANF,UAMEA,WANF;AAAA,UAOEsJ,SAPF,UAOEA,SAPF;AAAA,UAQE/D,OARF,UAQEA,OARF;AAAA,UASEpF,OATF,UASEA,OATF;AAAA,UAUEoJ,SAVF,UAUEA,SAVF;AAAA,UAWEC,WAXF,UAWEA,WAXF;AAAA,UAYE3J,YAZF,UAYEA,YAZF;AAAA,UAaE4J,aAbF,UAaEA,aAbF;AAAA,UAcEC,cAdF,UAcEA,cAdF;;AAiBA,UAAMC,cAAc,8BAAG,IAAIC,oBAAJ,CAAc;AACnC1X,QAAAA,EAAE,EAAE,IAAIC,+BAAJ,CAAoByX,oBAApB,EAA+BxX,OAA/B,EAD+B;AAGnC5C,QAAAA,MAAM,EAANA,MAHmC;AAKnCoV,QAAAA,YAAY,EAAZA,YALmC;AAMnCyE,QAAAA,iBAAiB,EAAjBA,iBANmC;AAOnCpJ,QAAAA,cAAc,EAAdA,cAPmC;AAQnCD,QAAAA,WAAW,EAAXA,WARmC;AASnCsJ,QAAAA,SAAS,EAATA,SATmC;AAUnC/D,QAAAA,OAAO,EAAPA,OAVmC;AAWnCpF,QAAAA,OAAO,EAAPA,OAXmC;AAYnCoJ,QAAAA,SAAS,EAATA,SAZmC;AAanCC,QAAAA,WAAW,EAAXA,WAbmC;AAcnC3J,QAAAA,YAAY,EAAZA,YAdmC;AAenC4J,QAAAA,aAAa,EAAbA,aAfmC;AAgBnCC,QAAAA,cAAc,EAAdA;AAhBmC,OAAd,CAAH,CAApB;AAlBkC;AAqClCC,MAAAA,cAAc,CAAC9a,IAAf,GACGC,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMnC,IAAI,8BAAGmC,IAAH,CAAV;AADY;AAEZ,eAAOxB,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEnC,YAAAA,IAAI,EAAJA,IADF;AAEEI,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OAZH,WAaS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ6C,QAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAG,GAAG,YAAlB;AADY;AAEZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OAnBH;AAoBD;;;WAED,yBAAuBhG,OAAvB,EAAgCuC,QAAhC,EAA0C;AAAA;;AACxC,8CAAqCvC,OAAO,CAACqB,IAA7C;AAAA,UAAMuU,UAAN,UAAMA,UAAN;AAAA,UAAkBwG,cAAlB,UAAkBA,cAAlB;;AADwC;;AAGxC/I,4BAAU1R,OAAV,CAAkB;AAAE6D,QAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,OAAlB,EAA8C,UAAS/D,GAAT,EAAciW,GAAd,EAAmB;AAAA;AAAA;;AAC/D,YAAI,CAACA,GAAL,EACE;AAAA;AAAA;AAAA,iBAAOvU,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA1B,CAAP;AAA4F,SAD9F;AAAA;AAAA,SAD+D,CAI/D;;;AAJ+D;AAK/DiT,QAAAA,GAAG,CAAClB,UAAJ,GAAiB,6BAAAA,UAAU,kCAAIkB,GAAG,CAAClB,UAAR,CAA3B;AAL+D;AAM/DkB,QAAAA,GAAG,CAACsF,cAAJ,GAAqB,mEAAQtF,GAAG,CAACsF,cAAZ,CAArB;AAN+D;AAQ/DtF,QAAAA,GAAG,CAACvV,IAAJ,CAAS,UAASV,GAAT,EAAce,IAAd,EAAoB;AAAA;AAAA;;AAC3B,cAAIf,GAAJ,EAAS;AAAA;AAAA;AACP6C,YAAAA,OAAO,CAACC,GAAR,CAAY9C,GAAZ;AADO;AAEP,mBAAO0B,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAEhD,GAAG,CAACmB;AAAX,aAA1B,CAAP;AACD,WAHD;AAAA;AAAA;;AAD2B;AAM3B,iBAAOO,QAAQ,CACZL,MADI,CACG,GADH,EAEJ0B,IAFI,CAEC;AAAE1B,YAAAA,MAAM,EAAE,GAAV;AAAe4B,YAAAA,OAAO,EAAE,IAAxB;AAA8BD,YAAAA,GAAG,EAAE;AAAnC,WAFD,CAAP;AAGD,SATD;AAUD,OAlBD;AAmBD;;;WAED,uBAAqB7D,OAArB,EAA8BuC,QAA9B,EAAwC;AAAA;AAAA;;AACtC+Z,2BAAU3T,IAAV,CAAe,EAAf,EACGnH,IADH,CACQ,UAAAuC,IAAI,EAAI;AAAA;AACZ,YAAMwY,YAAY,8BAAGxY,IAAH,CAAlB,CADY,CACe;;AADf;;AAEZ,YAAIwY,YAAY,CAAC1T,MAAb,IAAuB,CAA3B,EAA8B;AAAA;AAAA;AAC5B,iBAAOtG,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,YAAAA,MAAM,EAAE,GADuB;AAE/B6B,YAAAA,IAAI,EAAE,CACJ;AACEwY,cAAAA,YAAY,EAAZA,YADF;AAEEva,cAAAA,OAAO,EAAE;AAFX,aADI;AAFyB,WAA1B,CAAP;AASD,SAVD;AAAA;AAAA;;AAFY;AAcZ,eAAOO,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AAC/BG,UAAAA,MAAM,EAAE,GADuB;AAE/B6B,UAAAA,IAAI,EAAE,CACJ;AACEwY,YAAAA,YAAY,EAAZA,YADF;AAEEva,YAAAA,OAAO,EAAE;AAFX,WADI;AAFyB,SAA1B,CAAP;AASD,OAxBH,WAyBS,UAAAnB,GAAG,EAAI;AAAA;AAAA;AACZ0B,QAAAA,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqBH,IAArB,CAA0B;AACxBG,UAAAA,MAAM,EAAE,GADgB;AAExBD,UAAAA,KAAK,EAAE6D,4BAAaC,MAAb,GAAsBC;AAFL,SAA1B;AAID,OA9BH;AA+BD;;;;;;iCAvqPUjF,W;6FAujCY,iBAAef,OAAf,EAAwBuC,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEOuG,gCAAyBnH,OAAzB,CAAiC;AACzDoH,cAAAA,UAAU,EAAE,IAD6C;AAEzDC,cAAAA,gBAAgB,EAAEhJ,OAAO,CAACsC,MAAR,CAAeoE;AAFwB,aAAjC,EAGvBmT,IALgB;;AAAA;AAEb2C,YAAAA,WAFa;AAAA;AAAA,6CAMZC,WANY;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;;;iCAvjCZ1b,W;6FAmkCY,kBAAef,OAAf,EAAwBuC,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEOuG,gCAAyBnH,OAAzB,CAAiC;AACzDoH,cAAAA,UAAU,EAAE,IAD6C;AAEzDC,cAAAA,gBAAgB,EAAEhJ,OAAO,CAACsC,MAAR,CAAeoE;AAFwB,aAAjC,EAGvBmT,IAHuB,EAFP;;AAAA;AAEb2C,YAAAA,WAFa;AAAA;AAAA,8CAMZC,WANY;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;;;iCAnkCZ1b,W;6FA+kCyB,kBAAef,OAAf,EAAwBuC,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAENJ,sBAAUwG,IAAV,CAAe;AAAEnD,cAAAA,GAAG,EAAExF,OAAO,CAACsC,MAAR,CAAesC;AAAtB,aAAf,EAA2CiV,IAA3C,EAFM;;AAAA;AAE1B2C,YAAAA,WAF0B;AAAA;AAAA,8CAGzBC,WAHyB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* eslint-disable prefer-const */\n\nimport dotenv from 'dotenv';\ndotenv.config();\nimport Database from '../models/db';\n/*pAy stack*/\nimport request from 'request';\nimport _ from 'lodash';\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\nconst csv = require('csv-parser');\nconst uuidv4 = require('uuid/v4');\nconst sgMail = require('@sendgrid/mail');\n\nvar postmark = require('postmark');\n\nimport carsApi from './cars_api';\n\nimport { passport, express } from '../App';\n//import EarningsModel from '../models/EarningsModel';\nimport AuditNotificationModel from '../models/AuditNotification.model';\nimport Retrieval from '../models/Retrival.model';\nimport UserPlanModel from '../models/UserPlan.model';\nimport PlanModel from '../models/Plan.model';\nimport ItineraryModel from '../models/Itinerary.model';\nimport IndividualPlanModel from '../models/IndividualPlan.model';\nimport NotificationModel from '../models/Notification.model';\nimport FAQModel from '../models/FAQ.model';\nimport coperatePlanModel from '../models/CoperatePlan.model';\nimport { TokenGenerator } from '../helpers/token_generator';\nimport { ErrorHandler } from '../helpers/error_handler';\nimport { ResponseHandler } from '../helpers/response_handler';\nimport UserModel from '../models/User.model.js';\nimport PartnersModel from '../models/Partners.model.js';\nimport EarningsModel from '../models/EarningsModel';\n//import DriversModel from \"../models/Driver.model.js\";\nimport WalletModel from '../models/Wallet.model.js';\nimport PaymentModel from '../models/Payments.model.js';\nimport QuotationsModel from '../models/Quotation.model.js';\nimport QuoteModel from '../models/Quote.model.js';\nimport AutoincrementId from '../helpers/autoincrement_mongo.js';\nimport EmailTokenMakerForSignUp from '../models/Token.model.js';\nimport ForgotPasswordToken from '../models/ForgotPassword.model.js';\nimport CarsModel from '../models/Cars.model.js';\nimport SOSModel from '../models/SOS.model';\nimport InterventionsModel from '../models/Feedback.model';\nimport SendgridEmailSettingModel from '../models/SendgridEmailSettings.model';\nimport PaystackSettingModel from '../models/PaystackSettings.model';\nimport InstagramSettingModel from '../models/InstagramSettings.model';\nimport FacebookSettingModel from '../models/FacebookSettings.model';\nimport AwsS3Model from '../models/AWS3BucketSettings.model';\nimport GmailSettingModel from '../models/GmailSettings.model';\n\nimport InspectionModel from '../models/Inspection.model';\nimport DriveTestModel from '../models/DriveTest.model';\nimport RolesAndPreviledgesModel from '../models/RolesAndPreviledges.model';\nimport MechModel from '../models/Repairs.model';\nimport nodemailer from 'nodemailer';\nimport crypto from 'crypto';\nimport path from 'path';\nconst sendgridTransport = require('nodemailer-sendgrid-transport');\n//import SocialAuthService from './social_auth_service';\nimport Storage from '../helpers/storage';\nimport multer from 'multer';\nimport Mixins from '../helpers/mixins';\nimport fs from 'fs';\nimport handlebars from 'handlebars';\n\nimport MailMan from './MailMan';\n\n// import carInfo  from \"../migrations/cars_info\";\n\n//other services\nimport CarsService from './cars_services';\nimport FaqService from './faqs_service';\nimport FeedbackService from './feedback_service';\nimport SOSService from './sos_service';\n\nimport MailConfig from '../config/email';\n\nprocess.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0;\n\nvar gmailTransport = MailConfig.GmailTransport;\nvar smtpTransport = MailConfig.SMTPTransport;\n\nconst { initializePayment, verifyPayment } = require('../config/paystack')(request);\n\nconst MongooseDatabase = Database.getInstance() || new Database();\nlet BACKEND_API = 'https://demouserapp.commute.ng:12000/api/v1';\n\nvar readHTMLFile = function(path, callback) {\n  fs.readFile(path, { encoding: 'utf-8' }, function(err, html) {\n    if (err) {\n      throw err;\n      callback(err);\n    } else {\n      callback(null, html);\n    }\n  });\n};\n\nexport class UserService {\n  static NotificationEmail(request, response, templateDir, replacements, userEmail, STATUS = 201) {\n    //MailConfig.ViewOption(gmailTransport,hbs);\n    let HelperOptions = {\n      from: ' \"Commute\" <noreply@commute.ng>', //\"tester@softclo.com\", //'\"COMMUTE TAXI SERVICE\" <juwavictor@gmail.com>',\n      to: userEmail, //'Joshua.adedoyin@softclo.com',\n      subject: 'Notification',\n      html: 'test',\n      context: {\n        name: 'COMMUTE TAXI',\n        email: 'tester@softclo.com',\n        address: '3A DOTUN CLOSE, IKEJA LAGOS',\n      },\n    };\n\n    //     Signed out\n    // Adedoyin Joshua\n    //joshadedoyin.aj@gmail.com\n\n    readHTMLFile(__dirname + templateDir, function(err, html) {\n      var template = handlebars.compile(html);\n      // var replacements = replacements;\n      var htmlToSend = template(replacements);\n\n      HelperOptions.html = htmlToSend;\n      smtpTransport.sendMail(HelperOptions, (error, info) => {\n        if (error) {\n          console.log(error);\n          //res.json(error);\n          return response.status(400).send({ msg: error });\n        }\n        // console.log(\"email is send\");\n        // console.log(info);\n        //res.json(info)\n        return response\n          .status(200)\n          .send({ status: 200, success: 'ok', msg: 'Successfully updated  .', data: info });\n        // return res.status(STATUS).send({ msg: \"successfully sent you a password reset link\", status:'ok',data: info });\n      });\n    });\n  }\n\n  static passwordResetsMail(\n    request,\n    response,\n    userEmail,\n    templateDir,\n    replacementObj = { username: 'saladin' },\n    tokenSTR,\n  ) {\n    let HelperOptions = {\n      from: ' \"Commute\" <noreply@commute.ng>', //'\"COMMUTE TAXI SERVICE\" <juwavictor@gmail.com>',\n      to: userEmail,\n      subject: 'Hellow world!',\n      html: 'test',\n      context: {\n        name: 'COMMUTE TAXI',\n        email: 'tester@softclo.com',\n        address: '3A DOTUN CLOSE, IKEJA LAGOS',\n      },\n    };\n\n    readHTMLFile(__dirname + templateDir, function(err, html) {\n      var template = handlebars.compile(html);\n      var replacements = {\n        username: replacementObj.username, //'juwavictor@gmail.com'\n        link: BACKEND_API + '/auth/resetMyPassword/' + tokenSTR,\n      };\n      var htmlToSend = template(replacements);\n\n      HelperOptions.html = htmlToSend;\n      smtpTransport.sendMail(HelperOptions, (error, info) => {\n        if (error) {\n          // console.log(error);\n          //res.json(error);\n          return response.status(400).send({ msg: error });\n        }\n        // console.log(\"email is send\");\n        // console.log(info);\n        //res.json(info)\n      });\n    });\n  }\n\n  static newUserMail(\n    request,\n    response,\n    result,\n    templateDir = '/views/templates/signup-verification.html',\n    tokenToSend,\n    status = 201,\n  ) {\n    let HelperOptions = {\n      from: ' \"Commute\" <noreply@commute.ng>', //'\"COMMUTE TAXI SERVICE\" <juwavictor@gmail.com>',  // process.env.SMTP_USER_NAME,\n      to: result.email, //'Joshua.adedoyin@softclo.com',\n      subject: 'Sign Up Activation Email',\n      html: 'test',\n      context: {\n        name: 'COMMUTE TAXI',\n        email: 'tester@softclo.com',\n        address: '3A DOTUN CLOSE, IKEJA LAGOS',\n      },\n    };\n\n    readHTMLFile(__dirname + templateDir, function(err, html) {\n      var template = handlebars.compile(html);\n      var replacements = {\n        username: result.username,\n        link: BACKEND_API + '/auth/confirmation/' + tokenToSend,\n      };\n      var htmlToSend = template(replacements);\n\n      HelperOptions.html = htmlToSend;\n      smtpTransport.sendMail(HelperOptions, (error, info) => {\n        if (error) {\n          console.log(error);\n          return response.status(400).send({ msg: error });\n        }\n        console.log('email is send');\n        console.log(info);\n        //res.json(info)\n      });\n    });\n  }\n  // static signup(request, response) {\n  //     let { firstname,\n  //         lastname,\n  //         username,\n  //         email,\n  //         phoneNumber,\n  //         user_type,\n  //         password,\n\n  //   } = request.body;\n\n  //   let from_mobile = false;\n  //   if(request.body.from_mobile==true){\n  //     from_mobile =true;\n  //   }\n\n  //   console.log(password)\n  //   password = TokenGenerator.hashPassword(password.trim());\n  //   let roles = '';\n  //   if(request.body.roles){\n  //     roles = request.body.roles\n  //   }else{\n  //     roles = 'user';\n  //   }\n\n  //   let Newuser =null\n\n  //   if(request.body.from_mobile){\n  //     Newuser = new UserModel({\n  //       id: new AutoincrementId(UserModel).counter(),\n  //       firstname,\n  //       lastname,\n  //       user_type,\n  //       username,\n  //       email,\n  //       phone_number: phoneNumber,\n  //       password,\n  //       is_admin: false,\n  //       roles: roles,\n  //       isVerified: true,\n  //       //accountNumber: uuidv4()\n  //        });\n\n  //   }else{\n\n  //     Newuser = new UserModel({\n  //           id: new AutoincrementId(UserModel).counter(),\n  //           firstname,\n  //           lastname,\n  //           user_type,\n  //           username,\n  //           email,\n  //           phone_number: phoneNumber,\n  //           password,\n  //           is_admin: false,\n  //           roles: roles,\n  //       //accountNumber: uuidv4()\n  //     });\n\n  //   }\n\n  //   if(from_mobile==false){\n\n  //     Newuser.save()\n  //     .then(data => {\n  //       const user = data;\n  //       const result = {\n  //         id: user.id,\n  //         email: user.email,\n  //         username: user.username,\n  //       };\n  //       let emailT = crypto.randomBytes(16).toString('hex');\n  //       // Create a verification token for this user\n  //       var emailtoken = new EmailTokenMakerForSignUp({ _userId: user._id, email_confirm_token: emailT });\n\n  //                         // Save the verification token\n  //       emailtoken.save(function (err) {\n  //           if (err) {\n  //              return console.log(err.message );\n  //           }\n\n  //                             //console.log(__dirname + '/views/templates/signup-verification.html')\n\n  //          UserService.newUserMail(request,response, result,'/views/templates/signup-verification.html', emailtoken.email_confirm_token,201)\n  //               const token = TokenGenerator.generateToken(result);\n  //               return response.status(201).json({\n  //                                          status: 201,\n  //                                         data: [\n  //                                                {\n  //                                                  token,\n  //                                                   from_mobile:true,\n  //                                                   user,\n  //                                                },\n  //                                               ],\n  //                                                message: 'User created successfully',\n  //               });\n\n  //          })\n\n  //     })\n  //     .catch(err => {\n  //           console.log(err+ 'error here')\n  //           response.status(400).json({\n  //             status: 400,\n  //             error: ErrorHandler.errors().validationError,\n  //           });\n  //     });\n\n  //   }else{\n\n  //     Newuser.save()\n  //     .then(data => {\n  //       const user = data;\n  //       const result = {\n  //         id: user.id,\n  //         email: user.email,\n  //         username: user.username,\n  //       };\n\n  //       const token = TokenGenerator.generateToken(result);\n  //       return response.status(201).json({\n  //               status: 201,\n  //               data: [\n  //                      {\n  //                       token,\n  //                       user,\n  //                      },\n  //                     ],\n  //                     message: 'User created successfully',\n  //             });\n  //     })\n  //     .catch(err => {\n  //           console.log(err+ 'error here')\n  //           response.status(400).json({\n  //             status: 400,\n  //             error: ErrorHandler.errors().validationError,\n  //           });\n  //     });\n\n  //   }\n\n  // }\n\n  // static login(request, response) {\n  //   const { email, password } = request.body;\n  //   UserModel.findOne({email: email})\n  //     .then(data => {\n  //       const user = data;\n  //       console.log(user.isVerified)\n\n  //       if (!user) {\n  //         return response.status(422).json({\n  //           status: 422,\n  //           error: 'User does not exists',\n  //         });\n\n  //       }\n\n  //       if(!user.isVerified){\n  //         let link = BACKEND_API + '/auth'\n  //         return response.status(422).json({\n  //           status: 422,\n  //           error: `<h6>Email verification step is needed. please check your email for a verification link or click the link to resend you an email verification</h6>\n\n  //           <a href=\"${link}/resend/${email}\">Resend </a>`,\n  //         });\n  //       }\n\n  //       if (!TokenGenerator.checkIfPasswordMatch(password, user.password)) {\n  //         return response.status(422).json({\n  //           status: 422,\n  //           error: 'Invalid login details. Email or password is wrong',\n  //         });\n  //       }\n\n  //       const result = {\n  //         id: user.id,\n  //         _id: user._id,\n  //         email: user.email,\n  //         isAdmin: user.is_admin,\n  //         isVerified:user.isVerified,\n  //         firstname: user.firstname,\n  //         username: user.username,\n  //          profile: user.avatar,\n  //         plan: user.plan_name,\n  //         balance: user.balance,\n  //         notification_count: user.notification_count,\n  //         user_type: user.user_type,\n  //         username:user.username,\n  //         phoneNumber: user.phone_number,\n  //         roles: user.roles,\n  //         test_certificate: user.test_certificate\n\n  //       };\n  //       const token = TokenGenerator.generateToken(result);\n  //       return response.status(200).json({\n  //         status: 200,\n  //         data: [\n  //           {\n  //             token,\n  //             user: {\n  //               id: user.id,\n  //                _id: user._id,\n  //               email: user.email,\n  //               isAdmin: user.is_admin,\n  //               isVerified:user.isVerified,\n  //               firstname: user.firstname,\n  //               username: user.username,\n  //               profile: user.avatar,\n  //               plan_name: user.plan_name,\n  //               balance: user.balance,\n  //               notification_count: user.notification_count,\n  //                user_type: user.user_type,\n  //                account_num: user.accountNumber,\n  //                username:user.username,\n  //                phoneNumber: user.phone_number,\n  //                roles: user.roles,\n  //               test_certificate: user.test_certificate\n  //             },\n  //           },\n  //         ],\n  //         message: 'Successfully signed in',\n  //       });\n  //     })\n  //     .catch(err =>\n  //       response.status(400).json({\n  //         status: 400,\n  //         error: ErrorHandler.errors().validationError,\n  //       }),\n  //     );\n  // }\n\n  //web sign up and login\n  static signup(request, response) {\n    let { firstname, lastname, username, email, phoneNumber, user_type, password } = request.body;\n\n    console.log(password);\n    password = TokenGenerator.hashPassword(password.trim());\n\n    const Newuser = new UserModel({\n      id: new AutoincrementId(UserModel).counter(),\n      firstname,\n      lastname,\n      user_type,\n      username,\n      email,\n      phone_number: phoneNumber,\n      password,\n      is_admin: false,\n      //accountNumber: uuidv4()\n    });\n\n    Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n        let emailT = crypto.randomBytes(16).toString('hex');\n        // Create a verification token for this user\n        var emailtoken = new EmailTokenMakerForSignUp({\n          _userId: user._id,\n          email_confirm_token: emailT,\n        });\n\n        // Save the verification token\n        emailtoken.save(function(err) {\n          if (err) {\n            return console.log(err.message);\n          }\n          console.log(emailtoken.email_confirm_token, emailtoken._userId);\n\n          //console.log(__dirname + '/views/templates/signup-verification.html')\n\n          let ress = UserService.newUserMail(\n            request,\n            response,\n            result,\n            '/views/templates/signup-verification.html',\n            emailtoken.email_confirm_token,\n            201,\n          );\n\n          const token = TokenGenerator.generateToken(result);\n\n          return response.status(201).json({\n            status: 201,\n            data: [\n              {\n                token,\n                user,\n              },\n            ],\n            message: 'User created successfully',\n          });\n        });\n      })\n      .catch(err => {\n        console.log(err + 'error here');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static login(request, response) {\n    const { email, password } = request.body;\n    UserModel.findOne({ email: email })\n      .then(data => {\n        const user = data;\n        console.log(user.isVerified);\n\n        if (!user) {\n          return response.status(422).json({\n            status: 422,\n            error: 'User does not exists',\n          });\n        }\n\n        if (!user.isVerified) {\n          return response.status(422).json({\n            status: 422,\n            error: `<h6>Email verification step is needed. please check your email for a verification link or click the link to resend you an email verification</h6> \n\n           <a href=\"https://demouserapp.commute.ng/api/v1/auth/resend/${email}\">Resend </a>`,\n          });\n        }\n        // console.log(email);\n        // console.log(password);\n        if (!TokenGenerator.checkIfPasswordMatch(password, user.password)) {\n          return response.status(422).json({\n            status: 422,\n            error: 'Invalid login details. Email or password is wrong',\n          });\n        }\n\n        //request.session.user = user;\n\n        const result = {\n          id: user.id,\n          _id: user._id,\n          email: user.email,\n          isAdmin: user.is_admin,\n          isVerified: user.isVerified,\n          firstname: user.firstname,\n          lastname: user.lastname,\n          username: user.username,\n          profile: user.avatar,\n          plan: user.plan_name,\n          balance: user.balance,\n          notification_count: user.notification_count,\n          user_type: user.user_type,\n          username: user.username,\n          phoneNumber: user.phone_number,\n          roles: user.roles,\n          test_certificate: user.test_certificate,\n        };\n        const token = TokenGenerator.generateToken(result);\n\n        //if request host is from user and user role is user or admin allow\n        //  if(request.headers.host==\"demouserapp.commute.ng\" && user.roles!=\"Individual Driver\"){\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              token,\n              user: {\n                id: user.id,\n                _id: user._id,\n                email: user.email,\n                isAdmin: user.is_admin,\n                isVerified: user.isVerified,\n                firstname: user.firstname,\n                username: user.username,\n                profile: user.avatar,\n                plan_name: user.plan_name,\n                balance: user.balance,\n                notification_count: user.notification_count,\n                user_type: user.user_type,\n                account_num: user.accountNumber,\n                username: user.username,\n                phoneNumber: user.phone_number,\n                roles: user.roles,\n                test_certificate: user.test_certificate,\n              },\n            },\n          ],\n          message: 'Successfully signed in',\n        });\n        //  }\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  //web sign up and login\n  static signupMobile(request, response) {\n    let { firstname, lastname, username, email, phoneNumber, user_type, password } = request.body;\n\n    console.log(password);\n    password = TokenGenerator.hashPassword(password.trim());\n\n    let from_mobile = false;\n    if (request.body.from_mobile == true) {\n      from_mobile = true;\n    }\n\n    console.log(password);\n\n    let roles = '';\n    if (request.body.roles) {\n      roles = request.body.roles;\n    } else {\n      roles = 'user';\n    }\n\n    const Newuser = new UserModel({\n      id: new AutoincrementId(UserModel).counter(),\n      firstname,\n      lastname,\n      user_type,\n      username,\n      email,\n      phone_number: phoneNumber,\n      password,\n      is_admin: false,\n      isVerified: true,\n      roles,\n      //accountNumber: uuidv4()\n    });\n\n    Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n        let emailT = crypto.randomBytes(16).toString('hex');\n        // Create a verification token for this user\n        // var emailtoken = new EmailTokenMakerForSignUp({ _userId: user._id, email_confirm_token: emailT });\n\n        // Save the verification token\n        // emailtoken.save(function (err) {\n        //     if (err) {\n        //       return console.log(err.message );\n        //      }\n        //     console.log(emailtoken.email_confirm_token, emailtoken._userId)\n\n        //console.log(__dirname + '/views/templates/signup-verification.html')\n\n        // UserService.newUserMail(request,response, result,'/views/templates/signup-verification.html', emailtoken.email_confirm_token,201)\n        const token = TokenGenerator.generateToken(result);\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              token,\n              user,\n            },\n          ],\n          message: 'User created successfully',\n        });\n\n        // });\n      })\n      .catch(err => {\n        console.log(err + 'error here');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static loginMobile(request, response) {\n    const { email, password } = request.body;\n    UserModel.findOne({ email: email })\n      .then(data => {\n        const user = data;\n        console.log(user.isVerified);\n\n        if (!user) {\n          return response.status(422).json({\n            status: 422,\n            error: 'User does not exists',\n          });\n        }\n\n        if (!user.isVerified) {\n          return response.status(422).json({\n            status: 422,\n            error: `<h6>Email verification step is needed. please check your email for a verification link or click the link to resend you an email verification</h6> \n\n           <a href=\"https://demouserapp.commute.ng/api/v1/auth/resend/${email}\">Resend </a>`,\n          });\n        }\n        // console.log(email);\n        // console.log(password);\n        if (!TokenGenerator.checkIfPasswordMatch(password, user.password)) {\n          return response.status(422).json({\n            status: 422,\n            error: 'Invalid login details. Email or password is wrong',\n          });\n        }\n\n        //request.session.user = user;\n\n        const result = {\n          id: user.id,\n          _id: user._id,\n          email: user.email,\n          isAdmin: user.is_admin,\n          isVerified: user.isVerified,\n          firstname: user.firstname,\n          username: user.username,\n          profile: user.avatar,\n          plan: user.plan_name,\n          balance: user.balance,\n          notification_count: user.notification_count,\n          user_type: user.user_type,\n          username: user.username,\n          phoneNumber: user.phone_number,\n          roles: user.roles,\n          test_certificate: user.test_certificate,\n        };\n        const token = TokenGenerator.generateToken(result);\n\n        //if request host is from user and user role is user or admin allow\n        //  if(request.headers.host==\"demouserapp.commute.ng\" && user.roles!=\"Individual Driver\"){\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              token,\n              user: {\n                id: user.id,\n                _id: user._id,\n                email: user.email,\n                isAdmin: user.is_admin,\n                isVerified: user.isVerified,\n                firstname: user.firstname,\n                username: user.username,\n                profile: user.avatar,\n                plan_name: user.plan_name,\n                balance: user.balance,\n                notification_count: user.notification_count,\n                user_type: user.user_type,\n                account_num: user.accountNumber,\n                username: user.username,\n                phoneNumber: user.phone_number,\n                roles: user.roles,\n                test_certificate: user.test_certificate,\n              },\n            },\n          ],\n          message: 'Successfully signed in',\n        });\n        //  }\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static logout(request, response) {}\n\n  static confirmationPost(req, res) {\n    // Find a matching token\n    EmailTokenMakerForSignUp.findOne({ email_confirm_token: req.params.id }, function(err, token) {\n      if (!token)\n        return res\n          .status(400)\n          .send({\n            type: 'not-verified',\n            msg: 'We were unable to find a valid token. Your token my have expired.',\n          });\n\n      // If we found a token, find a matching user email: req.body.email\n      UserModel.findOne({ _id: token._userId }, function(err, user) {\n        if (!user) {\n          //return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\n          return res.sendFile(path.join(__dirname + '../../../../../UI/user/page-503.html'));\n        }\n        if (user.isVerified) {\n          //return res.status(201).send({ type: 'already-verified', msg: 'This user has already been verified.' });\n          return res.sendFile(path.join(__dirname + '/views/templates/already-verified.html'));\n        }\n\n        // Verify and save the user\n        user.isVerified = true;\n        user.save(function(err) {\n          if (err) {\n            return res.status(500).send({ msg: err.message });\n          }\n          //res.status(200).send(\"The account has been verified. Please wait...\");\n\n          if (user.roles != 'Individual Driver') {\n            return res.sendFile(path.join(__dirname + '/views/templates/proceed-to-login.html'));\n          }\n          return res.sendFile(\n            path.join(__dirname + '/views/templates/proceed-to-login-driver.html'),\n          );\n        });\n      });\n    });\n  }\n\n  static userExists(request, response) {\n    UserModel.findOne({ email: request.body.email }, function(err, user) {\n      if (!user) {\n        return response.status(404).json({\n          status: 404,\n          data: [{}],\n          message: 'User Not found ',\n        });\n      }\n\n      return response.status(200).json({\n        status: 200,\n        data: [\n          {\n            email: user.email,\n            phone: user.phone_number,\n            username: user.username,\n          },\n        ],\n        message: 'User found successfully',\n      });\n    });\n  }\n\n  /**\n   * POST /resend\n   */\n  static resendTokenPost(req, res) {\n    UserModel.findOne({ email: req.params.id }, function(err, user) {\n      if (!user)\n        return res.status(400).send({ msg: 'We were unable to find a user with that email.' });\n\n      if (user.isVerified)\n        return res.sendFile(path.join(__dirname + '/views/already-verified.html'));\n\n      // Create a verification token, save it, and send email\n      var token = new EmailTokenMakerForSignUp({\n        _userId: user.id,\n        email_confirm_token: crypto.randomBytes(16).toString('hex'),\n      });\n      // Save the token\n      token.save(function(err) {\n        if (err) {\n          return res.status(500).send({ msg: err.message });\n        }\n\n        var result = {\n          id: user.id,\n          username: user.username,\n          firstname: user.firstname,\n          email: user.email,\n        };\n\n        var result2 = {\n          id: user.id,\n          username: user.username,\n          firstname: user.firstname,\n          email: user.email,\n        };\n\n        UserService.newUserMail(\n          req,\n          res,\n          result2,\n          '/views/templates/signup-verification.html',\n          token.email_confirm_token,\n          200,\n        );\n\n        const token = TokenGenerator.generateToken(result);\n        return res.status(200).json({\n          status: 200,\n          data: [\n            {\n              token,\n              result,\n            },\n          ],\n          message: 'User created successfully',\n        });\n      });\n    });\n  }\n\n  static passwordForgot(req, res) {\n    let email = req.body.email;\n    UserModel.findOne({ email: email }, function(err, user) {\n      if (!user)\n        return res.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      let hashedStringToSend = crypto.randomBytes(16).toString('hex');\n\n      Storage.setItem('hasher', hashedStringToSend);\n      // Create a verification token for this user\n      var ForgotModelToken = new ForgotPasswordToken({\n        _userId: user.id,\n        email_confirm_token: hashedStringToSend,\n        email_to_reset: email,\n      });\n\n      // Save the verification token\n      ForgotModelToken.save(function(err) {\n        if (err) {\n          return res.status(500).send({ msg: err.message });\n        }\n\n        UserService.passwordResetsMail(\n          req,\n          res,\n          user.email,\n          '/views/templates/reset-password.html',\n          { username: user.username },\n          hashedStringToSend,\n        );\n        return res\n          .status(200)\n          .send({ msg: 'successfully sent you a password reset link', status: 'ok' });\n      });\n    });\n  }\n\n  static confirmResetPassword(req, res) {\n    return res.sendFile(path.join(__dirname + '/views/pw-reset.html'));\n  }\n\n  static changePasswordTriggerMobile(req, res) {\n    let password = req.body.password;\n    let email = req.body.email;\n\n    // console.log(req.params.id)\n\n    // Find a matching token\n\n    // If we found a token, find a matching user email: req.body.email\n    UserModel.findOne({ email: email }, function(err, user) {\n      if (!user)\n        return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\n      //if (user.email != token.email_to_reset) return res.status(400).send({ type: 'No Reset Token', msg: 'This user reset token was not set.' });\n\n      // Verify and save the user\n      user.password = TokenGenerator.hashPassword(password.trim());\n      user.save(function(err) {\n        if (err) {\n          return res.status(500).send({ msg: err.message });\n        }\n        return res\n          .status(200)\n          .send({ msg: 'The account password has been reset. Please wait...', status: 'ok' });\n        //return  res.sendFile(path.join(__dirname + '/pw-reset-success.html'));\n      });\n    });\n  }\n\n  static setPlanIdForUser(request, response) {\n    let email = req.body.email;\n    let plan_id = req.body.plan_id;\n\n    // console.log(req.params.id)\n\n    // Find a matching token\n\n    // If we found a token, find a matching user email: req.body.email\n    UserModel.findOne({ email: email }, function(err, user) {\n      if (!user)\n        return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\n      //if (user.email != token.email_to_reset) return res.status(400).send({ type: 'No Reset Token', msg: 'This user reset token was not set.' });\n\n      // Verify and save the user\n      user.plan_id_to_pay = plan_id || 'No plan id';\n      user.save(function(err) {\n        if (err) {\n          return res.status(500).send({ msg: err.message });\n        }\n        return res.status(200).send({ msg: 'The plan id  has been updated', status: 'ok' });\n        //return  res.sendFile(path.join(__dirname + '/pw-reset-success.html'));\n      });\n    });\n  }\n\n  static getPlanIdForUser(request, response) {\n    let email = req.params.id;\n\n    // console.log(req.params.id)\n\n    // Find a matching token\n\n    // If we found a token, find a matching user email: req.body.email\n    UserModel.findOne({ email: email }, function(err, user) {\n      if (!user)\n        return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\n      //if (user.email != token.email_to_reset) return res.status(400).send({ type: 'No Reset Token', msg: 'This user reset token was not set.' });\n\n      // Verify and save the user\n      let plan_id = user.plan_id_to_pay || 'No plan id';\n      user.save(function(err) {\n        if (err) {\n          return res.status(500).send({ msg: err.message });\n        }\n        return res.status(200).send({ plan_id: plan_id, status: 'ok' });\n        //return  res.sendFile(path.join(__dirname + '/pw-reset-success.html'));\n      });\n    });\n  }\n\n  static walletUpgradeViaMobile(req, res) {\n    let balance = req.body.accountBalance;\n    let email = req.body.email;\n\n    // console.log(req.params.id)\n\n    // Find a matching token\n\n    // If we found a token, find a matching user email: req.body.email\n    UserModel.findOne({ email: email }, function(err, user) {\n      if (!user)\n        return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\n      //if (user.email != token.email_to_reset) return res.status(400).send({ type: 'No Reset Token', msg: 'This user reset token was not set.' });\n\n      // Verify and save the user\n      user.balance = balance;\n      user.save(function(err) {\n        if (err) {\n          return res.status(500).send({ msg: err.message });\n        }\n\n        //add wallet transaction\n\n        const newDonor = {\n          id: new String(new Date()),\n          reference,\n          amount: amount / 100,\n          email: customer.email,\n          full_name: metadata.full_name,\n          phone_number,\n        };\n\n        const donor = new WalletModel(newDonor);\n\n        donor.save().then((donor, error) => {\n          if (!donor) {\n            console.log(error);\n            return res.status(500).send({ msg: error });\n          }\n          return res\n            .status(200)\n            .send({ msg: 'The account balance has been updated', status: 'ok' });\n        });\n\n        //return  res.sendFile(path.join(__dirname + '/pw-reset-success.html'));\n      });\n    });\n  }\n\n  static changePasswordTrigger(req, res) {\n    let password = req.body.password;\n    let confirmPass = req.body.confirmPassword;\n    if (password != confirmPass) {\n      console.log('err here1');\n      return res.status(400).send({ msg: 'password do not match.' });\n    }\n    // console.log(req.params.id)\n\n    // Find a matching token\n    ForgotPasswordToken.findOne({ email_confirm_token: Storage.getItem('hasher') }, function(\n      err,\n      token,\n    ) {\n      console.log(token);\n      console.log(Storage.getItem('hasher'));\n      if (!token) {\n        console.log('error here 2');\n        console.log(err);\n        return res\n          .status(400)\n          .send({\n            type: 'not-verified',\n            msg: 'We were unable to find a valid token. Your token my have expired.',\n          });\n      }\n\n      // If we found a token, find a matching user email: req.body.email\n      UserModel.findOne({ email: token.email_to_reset }, function(err, user) {\n        if (!user)\n          return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\n        if (user.email != token.email_to_reset)\n          return res\n            .status(400)\n            .send({ type: 'No Reset Token', msg: 'This user reset token was not set.' });\n\n        // Verify and save the user\n        user.password = TokenGenerator.hashPassword(password.trim());\n        user.save(function(err) {\n          if (err) {\n            return res.status(500).send({ msg: err.message });\n          }\n          return res\n            .status(200)\n            .send({ msg: 'The account password has been reset. Please wait...', status: 'ok' });\n          //return  res.sendFile(path.join(__dirname + '/pw-reset-success.html'));\n        });\n      });\n    });\n  }\n\n  static showProfile(request, response) {\n    //profile-admin-rights\n\n    // UserModel.find({id: Number(request.params.id)})\n    UserModel.find({ email: request.params.id })\n      .then(data => {\n        console.log('specific profile:' + data);\n\n        const userInfo = data; //related\n        if (userInfo.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              userInfo,\n              message: 'Get a specific user was successful',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getAsyncRoles = async function(request, response) {\n    try {\n      const promiseList = await RolesAndPreviledgesModel.findOne({\n        for_admins: true,\n        previledges_info: request.params.roles,\n      }).exec;\n      return promistList;\n    } catch (err) {\n      return err;\n    }\n  };\n\n  static getAsyncUsers = async function(request, response) {\n    try {\n      const promiseList = await RolesAndPreviledgesModel.findOne({\n        for_admins: true,\n        previledges_info: request.params.roles,\n      }).exec();\n      return promistList;\n    } catch (err) {\n      return err;\n    }\n  };\n\n  static updateAsyncUserPreviledges = async function(request, response) {\n    try {\n      const promiseList = await UserModel.find({ _id: request.params.id }).exec();\n      return promistList;\n    } catch (err) {\n      return err;\n    }\n  };\n\n  static showProfileRights(request, response) {\n    //profile-admin-rights\n\n    console.log(request.params.roles + 'what we need');\n\n    RolesAndPreviledgesModel.findOne(\n      { for_admins: true, previledges_info: request.params.roles },\n      function(err, roles) {\n        if (!roles) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        roles.status = roles.status;\n        roles.view_bookings = roles.view_bookings;\n        roles.view_quotations = roles.view_quotations;\n        roles.view_transactions = roles.view_transactions;\n        roles.view_payments = roles.view_payments;\n        roles.view_drivers = roles.view_drivers;\n        roles.view_sos = roles.view_sos;\n        roles.view_partners = roles.view_partners;\n        roles.view_package = roles.view_package;\n        roles.view_cars = roles.view_cars;\n        roles.view_tickets = roles.view_tickets;\n        roles.view_faqs = roles.view_faqs;\n        roles.view_users = roles.view_users;\n        roles.view_admins = roles.view_admins;\n        roles.view_settings = roles.view_settings;\n\n        roles.manage_bookings = roles.manage_bookings;\n        roles.manage_quotations = roles.manage_quotations;\n        roles.manage_transactions = roles.manage_transactions;\n        roles.manage_payments = roles.manage_payments;\n        roles.manage_drivers = roles.manage_drivers;\n        roles.manage_sos = roles.manage_sos;\n        roles.manage_partners = roles.manage_partners;\n        roles.manage_package = roles.manage_package;\n        roles.manage_cars = roles.manage_cars;\n        roles.manage_tickets = roles.manage_tickets;\n        roles.manage_faqs = roles.manage_faqs;\n        roles.manage_users = roles.manage_users;\n        roles.manage_admins = roles.manage_admins;\n        roles.manage_settings = roles.manage_settings;\n\n        roles.view_car_inspection = roles.view_car_inspection;\n        roles.view_drive_test = roles.view_drive_test;\n\n        roles.manage_drive_test = roles.manage_drive_test;\n        roles.manage_car_inspection = roles.manage_car_inspection;\n\n        roles.save(function(err, user) {\n          if (err) {\n            console.log(err);\n            return response.status(500).send({ msg: err.message });\n          }\n\n          console.log(user);\n\n          //find all users of usch roles and update\n          UserModel.find({ roles: request.params.roles }, function(err, users) {\n            if (!users) {\n              return response\n                .status(400)\n                .send({ msg: 'We were unable to find a plan with that id.' });\n            }\n\n            console.log(roles.view_faqs, roles.view_package, roles.view_drivers);\n            UserModel.updateMany(\n              { roles: new String(request.params.roles) },\n              {\n                $set: {\n                  view_bookings: roles.view_bookings,\n                  view_quotations: roles.view_quotations,\n                  view_transactions: roles.view_transactions,\n                  view_payments: roles.view_payments,\n                  view_drivers: roles.view_drivers,\n                  view_sos: roles.view_sos,\n                  view_partners: roles.view_partners,\n                  view_package: roles.view_package,\n                  view_cars: roles.view_cars,\n                  view_tickets: roles.view_tickets,\n                  view_faqs: roles.view_faqs,\n                  view_users: roles.view_users,\n                  view_admins: roles.view_admins,\n                  view_settings: roles.view_settings,\n\n                  manage_bookings: roles.manage_bookings,\n                  manage_quotations: roles.manage_quotations,\n                  manage_transactions: roles.manage_transactions,\n                  manage_payments: roles.manage_payments,\n                  manage_drivers: roles.manage_drivers,\n                  manage_sos: roles.manage_sos,\n                  manage_partners: roles.manage_partners,\n                  manage_package: roles.manage_package,\n                  manage_cars: roles.manage_cars,\n                  manage_tickets: roles.manage_tickets,\n                  manage_faqs: roles.manage_faqs,\n                  manage_users: roles.manage_users,\n                  manage_admins: roles.manage_admins,\n                  manage_settings: roles.manage_settings,\n\n                  view_drive_test: roles.view_drive_test,\n                  view_car_inspection: roles.view_car_inspection,\n                  manage_drive_test: roles.manage_drive_test,\n                  manage_car_inspection: roles.manage_car_inspection,\n                },\n              },\n              { multi: true },\n\n              function(err, result) {\n                if (err) {\n                  console.log(err);\n                  res.send(err);\n                } else {\n                  UserModel.find({ email: request.params.id })\n                    .then(data => {\n                      console.log('specific profile:' + data);\n\n                      const userInfo = data; //related\n                      if (userInfo.length <= 0) {\n                        return response.status(404).json({\n                          status: 404,\n                          error: 'The user with the given id does not exists',\n                        });\n                      }\n                      return response.status(200).json({\n                        status: 200,\n                        data: [\n                          {\n                            userInfo,\n                            message: 'Get a specific user was successful',\n                          },\n                        ],\n                      });\n                    })\n                    .catch(err =>\n                      response.status(400).json({\n                        status: 400,\n                        error: ErrorHandler.errors().validationError,\n                      }),\n                    );\n                }\n              },\n            );\n          });\n        });\n      },\n    );\n  }\n\n  static getUserPreviledges(request, response) {\n    UserModel.find({ email: request.params.id })\n      .then(data => {\n        console.log('specific profile:' + data);\n\n        const userInfo = data; //related\n        if (userInfo.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              userInfo,\n              message: 'Get a specific user was successful',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static setOldBalance(request, response) {\n    const { old_balance, currentBalance } = request.body;\n\n    UserModel.findOne({ email: request.params.id }, function(err, user) {\n      if (!user)\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n\n      user.old_balance = old_balance || user.old_balance;\n      user.balance = currentBalance || user.balance;\n      user.save(function(err, user) {\n        if (err) {\n          return response.status(500).send({ msg: err.message });\n        }\n        console.log(user + 'hello');\n        //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n        return response\n          .status(200)\n          .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n      });\n    });\n  }\n\n  static updateProfile(request, response) {\n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      passwordConfirm,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n    } = request.body;\n\n    if (password.length && passwordConfirm.length) {\n      if (password != passwordConfirm) {\n        console.log('err here1');\n        return res.status(400).send({ msg: 'password do not match.' });\n      }\n    }\n\n    UserModel.findOne({ email: request.params.id }, function(err, user) {\n      if (!user)\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n\n      if (password == 'unchanged' && passwordConfirm == 'unchanged') {\n        user.password = user.password;\n        console.log('old:' + user.password);\n      } else {\n        user.password = TokenGenerator.hashPassword(password.trim());\n        console.log('new pass: ' + user.password);\n      }\n\n      console.log(avatar);\n      // Verify and save the user\n      user.avatar = avatar || user.avatar;\n      user.username = username || user.username;\n      user.email = email || user.email;\n\n      user.roles = user_type || user.user_type;\n      user.firstname = firstname || user.firstname;\n      user.lastname = lastname || user.lastname;\n      user.phone_number = phoneNumber || user.phone_number;\n      user.test_certificate = certificate || user.test_certificate;\n      user.save(function(err, user) {\n        if (err) {\n          console.log(err);\n          return response.status(500).send({ msg: err.message });\n        }\n        console.log(user + 'hello');\n        //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n        return response\n          .status(200)\n          .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n      });\n    });\n  }\n\n  // static loginWithTwitter(request,response){\n  //   //return UserService.loginWithTwitter(request,response)\n  // }\n\n  // static loginWithFaceBook(request,response){\n  //  //return UserService.loginWithFaceBook(request,response)\n  // }\n\n  // static loginWithGoogle(request,response){\n  //  //return UserService.loginWithGoogle(request,response)\n  // }\n\n  // static initializeGoogleLogin(request,response){\n  //   return passport.authenticate('google', { scope : ['profile', 'email'] });\n  // }\n\n  static addNewPlans(request, response) {\n    let {\n      plan_id,\n      itineraries,\n      user_id,\n      carsSelected,\n      planName,\n      price,\n      planCategoryName,\n      no_hours,\n      username,\n      email,\n    } = request.body;\n\n    const NewUserPlan = new UserPlanModel({\n      id: new AutoincrementId(UserPlanModel).counter(),\n      user_id,\n      price,\n      plan_category_name: planCategoryName,\n      plan_name: planName,\n      cars_on_plan: carsSelected,\n      itineries: itineraries,\n      duration: no_hours,\n      no_hours: no_hours,\n      username: username,\n      email: email,\n      plan_id,\n    });\n\n    NewUserPlan.save()\n      .then(data => {\n        const user = data;\n        console.log(user + 'plans');\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              user,\n            },\n          ],\n          message: 'User Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err + 'error here user plan');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n    // UserService.saveUsersItinerary(request,response);\n  }\n\n  static deleteItinerary(request, response) {\n    ItineraryModel.find({ plan_id: request.params.id })\n      .then(data => {\n        const user = data;\n\n        if (user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        ItineraryModel.remove({ plan_id: request.params.id })\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error => {\n            console.log(error);\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error => {\n        console.log(error);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static saveUsersItinerary(request, response) {\n    // console.log(request.body)\n\n    let {\n      plan_category,\n      start_location,\n      destination,\n      drive_option,\n      no_hours,\n\n      plan_name,\n      status,\n      start_time,\n      travel_option,\n      drivingschool,\n      username,\n      email,\n      phone_number,\n      plan_id,\n    } = request.body;\n\n    const NewItinerary = new ItineraryModel({\n      id: new AutoincrementId(ItineraryModel).counter(),\n      plan_category,\n      start_location,\n      destination,\n      travel_option: drive_option,\n      drive_option,\n      no_hours,\n      travel_option,\n      plan_name,\n      status,\n      start_time,\n      travel_option,\n      drivingschool,\n      user_id: request.user.id,\n      username,\n      email,\n      phone_number,\n      plan_id,\n    });\n\n    NewItinerary.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          plan_category: user.plan_category,\n          start_location: user.start_location,\n          destination: user.destination,\n          drive_option: user.drive_option,\n          no_hours: user.no_hours,\n          travel_option: user.travel_option,\n          plan_name,\n          status,\n          start_time,\n          drivingschool,\n          username: user.username,\n          email: user.email,\n          // cars_id: user.cars_id\n        };\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              result,\n            },\n          ],\n          message: 'User Itinerary created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err + 'error here');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static editViewUsersItinerary(request, response) {\n    ItineraryModel.find({ user_id: Number(request.params.id) })\n      .then(data => {\n        console.log('specific:' + data);\n\n        const userInfo = data; //related\n        if (userInfo.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              userInfo,\n              message: 'Get a specific user was successful',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static updateUsersPlanItineraryStatus(request, response) {\n    UserPlanModel.find({ id: Number(request.params.id) })\n      .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The status with the given red-flag id does not exists',\n          });\n        }\n        const { status } = request.body;\n\n        UserPlanModel.updateOne(\n          { id: Number(request.params.id) },\n          {\n            status: status,\n          },\n        )\n          .then(data => {\n            const redflagStatus = data;\n\n            return response.status(200).json({\n              status: 200,\n              data: [\n                {\n                  id: redflagStatus._id,\n                  message: 'Updated red-flag record’s status',\n                },\n              ],\n            });\n          })\n          .catch(err =>\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            }),\n          );\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static updateNotificationStatus(request, response) {\n    NotificationModel.find({ _id: request.params.id })\n      .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                id: '0',\n                message: 'Data not found',\n              },\n            ],\n          });\n        }\n        const { status } = request.body;\n\n        NotificationModel.updateOne(\n          { _id: request.params.id },\n          {\n            status: 'old',\n          },\n        )\n          .then(data => {\n            const redflagStatus = data;\n\n            return response.status(200).json({\n              status: 200,\n              data: [\n                {\n                  id: redflagStatus._id,\n                  message: 'Updated red-flag record’s status',\n                },\n              ],\n            });\n          })\n          .catch(err =>\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            }),\n          );\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static updateItineraryStatus(request, response) {\n    ItineraryModel.find({ _id: request.params.id })\n      .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The status with the given red-flag id does not exists',\n          });\n        }\n        const { status } = request.body;\n\n        ItineraryModel.updateOne(\n          { _id: request.params.id },\n          {\n            status: status,\n          },\n        )\n          .then(data => {\n            const redflagStatus = data;\n\n            return response.status(200).json({\n              status: 200,\n              data: [\n                {\n                  id: redflagStatus._id,\n                  message: 'Updated red-flag record’s status',\n                },\n              ],\n            });\n          })\n          .catch(err =>\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            }),\n          );\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static updateDriverRatings(request, response) {\n    UserModel.find({ email: request.params.id })\n      .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The status with the given red-flag id does not exists',\n          });\n        }\n        let totalAvg = 0;\n        const { ratings } = request.body;\n        if (!parseInt(redId.ratings_average, 10)) {\n          totalAvg = parseInt(redId.ratings_average, 10) + parseInt(ratings, 10);\n        } else {\n          totalAvg = parseInt(redId.ratings_average, 10) + parseInt(ratings, 10);\n        }\n\n        totalAvg = totalAvg / 2;\n\n        UserModel.updateOne(\n          { email: request.params.id },\n          {\n            ratings_average: totalAvg,\n          },\n        )\n          .then(data => {\n            const redflagStatus = data;\n\n            return response.status(200).json({\n              status: 200,\n              data: [\n                {\n                  id: redflagStatus._id,\n                  message: 'Updated red-flag record’s status',\n                },\n              ],\n            });\n          })\n          .catch(err =>\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            }),\n          );\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static updateUserItineraryStatus(request, response) {\n    ItineraryModel.find({ id: Number(request.params.id) })\n      .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The status with the given red-flag id does not exists',\n          });\n        }\n        const { status } = request.body;\n\n        ItineraryModel.updateOne(\n          { id: Number(request.params.id) },\n          {\n            status: status,\n          },\n        )\n          .then(data => {\n            const redflagStatus = data;\n\n            return response.status(200).json({\n              status: 200,\n              data: [\n                {\n                  id: redflagStatus._id,\n                  message: 'Updated red-flag record’s status',\n                },\n              ],\n            });\n          })\n          .catch(err =>\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            }),\n          );\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static updateUsersItinerary(request, response) {\n    const {\n      certificate_id,\n      start_location,\n      destination,\n      no_hours,\n      start_time,\n      end_time,\n      drive_option,\n      user_id,\n      travel_option,\n      cars_id,\n    } = request.body;\n\n    ItineraryModel.findOne({ user_id: request.params.id }, function(err, user) {\n      if (!user)\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n\n      console.log(avatar);\n      // Verify and save the user\n\n      user.certificate_id = certificate_id;\n      user.start_location = start_location;\n      user.destination = destination;\n      user.no_hours = no_hours;\n      user.start_time = start_time;\n      user.end_time = end_time;\n      user.drive_option = drive_option;\n      user.user_id = user_id;\n      user.travel_option = travel_option;\n      user.cars_id = cars_id;\n      user.save(function(err, user) {\n        if (err) {\n          return response.status(500).send({ msg: err.message });\n        }\n        console.log(user + 'hello');\n        //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n        return response.status(200).send({ success: 'ok', msg: 'successfully updated itinerary.' });\n      });\n    });\n  }\n\n  static individualPlans(request, response) {\n    IndividualPlanModel.find()\n\n      .then(data => {\n        const individualPlans = data;\n        console.log(data);\n        if (individualPlans.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'No Plans for IndividualPlan module has been recorded by admin',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              individualPlans,\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static coperatePlans(request, response) {\n    coperatePlanModel\n      .find()\n\n      .then(data => {\n        const coperatePlan = data;\n        console.log(data);\n        if (coperatePlan.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'No Plans for CoperatePlan module has been recorded by admin',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              coperatePlan,\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static updateItem(request, response) {\n    const {\n      certificate_id,\n      start_location,\n      destination,\n      no_hours,\n      start_time,\n      end_time,\n      drive_option,\n      user_id,\n      travel_option,\n    } = request.body;\n\n    ItineraryModel.findOne({ id: request.params.id }, function(err, user) {\n      if (!user) {\n        console.log(JSON.strigify(err));\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n\n      // Verify and save the user\n\n      user.certificate_id = certificate_id;\n      user.start_location = start_location;\n      user.destination = destination;\n      user.no_hours = no_hours;\n      user.start_time = start_time;\n      user.end_time = end_time;\n      user.drive_option = drive_option;\n      user.user_id = user_id;\n      user.travel_option = travel_option;\n\n      user.save(function(err, user) {\n        if (err) {\n          console.log(err);\n          return response.status(500).send({ msg: err.message });\n        }\n        console.log(user + 'hello');\n        //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n        return response.status(200).send({ success: 'ok', msg: 'successfully updated itinerary.' });\n      });\n    });\n  }\n\n  static deleteItem(request, response) {\n    UserPlanModel.find({ id: request.params.id })\n      .then(data => {\n        const redflags = data;\n\n        if (redflags.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The red-flag with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The red-flag with the given id does not exists',\n          });\n        }\n        UserPlanModel.removeOne({ id: request.params.id })\n          .then(data => {\n            const deletedRedFlag = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedRedFlag._id,\n                  message: 'red-flag record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            }),\n          );\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getAllItineries(request, response) {\n    ItineraryModel.find()\n\n      .then(data => {\n        const itinerary = data;\n        console.log(data + 'either empty itins');\n        if (itinerary.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no itinerary record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              itinerary,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getUsersItinerary(request, response) {\n    ItineraryModel.find({ email: request.params.id })\n\n      .then(data => {\n        const itinerary = data;\n        if (itinerary.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            error: 'User has no itinerary record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              itinerary,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static updateRedFlagStatus(request, response) {\n    RedFlagModel.find({ id: Number(request.params.id) })\n      .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The status with the given red-flag id does not exists',\n          });\n        }\n        const { status } = request.body;\n        if (Number(request.user.id)) {\n          RedFlagModel.updateOne(\n            { id: Number(request.params.id) },\n            {\n              status: status,\n            },\n          )\n            .then(data => {\n              const redflagStatus = data;\n\n              return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    id: redflagStatus._id,\n                    message: 'Updated red-flag record’s status',\n                  },\n                ],\n              });\n            })\n            .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n        } else {\n          return response.status(401).json({\n            status: 401,\n            error: 'You must signup or login to access this route',\n          });\n        }\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getAllUsersPlans(request, response) {\n    UserPlanModel.find({ email: request.params.id })\n      .then(data => {\n        const plans = data;\n        console.log(plans);\n        // if (plans.length === 0) {\n        //   return response.status(404).json({\n        //     status: 404,\n        //     error: 'User has no plans record',\n        //   });\n        // }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              plans,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getAllUsersQuotations(request, response) {\n    QuoteModel.find({ plan_id: new String(request.params.id) })\n\n      .then(data => {\n        const quote = data;\n        if (quote.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no plans record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              quote,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static debitWallet(request, response) {\n    const { oldBalance, debit_amount } = request.body;\n\n    UserModel.findOne({ email: request.params.id }, function(err, user) {\n      let bal = Number(user.balance) - Number(debit_amount);\n      user.balance = new String(bal);\n\n      user.save(function(err, user) {\n        if (err) {\n          return response.status(500).send({ msg: err.message });\n        }\n\n        console.log(user);\n        return response\n          .status(200)\n          .send({ status: 200, success: 'ok', msg: 'Successfully updated  .' });\n      });\n    });\n  }\n\n  static updatePlanStatus(request, response) {\n    const { status, amount, has_updated } = request.body;\n\n    UserPlanModel.findOne({ plan_id: new String(request.params.id) }, function(err, user) {\n      // Verify and save the user\n      user.status = status || user.status;\n\n      user.price = amount || user.price;\n\n      user.has_updated = has_updated || user.has_updated;\n\n      let userItins = user.itineries;\n\n      // userItins.map((item) =>{\n      //    item.status = status;\n      // } )\n\n      // user.itineries = userItins;\n\n      user.save(function(err, user) {\n        if (err) {\n          return response.status(500).send({ msg: err.message });\n        }\n\n        UserPlanModel.updateMany(\n          { plan_id: request.params.id },\n          {\n            $set: {\n              status: status,\n              price: amount,\n              has_updated: has_updated,\n              'itineries.$[].status': status,\n            },\n          },\n          { multi: true },\n          function(err, result) {\n            if (err) {\n              console.log(err);\n              response.send(err);\n            } else {\n              console.log(result);\n              return response\n                .status(200)\n                .send({\n                  status: 200,\n                  success: 'ok',\n                  msg: 'Successfully updated itineraries of this plan .',\n                });\n            }\n          },\n        );\n\n        // return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n      });\n    });\n  }\n\n  static updateItinStatus(request, response) {\n    const {\n      status,\n      //plan_id,\n      user_plan_id,\n      has_received_payments,\n      has_received_quote,\n    } = request.body;\n\n    // ItineraryModel.findOne({ plan_id:new String(request.params.id) }, function (err, user) {\n\n    //    // Verify and save the user\n    //    user.status= status || user.status;\n\n    //    user.save(function (err,user) {\n    //      if (err) { return response.status(500).send({ msg: err.message }); }\n    //      console.log(user + 'hello')\n\n    //        return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n    //    });\n    //  });\n\n    ItineraryModel.updateMany(\n      { plan_id: new String(request.params.id) },\n      {\n        $set: {\n          status: status,\n          //plan_id,\n          user_plan_id: new String(request.params.id),\n          has_received_payments: has_received_payments,\n          has_received_quote: has_received_quote,\n        },\n      },\n      { multi: true },\n      function(err, result) {\n        if (err) {\n          console.log(err);\n          res.send(err);\n        } else {\n          console.log(result);\n          return response\n            .status(200)\n            .send({\n              status: 200,\n              success: 'ok',\n              msg: 'Successfully updated itineraries of this plan .',\n            });\n        }\n      },\n    );\n  }\n\n  static updateQuoteStatus(request, response) {\n    const { status, amount, has_updated } = request.body;\n\n    QuoteModel.findOne({ plan_id: new String(request.params.id) }, function(err, user) {\n      // Verify and save the user\n      user.status = status || user.status;\n\n      user.amount = amount || user.amount;\n      user.has_updated = has_updated || user.has_updated;\n\n      user.save(function(err, user) {\n        if (err) {\n          return response.status(500).send({ msg: err.message });\n        }\n        console.log(user + 'hello');\n\n        return response\n          .status(200)\n          .send({ status: 200, success: 'ok', msg: 'Successfully updated  .' });\n      });\n    });\n  }\n\n  static getOnePlanById(request, response) {\n    UserPlanModel.find({ id: Number(request.params.id) })\n      .then(data => {\n        console.log('specific:' + data);\n\n        const userPlanInfo = data; //related\n        if (userPlanInfo.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The user plan with the given id does not exists',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              userPlanInfo,\n              message: 'Get a specific user plan was successful',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static paystackPayMeMoney(req, res) {\n    const {\n      fullname,\n      email,\n      amount,\n      phone_number,\n      //old_balance\n    } = req.body;\n    console.log(fullname, email, amount);\n    //const form = _.pick(req.body,['amount','email','full_name']);\n\n    const form = {\n      fullname,\n      email,\n      amount,\n      phone_number,\n    };\n    form.metadata = {\n      full_name: form.fullname,\n    };\n    form.amount *= 100;\n    form.amout *= 100;\n\n    initializePayment(form, (error, body) => {\n      console.log(body);\n      if (error) {\n        //handle errors\n        console.log(error);\n        return res.redirect('/error');\n      }\n      var response = JSON.parse(body);\n\n      let url = response.data.authorization_url;\n\n      //res.redirect(url)\n      //console.log(url)\n      //res.send(`${url}`)\n\n      return res.status(201).json({\n        status: 201,\n        message: `<h6>Please click the link to make payments.<a style=\"color:red;text-decoration:none\"  href=\"${url}\">Proceed to payment</a></h6> \n            `,\n      });\n    });\n  }\n\n  static paystackCallBack(req, res) {\n    const { reference, trxref } = req.query;\n    //console.log(req.query)\n    const ref = reference;\n    verifyPayment(ref, (error, body) => {\n      if (error) {\n        //handle errors appropriately\n        console.log(error);\n        return res.redirect('/error');\n      }\n\n      var response = JSON.parse(body);\n      console.log(JSON.stringify(response.data) + 'given here');\n\n      const { id, reference, amount, customer, metadata, phone_number } = response.data;\n      console.log(id, reference, amount, customer, phone_number, customer.phone);\n\n      const newDonor = {\n        id: new String(id),\n        reference,\n        amount: amount / 100,\n        email: customer.email,\n        full_name: metadata.full_name,\n        phone_number,\n      };\n\n      const donor = new WalletModel(newDonor);\n\n      donor\n        .save()\n        .then((donor, error) => {\n          if (!donor) {\n            console.log(error);\n            return res.redirect('/api/v1/error');\n          }\n\n          UserModel.findOne({ email: customer.email }, function(err, user) {\n            if (!user)\n              return res\n                .status(400)\n                .send({ msg: 'We were unable to find a user with that email.' });\n            let convertedBal = Number(amount) / 100;\n            user.balance = Number(user.balance) + convertedBal;\n            user.save(function(err, user) {\n              if (err) {\n                return res.status(500).send({ msg: err.message });\n              }\n              //console.log(user + 'hello')\n              //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n              res.redirect('/api/v1/receipt/' + donor._id);\n            });\n          });\n        })\n        .catch(e => {\n          console.log(e);\n          res.redirect('/api/v1/error');\n        });\n    });\n  }\n\n  static createPaymentDetail(request, response) {\n    // var PaymentModel = mongoose.model('PaymentModel', User);\n\n    let {\n      status,\n      reference,\n      plan_id,\n      quotation_id,\n      amount,\n      username,\n      email,\n      phone_number,\n    } = request.body;\n\n    // var user = new PaymentModel({\n    //   id: new AutoincrementId(PaymentModel).counter(),\n    //     status:'Paid',\n    //             reference,\n    //             plan_id,\n    //             quotation_id,\n    //             amount,\n    //             username,\n    //             email,\n    //             phone_number,\n\n    //  })\n\n    const NewItinerary = new PaymentModel({\n      id: new AutoincrementId(PaymentModel).counter(),\n      status: 'Successful',\n      reference,\n      plan_id,\n      quotation_id,\n      amount,\n      username,\n      email,\n      phone_number,\n    });\n\n    NewItinerary.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          reference,\n          plan_id,\n          quotation_id,\n          amount,\n          username,\n          email,\n          phone_number,\n          email: user.email,\n          // cars_id: user.cars_id\n        };\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              result,\n            },\n          ],\n          message: 'User Itinerary created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err + 'error here');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static paystackReceipt(req, res) {\n    const id = new String(req.params.id);\n    WalletModel.findById(id)\n      .then((donor, error) => {\n        if (!donor) {\n          //handle error when the donor is not found\n          console.log(error);\n          res.redirect('/api/v1/error');\n        }\n\n        // res.render('success.pug',{donor});\n        return res.sendFile(path.join(__dirname + '/views/templates/topup-successful.html'));\n      })\n      .catch(e => {\n        console.log(e);\n        res.redirect('/api/v1/error');\n      });\n  }\n\n  static paystackHistory(req, res) {\n    const id = new String(req.params.id);\n    WalletModel.find({ email: req.params.id })\n      .then((donor, error) => {\n        if (!donor) {\n          //handle error when the donor is not found\n          console.log(error);\n          res.redirect('/api/v1/error');\n        }\n        const tranx = donor;\n        console.log(tranx + 'for the user');\n        return res.status(200).json({\n          status: 200,\n          data: [\n            {\n              tranx,\n              message: 'Get a specific user plan was successful',\n            },\n          ],\n        });\n      })\n      .catch(e => {\n        console.log(e);\n        res.redirect('/api/v1/error');\n      });\n  }\n\n  static paystackPayments(req, res) {\n    const id = new String(req.params.id);\n    PaymentModel.find({ email: req.params.id })\n      .then((donor, error) => {\n        if (!donor) {\n          //handle error when the donor is not found\n          console.log(error);\n          res.redirect('/api/v1/error');\n        }\n        const tranx = donor;\n        console.log(tranx + 'for the user');\n        return res.status(200).json({\n          status: 200,\n          data: [\n            {\n              tranx,\n              message: 'Get a specific user plan was successful',\n            },\n          ],\n        });\n      })\n      .catch(e => {\n        console.log(e);\n        res.redirect('/api/v1/error');\n      });\n  }\n\n  static paystackQuotations(req, res) {\n    const id = new String(req.params.id);\n    QuoteModel.find({ email: req.params.id })\n      .then((donor, error) => {\n        if (!donor) {\n          //handle error when the donor is not found\n          console.log(error);\n          res.redirect(BACKEND_API + '/error');\n        }\n        const tranx = donor;\n        console.log(tranx + 'for the user');\n        return res.status(200).json({\n          status: 200,\n          data: [\n            {\n              tranx,\n              message: 'Get a specific user plan was successful',\n            },\n          ],\n        });\n      })\n      .catch(e => {\n        console.log(e);\n        res.redirect(BACKEND_API + '/error');\n      });\n  }\n\n  static deleteQuotation(request, response) {\n    QuoteModel.find({ _id: request.params.id })\n      .then(data => {\n        const user = data;\n\n        if (user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        QuoteModel.remove({ _id: request.params.id })\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error => {\n            console.log(error);\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error => {\n        console.log(error);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static deletePayment(request, response) {\n    PaymentModel.find({ _id: request.params.id })\n      .then(data => {\n        const user = data;\n\n        if (user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        PaymentModel.remove({ _id: request.params.id })\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error => {\n            console.log(error);\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error => {\n        console.log(error);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static deleteWallet(request, response) {\n    WalletModel.find({ _id: request.params.id })\n      .then(data => {\n        const user = data;\n\n        if (user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        WalletModel.remove({ _id: request.params.id })\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error => {\n            console.log(error);\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error => {\n        console.log(error);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static getUserNotification(request, response) {\n    const id = new String(request.params.id);\n    console.log(id);\n    NotificationModel.find({ user_id: request.params.id, for_users: true })\n      .then((donor, error) => {\n        if (!donor) {\n          //handle error when the donor is not found\n          console.log(error);\n        }\n        const tranx = donor;\n        console.log(tranx + 'for the user');\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              tranx,\n              message: 'Get a specific user plan was successful',\n            },\n          ],\n        });\n      })\n      .catch(e => {\n        console.log(e);\n        res.redirect(BACKEND_API + '/error');\n      });\n  }\n\n  static makeNotification(request, response) {\n    // console.log(request.body)\n    let { user_id, type, description } = request.body;\n    let for_users = true;\n\n    if (request.body.for_users) {\n      for_users = false;\n    }\n\n    const NewNotificationModel = new NotificationModel({\n      id: new AutoincrementId(NotificationModel).counter(),\n      user_id,\n      type,\n      description,\n      for_users,\n\n      //accountNumber: uuidv4()\n    });\n\n    NewNotificationModel.save()\n      .then(data => {\n        const user = data;\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              user,\n              message: 'Get a specific user plan was successful',\n            },\n          ],\n        });\n\n        // UserService.NotificationEmail(request,response,'/views/templates/notification.html', {\n        //          username: user_id,\n        //          detail: description\n        // },user_id,201)\n      })\n      .catch(err => {\n        console.log(err + 'error here');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static getAllNotification(request, response) {\n    var now = new Date();\n    var startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n\n    //created_at: {$gte: startOfToday}\n    NotificationModel.find({ for_users: true }, null, { sort: { field: -1 } })\n      .then((donor, error) => {\n        if (!donor) {\n          //handle error when the donor is not found\n          console.log(error);\n        }\n        const allNotification = donor;\n        //console.log(tranx +\"for the user\")\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              allNotification,\n              message: 'Get a specific user plan was successful',\n            },\n          ],\n        });\n      })\n      .catch(e => {\n        console.log(e);\n        res.redirect(BACKEND_API + '/error');\n      });\n  }\n\n  createUserPlan = (req, res) => {\n    const review = new UserPlanModel();\n    review.username = req.body.username;\n    review.rating = req.body.rating;\n    review.body = req.body.body;\n    review\n      .save()\n      .then(result => {\n        User.findOne({ username: review.username }, (err, user) => {\n          if (user) {\n            // The below two lines will add the newly saved review's\n            // ObjectID to the the User's reviews array field\n            user.reviews.push(review);\n            user.save();\n            res.json({ message: 'Review created!' });\n          }\n        });\n      })\n      .catch(error => {\n        res.status(500).json({ error });\n      });\n  };\n\n  createUser = (req, res) => {\n    const user = new UserModel();\n    user.username = req.body.password;\n    user.email = req.body.email;\n    user\n      .save()\n      .then(result => {\n        res.json({ message: 'User created!', result });\n      })\n      .catch(error => {\n        res.status(500).json({ error });\n      });\n  };\n\n  // . . .\n  // returns the user object associated with the username if any\n  // with the reviews field containing an array of review objects\n  // consisting of the reviews created by the user\n  getUser = (req, res) => {\n    User.findOne({ username: req.params.username })\n      //.populate('reviews')\n      .then(result => {\n        res.json(result);\n      })\n      .catch(error => {\n        res.status(500).json({ error });\n      });\n  };\n\n  //Admin functionality\n\n  static adminDashboard(request, response) {}\n\n  static manageUsers(request, response) {\n    UserModel.find({ is_admin: false, roles: 'user' })\n      .then(data => {\n        const users = data;\n        console.log(users, 'users available are here');\n        if (users.length === 0) {\n          return response.status(200).json({\n            status: 200,\n\n            data: [\n              {\n                users: [],\n\n                message: 'Successful',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              users,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static deleteUser(request, response) {\n    UserModel.find({ _id: request.params.id })\n      .then(data => {\n        const user = data;\n\n        if (user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        UserModel.remove({ _id: request.params.id })\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error => {\n            console.log(error);\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error => {\n        console.log(error);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static createNewUser(request, response) {\n    let boolVerification;\n    let {\n      firstname,\n      lastname,\n      username,\n      email,\n      password,\n      passwordComfirm,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      status,\n      is_verified,\n    } = request.body;\n\n    if (is_verified == 'false') {\n      boolVerification = false;\n    } else {\n      boolVerification = true;\n    }\n\n    password = TokenGenerator.hashPassword(password.trim());\n\n    const Newuser = new UserModel({\n      id: new AutoincrementId(UserModel).counter(),\n      firstname,\n      lastname,\n      username,\n      email,\n      password,\n\n      phone_number: phoneNumber,\n      avatar: avatar,\n      certificate,\n      user_type,\n      status: 'Active',\n      is_admin: false,\n      isVerified: boolVerification,\n    });\n\n    Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n\n        const token = TokenGenerator.generateToken(result);\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              token,\n              user,\n            },\n          ],\n          message: 'User created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err + 'error here');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static manageUsersDetail(request, response) {\n    let boolVerification;\n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      phoneNumber,\n      certificate,\n      user_type,\n      email,\n      status,\n      avatar,\n      is_verified,\n    } = request.body;\n\n    console.log(is_verified + ':our user verification');\n\n    if (is_verified == 'false') {\n      boolVerification = false;\n    } else if (is_verified == 'true') {\n      boolVerification = true;\n    }\n\n    if (!password.length) {\n      console.log('err here1');\n      return res.status(400).send({ msg: 'password do not match.' });\n    }\n\n    UserModel.findOne({ _id: request.params.id }, function(err, user) {\n      if (!user) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n      if (password == 'unchanged') {\n        user.password = user.password;\n        console.log('old:' + user.password);\n      } else {\n        user.password = TokenGenerator.hashPassword(password.trim());\n        console.log('new pass: ' + user.password);\n      }\n\n      // Verify and save the user\n\n      user.username = username || user.username;\n      user.email = email || user.email;\n      user.status = status || user.status;\n      user.avatar = avatar || user.avatar;\n      user.user_type = user_type || user.user_type;\n      user.firstname = firstname || user.firstname;\n      user.lastname = lastname || user.lastname;\n      user.phone_number = phoneNumber || user.phone_number;\n      user.test_certificate = certificate || user.test_certificate;\n      //user.isVerified = boolVerification || user.isVerified;\n      user.save(function(err, user) {\n        if (err) {\n          console.log(err);\n          return response.status(500).send({ msg: err.message });\n        }\n        console.log(user + 'hello');\n        //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n        return response\n          .status(200)\n          .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n      });\n    });\n  }\n\n  static manageUsersDetailVerification(request, response) {\n    const { isVerified } = request.body;\n\n    UserModel.findOne({ _id: request.params.id }, function(err, user) {\n      if (!user) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function(err, user) {\n        if (err) {\n          console.log(err);\n          return response.status(500).send({ msg: err.message });\n        }\n        console.log(user + 'hello');\n        //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n        return response\n          .status(200)\n          .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n      });\n    });\n  }\n\n  static manageAdmins(request, response) {\n    UserModel.find({ is_admin: true })\n      .then(data => {\n        const admins = data;\n        console.log(admins + 'admins available here admins');\n        if (admins.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                admins: [],\n\n                message: 'Successful',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              admins,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error => {\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static deleteAdmin(request, response) {\n    UserModel.find({ _id: request.params.id })\n      .then(data => {\n        const user = data;\n\n        if (user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        UserModel.remove({ _id: request.params.id })\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error => {\n            console.log(error);\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error => {\n        console.log(error);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static createNewAdmin(request, response) {\n    let boolVerification;\n    let {\n      firstname,\n      lastname,\n      username,\n      email,\n      password,\n      passwordComfirm,\n      phoneNumber,\n      avatar,\n      //certificate,\n      user_type,\n      status,\n      is_verified,\n    } = request.body;\n\n    if (is_verified == 'false') {\n      boolVerification = false;\n    } else {\n      boolVerification = true;\n    }\n\n    password = TokenGenerator.hashPassword(password.trim());\n\n    RolesAndPreviledgesModel.findOne({ for_admins: true, usergroup_set: user_type }, function(\n      err,\n      roles,\n    ) {\n      if (!roles) {\n        return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n      }\n      console.log(roles);\n\n      const Newuser = new UserModel({\n        id: new AutoincrementId(UserModel).counter(),\n        firstname,\n        lastname,\n        username,\n        email,\n        password,\n\n        phone_number: phoneNumber,\n        avatar: avatar,\n        //certificate,\n        roles: user_type,\n        status: 'Active',\n        is_admin: true,\n        isVerified: boolVerification,\n        view_bookings: roles.view_bookings,\n        view_quotations: roles.view_quotations,\n        view_transactions: roles.view_transactions,\n        view_payments: roles.view_payments,\n        view_drivers: roles.view_drivers,\n        view_sos: roles.view_sos,\n        view_partners: roles.view_partners,\n        view_package: roles.view_package,\n        view_cars: roles.view_cars,\n        view_tickets: roles.view_tickets,\n        view_faqs: roles.view_faqs,\n        view_users: roles.view_users,\n        view_admins: roles.view_admins,\n        view_settings: roles.view_settings,\n        manage_bookings: roles.manage_bookings,\n        manage_quotations: roles.manage_quotations,\n        manage_transactions: roles.manage_transactions,\n        manage_payments: roles.manage_payments,\n        manage_drivers: roles.manage_drivers,\n        manage_sos: roles.manage_sos,\n        manage_partners: roles.manage_partners,\n        manage_package: roles.manage_package,\n        manage_cars: roles.manage_cars,\n        manage_tickets: roles.manage_tickets,\n        manage_faqs: roles.manage_faqs,\n        manage_users: roles.manage_users,\n        manage_admins: roles.manage_admins,\n        manage_settings: roles.manage_settings,\n\n        view_drive_test: roles.view_drive_test,\n        manage_drive_test: roles.manage_drive_test,\n        view_car_inspection: roles.view_car_inspection,\n        manage_car_inspection: roles.manage_car_inspection,\n      });\n\n      Newuser.save()\n        .then(data => {\n          const user = data;\n\n          const result = {\n            id: user.id,\n            email: user.email,\n            username: user.username,\n          };\n\n          const token = TokenGenerator.generateToken(result);\n          console.log(user);\n          return response.status(201).json({\n            status: 201,\n            data: [\n              {\n                token,\n                user,\n              },\n            ],\n            message: 'User created successfully',\n          });\n        })\n        .catch(err => {\n          console.log(err + 'error here');\n          response.status(400).json({\n            status: 400,\n            error: ErrorHandler.errors().validationError,\n          });\n        });\n    });\n  }\n\n  static manageAdminsDetail(request, response) {\n    let boolVerification;\n\n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n      status,\n      is_verified,\n    } = request.body;\n\n    if (is_verified == 'false') {\n      boolVerification = false;\n    } else {\n      boolVerification = true;\n    }\n\n    if (!password.length) {\n      console.log('err here1');\n      return res.status(400).send({ msg: 'password do not match.' });\n    }\n\n    RolesAndPreviledgesModel.findOne({ for_admins: true, usergroup_set: user_type }, function(\n      err,\n      roles,\n    ) {\n      if (!roles) {\n        return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n      }\n      console.log(roles);\n\n      UserModel.findOne({ _id: request.params.id }, function(err, user) {\n        if (!user) {\n          return response\n            .status(400)\n            .send({ msg: 'We were unable to find a user with that email.' });\n        }\n        if (password == 'unchanged') {\n          user.password = user.password;\n          console.log('old:' + user.password);\n        } else {\n          user.password = TokenGenerator.hashPassword(password.trim());\n          console.log('new pass: ' + user.password);\n        }\n\n        // Verify and save the user\n\n        user.username = username || user.username;\n        user.email = email || user.email;\n        user.status = status || user.status;\n        user.avatar = avatar || user.avatar;\n        user.roles = user_type || user.user_type;\n        user.firstname = firstname || user.firstname;\n        user.lastname = lastname || user.lastname;\n        user.phone_number = phoneNumber || user.phone_number;\n        user.test_certificate = certificate || user.test_certificate;\n        //user.isVerified = boolVerification || user.isVerified;\n\n        user.view_bookings = roles.view_bookings;\n        user.view_quotations = roles.view_quotations;\n        user.view_transactions = roles.view_transactions;\n        user.view_payments = roles.view_payments;\n        user.view_drivers = roles.view_drivers;\n        user.view_sos = roles.view_sos;\n        user.view_partners = roles.view_partners;\n        user.view_package = roles.view_package;\n        user.view_cars = roles.view_cars;\n        user.view_tickets = roles.view_tickets;\n        user.view_faqs = roles.view_faqs;\n        user.view_users = roles.view_users;\n        user.view_admins = roles.view_admins;\n        user.view_settings = roles.view_settings;\n\n        user.manage_bookings = roles.manage_bookings;\n        user.manage_quotations = roles.manage_quotations;\n        user.manage_transactions = roles.manage_transactions;\n        user.manage_payments = roles.manage_payments;\n        user.manage_drivers = roles.manage_drivers;\n        user.manage_sos = roles.manage_sos;\n        user.manage_partners = roles.manage_partners;\n        user.manage_package = roles.manage_package;\n        user.manage_cars = roles.manage_cars;\n        user.manage_tickets = roles.manage_tickets;\n        user.manage_faqs = roles.manage_faqs;\n        user.manage_users = roles.manage_users;\n        user.manage_admins = roles.manage_admins;\n        user.manage_settings = roles.manage_settings;\n\n        user.view_drive_test = roles.view_drive_test;\n        user.manage_drive_test = roles.manage_drive_test;\n        user.view_car_inspection = roles.view_car_inspection;\n        user.manage_car_inspection = roles.manage_car_inspection;\n\n        user.save(function(err, user) {\n          if (err) {\n            console.log(err);\n            return response.status(500).send({ msg: err.message });\n          }\n          console.log(user + 'hello');\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response\n            .status(200)\n            .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n        });\n      });\n    });\n  }\n\n  static manageAdminsDetailVerification(request, response) {\n    const { isVerified } = request.body;\n\n    UserModel.findOne({ _id: request.params.id }, function(err, user) {\n      if (!user) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function(err, user) {\n        if (err) {\n          console.log(err);\n          return response.status(500).send({ msg: err.message });\n        }\n        console.log(user + 'hello');\n        //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n        return response\n          .status(200)\n          .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n      });\n    });\n  }\n\n  static manageDrivers(request, response) {\n    UserModel.find({ is_active: true, roles: 'Individual Driver' })\n      .then(data => {\n        const drivers = data;\n        console.log(drivers, 'drivers are here');\n        if (drivers.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                drivers: [],\n\n                message: 'Successful',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              drivers,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error => {\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static deleteDriver(request, response) {\n    UserModel.find({ _id: request.params.id, roles: 'Individual Driver' })\n      .then(data => {\n        const user = data;\n\n        if (user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        UserModel.remove({ _id: request.params.id })\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error => {\n            console.log(error);\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error => {\n        console.log(error);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static createNewDriver(request, response) {\n    let boolVerification;\n\n    let {\n      firstname,\n      lastname,\n      username,\n      email,\n      password,\n      passwordComfirm,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      status,\n      is_verified,\n    } = request.body;\n\n    if (is_verified == 'false') {\n      boolVerification = false;\n    } else {\n      boolVerification = true;\n    }\n\n    password = TokenGenerator.hashPassword(password.trim());\n\n    const Newuser = new UserModel({\n      id: new AutoincrementId(UserModel).counter(),\n      firstname,\n      lastname,\n      username,\n      email,\n      password,\n\n      phone_number: phoneNumber,\n      avatar,\n      test_certificate: certificate,\n\n      status: 'Active',\n      is_admin: false,\n      isVerified: boolVerification,\n      roles: 'Individual Driver',\n    });\n\n    Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n\n        const token = TokenGenerator.generateToken(result);\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              token,\n              user,\n            },\n          ],\n          message: 'User created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err + 'error here');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static manageDriversDetail(request, response) {\n    let boolVerification;\n\n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n      status,\n      is_verified,\n    } = request.body;\n\n    if (is_verified == 'false') {\n      boolVerification = false;\n    } else {\n      boolVerification = true;\n    }\n\n    if (!password.length) {\n      console.log('err here1');\n      return res.status(400).send({ msg: 'password do not match.' });\n    }\n\n    UserModel.findOne({ _id: request.params.id, roles: 'Individual Driver' }, function(err, user) {\n      if (!user) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n      if (password == 'unchanged') {\n        user.password = user.password;\n        console.log('old:' + user.password);\n      } else {\n        user.password = TokenGenerator.hashPassword(password.trim());\n        console.log('new pass: ' + user.password);\n      }\n\n      // Verify and save the user\n\n      user.username = username || user.username;\n      user.email = email || user.email;\n      user.status = status || user.status;\n      user.avatar = avatar || user.avatar;\n      user.roles = user_type || user.user_type;\n      user.firstname = firstname || user.firstname;\n      user.lastname = lastname || user.lastname;\n      user.phone_number = phoneNumber || user.phone_number;\n      user.test_certificate = certificate || user.test_certificate;\n      //user.isVerified = boolVerification || user.isVerified;\n      user.save(function(err, user) {\n        if (err) {\n          console.log(err);\n          return response.status(500).send({ msg: err.message });\n        }\n        console.log(user + 'hello');\n        //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n        return response\n          .status(200)\n          .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n      });\n    });\n  }\n\n  static manageDriversDetailVerification(request, response) {\n    const { isVerified } = request.body;\n\n    UserModel.findOne({ _id: request.params.id }, function(err, user) {\n      if (!user) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function(err, user) {\n        if (err) {\n          console.log(err);\n          return response.status(500).send({ msg: err.message });\n        }\n        console.log(user + 'hello');\n        //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n        return response\n          .status(200)\n          .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n      });\n    });\n  }\n\n  static managePartners(request, response) {\n    PartnersModel.find()\n      .then(data => {\n        const partners = data;\n        console.log(partners + 'partners available');\n        if (partners.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                partners: [],\n\n                message: 'Successful',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              partners,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static deletePartner(request, response) {\n    PartnersModel.find({ _id: request.params.id })\n      .then(data => {\n        const user = data;\n\n        if (user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        PartnersModel.remove({ _id: request.params.id })\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error => {\n            console.log(error);\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error => {\n        console.log(error);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static createNewPartner(request, response) {\n    let boolVerification;\n    let address = '';\n    if (request.body.address) {\n      address = request.body.address;\n    }\n    let {\n      firstname,\n      lastname,\n      username,\n      email,\n\n      password,\n      // passwordComfirm,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      status,\n      is_verified,\n      totalCars,\n      bankAccount,\n      bankAccountName,\n      bankAccountNumber,\n    } = request.body;\n\n    if (is_verified == 'false') {\n      boolVerification = false;\n    } else {\n      boolVerification = true;\n    }\n\n    password = TokenGenerator.hashPassword(password.trim());\n\n    const Newuser = new PartnersModel({\n      id: new AutoincrementId(PartnersModel).counter(),\n      firstName: firstname,\n      lastName: lastname,\n      userName: username,\n      name: firstname + ' ' + lastname,\n      email,\n      password,\n      address: address,\n      totalCars,\n\n      phoneNumber: phoneNumber,\n      phone: phoneNumber,\n      avatar,\n      businessName: certificate,\n      roles: user_type,\n      status: status,\n      isVerified: boolVerification,\n      totalCars,\n\n      bankAccount,\n      bankAccountName,\n      bankAccountNumber,\n    });\n\n    Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n\n        const token = TokenGenerator.generateToken(result);\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              token,\n              user,\n            },\n          ],\n          message: 'User created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err + 'error here');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static managePartnersDetail(request, response) {\n    let boolVerification;\n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      totalCars,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n      address,\n      status,\n      is_verified,\n\n      bankAccount,\n      bankAccountName,\n      bankAccountNumber,\n    } = request.body;\n\n    if (is_verified == 'false') {\n      boolVerification = false;\n    } else {\n      boolVerification = true;\n    }\n\n    if (!password) {\n      console.log('err here1');\n      return res.status(400).send({ msg: 'password field required' });\n    }\n\n    PartnersModel.findOne({ _id: request.params.id }, function(err, user) {\n      if (err) {\n        return response.status(400).send({ msg: 'Some error occured.' });\n      }\n\n      if (!user) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n\n      if (password === 'unchanged') {\n        user.password = user.password;\n        console.log('old:' + password + '==' + user.password);\n      } else {\n        user.password = TokenGenerator.hashPassword(password.trim());\n        console.log('new pass: ' + password + '==' + user.password);\n      }\n\n      // Verify and save the user\n      user.avatar = avatar || user.avatar;\n      user.userName = username || user.userName;\n      user.email = email || user.email;\n      user.businessName = certificate || user.businessName;\n      user.roles = user_type || user.roles;\n      user.firstName = firstname || user.firstName;\n      user.lastName = lastname || user.lastName;\n      user.phoneNumber = phoneNumber || user.phoneNumber;\n      user.status = status || user.status;\n      user.address = address || user.address;\n      user.totalCars = totalCars || user.totalCars;\n      user.bankAccount = bankAccount || user.bankAccount;\n      user.bankAccountName = bankAccountName || user.bankAccountName;\n      user.bankAccountNumber = bankAccountNumber || user.bankAccountNumber;\n      //user.isVerified = boolVerification || user.isVerified;\n      user.save(function(err, user) {\n        if (err) {\n          return response.status(500).send({ msg: err.message });\n        }\n        console.log(user + 'hello');\n        //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n        return response\n          .status(200)\n          .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n      });\n    });\n  }\n\n  static managePartnersDetailVerification(request, response) {\n    const { isVerified } = request.body;\n\n    PartnersModel.findOne({ _id: request.params.id }, function(err, user) {\n      if (!user) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function(err, user) {\n        if (err) {\n          console.log(err);\n          return response.status(500).send({ msg: err.message });\n        }\n        console.log(user + 'hello');\n        //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n        return response\n          .status(200)\n          .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n      });\n    });\n  }\n\n  //partners earnings\n  static managePartnersEarnings(request, response) {\n    EarningsModel.find()\n      .then(data => {\n        const earnings = data;\n        //console.log(partners +\"partners available\")\n        if (earnings.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                earnings: [],\n\n                message: 'Successful',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              earnings,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static deletePartnersEarnings(request, response) {\n    EarningsModel.find({ _id: request.params.id })\n      .then(data => {\n        const user = data;\n\n        if (user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        EarningsModel.remove({ _id: request.params.id })\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error => {\n            console.log(error);\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error => {\n        console.log(error);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static createNewPartnersEarnings(request, response) {\n    let {\n      paymentDate,\n      PaymentStatus,\n      PaymentAmount,\n      paymentReference,\n      partnerId,\n      partnerEmail,\n      partnerBankAccount,\n      vehicleId,\n      vehicleName,\n      vehiclePlateNo,\n    } = request.body;\n\n    let pid = partnerId;\n\n    const Newuser = new EarningsModel({\n      id: new AutoincrementId(EarningsModel).counter(),\n\n      paymentDate,\n      PaymentStatus,\n      PaymentAmount,\n      paymentReference,\n      partnerId,\n      partnerEmail,\n      partnerBankAccount,\n      vehicleId,\n      vehicleName,\n      vehiclePlateNo,\n      partner: pid,\n    });\n\n    Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              user,\n            },\n          ],\n          message: 'User created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err + 'error here');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static managePartnersEarningsDetail(request, response) {\n    const {\n      type,\n      paymentDate,\n      PaymentStatus,\n      PaymentAmount,\n      paymentReference,\n      partnerId,\n      partnerEmail,\n      partnerBankAccount,\n      vehicleId,\n      vehicleName,\n      vehiclePlateNo,\n    } = request.body;\n\n    let pid = partnerId;\n\n    EarningsModel.findOne({ _id: request.params.id }, function(err, user) {\n      if (err) {\n        return response.status(400).send({ msg: 'Some error occured.' });\n      }\n\n      if (!user) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n\n      // Verify and save the user\n      user.type = type || user.type;\n      user.paymentDate = paymentDate || user.paymentDate;\n      user.paymentStatus = PaymentStatus || user.PaymentStatus;\n      user.paymentAmount = PaymentAmount || user.PaymentAmount;\n      user.paymentReference = paymentReference || user.paymentReference;\n      user.partnerId = partnerId || user.partnerId;\n      user.partnerEmail = partnerEmail || user.partnerEmail;\n      user.partnerBankAccount = partnerBankAccount || user.partnerBankAccount;\n      user.vehicleId = vehicleId || user.vehicleId;\n      user.vehicleName = vehicleName || user.vehicleName;\n      user.vehiclePlateNo = vehiclePlateNo || user.vehiclePlateNo;\n      user.partner = partnerId || user.partnerId;\n\n      //user.isVerified = boolVerification || user.isVerified;\n      user.save(function(err, user) {\n        if (err) {\n          return response.status(500).send({ msg: err.message });\n        }\n        console.log(user + 'hello');\n        //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n        return response\n          .status(200)\n          .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n      });\n    });\n  }\n\n  static manageProfile(request, response) {\n    UserModel.find({ email: request.params.id })\n      .then(data => {\n        console.log('specific profile:' + data);\n\n        const profile = data; //related\n        if (profile.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              profile,\n              message: 'Get a specific user was successful',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static manageProfileDetail(request, response) {\n    let boolVerification;\n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      // passwordConfirm,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n      //status,\n      is_verified,\n    } = request.body;\n\n    if (!password.length) {\n      console.log('err here1');\n      return res.status(400).send({ msg: 'password do not match.' });\n    }\n\n    UserModel.findOne({ _id: request.params.id }, function(err, user) {\n      if (!user) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n\n      if (password == 'unchanged') {\n        user.password = user.password;\n        console.log('old:' + user.password);\n      } else {\n        user.password = TokenGenerator.hashPassword(password.trim());\n        console.log('new pass: ' + user.password);\n      }\n\n      // Verify and save the user\n      user.avatar = avatar || user.avatar;\n      user.username = username || user.username;\n      user.email = email || user.email;\n\n      user.roles = user_type || user.user_type;\n      user.firstname = firstname || user.firstname;\n      user.lastname = lastname || user.lastname;\n      user.phone_number = phoneNumber || user.phone_number;\n      user.test_certificate = certificate || user.test_certificate;\n      //user.status = status || user.status;\n      //user.isVerified = boolVerification || user.isVerified\n      user.save(function(err, user) {\n        if (err) {\n          console.log(err);\n          return response.status(500).send({ msg: err.message });\n        }\n        console.log(user + 'hello');\n        //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n        return response\n          .status(200)\n          .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n      });\n    });\n  }\n\n  static manageProfileDetailVerification(request, response) {\n    const { isVerified } = request.body;\n\n    UserModel.findOne({ _id: request.params.id }, function(err, user) {\n      if (!user) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function(err, user) {\n        if (err) {\n          console.log(err);\n          return response.status(500).send({ msg: err.message });\n        }\n        console.log(user + 'hello');\n        //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n        return response\n          .status(200)\n          .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n      });\n    });\n  }\n\n  static managePlanPackage(request, response) {\n    IndividualPlanModel.find()\n      .then(data => {\n        const individualPlans = data;\n\n        console.log(individualPlans + 'individual available plans');\n        if (individualPlans.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                individualPlans: [],\n\n                message: 'Successful',\n              },\n            ],\n          });\n        }\n\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              individualPlans,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static managePlanPackageCorporate(request, response) {\n    coperatePlanModel\n      .find()\n      .then(data => {\n        const corporatePlans = data;\n\n        console.log(corporatePlans + 'coperatePlans available plans');\n        if (corporatePlans.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                corporatePlans: [],\n\n                message: 'Successful',\n              },\n            ],\n          });\n        }\n\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              corporatePlans,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static deletePlanPackage(request, response) {\n    console.log(request.params + 'soloewe');\n    if (request.params.delete_type == 'Individual') {\n      IndividualPlanModel.find({ _id: request.params.id })\n        .then(data => {\n          const user = data;\n\n          if (user.length <= 0) {\n            console.log(\n              JSON.stringify({\n                status: 404,\n                error: 'The user with the given id does not exists',\n              }),\n            );\n            return response.status(404).json({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            });\n          }\n\n          IndividualPlanModel.remove({ _id: request.params.id })\n            .then(data => {\n              const deletedUser = data;\n              response.status(202).json({\n                status: 202,\n                data: [\n                  {\n                    id: deletedUser._id,\n                    message: 'user record has been deleted',\n                  },\n                ],\n              });\n            })\n            .catch(error => {\n              console.log(error);\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              });\n            });\n        })\n        .catch(error => {\n          console.log(error);\n          response.status(400).json({\n            status: 400,\n            error: ErrorHandler.errors().validationError,\n          });\n        });\n    } else if (request.params.delete_type == 'Corporate') {\n      coperatePlanModel\n        .find({ _id: request.params.id })\n        .then(data => {\n          const user = data;\n\n          if (user.length <= 0) {\n            console.log(\n              JSON.stringify({\n                status: 404,\n                error: 'The user with the given id does not exists',\n              }),\n            );\n            return response.status(404).json({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            });\n          }\n\n          coperatePlanModel\n            .remove({ _id: request.params.id })\n            .then(data => {\n              const deletedUser = data;\n              response.status(202).json({\n                status: 202,\n                data: [\n                  {\n                    id: deletedUser._id,\n                    message: 'user record has been deleted',\n                  },\n                ],\n              });\n            })\n            .catch(error => {\n              console.log(error);\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              });\n            });\n        })\n        .catch(error => {\n          console.log(error);\n          response.status(400).json({\n            status: 400,\n            error: ErrorHandler.errors().validationError,\n          });\n        });\n    }\n  }\n\n  static createNewPlan(request, response) {\n    let { plan_name, plan_categories, status, description, max_car, price } = request.body;\n\n    let Newuser;\n    let plan;\n\n    if (plan_categories === 'Individual') {\n      Newuser = new IndividualPlanModel({\n        id: new AutoincrementId(IndividualPlanModel).counter(),\n        plan_name,\n        plan_categories,\n        status,\n        description,\n        car_max: max_car,\n        price,\n      });\n\n      Newuser.save()\n        .then(data => {\n          plan = data;\n\n          return response.status(201).json({\n            status: 201,\n            data: [\n              {\n                plan,\n              },\n            ],\n            message: 'Plan created successfully',\n          });\n        })\n        .catch(err => {\n          console.log(err + 'error here');\n          response.status(400).json({\n            status: 400,\n            error: ErrorHandler.errors().validationError,\n          });\n        });\n    } else {\n      Newuser = new coperatePlanModel({\n        id: new AutoincrementId(coperatePlanModel).counter(),\n        plan_name,\n        plan_categories,\n        status,\n        description,\n        car_max: max_car,\n        price,\n      });\n\n      Newuser.save()\n        .then(data => {\n          plan = data;\n\n          return response.status(201).json({\n            status: 201,\n            data: [\n              {\n                plan,\n              },\n            ],\n            message: 'Plan created successfully',\n          });\n        })\n        .catch(err => {\n          console.log(err + 'error here');\n          response.status(400).json({\n            status: 400,\n            error: ErrorHandler.errors().validationError,\n          });\n        });\n    }\n  }\n\n  static managePlanPackageDetail(request, response) {\n    const { plan_name, plan_categories, description, max_car, price, status } = request.body;\n\n    console.log(plan_name + 'is here 2');\n\n    if (plan_name == 'Individual') {\n      console.log(plan_name + 'is here');\n      IndividualPlanModel.findOne({ _id: request.params.id }, function(err, plan) {\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        plan.plan_name = plan_name || plan.plan_name;\n        plan.plan_categories = plan_categories || plan.plan_categories;\n\n        plan.price = price || plan.price;\n        plan.description = description || plan.description;\n        plan.car_max = max_car || plan.car_max;\n        plan.status = status || plan.status;\n        plan.save(function(err, user) {\n          if (err) {\n            console.log(err);\n            return response.status(500).send({ msg: err.message });\n          }\n          return response\n            .status(200)\n            .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n        });\n      });\n    } else {\n      coperatePlanModel.findOne({ _id: request.params.id }, function(err, plan) {\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        plan.plan_name = plan_name || plan.plan_name;\n        plan.plan_categories = plan_categories || plan.plan_categories;\n\n        plan.price = price || plan.price;\n        plan.description = description || plan.description;\n        plan.car_max = max_car || plan.car_max;\n        plan.status = status || plan.status;\n        plan.save(function(err, user) {\n          if (err) {\n            console.log(err);\n            return response.status(500).send({ msg: err.message });\n          }\n          console.log(plan + 'hello');\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response\n            .status(200)\n            .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n        });\n      });\n    }\n  }\n\n  static manageInspection(request, response) {\n    CarsModel.find({ health_status: { $ne: 'Completed' } })\n      .then(data => {\n        const inspections = data;\n\n        console.log(inspections);\n\n        if (inspections.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                inspections: [],\n\n                message: 'Successful',\n              },\n            ],\n          });\n        }\n\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              inspections,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageInspectionDetail(request, response) {\n    const {\n      health_status,\n      confirmedInspectionDate,\n      confirmedInspectionTime,\n      partnerEmail,\n      // description,\n      //  username, email,\n      //  time, createdDate,\n      //  phone_number\n    } = request.body;\n\n    CarsModel.findOne({ _id: request.params.id }, function(err, plan) {\n      if (!plan) {\n        return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n      }\n\n      plan.health_status = health_status || plan.health_status;\n      plan.confirmedInspectionTime = confirmedInspectionTime || plan.confirmedInspectionTime;\n      plan.confirmedInspectionDate = confirmedInspectionDate || plan.confirmedInspectionDate;\n\n      let date = plan.confirmedInspectionDate;\n      let time = plan.confirmedInspectionTime;\n\n      console.log(confirmedInspectionTime, plan.confirmedInspectionDate);\n      if (plan.status == 'Pending') {\n        plan.status = 'Available';\n      }\n      // plan.username= username || plan.username;\n      // plan.email= email || plan.email;\n      // plan.time = time || plan.time;\n      // plan.createdDate = createdDate || plan.createdDate;\n      // plan.phone_number = phone_number ||  plan.phone_number\n      plan.save(function(err, user) {\n        if (err) {\n          console.log(err);\n\n          return response.status(500).send({ msg: err.message });\n        }\n\n        //send email to partner\n\n        UserService.NotificationEmail(\n          request,\n          response,\n          '/views/templates/inspection_confirmation.html',\n          {\n            username: partnerEmail,\n            confirmedInspectionDate: date,\n            confirmedInspectionTime: time,\n            link: process.env.DEPLOY_FRONT_URL,\n          },\n          partnerEmail,\n          200,\n        );\n\n        return response\n          .status(200)\n          .send({ status: 200, success: 'ok', msg: 'Successfully updated user profile.' });\n      });\n    });\n  }\n\n  static createNewInspection(request, response) {\n    const {\n      username,\n      email,\n      phone_number,\n      description,\n      createdDate,\n      time,\n      status,\n      car_id,\n    } = request.body;\n\n    let Newuser;\n    let plan;\n\n    Newuser = new InspectionModel({\n      id: new AutoincrementId(InspectionModel).counter(),\n      username,\n      email,\n      phone_number,\n      description,\n      createdDate,\n      time,\n      status,\n      car_id,\n    });\n\n    Newuser.save()\n      .then(data => {\n        plan = data;\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              plan,\n            },\n          ],\n          message: 'Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err + 'error here');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static deleteInspection(request, response) {\n    InspectionModel.find({ _id: request.params.id })\n      .then(data => {\n        const user = data;\n\n        if (user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        InspectionModel.remove({ _id: request.params.id })\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error => {\n            console.log(error);\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error => {\n        console.log(error);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static manageDriveTest(request, response) {\n    DriveTestModel.find()\n      .then(data => {\n        const testDrive = data;\n\n        console.log(testDrive + 'coperatePlans available plans');\n        if (testDrive.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                testDrive: [],\n\n                message: 'Successful',\n              },\n            ],\n          });\n        }\n\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              testDrive,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static addDriveTestFromItinerary(request, response) {\n    const {\n      username,\n      email,\n      phone_number,\n      car_id,\n      status,\n      description,\n\n      createdDate,\n    } = request.body;\n\n    let Newuser;\n    let plan;\n\n    Newuser = new DriveTestModel({\n      id: new AutoincrementId(DriveTestModel).counter(),\n      username,\n      email,\n      phone_number,\n      car_id,\n      status: 'Pending',\n      description,\n      createdDate,\n    });\n\n    Newuser.save()\n      .then(data => {\n        plan = data;\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              plan,\n            },\n          ],\n          message: 'Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err + 'error here');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static createNewDriveTest(request, response) {\n    const {\n      username,\n      email,\n      phone_number,\n      description,\n      createdDate,\n      time,\n      status,\n      car_id,\n    } = request.body;\n\n    let Newuser;\n    let plan;\n\n    Newuser = new DriveTestModel({\n      id: new AutoincrementId(DriveTestModel).counter(),\n      username,\n      email,\n      phone_number,\n      description,\n      createdDate,\n      time,\n      test_center: time,\n\n      status,\n      car_id,\n    });\n\n    Newuser.save()\n      .then(data => {\n        plan = data;\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              plan,\n            },\n          ],\n          message: 'Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err + 'error here');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static manageUsersDriveTestCenterUpdate(request, response) {\n    const { test_center, test_center_address } = request.body;\n    UserModel.findOne({ _id: request.params.id }, function(err, plan) {\n      if (!plan) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that id.' });\n      }\n\n      // Verify and save the user\n      // user.avatar= avatar || user.avatar;\n      // plan.plan_name= plan_name || plan.plan_name;\n      // plan.plan_categories= plan_categories || plan.plan_categories;\n\n      // plan.price= price || plan.price;\n      // plan.description= description || plan.description;\n      // plan.car_max = max_car || plan.car_max;\n      plan.test_center = test_center || plan.test_center;\n      plan.test_center_address = test_center_address || plan.test_center_address;\n      plan.save(function(err, user) {\n        if (err) {\n          console.log(err);\n          return response.status(500).send({ msg: err.message });\n        }\n        return response\n          .status(200)\n          .send({ status: 200, success: 'ok', msg: 'Successfully updated .' });\n      });\n    });\n  }\n\n  static manageDriveTestDetail(request, response) {\n    const {\n      // username,\n      //  email,\n      //  phone_number,\n      //  description,\n      //  createdDate,\n      //  time,\n      status,\n      // car_id,\n    } = request.body;\n    DriveTestModel.findOne({ _id: request.params.id }, function(err, plan) {\n      if (!plan) {\n        return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n      }\n\n      // Verify and save the user\n      // user.avatar= avatar || user.avatar;\n      // plan.plan_name= plan_name || plan.plan_name;\n      // plan.plan_categories= plan_categories || plan.plan_categories;\n\n      // plan.price= price || plan.price;\n      // plan.description= description || plan.description;\n      // plan.car_max = max_car || plan.car_max;\n      plan.status = status || plan.status;\n      plan.save(function(err, user) {\n        if (err) {\n          console.log(err);\n          return response.status(500).send({ msg: err.message });\n        }\n        return response\n          .status(200)\n          .send({ status: 200, success: 'ok', msg: 'Successfully updated .' });\n      });\n    });\n  }\n\n  static deleteDriveTest(request, response) {\n    DriveTestModel.find({ _id: request.params.id })\n      .then(data => {\n        const user = data;\n\n        if (user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        DriveTestModel.remove({ _id: request.params.id })\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error => {\n            console.log(error);\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error => {\n        console.log(error);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static managePreviledges(request, response) {\n    // import DriveTestModel from  \"../models/DriveTest.model\";\n    // import Previledges from \"../models/Roles.model\";\n    RolesAndPreviledgesModel.find()\n      .then(data => {\n        const users = data;\n\n        if (users.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                previledges: [],\n\n                message: 'Successful',\n              },\n            ],\n          });\n        }\n\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              previledges: users,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static createNewPreviledges(request, response) {\n    const { previledges_description, previledges_info, usergroups_old } = request.body;\n\n    let Newuser;\n    let plan;\n\n    Newuser = new RolesAndPreviledgesModel({\n      id: new AutoincrementId(RolesAndPreviledgesModel).counter(),\n      previledges_description,\n      previledges_info,\n    });\n\n    Newuser.save()\n      .then(data => {\n        plan = data;\n\n        RolesAndPreviledgesModel.find({ for_admins: true }, function(err, users) {\n          if (!users) {\n            return response\n              .status(400)\n              .send({ msg: 'We were unable to find a plan with that id.' });\n          }\n\n          let usergroup = [...usergroups_old, previledges_info];\n\n          RolesAndPreviledgesModel.updateMany(\n            { for_admins: true },\n            { $set: { usergroup_set: usergroup } },\n            { multi: true },\n            function(err, result) {\n              if (err) {\n                console.log(err);\n                res.send(err);\n              } else {\n                UserModel.find({ for_users: true }, function(err, users) {\n                  if (!users) {\n                    return response\n                      .status(400)\n                      .send({ msg: 'We were unable to find a plan with that id.' });\n                  }\n\n                  UserModel.updateMany(\n                    { for_users: true },\n                    { $set: { usergroup_set: usergroup } },\n                    { multi: true },\n                    function(err, result) {\n                      if (err) {\n                        console.log(err);\n                        res.send(err);\n                      } else {\n                        return response.status(201).json({\n                          status: 201,\n                          data: [\n                            {\n                              success: 'ok',\n                              result,\n                            },\n                          ],\n                          message: 'Updated all users with fields and status changed',\n                        });\n                      }\n                    },\n                  );\n                });\n              }\n            },\n          );\n        });\n\n        // return response.status(201).json({\n        //   status: 201,\n        //   data: [\n        //     {\n\n        //       plan,\n        //     },\n        //   ],\n        //   message: 'Plan created successfully',\n        // });\n      })\n      .catch(err => {\n        console.log(err + 'error here');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n    //find all users of usch roles and update\n  }\n\n  static adminPreviledgesEdit(request, response) {\n    const {\n      view_bookings,\n      view_quotations,\n      view_transactions,\n      view_payments,\n      view_drivers,\n      view_sos,\n      view_partners,\n      view_package,\n      view_cars,\n      previledges_info,\n      view_tickets,\n      view_faqs,\n      view_users,\n      view_admins,\n      view_settings,\n      view_car_inspection,\n      view_drive_test,\n\n      status,\n\n      manage_bookings,\n      manage_quotations,\n      manage_payments,\n      manage_drivers,\n      manage_sos,\n      manage_partners,\n      manage_package,\n      manage_transactions,\n      manage_cars,\n      manage_tickets,\n      manage_faqs,\n      manage_settings,\n      manage_users,\n      manage_admins,\n      manage_drive_test,\n      manage_car_inspection,\n    } = request.body;\n\n    RolesAndPreviledgesModel.findOne({ _id: new String(request.params.id) }, function(err, roles) {\n      if (!roles) {\n        return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n      }\n\n      // Verify and save the user\n      // user.avatar= avatar || user.avatar;\n      roles.status = status || roles.status;\n      roles.view_bookings = view_bookings || roles.view_bookings;\n      roles.view_quotations = view_quotations || roles.view_quotations;\n      roles.view_transactions = view_transactions || roles.view_transactions;\n      roles.view_payments = view_payments || roles.view_payments;\n      roles.view_drivers = view_drivers || roles.view_drivers;\n      roles.view_sos = view_sos || roles.view_sos;\n      roles.view_partners = view_partners || roles.view_partners;\n      roles.view_package = view_package || roles.view_package;\n      roles.view_cars = view_cars || roles.view_cars;\n      roles.view_tickets = view_tickets || roles.view_tickets;\n      roles.view_faqs = view_faqs || roles.view_faqs;\n      roles.view_users = view_users || roles.view_users;\n      roles.view_admins = view_admins || roles.view_admins;\n      roles.view_settings = view_settings || roles.view_settings;\n\n      roles.view_drive_test = view_drive_test || roles.view_drive_test;\n      roles.view_car_inspection = view_car_inspection || roles.view_car_inspection;\n\n      roles.manage_bookings = manage_bookings || roles.manage_bookings;\n      roles.manage_quotations = manage_quotations || roles.manage_quotations;\n      roles.manage_transactions = manage_transactions || roles.manage_transactions;\n      roles.manage_payments = manage_payments || roles.manage_payments;\n      roles.manage_drivers = manage_drivers || roles.manage_drivers;\n      roles.manage_sos = manage_sos || roles.manage_sos;\n      roles.manage_partners = manage_partners || roles.manage_partners;\n      roles.manage_package = manage_package || roles.manage_package;\n      roles.manage_cars = manage_cars || roles.manage_cars;\n      roles.manage_tickets = manage_tickets || roles.manage_tickets;\n      roles.manage_faqs = manage_faqs || roles.manage_faqs;\n      roles.manage_users = manage_users || roles.manage_users;\n      roles.manage_admins = manage_admins || roles.manage_admins;\n      roles.manage_settings = manage_settings || roles.manage_settings;\n\n      roles.manage_drive_test = manage_drive_test || roles.manage_drive_test;\n      roles.manage_car_inspection = manage_car_inspection || roles.manage_car_inspection;\n\n      roles.save(function(err, user) {\n        if (err) {\n          console.log(err);\n          return response.status(500).send({ msg: err.message });\n        }\n\n        console.log(user);\n\n        //find all users of usch roles and update\n        UserModel.find({ roles: previledges_info }, function(err, users) {\n          if (!users) {\n            return response\n              .status(400)\n              .send({ msg: 'We were unable to find a plan with that id.' });\n          }\n\n          UserModel.updateMany(\n            { roles: previledges_info },\n            {\n              $set: {\n                view_bookings,\n                view_quotations,\n                view_transactions,\n                view_payments,\n                view_drivers,\n                view_sos,\n                view_partners,\n                view_package,\n                view_cars,\n                view_tickets,\n                view_faqs,\n                view_users,\n                view_admins,\n                view_settings,\n                status,\n\n                manage_bookings,\n                manage_quotations,\n                manage_payments,\n                manage_drivers,\n                manage_sos,\n                manage_partners,\n                manage_package,\n                manage_transactions,\n                manage_cars,\n                manage_tickets,\n                manage_faqs,\n                manage_settings,\n                manage_users,\n                manage_admins,\n\n                view_car_inspection,\n                view_drive_test,\n                manage_drive_test,\n                manage_car_inspection,\n              },\n            },\n            { multi: true },\n\n            function(err, result) {\n              if (err) {\n                console.log(err);\n                res.send(err);\n              } else {\n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      success: 'ok',\n                      result,\n                    },\n                  ],\n                  message: 'Updated all users with fields and status changed',\n                });\n              }\n            },\n          );\n        });\n      });\n    });\n  }\n\n  static managePreviledgesDetail(request, response) {\n    const { previledges_description, previledges_info } = request.body;\n    RolesAndPreviledgesModel.findOne({ _id: request.params.id }, function(err, plan) {\n      if (!plan) {\n        return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n      }\n\n      // Verify and save the user\n      // user.avatar= avatar || user.avatar;\n      plan.previledges_info = previledges_info || plan.previledges_info;\n      plan.previledges_description = previledges_description || plan.previledges_description;\n\n      plan.save(function(err, user) {\n        if (err) {\n          console.log(err);\n          return response.status(500).send({ msg: err.message });\n        }\n\n        //find all users of usch roles and update\n        return response\n          .status(200)\n          .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n      });\n    });\n  }\n\n  static managePreviledgesRulesDetail(request, response) {\n    const { field, value } = request.body;\n    UserModel.findOne({ _id: request.params.id }, function(err, plan) {\n      if (!plan) {\n        return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n      }\n\n      // Verify and save the user\n      // user.avatar= avatar || user.avatar;\n      plan[field] = value || plan[field];\n\n      plan.save(function(err, user) {\n        if (err) {\n          console.log(err);\n          return response.status(500).send({ msg: err.message });\n        }\n        return response\n          .status(200)\n          .send({ success: 'ok', msg: 'Successfully updated user roles andd permission profile.' });\n      });\n    });\n  }\n\n  static deletePreviledges(request, response) {\n    //if(request.params.delete_type==\"Individual\"){\n\n    RolesAndPreviledgesModel.find({ _id: request.params.id })\n      .then(data => {\n        const user = data;\n\n        if (user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        RolesAndPreviledgesModel.remove({ _id: request.params.id })\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error => {\n            console.log(error);\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error => {\n        console.log(error);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n    //}\n  }\n\n  static manageSOS(request, response) {\n    SOSModel.find()\n      .then(data => {\n        let redFlag = data;\n        console.log(redFlag, 'SOS VALUES');\n        if (redFlag.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                redFlag: [],\n                message: 'No SOS found',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              redFlag,\n              message: 'All sos/redflags was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageSOSDetail(request, response) {\n    SOSModel.find({ _id: request.params.id })\n      .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The status with the given red-flag id does not exists',\n          });\n        }\n        const { status } = request.body;\n\n        SOSModel.updateOne(\n          { _id: request.params.id },\n          {\n            status: status,\n          },\n        )\n          .then(data => {\n            const redflagStatus = data;\n\n            return response.status(200).json({\n              status: 200,\n              data: [\n                {\n                  id: redflagStatus._id,\n                  message: 'Updated red-flag record’s status',\n                },\n              ],\n            });\n          })\n          .catch(err => {\n            console.log(err);\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error => {\n        console.log(err);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static deleteSOS(request, response) {\n    SOSModel.find({ _id: request.params.id })\n      .then(data => {\n        const user = data;\n\n        if (user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        SOSModel.remove({ _id: request.params.id })\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error => {\n            console.log(error);\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error => {\n        console.log(error);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static deleteTicket(request, response) {\n    InterventionsModel.find({ _id: request.params.id })\n      .then(data => {\n        const user = data;\n\n        if (user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        InterventionsModel.remove({ _id: request.params.id })\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error => {\n            console.log(error);\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error => {\n        console.log(error);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static manageTickets(request, response) {\n    InterventionsModel.find()\n      .then(data => {\n        console.log('all tickets>>>>' + data);\n        let intervention = data;\n        if (intervention.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                intervention: [],\n                message: 'No records yet',\n              },\n            ],\n          });\n        }\n        //console.log( intervention)\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              intervention,\n              message: 'All interventions was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static createNewTicket(request, res) {\n    const {\n      status,\n      subject,\n      category,\n      response,\n      username,\n      phone_number,\n      email,\n      assigned_to,\n      comment,\n    } = request.body;\n\n    const NewCars = new InterventionsModel({\n      id: new AutoincrementId(InterventionsModel).counter(),\n      status,\n      category,\n      subject,\n      response,\n      username,\n      phone_number,\n      email,\n      assigned_to,\n      comment,\n    });\n\n    NewCars.save()\n      .then(data => {\n        const Cars = data;\n        return res.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: Cars.id,\n              message: 'Created car record',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        res.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static manageTicketsDetail(request, responses) {\n    InterventionsModel.find({ _id: request.params.id })\n      .then(redId => {\n        if (redId.length <= 0) {\n          return responses.status(404).json({\n            status: 404,\n            error: 'The status with the given red-flag id does not exists',\n          });\n        }\n        const {\n          status,\n          category,\n          response,\n          username,\n          phone_number,\n          email,\n          assigned_to,\n        } = request.body;\n\n        InterventionsModel.updateOne(\n          { _id: request.params.id },\n          {\n            status: status || redId.status,\n            category: category || redId.category,\n            username: username || redId.username,\n            phone_number: phone_number || redId.phone_number,\n            email: email || redId.email,\n            response: response || redId.response,\n            assigned_to: assigned_to || redId.assigned_to,\n          },\n        )\n          .then(data => {\n            const redflagStatus = data;\n\n            return responses.status(201).json({\n              status: 201,\n              data: [\n                {\n                  id: redflagStatus._id,\n                  message: 'Updated red-flag record’s status',\n                },\n              ],\n            });\n          })\n          .catch(err => {\n            responses.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error => {\n        responses.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static manageUserNotificationCounter(request, responses) {\n    UserModel.find({ email: request.params.id })\n      .then(redId => {\n        if (redId.length <= 0) {\n          return responses.status(404).json({\n            status: 404,\n            error: 'The status with the given red-flag id does not exists',\n          });\n        }\n        const { notification_count } = request.body;\n\n        UserModel.updateOne(\n          { _id: request.params.id },\n          {\n            notification_count: notification_count || redId.notification_count,\n          },\n        )\n          .then(data => {\n            const redflagStatus = data;\n\n            return responses.status(200).json({\n              status: 200,\n              data: [\n                {\n                  id: redflagStatus._id,\n                  message: 'Updated user notification record’s status',\n                },\n              ],\n            });\n          })\n          .catch(err => {\n            responses.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error => {\n        responses.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static createNewFAQ(request, response) {\n    const { question, answer, status } = request.body;\n\n    const NewCars = new FAQModel({\n      id: new AutoincrementId(FAQModel).counter(),\n      question,\n      answer,\n      status,\n    });\n\n    NewCars.save()\n      .then(data => {\n        const Cars = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: Cars.id,\n              message: 'Created car record',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static manageFaqs(request, response) {\n    FAQModel.find()\n      .then(data => {\n        let faqs = data;\n        console.log(faqs, 'faqs');\n        if (faqs.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                faqs: [],\n                message: 'All faqs was retrieved successfully',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              faqs,\n              message: 'All faqs was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static manageFaqsDetail(request, response) {\n    FAQModel.find({ _id: request.params.id })\n      .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The status with the given red-flag id does not exists',\n          });\n        }\n        const { question, answer, status } = request.body;\n\n        FAQModel.updateOne(\n          { _id: request.params.id },\n          {\n            question: question || redId.question,\n            answer: answer || redId.answer,\n            status: status || redId.status,\n          },\n        )\n          .then(data => {\n            const faq = data;\n\n            return response.status(201).json({\n              status: 201,\n              data: [\n                {\n                  id: faq.status,\n                  message: 'Updated faq record’s detail',\n                },\n              ],\n            });\n          })\n          .catch(err =>\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            }),\n          );\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageCars(request, response) {\n    CarsModel.find()\n      .then(data => {\n        let carsAvailable = data;\n        console.log(carsAvailable + 'all cars here');\n        if (carsAvailable.length === 0) {\n          cars = [];\n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                carsAvailable: [],\n                message: 'All Cars was retrieved successfully',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              carsAvailable,\n              message: 'All Carss was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageCarsDetail(request, response) {\n    const {\n      status,\n      health_status,\n      car_status,\n      car_type,\n      car_model,\n      description,\n      car_year,\n      assigned_driver_name,\n      assigned_driver_email,\n      assigned_driver_phone,\n      partner_id,\n      inspection_detail,\n      plate_number,\n      license,\n      assigned_driver_id,\n      images,\n      inspectionDate,\n      vehicleIdentificationNumber,\n\n      inspectionTime,\n    } = request.body;\n\n    CarsModel.find({ _id: request.params.id })\n      .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The status with the given red-flag id does not exists',\n          });\n        }\n        const { question, answer } = request.body;\n\n        CarsModel.updateOne(\n          { _id: request.params.id },\n          {\n            status: status || redId.status,\n            health_status: health_status || redId.health_status,\n            car_status: car_status || redId.car_status,\n            car_type: car_type || redId.car_type,\n            car_model: car_model || redId.car_model,\n            description: description || redId.description,\n            car_year: car_year || redId.car_year,\n            assigned_driver_name: assigned_driver_name || redId.assigned_driver_name,\n            assigned_driver_email: assigned_driver_email || redId.assigned_driver_email,\n            assigned_driver_phone: assigned_driver_phone || redId.assigned_driver_phone,\n            partner_id: partner_id || redId.partner_id,\n            inspection_detail: inspection_detail || redId.inspection_detail,\n            plate_number: plate_number || redId.plate_number,\n            license: license || redId.license,\n            assigned_driver_id: assigned_driver_id || redId.assigned_driver_id,\n            images: images || redId.images,\n            inspectionDate: inspectionDate || redId.inspectionDate,\n            vehicleIdentificationNumber:\n              vehicleIdentificationNumber || redId.vehicleIdentificationNumber,\n            inspectionTime: inspectionTime || redId.inspectionTime,\n            //images\n          },\n        )\n          .then(data => {\n            const cars = data;\n\n            return response.status(200).json({\n              status: 200,\n              data: [\n                {\n                  id: cars._id,\n                  data: cars,\n                  message: 'Updated faq record’s detail',\n                },\n              ],\n            });\n          })\n          .catch(err =>\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            }),\n          );\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static createNewCar(request, response) {\n    const {\n      status,\n      health_status,\n      car_status,\n      color,\n      model,\n      car_type,\n      car_model,\n      description,\n      car_year,\n      assigned_driver_name,\n      assigned_driver_email,\n      assigned_driver_phone,\n      partner_id,\n      inspection_detail,\n      plate_number,\n      license,\n      assigned_driver_id,\n      images,\n      car,\n\n      carModel,\n      vehicleIdentificationNumber,\n\n      carYear,\n\n      vehicleColor,\n\n      plateNo,\n\n      inspectionDate,\n\n      inspectionTime,\n\n      carDescription,\n\n      imagePath,\n\n      creator,\n\n      date_created,\n      partnerEmail,\n    } = request.body;\n\n    const NewCars = new CarsModel({\n      id: new AutoincrementId(CarsModel).counter(),\n      status,\n      health_status,\n      car_status,\n      color,\n      model: car_model,\n      car_type,\n      car_model,\n      description,\n      car_year,\n      assigned_driver_name,\n      assigned_driver_email,\n      assigned_driver_phone,\n      partner_id,\n      inspection_detail,\n      plate_number,\n      license,\n      assigned_driver_id,\n      images,\n      car,\n\n      carModel,\n      vehicleIdentificationNumber,\n\n      carYear,\n\n      vehicleColor,\n\n      plateNo,\n\n      inspectionDate,\n\n      inspectionTime,\n\n      carDescription,\n\n      imagePath,\n\n      creator,\n\n      date_created,\n      partnerEmail,\n    });\n\n    NewCars.save()\n      .then(data => {\n        const Cars = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: Cars.id,\n              message: 'Created car record',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static getCarsInfo(request, response) {\n    return response.status(200).json({\n      status: 200,\n      data: [\n        {\n          carInfo: carsApi,\n          message: 'Created car record',\n        },\n      ],\n    });\n\n    // const dataValues = [];\n    // fs.createReadStream('cars_api_info.csv')\n    //   .pipe(csv())\n    //   .on('data', (row) => {\n    //     try{\n    //       dataValues.push(row)\n    //     }catch(e){\n    //        return  response.status(400).json({\n    //       status: 400,\n    //       data: [\n    //         {\n\n    //           message: e,\n    //         },\n    //       ],\n    //     });\n    //     }\n    //     //console.log(row);\n    //   })\n    //   .on('end', () => {\n    //     //console.log('CSV file successfully processed');\n    //     //console.log(dataValues)\n    //     return   response.status(200).json({\n    //       status: 200,\n    //       data: [\n    //         {\n    //           carInfo: dataValues,\n    //           message: 'Created car record',\n    //         },\n    //       ],\n    //     });\n    //   });\n  }\n\n  static manageGoogleSettings(request, response) {\n    GmailSettingModel.find()\n      .then(data => {\n        const googleSettings = data;\n        console.log(googleSettings, 'users available are here');\n        if (googleSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              googleSettings,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getAllRepairs(request, response) {\n    MechModel.find()\n      .then(data => {\n        const mech = data;\n        //console.log(googleSettings,\"users available are here\")\n        if (mech.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                mech: [],\n\n                message: 'Successful',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              mech,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static changeRepairStatus(request, response) {\n    MechModel.find({ _id: request.params.id })\n      .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The status with the given red-flag id does not exists',\n          });\n        }\n        const { status } = request.body;\n\n        MechModel.updateOne(\n          { _id: request.params.id },\n          {\n            status: status,\n          },\n        )\n          .then(data => {\n            const redflagStatus = data;\n\n            return response.status(201).json({\n              status: 201,\n              data: [\n                {\n                  id: redflagStatus._id,\n                  message: 'Updated red-flag record’s status',\n                },\n              ],\n            });\n          })\n          .catch(err => {\n            console.log(err);\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getAllPartnerEarnings(request, response) {\n    EarningsModel.find()\n      .then(data => {\n        const earnings = data;\n        //console.log(googleSettings,\"users available are here\")\n        if (earnings.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                earnings: [],\n\n                message: 'Successful',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              earnings,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static createNewPartnerEarnings(request, response) {\n    let mongoose = require('mongoose');\n\n    const {\n      paymentDate,\n      PaymentStatus,\n      PaymentAmount,\n      paymentReference,\n      partnerId,\n      partnerEmail,\n      partnerBankAccount,\n      vehicleId,\n      vehicleName,\n      vehiclePlateNo,\n    } = request.body;\n\n    const NewEarnings = new EarningsModel({\n      id: new AutoincrementId(EarningsModel).counter(),\n      paymentDate,\n      paymentStatus: PaymentStatus,\n      paymentAmount: PaymentAmount,\n      paymentReference,\n      partnerId,\n      partnerEmail,\n      partnerBankAccount,\n      vehicleId: mongoose.Types.ObjectId(vehicleId),\n      vehicleName,\n      vehiclePlateNo,\n      partner: mongoose.Types.ObjectId(partnerId),\n      vehicle: mongoose.Types.ObjectId(vehicleId),\n      date_created: new Date(),\n    });\n\n    NewEarnings.save()\n      .then(data => {\n        const Earnings = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: Earnings.id,\n              message: 'Created car record',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static manageFacebookSettings(request, response) {\n    FacebookSettingModel.find()\n      .then(data => {\n        const facebookSettings = data;\n        console.log(facebookSettings, 'facebookSettings available are here');\n        if (facebookSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              facebookSettings,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static managePaystackSettings(request, response) {\n    PaystackSettingModel.find()\n      .then(data => {\n        const paystackSettings = data;\n        console.log(paystackSettings, 'paystackSettings available are here');\n        if (paystackSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              paystackSettings,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageEmailSettings(request, response) {\n    SendgridEmailSettingModel.find()\n      .then(data => {\n        const sendgridSettings = data;\n        console.log(sendgridSettings, 'sendgridSettings available are here');\n        if (sendgridSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              sendgridSettings,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageS3BucketSettings(request, response) {\n    AwsS3Model.find()\n      .then(data => {\n        const awsSettings = data;\n        console.log(awsSettings, 'awsSettings available are here');\n        if (awsSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              awsSettings,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageInstagramSettings(request, response) {\n    InstagramSettingModel.find()\n      .then(data => {\n        const instagramSettings = data;\n        console.log(instagramSettings, 'instagramSettings available are here');\n        if (instagramSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              instagramSettings,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageSettingsDetail(request, response) {\n    const {\n      test_secret_key,\n      test_public_key,\n      live_public_key,\n      live_secret_key,\n      api_mode,\n      type,\n    } = request.body;\n\n    switch (type) {\n      case 'google':\n        GmailSettingModel.findOne({ _id: request.params.id }, function(err, settings) {\n          if (!settings) {\n            return response\n              .status(400)\n              .send({ msg: 'We were unable to find a plan with that id.' });\n          }\n          settings.test_secret_key = test_secret_key || settings.test_secret_key;\n          settings.test_public_key = test_public_key || settings.test_public_key;\n\n          settings.live_secret_key = live_secret_key || settings.live_secret_key;\n          settings.live_public_key = live_public_key || settings.live_public_key;\n          settings.api_mode = api_mode || settings.api_mode;\n\n          settings.save(function(err, user) {\n            if (err) {\n              console.log(err);\n              return response.status(500).send({ msg: err.message });\n            }\n\n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response\n              .status(200)\n              .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n          });\n        });\n\n        break;\n      case 'aws':\n        AwsS3Model.findOne({ _id: request.params.id }, function(err, settings) {\n          if (!settings) {\n            return response\n              .status(400)\n              .send({ msg: 'We were unable to find a plan with that id.' });\n          }\n\n          settings.test_secret_key = test_secret_key || settings.test_secret_key;\n          settings.test_public_key = test_public_key || settings.test_public_key;\n\n          settings.live_secret_key = live_secret_key || settings.live_secret_key;\n          settings.live_public_key = live_public_key || settings.live_public_key;\n          settings.api_mode = api_mode || settings.api_mode;\n\n          settings.save(function(err, user) {\n            if (err) {\n              console.log(err);\n              return response.status(500).send({ msg: err.message });\n            }\n\n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response\n              .status(200)\n              .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n          });\n        });\n\n        break;\n      case 'facebook':\n        FacebookSettingModel.findOne({ _id: request.params.id }, function(err, settings) {\n          if (!settings) {\n            return response\n              .status(400)\n              .send({ msg: 'We were unable to find a plan with that id.' });\n          }\n          settings.test_secret_key = test_secret_key || settings.test_secret_key;\n          settings.test_public_key = test_public_key || settings.test_public_key;\n\n          settings.live_secret_key = live_secret_key || settings.live_secret_key;\n          settings.live_public_key = live_public_key || settings.live_public_key;\n          settings.api_mode = api_mode || settings.api_mode;\n\n          settings.save(function(err, user) {\n            if (err) {\n              console.log(err);\n              return response.status(500).send({ msg: err.message });\n            }\n\n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response\n              .status(200)\n              .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n          });\n        });\n\n        break;\n      case 'instagram':\n        InstagramSettingModel.findOne({ _id: request.params.id }, function(err, settings) {\n          if (!settings) {\n            return response\n              .status(400)\n              .send({ msg: 'We were unable to find a plan with that id.' });\n          }\n\n          settings.test_secret_key = test_secret_key || settings.test_secret_key;\n          settings.test_public_key = test_public_key || settings.test_public_key;\n\n          settings.live_secret_key = live_secret_key || settings.live_secret_key;\n          settings.live_public_key = live_public_key || settings.live_public_key;\n          settings.api_mode = api_mode || settings.api_mode;\n\n          settings.save(function(err, user) {\n            if (err) {\n              console.log(err);\n              return response.status(500).send({ msg: err.message });\n            }\n\n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response\n              .status(200)\n              .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n          });\n        });\n\n        break;\n      case 'paystack':\n        PaystackSettingModel.findOne({ _id: request.params.id }, function(err, settings) {\n          if (!settings) {\n            return response\n              .status(400)\n              .send({ msg: 'We were unable to find a plan with that id.' });\n          }\n          settings.test_secret_key = test_secret_key || settings.test_secret_key;\n          settings.test_public_key = test_public_key || settings.test_public_key;\n\n          settings.live_secret_key = live_secret_key || settings.live_secret_key;\n          settings.live_public_key = live_public_key || settings.live_public_key;\n          settings.api_mode = api_mode || settings.api_mode;\n\n          settings.save(function(err, user) {\n            if (err) {\n              console.log(err);\n              return response.status(500).send({ msg: err.message });\n            }\n\n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response\n              .status(200)\n              .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n          });\n        });\n\n        break;\n      case 'sendgrid':\n        SendgridEmailSettingModel.findOne({ _id: request.params.id }, function(err, settings) {\n          if (!settings) {\n            return response\n              .status(400)\n              .send({ msg: 'We were unable to find a plan with that id.' });\n          }\n\n          settings.test_secret_key = test_secret_key || settings.test_secret_key;\n          settings.test_public_key = test_public_key || settings.test_public_key;\n\n          settings.live_secret_key = live_secret_key || settings.live_secret_key;\n          settings.live_public_key = live_public_key || settings.live_public_key;\n          settings.api_mode = api_mode || settings.api_mode;\n\n          settings.save(function(err, user) {\n            if (err) {\n              console.log(err);\n              return response.status(500).send({ msg: err.message });\n            }\n\n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response\n              .status(200)\n              .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n          });\n        });\n\n        break;\n    }\n  }\n\n  static manageBookings(request, response) {\n    return UserService.manageBookings(request, response);\n  }\n\n  static makeQuotation(request, response) {\n    let {\n      plan_id,\n      price,\n      status,\n      full_name,\n      quotation_id,\n      email,\n      reference,\n      amount,\n      createdDateOfQuotation,\n      phone_number,\n    } = request.body;\n\n    const NewUserPlan = new QuoteModel({\n      id: new AutoincrementId(QuoteModel).counter(),\n      plan_id,\n      price,\n      status,\n      full_name,\n      quotation_id,\n      email,\n      reference,\n      amount,\n      createdDateOfQuotation,\n      phone_number,\n    });\n\n    NewUserPlan.save()\n      .then(data => {\n        const user = data;\n        console.log(user + 'plans');\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              user,\n            },\n          ],\n          message: 'User Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err + 'error here user plan');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n    // UserService.saveUsersItinerary(request,response);\n  }\n\n  static createNewPlanBooking(request, response) {\n    //   let {\n    //    itineraries,\n    //   user_id,\n    //   carsSelected,\n    //   planName,\n    //   price,\n    //   planCategoryName,\n    //   no_hours,\n    //   username,\n    //   email,\n    //   phone_number,\n    //   plan_id,\n    // } = request.body;\n\n    let {\n      plan_id,\n      createdDate,\n      itineraries,\n      user_id,\n      carsSelected,\n      // plan_name:  plan_name.options[plan_name.selectedIndex].text,   //plan_name.value,\n      price,\n      // plan_categories: plan_categories,\n      status,\n      no_hours,\n      duration,\n      phone_number,\n      plan_category, //plan_categories1.value,\n      plan_name, //plan_name1.value,\n\n      username,\n      email,\n      has_been_updated,\n    } = request.body;\n\n    const NewUserPlan = new UserPlanModel({\n      id: new AutoincrementId(UserPlanModel).counter(),\n      plan_id,\n\n      createdDateOfQuotation: createdDate,\n      itineries: itineraries,\n      user_id,\n      cars_on_plan: carsSelected,\n      // plan_name:  plan_name.options[plan_name.selectedIndex].text,   //plan_name.value,\n      price,\n      // plan_categories: plan_categories,\n      status,\n      no_hours,\n      duration,\n      phone_number,\n\n      plan_category_name: plan_category, //plan_categories1.value,\n      plan_name, //plan_name1.value,\n\n      username,\n      email,\n      has_updated: 'Yes',\n    });\n\n    NewUserPlan.save()\n      .then(data => {\n        const user = data;\n        console.log(user + 'plans');\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              user,\n            },\n          ],\n          message: 'User Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err + 'error here user plan');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n    // UserService.saveUsersItinerary(request,response);\n  }\n\n  static manageBookingsDetail(request, response) {\n    return UserService.manageBookingsDetail(request, response);\n  }\n\n  static manageManualBooking(request, response) {\n    //return  UserService.manageManualBooking(request,response)\n  }\n\n  static manageItineraries(request, response) {\n    ItineraryModel.find()\n      .then(data => {\n        const itineraries = data;\n        console.log(data + 'either empty itins');\n        if (itineraries.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                itineraries: [],\n\n                message: 'Successful',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              itineraries,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageUsersPlan(request, response) {\n    UserPlanModel.find()\n      //.populate('users_collections')\n      .then(data => {\n        const usersPlan = data;\n        console.log(data + 'either empty itins');\n        if (usersPlan.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                usersPlan: [],\n\n                message: 'Successful',\n              },\n            ],\n          });\n        }\n\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              usersPlan,\n\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static createNewItinerary(request, response) {\n    // console.log(request.body)\n\n    let {\n      plan_category,\n      start_location,\n      destination,\n      travel_option: drive_option,\n      no_hours,\n      travel_option,\n      plan_name,\n      status,\n      start_time,\n\n      drivingschool,\n      user_id,\n      username,\n      email,\n      phone_number,\n      plan_id,\n      end_time,\n      pickup_time,\n      certificate_id,\n      certificate_date,\n    } = request.body;\n\n    const NewItinerary = new ItineraryModel({\n      id: new AutoincrementId(ItineraryModel).counter(),\n      plan_category,\n      start_location,\n      destination,\n      travel_option: drive_option,\n      no_hours,\n      travel_option,\n      plan_name,\n      status,\n      start_time,\n      travel_option,\n      drivingschool,\n      user_id,\n      username,\n      email,\n      phone_number,\n      plan_id,\n      end_time,\n      pickup_time,\n      certificate_id,\n      certificate_date,\n    });\n\n    NewItinerary.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          plan_category: user.plan_category,\n          start_location: user.start_location,\n          destination: user.destination,\n          drive_option: user.drive_option,\n          no_hours: user.no_hours,\n          travel_option: user.travel_option,\n          plan_name,\n          status,\n          start_time,\n          drivingschool,\n          username: user.username,\n          email: user.email,\n          // cars_id: user.cars_id\n        };\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              result,\n            },\n          ],\n          message: 'User Itinerary created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err + 'error here');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static manageItineraryDetail(request, response) {\n    ItineraryModel.find({ _id: request.params.id })\n      .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The status with the given itinerary id does not exists',\n          });\n        }\n        const {\n          status,\n          assigned_driver_id,\n          assigned_driver_name,\n          assigned_driver_email,\n          assigned_driver_phone,\n        } = request.body;\n\n        ItineraryModel.updateOne(\n          { _id: request.params.id },\n          {\n            status: status || redId.status,\n            assigned_driver_id: assigned_driver_id || redId.assigned_driver_name,\n            assigned_driver_name: assigned_driver_name || redId.assigned_driver_name,\n            assigned_driver_email: assigned_driver_email || redId.assigned_driver_email,\n            assigned_driver_phone: assigned_driver_phone || redId.assigned_driver_phone,\n          },\n        )\n          .then(data => {\n            const faq = data;\n\n            return response.status(200).json({\n              status: 200,\n              data: [\n                {\n                  id: faq._id,\n                  message: 'Updated faq record’s detail',\n                },\n              ],\n            });\n          })\n          .catch(err =>\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            }),\n          );\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageWalletHistory(req, res) {\n    WalletModel.find()\n      .then((donor, error) => {\n        if (!donor) {\n          //handle error when the donor is not found\n          console.log(error);\n          res.redirect(BACKEND_API + '/error');\n        }\n        const tranx = donor;\n        console.log(tranx);\n        return res.status(200).json({\n          status: 200,\n          data: [\n            {\n              tranx,\n              message: 'Get all wallet amount  was successful',\n            },\n          ],\n        });\n      })\n      .catch(e => {\n        console.log(e);\n        res.redirect(BACKEND_API + '/error');\n      });\n  }\n\n  static adminDashboardTodaySales(request, response) {\n    //var now = new Date();\n    //var startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    // WalletModel.find({createdDate: {$gte: startOfToday}}, function (err, docs) {\n    //    if(err){\n    //      console.log(err)\n    //    }\n\n    //    return response.status(200).json({\n    //             status: 200,\n    //             data: [\n    //               {\n    //                 todaySales:docs,\n    //                 message: 'Get all wallet amount  was successful',\n    //               },\n    //             ],\n    //       });\n\n    //  });\n\n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    PaymentModel.find({ created_at: { $gte: today } }).exec(function(err, wallet) {\n      if (err) {\n        return response.status(400).json({\n          status: 400,\n          message: 'Get all wallet amount  was successful',\n        });\n      }\n\n      let totalToday = 0;\n      let todaySales_from_account = wallet.map((item, i) => {\n        totalToday += item.amount;\n      });\n\n      return response.status(200).json({\n        status: 200,\n        data: [\n          {\n            todaySales: totalToday,\n            message: 'Get all wallet amount  was successful',\n          },\n        ],\n      });\n    });\n  }\n\n  static adminDashboardYesterdaySales(request, response) {\n    var yesterdayStart = new Date();\n    yesterdayStart.setDate(yesterdayStart.getDate() - 1);\n    yesterdayStart.setHours(0, 0, 0, 0);\n    //var startId = Math.floor(yesterdayStart.getTime() / 1000).toString(16) + \"0000000000000000\";\n\n    var yesterdayEnd = new Date();\n    yesterdayEnd.setDate(yesterdayEnd.getDate() - 1);\n    yesterdayEnd.setHours(23, 59, 59, 999);\n\n    PaymentModel.find({ createdDate: { $gt: new Date(Date.now() - 24 * 60 * 60 * 1000) } }).exec(\n      function(err, wallet) {\n        if (err) {\n          console.log(err);\n        }\n\n        let totalYest = 0;\n        let todaySales_from_account = wallet.map((item, i) => {\n          totalYest += item.amount;\n        });\n\n        console.log(totalYest);\n\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              yesterdaysSales: totalYest,\n              message: 'Get all wallet amount  was successful',\n            },\n          ],\n        });\n      },\n    );\n  }\n\n  static adminDashboardWeeklySales(request, response) {\n    let oneWeekAgo = Date(new Date() - 7 * 60 * 60 * 24 * 1000);\n\n    // WalletModel.find({createdDate: {\n    //       $gte: oneWeekAgo\n\n    //    }\n    //  }, function (err, docs) {\n\n    //     if(err){\n    //     console.log(err)\n    //   }\n\n    //   return response.status(200).json({\n    //            status: 200,\n    //            data: [\n    //              {\n    //                weeklySales:docs,\n    //                message: 'Get all wallet amount  was successful',\n    //              },\n    //            ],\n    //      });\n\n    // });\n\n    PaymentModel.find({ createdDate: { $gte: oneWeekAgo } }).exec(function(err, wallet) {\n      if (err) {\n        console.log(err);\n      }\n\n      let totalWeek = 0;\n      let todaySales_from_account = wallet.map((item, i) => {\n        totalWeek += item.amount;\n      });\n\n      return response.status(200).json({\n        status: 200,\n        data: [\n          {\n            weeklySales: totalWeek,\n            message: 'Get all wallet amount  was successful',\n          },\n        ],\n      });\n    });\n  }\n\n  static adminDashboardMonthlySales(request, response) {\n    const lastMonths = new Date(new Date().getMonth() - 1);\n    PaymentModel.find(\n      {\n        createdDate: {\n          $lte: lastMonths,\n        },\n      },\n      function(err, docs) {\n        if (err) {\n          console.log(err);\n        }\n\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              lastMonth: docs,\n              message: 'Get all wallet amount  was successful',\n            },\n          ],\n        });\n      },\n    );\n  }\n\n  static adminGetAllUsers(request, response) {}\n\n  static adminGetAllUsersPlans(request, response) {}\n\n  static paystackHistoryAdmin(req, res) {\n    const id = new String(req.params.id);\n    WalletModel.find()\n      .then((donor, error) => {\n        if (!donor) {\n          //handle error when the donor is not found\n          console.log(error);\n          res.redirect(BACKEND_API + '/error');\n        }\n        const tranx = donor;\n        console.log(tranx + 'for the user');\n        return res.status(200).json({\n          status: 200,\n          data: [\n            {\n              wallets: tranx,\n              message: 'Get a specific user plan was successful',\n            },\n          ],\n        });\n      })\n      .catch(e => {\n        console.log(e);\n        res.redirect(BACKEND_API + '/error');\n      });\n  }\n\n  static paystackPaymentsAdmin(req, res) {\n    const id = new String(req.params.id);\n    PaymentModel.find()\n      .then((donor, error) => {\n        if (!donor) {\n          //handle error when the donor is not found\n          console.log(error);\n          res.redirect(BACKEND_API + '/error');\n        }\n        const tranx = donor;\n        console.log(tranx + 'for the user');\n        return res.status(200).json({\n          status: 200,\n          data: [\n            {\n              payments: tranx,\n              message: 'Get a specific user plan was successful',\n            },\n          ],\n        });\n      })\n      .catch(e => {\n        console.log(e);\n        res.redirect(BACKEND_API + '/error');\n      });\n  }\n\n  static paystackQuotationsAdmin(req, res) {\n    const id = new String(req.params.id);\n    QuoteModel.find()\n      .then((donor, error) => {\n        if (!donor) {\n          //handle error when the donor is not found\n          console.log(error);\n          res.redirect(BACKEND_API + '/error');\n        }\n        const tranx = donor;\n        console.log(tranx + 'for the user quotations');\n        return res.status(200).json({\n          status: 200,\n          data: [\n            {\n              quotations: tranx,\n              message: 'Get a specific user plan was successful',\n            },\n          ],\n        });\n      })\n      .catch(e => {\n        console.log(e);\n        res.redirect(BACKEND_API + '/error');\n      });\n  }\n\n  static updateUsersPlanStatusAdmin(request, response) {\n    const {\n      status,\n      payment_status,\n      email,\n      has_updated,\n      plan_id,\n      price,\n      createdDateOfQuotation,\n    } = request.body;\n\n    UserPlanModel.findOne({ plan_id: request.params.id }, function(err, user) {\n      // Verify and save the user\n      user.status = status || user.status;\n      user.payment_status = payment_status || user.payment_status;\n      user.email = email || user.email;\n\n      user.has_updated = has_updated || user.has_updated;\n      user.plan_id = plan_id || user.plan_id;\n      user.price = price || user.price;\n      user.createdDateOfQuotation = createdDateOfQuotation || user.createdDateOfQuotation;\n\n      user.save(function(err, user) {\n        if (err) {\n          return response.status(500).send({ msg: err.message });\n        }\n        console.log(user + 'hello');\n\n        UserPlanModel.updateMany(\n          { plan_id: request.params.id },\n          {\n            $set: {\n              //status:status,\n              'itineries.$[].status': status,\n            },\n          },\n          { multi: true },\n          function(err, result) {\n            if (err) {\n              console.log(err);\n              response.send(err);\n            } else {\n              console.log(result);\n\n              if (user.status == 'Unpaid') {\n                UserService.NotificationEmail(\n                  request,\n                  response,\n                  '/views/templates/notification.html',\n                  {\n                    username: user.username,\n                    plan_id: user.plan_id,\n                    price: user.price,\n                    date: createdDateOfQuotation.substring(0, 10),\n                    link: process.env.DEPLOY_FRONT_URL,\n                    description: 'Payment is required',\n                  },\n                  user.email,\n                  200,\n                );\n              } else {\n                UserService.NotificationEmail(\n                  request,\n                  response,\n                  '/views/templates/notification.html',\n                  {\n                    username: user.username,\n                    plan_id: user.plan_id,\n                    price: user.price,\n                    date: createdDateOfQuotation.substring(0, 10),\n                    link: process.env.DEPLOY_FRONT_URL,\n                    description: 'Payment is required',\n                  },\n                  user.email,\n                  200,\n                );\n              }\n\n              //return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated itineraries of this plan .' });\n            }\n          },\n        );\n        //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n        //return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n      });\n    });\n  }\n\n  static updateItineraryStatusAdmin(request, response) {\n    const { status, user_plan_id, has_received_quote } = request.body;\n    let has_received_payments = 'No';\n    if (request.body.has_received_payments) {\n      has_received_payments = request.body.has_received_payments;\n    }\n\n    //multiple updates of the status for this itineraries attached to this plan\n\n    // ItineraryModel.findOne({plan_id: request.params.id}, function (err, user) {\n\n    //   if(err){\n    //     console.log(err)\n    //   }\n\n    //   // Verify and save the user\n    //   user.status= status || user.status;\n\n    //   user.plan_id= request.params.id || user.plan_id;\n    //   user.user_plan_id= user_plan_id || user.user_plan_id;\n\n    //   user.save(function (err,user) {\n    //     if (err) { return response.status(500).send({ msg: err.message }); }\n    //     console.log(user + 'hello')\n    //       //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n\n    ItineraryModel.updateMany(\n      { plan_id: user_plan_id },\n      {\n        $set: {\n          status: status,\n          user_plan_id: user_plan_id,\n          has_received_quote: has_received_quote,\n          has_received_payments: has_received_payments,\n        },\n      },\n      { multi: true },\n      function(err, result) {\n        if (err) {\n          console.log(err);\n          response.send(err);\n        } else {\n          // console.log(result)\n          return response\n            .status(200)\n            .send({\n              status: 200,\n              success: 'ok',\n              msg: 'Successfully updated itineraries of this plan .',\n            });\n        }\n      },\n    );\n  }\n\n  //drivers\n\n  static driverConfirmBooking(request, response) {\n    return response.sendFile(path.join(__dirname + '/driver_confirm.html'));\n  }\n\n  static showUserInfo(request, response) {\n    UserModel.find({ email: request.params.id })\n      .then(data => {\n        console.log('specific profile:' + data);\n\n        const userInfo = data; //related\n        if (userInfo.length <= 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                userInfo,\n                message: 'Get a specific user was successful',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              userInfo,\n              message: 'Get a specific user was successful',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getTrails(request, response) {\n    AuditNotificationModel.find({})\n      .then(data => {\n        console.log('specific profile:' + data);\n\n        const audit = data; //related\n        if (audit.length <= 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                audit,\n                message: 'Get a specific user was successful',\n              },\n            ],\n          });\n        }\n\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              audit,\n              message: 'Get a specific user was successful',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n        console.log(err + '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static createTrail(request, response) {\n    let { date, admin, user, module_name, status, message_type, logMessage, avatar } = request.body;\n\n    const NewAuditTrail = new AuditNotificationModel({\n      id: new AutoincrementId(AuditNotificationModel).counter(),\n      date,\n      admin,\n      user,\n      module_name,\n      status,\n      message_type,\n      logMessage,\n      avatar,\n    });\n\n    NewAuditTrail.save()\n      .then(data => {\n        const user = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              user,\n              message: 'AUDIT SUCCESSFULLY CREATED',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n        console.log(err + 'error here');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static revokecar(request, response) {\n    let {\n      status,\n\n      date_created,\n      retrievalComments,\n      vehiclePlateNo,\n      vehicleName,\n      vehicleID,\n      vehicle,\n      partner,\n      partnerID,\n      partnerName,\n      partnerEmail,\n      retrievalDate,\n      hasBeenRevoked,\n    } = request.body;\n\n    const RetrievalTrail = new Retrieval({\n      id: new AutoincrementId(Retrieval).counter(),\n\n      status,\n\n      date_created,\n      retrievalComments,\n      vehiclePlateNo,\n      vehicleName,\n      vehicleID,\n      vehicle,\n      partner,\n      partnerID,\n      partnerName,\n      partnerEmail,\n      retrievalDate,\n      hasBeenRevoked,\n    });\n\n    RetrievalTrail.save()\n      .then(data => {\n        const user = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              user,\n              message: 'AUDIT SUCCESSFULLY CREATED',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n        console.log(err + 'error here');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static revokecarstatus(request, response) {\n    let { car_status, hasBeenRevoked } = request.body;\n\n    CarsModel.findOne({ _id: request.params.id }, function(err, car) {\n      if (!car)\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n\n      // Verify and save the user\n      car.car_status = car_status || car.car_status;\n      car.hasBeenRevoked = true || car.hasBeenRevoked;\n\n      car.save(function(err, user) {\n        if (err) {\n          console.log(err);\n          return response.status(500).send({ msg: err.message });\n        }\n\n        return response\n          .status(200)\n          .send({ status: 200, success: 'ok', msg: 'Successfully updated user profile.' });\n      });\n    });\n  }\n\n  static getrevokecars(request, response) {\n    Retrieval.find({})\n      .then(data => {\n        const carsNotInUse = data; //related\n        if (carsNotInUse.length <= 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                carsNotInUse,\n                message: 'Get a specific user was successful',\n              },\n            ],\n          });\n        }\n\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              carsNotInUse,\n              message: 'Get a specific user was successful',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n}\n"],"file":"user_service.js"}