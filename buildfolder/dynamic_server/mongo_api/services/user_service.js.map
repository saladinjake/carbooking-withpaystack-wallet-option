{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/services/user_service.js"],"names":["dotenv","config","csv","require","uuidv4","sgMail","postmark","sendgridTransport","process","env","gmailTransport","MailConfig","GmailTransport","smtpTransport","SMTPTransport","request","initializePayment","verifyPayment","MongooseDatabase","getInstance","Database","readHTMLFile","path","callback","fs","readFile","encoding","err","html","UserService","req","res","review","UserPlanModel","username","body","rating","save","then","result","User","findOne","user","reviews","push","json","message","error","status","UserModel","password","email","params","response","templateDir","replacements","userEmail","STATUS","HelperOptions","from","SMTP_USER_NAME","to","subject","context","name","address","__dirname","template","handlebars","compile","htmlToSend","sendMail","info","console","log","send","msg","success","data","replacementObj","tokenSTR","link","DEPLOY_BACK_URL","tokenToSend","firstname","lastname","phoneNumber","user_type","TokenGenerator","hashPassword","trim","roles","Newuser","id","AutoincrementId","counter","phone_number","is_admin","emailT","crypto","randomBytes","toString","emailtoken","EmailTokenMakerForSignUp","_userId","_id","email_confirm_token","newUserMail","token","generateToken","ErrorHandler","errors","validationError","isVerified","checkIfPasswordMatch","isAdmin","profile","avatar","plan","plan_name","balance","notification_count","test_certificate","account_num","accountNumber","type","sendFile","join","result2","hashedStringToSend","Storage","setItem","ForgotModelToken","ForgotPasswordToken","email_to_reset","passwordResetsMail","confirmPass","confirmPassword","getItem","find","userInfo","length","RolesAndPreviledgesModel","for_admins","previledges_info","view_bookings","view_quotations","view_transactions","view_payments","view_drivers","view_sos","view_partners","view_package","view_cars","view_tickets","view_faqs","view_users","view_admins","view_settings","manage_bookings","manage_quotations","manage_transactions","manage_payments","manage_drivers","manage_sos","manage_partners","manage_package","manage_cars","manage_tickets","manage_faqs","manage_users","manage_admins","manage_settings","view_car_inspection","view_drive_test","manage_drive_test","manage_car_inspection","users","updateMany","String","$set","multi","old_balance","currentBalance","passwordConfirm","certificate","plan_id","itineraries","user_id","carsSelected","planName","price","planCategoryName","no_hours","NewUserPlan","plan_category_name","cars_on_plan","itineries","duration","plan_category","start_location","destination","drive_option","start_time","travel_option","drivingschool","NewItinerary","ItineraryModel","Number","redId","updateOne","redflagStatus","NotificationModel","certificate_id","end_time","cars_id","IndividualPlanModel","individualPlans","coperatePlanModel","coperatePlan","JSON","strigify","redflags","stringify","removeOne","deletedRedFlag","itinerary","RedFlagModel","plans","QuoteModel","quote","oldBalance","debit_amount","bal","amount","has_updated","userItins","user_plan_id","has_received_payments","has_received_quote","userPlanInfo","fullname","form","metadata","full_name","amout","redirect","parse","url","authorization_url","query","reference","trxref","ref","customer","phone","newDonor","donor","WalletModel","convertedBal","e","quotation_id","PaymentModel","findById","tranx","remove","deletedUser","for_users","description","NewNotificationModel","now","Date","startOfToday","getFullYear","getMonth","getDate","sort","field","allNotification","boolVerification","passwordComfirm","is_verified","admins","usergroup_set","is_active","drivers","PartnersModel","partners","totalCars","bankAccount","bankAccountName","bankAccountNumber","firstName","lastName","userName","businessName","EarningsModel","earnings","paymentDate","PaymentStatus","PaymentAmount","paymentReference","partnerId","partnerEmail","partnerBankAccount","vehicleId","vehicleName","vehiclePlateNo","pid","partner","paymentStatus","paymentAmount","corporatePlans","delete_type","plan_categories","max_car","car_max","CarsModel","health_status","inspections","confirmedInspectionDate","confirmedInspectionTime","date","time","NotificationEmail","DEPLOY_FRONT_URL","createdDate","car_id","InspectionModel","DriveTestModel","testDrive","test_center","test_center_address","previledges","previledges_description","usergroups_old","usergroup","value","SOSModel","redFlag","InterventionsModel","intervention","category","assigned_to","comment","NewCars","Cars","responses","question","answer","FAQModel","faqs","faq","carsAvailable","cars","car_status","car_type","car_model","car_year","assigned_driver_name","assigned_driver_email","assigned_driver_phone","partner_id","inspection_detail","plate_number","license","assigned_driver_id","images","inspectionDate","vehicleIdentificationNumber","inspectionTime","color","model","car","carModel","carYear","vehicleColor","plateNo","carDescription","imagePath","creator","date_created","carInfo","carsApi","GmailSettingModel","googleSettings","MechModel","mech","mongoose","NewEarnings","Types","ObjectId","vehicle","Earnings","FacebookSettingModel","facebookSettings","PaystackSettingModel","paystackSettings","SendgridEmailSettingModel","sendgridSettings","AwsS3Model","awsSettings","InstagramSettingModel","instagramSettings","test_secret_key","test_public_key","live_public_key","live_secret_key","api_mode","settings","manageBookings","createdDateOfQuotation","has_been_updated","manageBookingsDetail","usersPlan","pickup_time","certificate_date","today","created_at","$gte","exec","wallet","totalToday","todaySales_from_account","map","item","i","todaySales","yesterdayStart","setDate","setHours","yesterdayEnd","$gt","totalYest","yesterdaysSales","oneWeekAgo","totalWeek","weeklySales","lastMonths","$lte","docs","lastMonth","wallets","payments","quotations","payment_status","substring","AuditNotificationModel","audit","admin","module_name","message_type","logMessage","NewAuditTrail","retrievalComments","vehicleID","partnerID","partnerName","retrievalDate","hasBeenRevoked","RetrievalTrail","Retrieval","carsNotInUse","promiseList","promistList"],"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","sourcesContent":["/* eslint-disable prefer-const */\n\nimport dotenv from 'dotenv';\ndotenv.config();\nimport Database from '../models/db';\n\nconst csv = require('csv-parser');\nconst uuidv4 = require('uuid/v4');\nconst sgMail = require('@sendgrid/mail');\n\nvar postmark = require(\"postmark\");\n\nimport carsApi from './cars_api';\n\nimport {passport ,express} from '../App'; \n//import EarningsModel from '../models/EarningsModel';\nimport AuditNotificationModel from '../models/AuditNotification.model';\nimport Retrieval from '../models/Retrival.model';\nimport UserPlanModel from '../models/UserPlan.model';\nimport PlanModel from \"../models/Plan.model\";\nimport ItineraryModel from '../models/Itinerary.model';\nimport IndividualPlanModel from '../models/IndividualPlan.model';\nimport NotificationModel from '../models/Notification.model'\nimport FAQModel from \"../models/FAQ.model\";\nimport coperatePlanModel from '../models/CoperatePlan.model';\nimport { TokenGenerator } from '../helpers/token_generator';\nimport { ErrorHandler } from '../helpers/error_handler';\nimport { ResponseHandler } from '../helpers/response_handler';\nimport UserModel from '../models/User.model.js';\nimport PartnersModel from \"../models/Partners.model.js\";\nimport EarningsModel from '../models/EarningsModel';\n//import DriversModel from \"../models/Driver.model.js\";\nimport WalletModel from '../models/Wallet.model.js';\nimport PaymentModel from \"../models/Payments.model.js\";\nimport QuotationsModel from \"../models/Quotation.model.js\"\nimport QuoteModel from \"../models/Quote.model.js\";\nimport AutoincrementId from '../helpers/autoincrement_mongo.js';\nimport EmailTokenMakerForSignUp from '../models/Token.model.js';\nimport ForgotPasswordToken from '../models/ForgotPassword.model.js';\nimport CarsModel from \"../models/Cars.model.js\";\nimport SOSModel from \"../models/SOS.model\";\nimport  InterventionsModel from '../models/Feedback.model';\nimport SendgridEmailSettingModel from \"../models/SendgridEmailSettings.model\";\nimport PaystackSettingModel from \"../models/PaystackSettings.model\";\nimport InstagramSettingModel from \"../models/InstagramSettings.model\";\nimport FacebookSettingModel from \"../models/FacebookSettings.model\";\nimport AwsS3Model from \"../models/AWS3BucketSettings.model\";\nimport GmailSettingModel from \"../models/GmailSettings.model\";\n\nimport InspectionModel from \"../models/Inspection.model\";\nimport DriveTestModel from  \"../models/DriveTest.model\";\nimport RolesAndPreviledgesModel from '../models/RolesAndPreviledges.model'\nimport MechModel from '../models/Repairs.model';\nimport nodemailer from 'nodemailer';\nimport crypto from 'crypto';\nimport path from 'path';\nconst sendgridTransport = require('nodemailer-sendgrid-transport');\n//import SocialAuthService from './social_auth_service';\nimport Storage from '../helpers/storage';\nimport multer from 'multer';\nimport Mixins from '../helpers/mixins';\nimport fs from 'fs';\nimport handlebars from 'handlebars';\n\nimport MailMan from './MailMan'\n\n/*pAy stack*/\nimport request from 'request';\nimport _ from 'lodash';\n\n// import carInfo  from \"../migrations/cars_info\";\n\n\n//other services\nimport CarsService  from \"./cars_services\";\nimport FaqService  from \"./faqs_service\";\nimport  FeedbackService  from './feedback_service';\nimport  SOSService  from \"./sos_service\";\n\n\n\nimport MailConfig from '../config/email';\n\nprocess.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0;\n\nvar gmailTransport = MailConfig.GmailTransport;\nvar smtpTransport = MailConfig.SMTPTransport;\n\n\nconst {initializePayment, verifyPayment} = require('../config/paystack')(request);\n\n\nconst MongooseDatabase =  Database.getInstance() || new  Database();\n\n\n\nvar readHTMLFile = function(path, callback) {\n    fs.readFile(path, {encoding: 'utf-8'}, function (err, html) {\n        if (err) {\n            throw err;\n            callback(err);\n        }\n        else {\n            callback(null, html);\n        }\n    });\n};\n\n\n\n\n\n\n\n\nexport class UserService {\n\n  static NotificationEmail( request, response,templateDir, replacements,userEmail,STATUS=201){\n   //MailConfig.ViewOption(gmailTransport,hbs);\n    let HelperOptions = {\n      from:    process.env.SMTP_USER_NAME,         //\"tester@softclo.com\", //'\"COMMUTE TAXI SERVICE\" <juwavictor@gmail.com>',\n      to:  userEmail, //'Joshua.adedoyin@softclo.com',\n      subject: 'Notification',\n      html: 'test',\n      context: {\n        name:\"COMMUTE TAXI\",\n        email: process.env.SMTP_USER_NAME,   // \"tester@softclo.com\",\n        address: \"3A DOTUN CLOSE, IKEJA LAGOS\"\n      }\n    };\n\n//     Signed out\n// Adedoyin Joshua\n//joshadedoyin.aj@gmail.com\n   \n    readHTMLFile(__dirname + templateDir, function(err, html) {\n                var template = handlebars.compile(html);\n               // var replacements = replacements;\n                var htmlToSend = template(replacements);\n                \n                HelperOptions.html = htmlToSend;\n                smtpTransport.sendMail(HelperOptions, (error,info) => {\n                      if(error) {\n                        console.log(error);\n                        //res.json(error);\n                        return response.status(400).send({ msg: error });\n                      }\n                      console.log(\"email is send\");\n                      console.log(info);\n                      //res.json(info)\n                      return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .', data: info });\n                     // return res.status(STATUS).send({ msg: \"successfully sent you a password reset link\", status:'ok',data: info }); \n                \n                });\n    })   \n\n }\n\n  static passwordResetsMail( request, response,userEmail,templateDir, replacementObj={username:'saladin'}, tokenSTR){\n    let HelperOptions = {\n      from:  process.env.SMTP_USER_NAME,            //'\"COMMUTE TAXI SERVICE\" <juwavictor@gmail.com>',\n      to:  userEmail, \n      subject: 'Hellow world!',\n      html: 'test',\n      context: {\n        name:\"COMMUTE TAXI\",\n        email: \"tester@softclo.com\",\n        address: \"3A DOTUN CLOSE, IKEJA LAGOS\"\n      }\n    };\n\n   \n    readHTMLFile(__dirname + templateDir, function(err, html) {\n                var template = handlebars.compile(html);\n                var replacements = {\n                     username: replacementObj.username ,//'juwavictor@gmail.com'\n                     link: process.env.DEPLOY_BACK_URL + '/auth/resetMyPassword\\/' + tokenSTR \n                };\n                var htmlToSend = template(replacements);\n                \n                HelperOptions.html = htmlToSend;\n                smtpTransport.sendMail(HelperOptions, (error,info) => {\n                      if(error) {\n                        console.log(error);\n                        //res.json(error);\n                        return response.status(400).send({ msg: error });\n                      }\n                      console.log(\"email is send\");\n                      console.log(info);\n                      //res.json(info)\n                      \n                });\n\n               \n\n                   \n\n             })   \n\n }\n\n  static newUserMail(request,response, result, templateDir='/views/templates/signup-verification.html', tokenToSend, status=201){\n\n\n\n    let HelperOptions = {\n      from:    process.env.SMTP_USER_NAME,         //\"tester@softclo.com\", //'\"COMMUTE TAXI SERVICE\" <juwavictor@gmail.com>',\n      to:  result.email, //'Joshua.adedoyin@softclo.com',\n      subject: 'Sign Up Activation Email',\n      html: 'test',\n      context: {\n        name:\"COMMUTE TAXI\",\n        email: process.env.SMTP_USER_NAME,   // \"tester@softclo.com\",\n        address: \"3A DOTUN CLOSE, IKEJA LAGOS\"\n      }\n    };\n\n   \n    readHTMLFile(__dirname + templateDir, function(err, html) {\n                var template = handlebars.compile(html);\n                var replacements = {\n                     username: result.username,\n                     link:  process.env.DEPLOY_BACK_URL +'/auth/confirmation\\/' + tokenToSend, \n                \n                };\n                var htmlToSend = template(replacements);\n                \n                HelperOptions.html = htmlToSend;\n                smtpTransport.sendMail(HelperOptions, (error,info) => {\n                      if(error) {\n                        console.log(error);\n                        //res.json(error);\n                        return response.status(400).send({ msg: error });\n                      }\n                      console.log(\"email is send\");\n                      console.log(info);\n                      //res.json(info)\n                       \n                       \n\n\n\n\n                });\n\n               \n\n                   \n\n      })   \n\n    \n\n   \n\n  }\n  static signup(request, response) {\n      let { firstname, \n          lastname,  \n          username, \n          email, \n          phoneNumber,\n          user_type, \n          password \n    } = request.body;\n\n    console.log(password)\n    password = TokenGenerator.hashPassword(password.trim());\n    let roles = '';\n    if(request.body.roles){\n      roles = request.body.roles\n    }else{\n      roles = 'user';\n    }\n    \n\n    const Newuser = new UserModel({ \n      id: new AutoincrementId(UserModel).counter(), \n      firstname, \n      lastname, \n      user_type, \n      username, \n      email, \n      phone_number: phoneNumber, \n      password,\n      is_admin: false,\n      roles: roles,\n      //accountNumber: uuidv4()\n       });\n\n\n     Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n        let emailT = crypto.randomBytes(16).toString('hex');\n        // Create a verification token for this user\n        var emailtoken = new EmailTokenMakerForSignUp({ _userId: user._id, email_confirm_token: emailT });\n        \n\n        \n        // Save the verification token\n        emailtoken.save(function (err) {\n            if (err) { \n              return console.log(err.message );\n             }\n            console.log(emailtoken.email_confirm_token, emailtoken._userId)\n            \n\n            //console.log(__dirname + '/views/templates/signup-verification.html')\n\n            UserService.newUserMail(request,response, result,'/views/templates/signup-verification.html', emailtoken.email_confirm_token,201)\n             const token = TokenGenerator.generateToken(result);\n             return response.status(201).json({\n                                                status: 201,\n                                                data: [\n                                                  {\n                                                    token,\n                                                    user,\n                                                  },\n                                                ],\n                                                message: 'User created successfully',\n                        });\n\n\n\n            \n        });\n\n\n        \n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static login(request, response) {\n    const { email, password } = request.body;\n    UserModel.findOne({email: email})\n      .then(data => {\n        const user = data;\n        console.log(user.isVerified)\n\n\n        if (!user) {\n          return response.status(422).json({\n            status: 422,\n            error: 'User does not exists',\n          });\n\n          \n        }\n\n\n\n        if(!user.isVerified){\n          let link = process.env.DEPLOY_BACK_URL + '/auth/'\n          return response.status(422).json({\n            status: 422,\n            error: `<h6>Email verification step is needed. please check your email for a verification link or click the link to resend you an email verification</h6> \n\n            <a href=\"${link}/resend/${email}\">Resend </a>`,\n          });\n        }\n        // console.log(email);\n        // console.log(password);\n        if (!TokenGenerator.checkIfPasswordMatch(password, user.password)) {\n          return response.status(422).json({\n            status: 422,\n            error: 'Invalid login details. Email or password is wrong',\n          });\n        }\n\n        //request.session.user = user;\n\n\n\n        const result = {\n          id: user.id,\n          _id: user._id,\n          email: user.email,\n          isAdmin: user.is_admin,\n          isVerified:user.isVerified,\n          firstname: user.firstname,\n          username: user.username,\n           profile: user.avatar,\n          plan: user.plan_name,\n          balance: user.balance,\n          notification_count: user.notification_count,\n          user_type: user.user_type,\n          username:user.username,\n          phoneNumber: user.phone_number,\n          roles: user.roles,\n          test_certificate: user.test_certificate\n\n        };\n        const token = TokenGenerator.generateToken(result);\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              token,\n              user: {\n                id: user.id,\n                 _id: user._id,\n                email: user.email,\n                isAdmin: user.is_admin,\n                isVerified:user.isVerified,\n                firstname: user.firstname,\n                username: user.username,\n                profile: user.avatar,\n                plan_name: user.plan_name,\n                balance: user.balance,\n                notification_count: user.notification_count,\n                 user_type: user.user_type,\n                 account_num: user.accountNumber,\n                 username:user.username,\n          phoneNumber: user.phone_number,\n          roles: user.roles,\n           test_certificate: user.test_certificate\n              },\n            },\n          ],\n          message: 'Successfully signed in',\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static logout(request,response){\n//     router.post('/logout', function(req, res) {\n//   logout.logoutUser(req, res, function(err, data) {\n//     if (err) {\n//       res.json({ 'error': data.error, 'message': data.message });\n//     } else {\n//       res.json({ 'success': data.success, 'message': data.message });\n//     }\n//   });\n// });\n  }\n\n  static confirmationPost (req, res) {\n   \n\n    // Find a matching token\n    EmailTokenMakerForSignUp.findOne({ email_confirm_token:  req.params.id }, function (err, token) {\n       \n        if (!token) return res.status(400).send({ type: 'not-verified', msg: 'We were unable to find a valid token. Your token my have expired.' });\n\n        // If we found a token, find a matching user email: req.body.email\n        UserModel.findOne({ _id: token._userId  }, function (err, user) {\n            if (!user) {\n              //return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\n              return  res.sendFile(path.join(__dirname + '../../../../../UI/user/page-503.html'));\n            }\n            if (user.isVerified) {\n              //return res.status(201).send({ type: 'already-verified', msg: 'This user has already been verified.' });\n              return  res.sendFile(path.join(__dirname + '/views/templates/already-verified.html'));\n            \n\n            }\n\n            // Verify and save the user\n            user.isVerified = true;\n            user.save(function (err) {\n                if (err) { return res.status(500).send({ msg: err.message }); }\n                //res.status(200).send(\"The account has been verified. Please wait...\");\n                   \n                if(user.roles!='Individual Driver'){\n                  return  res.sendFile(path.join(__dirname + '/views/templates/proceed-to-login.html'));\n               \n                } \n                return  res.sendFile(path.join(__dirname + '/views/templates/proceed-to-login-driver.html'));\n                     \n                 \n\n            });\n\n\n            \n        });\n    });\n}\n\n\n/**\n* POST /resend\n*/\nstatic resendTokenPost (req, res) {\n    UserModel.findOne({ email: req.params.id }, function (err, user) {\n        if (!user) return res.status(400).send({ msg: 'We were unable to find a user with that email.' });\n        \n        if (user.isVerified) return  res.sendFile(path.join(__dirname + '/views/already-verified.html'));\n        \n\n        // Create a verification token, save it, and send email\n        var token = new EmailTokenMakerForSignUp({ _userId: user.id, email_confirm_token: crypto.randomBytes(16).toString('hex') });\n        // Save the token\n        token.save(function (err) {\n            if (err) { return res.status(500).send({ msg: err.message }); }\n\n            \n            var result = { \n              id:user.id,\n              username: user.username, \n              firstname: user.firstname,\n              email: user.email,\n              \n             \n\n            };\n\n            var result2 = { \n              id:user.id,\n              username: user.username, \n              firstname: user.firstname,\n              email: user.email,\n              \n             \n\n            };\n\n          UserService.newUserMail(req,res, result2,'/views/templates/signup-verification.html', token.email_confirm_token, 200)\n           \n           const token = TokenGenerator.generateToken(result);\n            return res.status(200).json({\n                                                status: 200,\n                                                data: [\n                                                  {\n                                                    token,\n                                                    result,\n                                                  },\n                                                ],\n                                                message: 'User created successfully',\n                        });\n\n           \n\n         \n            \n        });\n\n    });\n}\n\n\nstatic passwordForgot(req, res){\n\n    let email = req.body.email;\n    UserModel.findOne({ email: email }, function (err, user) {\n        if (!user) return res.status(400).send({ msg: 'We were unable to find a user with that email.' });\n        let hashedStringToSend = crypto.randomBytes(16).toString('hex');\n\n        Storage.setItem('hasher', hashedStringToSend);\n            // Create a verification token for this user\n        var ForgotModelToken = new ForgotPasswordToken({ \n             _userId: user.id, \n             email_confirm_token: hashedStringToSend,\n             email_to_reset: email \n        });\n            \n\n            \n\n            // Save the verification token\n        ForgotModelToken.save(function (err) {\n            if (err) { \n              return res.status(500).send({ msg: err.message });\n            }\n\n\n            UserService.passwordResetsMail( req, res,user.email,'/views/templates/reset-password.html', {username:user.username}, hashedStringToSend)\n            return res.status(200).send({ msg: \"successfully sent you a password reset link\", status:'ok' }); \n                \n         \n        });\n\n    });\n\n  }\n\n\n  static confirmResetPassword (req, res) {\n     return  res.sendFile(path.join(__dirname + '/views/pw-reset.html'));\n            \n  }\n\n  static changePasswordTrigger(req,res){\n    let password = req.body.password;\n    let confirmPass = req.body.confirmPassword;\n    if(password!= confirmPass){\n      console.log('err here1')\n       return res.status(400).send({ msg: 'password do not match.' });\n    }\n    // console.log(req.params.id)\n   \n    // Find a matching token\n    ForgotPasswordToken.findOne({  email_confirm_token:  Storage.getItem('hasher') }, function (err, token) {\n         console.log(token)\n         console.log(Storage.getItem('hasher'))\n        if (!token) { \n          console.log('error here 2');\n          console.log(err)\n          return res.status(400).send({ type: 'not-verified', msg: 'We were unable to find a valid token. Your token my have expired.' });\n\n        }\n\n        // If we found a token, find a matching user email: req.body.email\n        UserModel.findOne({ email: token.email_to_reset  }, function (err, user) {\n            if (!user) return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\n            if (user.email != token.email_to_reset) return res.status(400).send({ type: 'No Reset Token', msg: 'This user reset token was not set.' });\n\n            // Verify and save the user\n            user.password = TokenGenerator.hashPassword(password.trim());\n            user.save(function (err) {\n                if (err) { return res.status(500).send({ msg: err.message }); }\n                return res.status(200).send({ msg:\"The account password has been reset. Please wait...\" , status:'ok'});\n                //return  res.sendFile(path.join(__dirname + '/pw-reset-success.html'));\n            }); \n        });\n    });\n  }\n\n \n  \n  static showProfile(request,response){//profile-admin-rights\n\n    // UserModel.find({id: Number(request.params.id)})\n    UserModel.find({email:request.params.id})\n      .then(data => {\n        console.log(\"specific profile:\" + data)\n        \n       \n        const userInfo = data; //related\n        if (userInfo.length <= 0) {\n                return response.status(404).json({\n                  status: 404,\n                  error: 'The user with the given id does not exists',\n                });\n        }\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    userInfo,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n    \n    \n  }\n\n\n  \n\nstatic getAsyncRoles = async function(request,response){\n    try{\n        const promiseList = await RolesAndPreviledgesModel.findOne({ for_admins:  true, previledges_info: request.params.roles }).exec;\n        return promistList;\n    }catch(err){\n        return err;\n    }\n}\n\n\nstatic getAsyncUsers = async function(request,response){\n    try{\n        const promiseList = await RolesAndPreviledgesModel.findOne({ for_admins:  true, previledges_info: request.params.roles }).exec();\n        return promistList;\n    }catch(err){\n        return err;\n    }\n}\n\n\nstatic updateAsyncUserPreviledges = async function(request,response){\n    try{\n        const promiseList = await  UserModel.find({_id: request.params.id}).exec();\n        return promistList;\n    }catch(err){\n        return err;\n    }\n}\n\n\n\n\n  static showProfileRights(request,response){//profile-admin-rights\n\n    console.log(request.params.roles +\"what we need\")\n\n\n    RolesAndPreviledgesModel.findOne({ for_admins:  true, previledges_info: request.params.roles }, function (err, roles) {\n\n        if (!roles) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        roles.status =  roles.status;\n        roles.view_bookings=  roles.view_bookings;\n          roles.view_quotations=  roles.view_quotations;\n          roles.view_transactions= roles.view_transactions;\n          roles.view_payments = roles.view_payments;\n          roles.view_drivers =  roles.view_drivers;\n          roles.view_sos= roles.view_sos;\n          roles.view_partners = roles.view_partners;\n          roles.view_package= roles.view_package;\n          roles.view_cars= roles.view_cars;\n          roles.view_tickets = roles.view_tickets;\n          roles.view_faqs = roles.view_faqs;\n          roles.view_users = roles.view_users;\n          roles.view_admins =  roles.view_admins;\n          roles.view_settings = roles.view_settings;\n\n\n        \n        roles.manage_bookings= roles.manage_bookings;\n          roles.manage_quotations=  roles.manage_quotations;\n          roles.manage_transactions=  roles.manage_transactions;\n          roles.manage_payments =roles.manage_payments;\n          roles.manage_drivers = roles.manage_drivers;\n          roles.manage_sos= roles.manage_sos;\n          roles.manage_partners =  roles.manage_partners;\n          roles.manage_package=  roles.manage_package;\n          roles.manage_cars= roles.manage_cars;\n          roles.manage_tickets = roles.manage_tickets;\n          roles.manage_faqs =  roles.manage_faqs;\n          roles.manage_users =  roles.manage_users;\n          roles.manage_admins =  roles.manage_admins;\n          roles.manage_settings = roles.manage_settings;\n\n          roles.view_car_inspection = roles.view_car_inspection;\n          roles.view_drive_test = roles.view_drive_test;\n\n          roles.manage_drive_test = roles.manage_drive_test;\n          roles.manage_car_inspection = roles.manage_car_inspection\n\n\n\n    \n\n     \n        roles.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n\n          console.log(user)\n\n          //find all users of usch roles and update\n          UserModel.find({ roles:  request.params.roles }, function (err, users) {\n\n                if (!users) {\n                  return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n                }\n\n               \n               console.log(roles.view_faqs,roles.view_package,roles.view_drivers)\n               UserModel.updateMany({ roles: new String(request.params.roles) },\n                 { $set:\n                       { \n\n\n                            view_bookings: roles.view_bookings,\n                            view_quotations: roles.view_quotations,\n                            view_transactions: roles.view_transactions,\n                            view_payments : roles.view_payments,\n                            view_drivers :  roles.view_drivers,\n                            view_sos: roles.view_sos,\n                            view_partners :  roles.view_partners,\n                            view_package:roles.view_package,\n                            view_cars: roles.view_cars,\n                            view_tickets : roles.view_tickets,\n                            view_faqs : roles.view_faqs,\n                            view_users : roles.view_users,\n                            view_admins : roles.view_admins,\n                            view_settings : roles.view_settings,\n\n\n                          \n                            manage_bookings : roles.manage_bookings,\n                            manage_quotations : roles.manage_quotations,\n                            manage_transactions : roles.manage_transactions,\n                            manage_payments : roles.manage_payments,\n                            manage_drivers : roles.manage_drivers,\n                            manage_sos: roles.manage_sos,\n                            manage_partners : roles.manage_partners,\n                            manage_package: roles.manage_package,\n                            manage_cars: roles.manage_cars,\n                            manage_tickets : roles.manage_tickets,\n                            manage_faqs : roles.manage_faqs,\n                            manage_users : roles.manage_users,\n                            manage_admins : roles.manage_admins,\n                            manage_settings : roles.manage_settings,\n\n                            view_drive_test: roles.view_drive_test,\n                            view_car_inspection: roles.view_car_inspection,\n                            manage_drive_test: roles.manage_drive_test,\n                            manage_car_inspection: roles.manage_car_inspection\n\n\n                        }\n              },{ multi: true }\n              \n              , function(err,result)\n                 {\n                  if (err) {\n                    console.log(err)\n                    res.send(err);\n                  } else {\n                    \n                           UserModel.find({email: request.params.id})\n                                  .then(data => {\n                                    console.log(\"specific profile:\" + data)\n                                    \n                                   \n                                    const userInfo = data; //related\n                                    if (userInfo.length <= 0) {\n                                            return response.status(404).json({\n                                              status: 404,\n                                              error: 'The user with the given id does not exists',\n                                            });\n                                    }\n                                    return response.status(200).json({\n                                            status: 200,\n                                            data: [\n                                              {\n                                                userInfo,\n                                                message: 'Get a specific user was successful',\n                                              },\n                                            ],\n                                      });\n                                  })\n                                  .catch(err =>\n                                          response.status(400).json({\n                                            status: 400,\n                                            error: ErrorHandler.errors().validationError,\n                                          }),\n                                        );\n                  }\n              \n              });\n\n\n\n\n           })\n\n\n        }); \n      });\n\n\n\n\n\n\n  }\n\n\n\n  static getUserPreviledges(request,response){\n\n    UserModel.find({email: request.params.id})\n      .then(data => {\n        console.log(\"specific profile:\" + data)\n        \n       \n        const userInfo = data; //related\n        if (userInfo.length <= 0) {\n                return response.status(404).json({\n                  status: 404,\n                  error: 'The user with the given id does not exists',\n                });\n\n        }\n      \n\n\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    userInfo,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n\n  }\n\n\n  static setOldBalance(request,response){\n       const {\n      old_balance,\n      currentBalance\n    } = request.body;\n\n\n\n    \n\n    \n\n\n    UserModel.findOne({ email:  request.params.id }, function (err, user) {\n\n      if (!user) return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n     \n      user.old_balance = old_balance|| user.old_balance;\n      user.balance = currentBalance || user.balance;\n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n\n\n\n  static updateProfile(request,response){\n\n    \n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      passwordConfirm,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n    } = request.body;\n\n\n\n    if(password.length && passwordConfirm.length){\n      if(password!= passwordConfirm){\n        console.log('err here1')\n        return res.status(400).send({ msg: 'password do not match.' });\n      }\n    }\n\n    \n\n\n\n    UserModel.findOne({ email:  request.params.id }, function (err, user) {\n\n      if (!user) return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      if(password==\"unchanged\" && passwordConfirm==\"unchanged\"){\n       user.password= user.password;\n       console.log(\"old:\" + user.password)\n      } else{\n        user.password= TokenGenerator.hashPassword(password.trim());\n        console.log(\"new pass: \"+ user.password)\n      }\n\n     \n      console.log(avatar)\n      // Verify and save the user\n      user.avatar= avatar || user.avatar;\n      user.username= username || user.username;\n      user.email= email || user.email;\n   \n      user.user_type= user_type|| user.user_type;\n      user.firstname= firstname|| user.firstname;\n      user.lastname = lastname || user.lastname;\n      user.phone_number = phoneNumber|| user.phone_number;\n      user.test_certificate = certificate|| user.test_certificate;\n      user.save(function (err,user) {\n        if (err) { \n          console.log(err)\n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n\n  // static loginWithTwitter(request,response){\n  //   //return UserService.loginWithTwitter(request,response)\n  // }\n\n  // static loginWithFaceBook(request,response){\n  //  //return UserService.loginWithFaceBook(request,response)\n  // }\n\n  // static loginWithGoogle(request,response){\n  //  //return UserService.loginWithGoogle(request,response)\n  // }\n\n  \n  // static initializeGoogleLogin(request,response){\n  //   return passport.authenticate('google', { scope : ['profile', 'email'] });\n  // }\n\n  \n  static addNewPlans(request,response){\n      let {\n       plan_id, \n       itineraries,\n      user_id,\n      carsSelected,\n      planName,\n      price,\n      planCategoryName,\n      no_hours,\n      username,\n      email\n    } = request.body;\n\n\n    \n     const NewUserPlan = new UserPlanModel({ \n      id: new AutoincrementId(UserPlanModel).counter(), \n      user_id,\n      price,\n      plan_category_name:planCategoryName,\n      plan_name:planName,\n      cars_on_plan: carsSelected,\n      itineries: itineraries,\n      duration:no_hours,\n      no_hours:no_hours,\n      username: username,\n      email: email,\n      plan_id\n     });\n\n\n     NewUserPlan.save()\n      .then(data => {\n        const user = data;\n        console.log(user + \"plans\")\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              user\n            },\n          ],\n          message: 'User Plan created successfully',\n        });\n      \n      })\n      .catch(err => {\n        console.log(err+ 'error here user plan')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n      // UserService.saveUsersItinerary(request,response);\n  }\n\n\n\n\n\n\n\n  static saveUsersItinerary(request, response) {\n    // console.log(request.body)\n\n  \n    let {\n      plan_category,\n      start_location,\n      destination,\n      drive_option,\n      no_hours,\n    \n      plan_name,\n      status,\n      start_time,\n      travel_option,\n      drivingschool,\n      username,\n      email,\n      phone_number,\n      plan_id\n    } = request.body;\n\n\n   \n\n    \n    const NewItinerary = new ItineraryModel({ \n      id: new AutoincrementId(ItineraryModel).counter(), \n       plan_category,\n      start_location,\n      destination,\n      travel_option:drive_option,\n      drive_option,\n      no_hours,\n      travel_option,\n      plan_name,\n      status,\n      start_time,\n      travel_option,\n      drivingschool,\n      user_id:request.user.id,\n      username,\n      email,\n      phone_number,\n      plan_id\n\n       \n     });\n\n     NewItinerary.save()\n      .then(data => {\n        const user = data;\n        const result = {\n           plan_category: user.plan_category,\n      start_location: user.start_location,\n      destination: user.destination,\n      drive_option:user.drive_option,\n      no_hours:user.no_hours,\n        travel_option:user.travel_option,\n      plan_name,\n      status,\n      start_time,\n      drivingschool,\n      username: user.username,\n      email:user.email\n           // cars_id: user.cars_id\n        };\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              result\n            },\n          ],\n          message: 'User Itinerary created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n    static editViewUsersItinerary(request,response){\n\n    ItineraryModel.find({user_id: Number(request.params.id)})\n      .then(data => {\n        console.log(\"specific:\" + data)\n        \n       \n        const userInfo = data; //related\n        if (userInfo.length <= 0) {\n                return response.status(404).json({\n                  status: 404,\n                  error: 'The user with the given id does not exists',\n                });\n        }\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    userInfo,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n    \n    \n  }\n\n\n  static updateUsersPlanItineraryStatus(request, response) {\n    UserPlanModel.find({id: Number(request.params.id)})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status } = request.body;\n    \n\n\n            UserPlanModel.updateOne({id: Number(request.params.id) }, {\n                    \n                      status: status\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n   \n\n   static updateNotificationStatus(request,response){\n\n      NotificationModel.find({_id: request.params.id})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: '0',\n                      message: 'Data not found',\n                    },\n                  ],\n                });\n              \n        }\n         const { status } = request.body;\n    \n\n\n            NotificationModel.updateOne({_id: request.params.id }, {\n                    \n                      status: 'old'\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n\n   }\n\n  static updateItineraryStatus(request, response) {\n    ItineraryModel.find({id: Number(request.params.id)})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status } = request.body;\n     \n\n            ItineraryModel.updateOne({id: Number(request.params.id) }, {\n                    \n                      status: status\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n\n\n  static updateUserItineraryStatus(request, response) {\n    ItineraryModel.find({id: Number(request.params.id)})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status } = request.body;\n     \n\n            ItineraryModel.updateOne({id: Number(request.params.id) }, {\n                    \n                      status: status\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n\n\n\nstatic updateUsersItinerary(request,response){\n    const {\n      certificate_id,\n       start_location ,\n       destination ,\n       no_hours,\n       start_time ,\n       end_time , \n       drive_option,\n       user_id,\n       travel_option,\n       cars_id\n    } = request.body;\n\n\n    \n    ItineraryModel.findOne({ user_id:  request.params.id }, function (err, user) {\n\n      if (!user) return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      console.log(avatar)\n      // Verify and save the user\n      \n      user.certificate_id= certificate_id;\n      user.start_location= start_location;\n      user.destination= destination;\n      user.no_hours= no_hours;\n      user.start_time= start_time;\n      user.end_time= end_time;\n      user.drive_option = drive_option;\n      user.user_id = user_id;\n      user.travel_option = travel_option;\n      user.cars_id = cars_id;\n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'successfully updated itinerary.' });\n      \n               \n\n      }); \n    });\n  }\n\n\n  static individualPlans(request,response){\n       IndividualPlanModel.find()\n    \n      .then(data => {\n        const individualPlans = data;\n        console.log(data)\n        if (individualPlans.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'No Plans for IndividualPlan module has been recorded by admin',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              individualPlans,\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static coperatePlans(request,response){\n       coperatePlanModel.find()\n    \n      .then(data => {\n        const coperatePlan = data;\n        console.log(data)\n        if (coperatePlan.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'No Plans for CoperatePlan module has been recorded by admin',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              coperatePlan,\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n    static updateItem(request, response) {\n  \n\n  const  {\n      certificate_id,\n       start_location ,\n       destination ,\n       no_hours,\n       start_time ,\n       end_time , \n       drive_option,\n       user_id,\n       travel_option,\n       \n    } = request.body;\n\n\n\n    \n       ItineraryModel.findOne({ id:  request.params.id }, function (err, user) {\n\n        if (!user){\n          console.log(JSON.strigify(err))\n         return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n\n       }\n        \n     \n      // Verify and save the user\n\n      \n       user.certificate_id= certificate_id;\n      user.start_location= start_location;\n      user.destination= destination;\n      user.no_hours= no_hours;\n      user.start_time= start_time;\n      user.end_time= end_time;\n      user.drive_option = drive_option;\n      user.user_id = user_id;\n      user.travel_option = travel_option;\n      \n      user.save(function (err,user) {\n        if (err) { \n           console.log(err)\n          return response.status(500).send({ msg: err.message });\n         }\n          console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n      return response.status(200).send({success:'ok', msg: 'successfully updated itinerary.' });\n      \n               \n\n      });\n      \n       \n    });\n  }\n\n\n  static deleteItem(request, response) {\n    UserPlanModel.find({id: request.params.id})\n      .then(data => {\n        const redflags = data;\n\n        if ( redflags.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The red-flag with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The red-flag with the given id does not exists',\n          });\n        }\n        UserPlanModel.removeOne({id: request.params.id})\n          .then(data => {\n            const deletedRedFlag = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedRedFlag._id,\n                  message: 'red-flag record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            }),\n          );\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n  static getAllItineries(request, response) {\n\n    ItineraryModel.find()\n    \n      .then(data => {\n        const itinerary = data;\n        console.log(data+ \"either empty itins\")\n        if (itinerary.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no itinerary record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              itinerary,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n    \n  }\n\n\n  static getUsersItinerary(request,response){\n    ItineraryModel.find({ email: request.params.id })\n    \n      .then(data => {\n        const itinerary = data;\n        if (itinerary.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            error: 'User has no itinerary record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              itinerary,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static updateRedFlagStatus(request, response) {\n   RedFlagModel.find({id: Number(request.params.id)})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status } = request.body;\n     if ( Number(request.user.id) )  {\n\n\n            RedFlagModel.updateOne({id: Number(request.params.id) }, {\n                    \n                      status: status\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n    } else {\n          return response.status(401).json({\n            status: 401,\n            error: 'You must signup or login to access this route',\n          });\n        }\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n\n\n  static getAllUsersPlans(request,response){\n    UserPlanModel.find({ email: request.params.id })\n      .then(data => {\n        const plans = data;\n        console.log(plans)\n        // if (plans.length === 0) {\n        //   return response.status(404).json({\n        //     status: 404,\n        //     error: 'User has no plans record',\n        //   });\n        // }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              plans,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getAllUsersQuotations(request,response){\n    \n    QuoteModel.find({ plan_id : new String(request.params.id) })\n    \n      .then(data => {\n        const quote = data;\n        if (quote.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no plans record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              quote,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static debitWallet(request,response){\n    const {oldBalance,debit_amount} = request.body;\n\n\n\n    \n\n    UserModel.findOne({ email: request.params.id }, function (err, user) {\n\n      \n      \n      let bal = Number(user.balance) - Number(debit_amount);\n      user.balance = new String(bal)\n\n\n      \n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        \n\n         console.log(user)\n          return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n      }); \n    });\n\n  }\n\n\n\n  static updatePlanStatus(request,response){\n\n    const  {\n              status,\n              amount, \n              has_updated,    \n            }= request.body;\n\n\n\n\n\n    UserPlanModel.findOne({ plan_id:new String(request.params.id) }, function (err, user) {\n\n      // Verify and save the user\n      user.status= status || user.status;\n      \n      user.price = amount || user.price;\n\n      user.has_updated = has_updated || user.has_updated;\n\n      let userItins = user.itineries;\n\n      // userItins.map((item) =>{\n      //    item.status = status;\n      // } )\n\n      // user.itineries = userItins;\n      \n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n\n\n        UserPlanModel.updateMany({ plan_id: request.params.id },{\n                                            $set:{   status:status, \n                                                      price: amount,\n                                                      has_updated:has_updated,\n                                                    \"itineries.$[].status\":status,\n                                                  }},{ multi: true }, function(err,result){\n                                     if (err) {\n                                          console.log(err)\n                                          response.send(err);\n                                        } else {\n                                          console.log(result)\n                                          return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated itineraries of this plan .' });\n                                \n                                        }\n\n          })\n\n\n\n        \n\n\n          // return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n      }); \n    });\n\n\n  }\n\n\n\n\n  static updateItinStatus(request,response){\n\n    const  {\n              status,\n              //plan_id,\n              user_plan_id,\n              has_received_payments,\n              has_received_quote,\n             \n            }= request.body;\n\n\n   // ItineraryModel.findOne({ plan_id:new String(request.params.id) }, function (err, user) {\n\n   //    // Verify and save the user\n   //    user.status= status || user.status;\n      \n    \n      \n   //    user.save(function (err,user) {\n   //      if (err) { return response.status(500).send({ msg: err.message }); }\n   //      console.log(user + 'hello')\n\n\n   //        return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n   //    }); \n   //  });\n\n\n\n    ItineraryModel.updateMany({ plan_id: new String(request.params.id) },{ $set:{ \n              status: status,\n              //plan_id,\n              user_plan_id:new String(request.params.id),\n              has_received_payments: has_received_payments,\n              has_received_quote: has_received_quote\n            }},{ multi: true }, function(err,result){\n                         if (err) {\n                              console.log(err)\n                              res.send(err);\n                            } else {\n                              console.log(result)\n                              return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated itineraries of this plan .' });\n                    \n                            }\n\n    })   \n\n\n\n  }\n\n\n\n  static updateQuoteStatus(request,response){\n\n    const  {\n              status,\n              amount, \n              has_updated    \n            }= request.body;\n\n\n    QuoteModel.findOne({ plan_id:new String(request.params.id) }, function (err, user) {\n\n      // Verify and save the user\n      user.status= status || user.status;\n      \n      user.amount = amount || user.amount;\n      user.has_updated = has_updated || user.has_updated;\n      \n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n\n\n          return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n      }); \n    });\n\n  }\n\n\n  static getOnePlanById(request,response){\n    UserPlanModel\n    .find({id: Number(request.params.id)})\n      .then(data => {\n        console.log(\"specific:\" + data)\n        \n       \n        const userPlanInfo = data; //related\n        if (userPlanInfo.length <= 0) {\n          return response.status(404).json({\n                  status: 404,\n                  error: 'The user plan with the given id does not exists',\n          });\n        }\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    userPlanInfo,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n    \n\n  }\n\n\n\n  static paystackPayMeMoney(req,res){\n     const {\n      fullname,\n      email,\n      amount,\n      phone_number\n      //old_balance\n     } = req.body;\n     console.log(fullname,\n      email,\n      amount)\n     //const form = _.pick(req.body,['amount','email','full_name']);\n      \n     const form = {\n      fullname,\n      email,\n      amount,\n      phone_number\n     }\n    form.metadata = {\n          full_name : form.fullname\n    }\n    form.amount *= 100;\n    form.amout *=100;\n      \n    initializePayment(form, (error, body)=>{\n          console.log(body)\n          if(error){\n              //handle errors\n              console.log(error);\n              return res.redirect('/error')\n            \n          }\n          var response = JSON.parse(body);\n          \n          \n          let url =response.data.authorization_url;\n\n\n          \n           \n          //res.redirect(url)\n          //console.log(url)\n          //res.send(`${url}`)\n\n          return res.status(201).json({\n            status: 201,\n            message: `<h6>Please click the link to make payments.<a style=\"color:red;text-decoration:none\"  href=\"${url}\">Proceed to payment</a></h6> \n            `,\n          });\n          \n    });\n  \n  }\n\n  static paystackCallBack(req,res){\n    const {reference,trxref} = req.query;\n    //console.log(req.query)\n    const ref = reference;\n      verifyPayment(ref, (error,body)=>{\n          if(error){\n              //handle errors appropriately\n              console.log(error)\n              return res.redirect('/error');\n          }\n\n          var response = JSON.parse(body);\n          console.log(JSON.stringify(response.data) +\"given here\") \n\n          const {id,reference, amount,customer, metadata,phone_number} = response.data;  \n          console.log(id,reference,amount,customer,phone_number,customer.phone)     \n\n          \n          const newDonor = {id: new String(id), reference, amount:(amount/100), email: customer.email,full_name: metadata.full_name,phone_number}\n\n          const donor = new WalletModel(newDonor)\n\n          donor.save().then((donor,error)=>{\n              if(!donor){\n                console.log(error)\n                  return res.redirect('/api/v1/error');\n              }\n\n\n              UserModel.findOne({email: customer.email},function (err, user) {\n\n                   if (!user) return res.status(400).send({ msg: 'We were unable to find a user with that email.' });\n                  let convertedBal = Number(amount)/100;\n                  user.balance = Number(user.balance)+ convertedBal;\n                  user.save(function (err,user) {\n                    if (err) { return res.status(500).send({ msg: err.message }); }\n                    //console.log(user + 'hello')\n                      //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n                      res.redirect('/api/v1/receipt/'+donor._id);\n                  }); \n          });\n\n              \n          }).catch((e)=>{\n             console.log(e)\n              res.redirect('/api/v1/error');\n          });\n\n          \n      })\n\n  }\n\n  static createPaymentDetail(request,response){\n    // var PaymentModel = mongoose.model('PaymentModel', User);\n\n    let {\n        status,\n                reference,\n                plan_id,\n                quotation_id,\n                amount,\n                username,\n                email,\n                phone_number ,\n    } = request.body;\n\n\n    // var user = new PaymentModel({ \n    //   id: new AutoincrementId(PaymentModel).counter(), \n    //     status:'Paid',\n    //             reference,\n    //             plan_id,\n    //             quotation_id,\n    //             amount,\n    //             username,\n    //             email,\n    //             phone_number,\n\n       \n    //  })\n\n\n   \n\n    \n    const NewItinerary = new PaymentModel({ \n      id: new AutoincrementId(PaymentModel).counter(), \n        status:'Successful',\n                reference,\n                plan_id,\n                quotation_id,\n                amount,\n                username,\n                email,\n                phone_number,\n\n       \n     });\n\n     NewItinerary.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          reference,\n                plan_id,\n                quotation_id,\n                amount,\n                username,\n                email,\n                phone_number,\n      email:user.email\n           // cars_id: user.cars_id\n        };\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              result\n            },\n          ],\n          message: 'User Itinerary created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n  }\n\n  static paystackReceipt(req,res){\n    const id = new String(req.params.id);\n    WalletModel.findById(id).then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect('/api/v1/error')\n          }\n\n          // res.render('success.pug',{donor});\n          return  res.sendFile(path.join(__dirname + '/views/templates/topup-successful.html'));\n      }).catch((e)=>{\n          console.log(e)\n          res.redirect('/api/v1/error')\n      })\n  }\n\n  static paystackHistory(req,res){\n    const id = new String(req.params.id);\n    WalletModel.find({email:req.params.id}).then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect('/api/v1/error')\n          }\n         const tranx = donor;\n         console.log(tranx +\"for the user\")\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect('/api/v1/error')\n      })\n  }\n\n\n  static paystackPayments(req,res){\n    const id = new String(req.params.id);\n    PaymentModel.find({email:req.params.id}).then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect('/api/v1/error')\n          }\n         const tranx = donor;\n         console.log(tranx +\"for the user\")\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect('/api/v1/error')\n      })\n  }\n\n\n  static paystackQuotations(req,res){\n    const id = new String(req.params.id);\n    QuoteModel.find({email:req.params.id}).then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect(process.env.DEPLOY_BACK_URL+ '/error')\n          }\n         const tranx = donor;\n         console.log(tranx +\"for the user\")\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect(process.env.DEPLOY_BACK_URL+ '/error')\n      })\n  }\n\n\n\n  static deleteQuotation(request,response){\n    QuoteModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        QuoteModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static deletePayment(request,response){\n    PaymentModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        PaymentModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static deleteWallet(request,response){\n    WalletModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        WalletModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static getUserNotification(request,response){\n\n    const id = new String(request.params.id);\n    console.log(id)\n    NotificationModel.find({user_id:request.params.id, for_users: true}).then((donor,error)=>{\n      if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              \n      }\n      const tranx = donor;\n      console.log(tranx +\"for the user\")\n      return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect(process.env.DEPLOY_BACK_URL+ '/error')\n      })\n\n  }\n\n\n  static makeNotification(request,response){\n    // console.log(request.body)\n    let { \n     user_id,\n      type,\n      description,\n  \n    } = request.body;\n    let for_users =true;\n\n    if(request.body.for_users){\n      for_users =false;\n    }\n\n   \n    const NewNotificationModel = new NotificationModel({ \n      id: new AutoincrementId(NotificationModel).counter(), \n      user_id,\n      type,\n      description,\n      for_users\n\n    \n      //accountNumber: uuidv4()\n       });\n\n\n     NewNotificationModel.save()\n      .then(data => {\n        const user = data;\n\n\n         return response.status(201).json({\n                status: 201,\n                data: [\n                  {\n                    user,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n\n            // UserService.NotificationEmail(request,response,'/views/templates/notification.html', {\n            //          username: user_id,\n            //          detail: description\n            // },user_id,201)\n\n\n        \n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n  }\n\n\n\n  static getAllNotification(request,response){\n\n    var now = new Date();\nvar startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n\n\n    //created_at: {$gte: startOfToday}\n    NotificationModel.find({for_users:true},null, {sort: { field : -1 }}).then((donor,error)=>{\n      if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              \n      }\n      const allNotification = donor;\n      //console.log(tranx +\"for the user\")\n      return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    allNotification,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect(process.env.DEPLOY_BACK_URL+ '/error')\n      })\n\n  }\n\n\n\n\n\n  createUserPlan = (req, res) => {\n    const review = new UserPlanModel();\n    review.username = req.body.username;\n    review.rating = req.body.rating;\n    review.body = req.body.body;\n    review.save()\n      .then((result) => {\n        User.findOne({ username: review.username }, (err, user) => {\n            if (user) {\n                // The below two lines will add the newly saved review's \n                // ObjectID to the the User's reviews array field\n                user.reviews.push(review);\n                user.save();\n                res.json({ message: 'Review created!' });\n            }\n        });\n      })\n      .catch((error) => {\n        res.status(500).json({ error });\n      });\n  }\n\n\n  createUser = (req, res) => {\n   const user = new UserModel();\n   user.username = req.body.password;\n   user.email = req.body.email;\n   user.save()\n       .then((result) => {\n            res.json({ message: 'User created!', result });\n        })\n        .catch((error) => {\n          res.status(500).json({ error });\n        });\n  }\n\n// . . .\n// returns the user object associated with the username if any\n// with the reviews field containing an array of review objects \n// consisting of the reviews created by the user\ngetUser = (req, res) => {\n    User.findOne({ username: req.params.username })\n      //.populate('reviews')\n      .then((result) => {\n        res.json(result);\n      })\n      .catch((error) => {\n        res.status(500).json({ error });\n      });\n  }\n\n\n\n  //Admin functionality\n\n\n  static adminDashboard(request,response){\n    \n\n  \n  }\n\n  static manageUsers(request,response){\n   UserModel.find({is_admin:false,roles:\"user\"})\n      .then(data => {\n        const users = data;\n        console.log(users,\"users available are here\")\n        if (users.length === 0) {\n          return response.status(200).json({\n            status: 200,\n\n            data: [\n            {\n              users:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              users,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static deleteUser(request,response){\n    UserModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        UserModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static createNewUser(request,response){\n       let boolVerification;\n     let {\n          firstname,\n        lastname,\n        username,\n        email,\n        password,\n        passwordComfirm,\n        phoneNumber,\n        avatar,\n        certificate,\n        user_type,\n        status,\n        is_verified\n      } = request.body;\n\n     \n\n      if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n\n    password = TokenGenerator.hashPassword(password.trim());\n\n    const Newuser = new UserModel({ \n      id: new AutoincrementId(UserModel).counter(), \n       firstname,\n        lastname,\n        username,\n        email,\n        password,\n        \n        phone_number: phoneNumber,\n        avatar: avatar,\n        certificate,\n        user_type,\n        status :\"Active\",\n        is_admin:false,\n        isVerified:boolVerification,\n\n\n\n      });\n\n     Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n        \n\n\n\n\n        const token = TokenGenerator.generateToken(result);\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              token,\n              user,\n            },\n          ],\n          message: 'User created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n  }\n\n  static manageUsersDetail(request,response){\n     let boolVerification;\n     const {\n      firstname,\n      lastname,\n      username,\n      password,\n      phoneNumber,\n      certificate,\n      user_type,\n      email,\n      status,\n      avatar,\n      is_verified\n    } = request.body;\n\n    console.log(is_verified + \":our user verification\")\n\n    if(is_verified==\"false\"){\n      boolVerification =false;\n    }else if(is_verified==\"true\"){\n      boolVerification =true;\n    }\n\n\n\n    if(!password.length){\n      \n        console.log('err here1')\n        return res.status(400).send({ msg: 'password do not match.' });\n      \n    }\n\n    \n\n\n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      if(password==\"unchanged\" ){\n       user.password= user.password;\n       console.log(\"old:\" + user.password)\n      } else{\n        user.password= TokenGenerator.hashPassword(password.trim());\n        console.log(\"new pass: \"+ user.password)\n      }\n\n     \n      // Verify and save the user\n    \n      user.username= username || user.username;\n      user.email= email || user.email;\n      user.status= status || user.status;\n      user.avatar= avatar || user.avatar;\n      user.user_type= user_type|| user.user_type;\n      user.firstname= firstname|| user.firstname;\n      user.lastname = lastname || user.lastname;\n      user.phone_number = phoneNumber|| user.phone_number;\n      user.test_certificate = certificate || user.test_certificate;\n      //user.isVerified = boolVerification || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n\n  static manageUsersDetailVerification(request,response){\n  \n     const {\n      isVerified\n    } = request.body;\n\n   \n\n   \n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  static manageAdmins(request,response){\n    UserModel.find({is_admin:true})\n      .then(data => {\n        const admins = data;\n        console.log(admins+\"admins available here admins\")\n        if (admins.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              admins:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              admins,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static deleteAdmin(request,response){\n    UserModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        UserModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n\n\n\n\n  static createNewAdmin(request,response){\n       let boolVerification;\n    let {\n          firstname,\n        lastname,\n        username,\n        email,\n        password,\n        passwordComfirm,\n        phoneNumber,\n        avatar,\n        //certificate,\n        user_type,\n        status,\n        is_verified,\n      } = request.body;\n\n      if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n\n    password = TokenGenerator.hashPassword(password.trim());\n\n\n    \n\n        RolesAndPreviledgesModel.findOne({ for_admins:  true, usergroup_set: user_type }, function (err, roles) {\n           \n          if (!roles) {\n                        return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n          }\n          console.log(roles)\n\n          const Newuser = new UserModel({ \n                id: new AutoincrementId(UserModel).counter(), \n                 firstname,\n                  lastname,\n                  username,\n                  email,\n                  password,\n                  \n                  phone_number: phoneNumber,\n                  avatar: avatar,\n                  //certificate,\n                  roles: user_type,\n                  status :\"Active\",\n                  is_admin:true,\n                  isVerified: boolVerification,\n                  view_bookings: roles.view_bookings,\n                  view_quotations: roles.view_quotations,\n                  view_transactions:  roles.view_transactions,\n                  view_payments :roles.view_payments,\n                  view_drivers :  roles.view_drivers,\n                  view_sos: roles.view_sos,\n                  view_partners : roles.view_partners,\n                  view_package:  roles.view_package,\n                  view_cars: roles.view_cars,\n                  view_tickets :  roles.view_tickets,\n                  view_faqs : roles.view_faqs,\n                  view_users : roles.view_users,\n                  view_admins :  roles.view_admins,\n                  view_settings :  roles.view_settings,\n                  manage_bookings: roles.manage_bookings,\n                  manage_quotations: roles.manage_quotations,\n                  manage_transactions:  roles.manage_transactions,\n                  manage_payments : roles.manage_payments,\n                  manage_drivers : roles.manage_drivers,\n                  manage_sos: roles.manage_sos,\n                  manage_partners : roles.manage_partners,\n                  manage_package: roles.manage_package,\n                  manage_cars: roles.manage_cars,\n                   manage_tickets : roles.manage_tickets,\n                  manage_faqs : roles.manage_faqs,\n                  manage_users : roles.manage_users,\n                  manage_admins : roles.manage_admins,\n                  manage_settings : roles.manage_settings,\n\n\n                  view_drive_test : roles.view_drive_test,\n                  manage_drive_test : roles.manage_drive_test,\n                  view_car_inspection : roles.view_car_inspection,\n                  manage_car_inspection : roles.manage_car_inspection,\n\n\n\n                });\n\n               Newuser.save()\n                .then(data => {\n                  const user = data;\n\n                  const result = {\n                    id: user.id,\n                    email: user.email,\n                    username: user.username,\n                  };\n                  \n\n\n                  const token = TokenGenerator.generateToken(result);\n                  console.log(user)\n                  return response.status(201).json({\n                    status: 201,\n                    data: [\n                      {\n                        token,\n                        user,\n                      },\n                    ],\n                    message: 'User created successfully',\n                  });\n                })\n                .catch(err => {\n                  console.log(err+ 'error here')\n                  response.status(400).json({\n                    status: 400,\n                    error: ErrorHandler.errors().validationError,\n                  });\n                });\n\n  \n\n\n\n         })\n        \n    \n\n\n\n\n    \n    \n  }\n\n  static manageAdminsDetail(request,response){\n       let boolVerification;\n\n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n      status,\n      is_verified,\n\n    } = request.body;\n\n    if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n\n\n\n    if(!password.length){\n      \n        console.log('err here1')\n        return res.status(400).send({ msg: 'password do not match.' });\n      \n    }\n\n\n     RolesAndPreviledgesModel.findOne({ for_admins:  true, usergroup_set: user_type }, function (err, roles) {\n           \n          if (!roles) {\n                        return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n          }\n          console.log(roles)\n\n    \n\n\n            UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n              if (!user){ \n               return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n              \n              }\n              if(password==\"unchanged\" ){\n               user.password= user.password;\n               console.log(\"old:\" + user.password)\n              } else{\n                user.password= TokenGenerator.hashPassword(password.trim());\n                console.log(\"new pass: \"+ user.password)\n              }\n\n             \n              // Verify and save the user\n            \n              user.username= username || user.username;\n              user.email= email || user.email;\n              user.status= status || user.status;\n              user.avatar= avatar || user.avatar;\n              user.roles= user_type|| user.user_type;\n              user.firstname= firstname|| user.firstname;\n              user.lastname = lastname || user.lastname;\n              user.phone_number = phoneNumber|| user.phone_number;\n              user.test_certificate = certificate || user.test_certificate;\n              //user.isVerified = boolVerification || user.isVerified;\n\n\n              \n            user.view_bookings=  roles.view_bookings;\n          user.view_quotations= roles.view_quotations;\n          user.view_transactions= roles.view_transactions;\n          user.view_payments = roles.view_payments;\n          user.view_drivers =  roles.view_drivers;\n          user.view_sos= roles.view_sos;\n          user.view_partners =  roles.view_partners;\n          user.view_package= roles.view_package;\n          user.view_cars= roles.view_cars;\n          user.view_tickets = roles.view_tickets;\n          user.view_faqs = roles.view_faqs;\n          user.view_users = roles.view_users;\n          user.view_admins = roles.view_admins;\n          user.view_settings = roles.view_settings;\n\n\n        \n          user.manage_bookings= roles.manage_bookings;\n          user.manage_quotations= roles.manage_quotations;\n          user.manage_transactions=roles.manage_transactions;\n          user.manage_payments = roles.manage_payments;\n          user.manage_drivers = roles.manage_drivers;\n          user.manage_sos= roles.manage_sos;\n          user.manage_partners = roles.manage_partners;\n          user.manage_package= roles.manage_package;\n          user.manage_cars= roles.manage_cars;\n          user.manage_tickets = roles.manage_tickets;\n          user.manage_faqs = roles.manage_faqs;\n          user.manage_users = roles.manage_users;\n          user.manage_admins = roles.manage_admins;\n          user.manage_settings = roles.manage_settings;\n\n\n          user.view_drive_test = roles.view_drive_test;\n                  user.manage_drive_test = roles.manage_drive_test;\n                  user.view_car_inspection = roles.view_car_inspection;\n                  user.manage_car_inspection = roles.manage_car_inspection;\n\n\n\n\n\n              user.save(function (err,user) {\n                if (err) { console.log(err) \n                  return response.status(500).send({ msg: err.message }); }\n                console.log(user + 'hello')\n                  //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n                  return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n              }); \n            });\n\n\n     })\n  }\n\n  static manageAdminsDetailVerification(request,response){\n  \n     const {\n      isVerified\n    } = request.body;\n\n    \n   \n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  static manageDrivers(request,response){\n    UserModel.find({is_active:true,roles:'Individual Driver'})\n      .then(data => {\n        const drivers = data;\n        console.log(drivers,\"drivers are here\")\n        if (drivers.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              drivers:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              drivers,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static deleteDriver(request,response){\n    UserModel.find({_id: request.params.id,roles:'Individual Driver'})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        UserModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n\n  static createNewDriver(request,response){\n       let boolVerification;\n\n     let {\n          firstname,\n        lastname,\n        username,\n        email,\n        password,\n        passwordComfirm,\n        phoneNumber,\n        avatar,\n        certificate,\n        user_type,\n        status,\n        is_verified\n      } = request.body;\n\n      if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n\n    password = TokenGenerator.hashPassword(password.trim());\n\n    const Newuser = new UserModel({ \n      id: new AutoincrementId(UserModel).counter(), \n       firstname,\n        lastname,\n        username,\n        email,\n        password,\n        \n        phone_number: phoneNumber,\n        avatar,\n        test_certificate:certificate,\n  \n        status :\"Active\",\n        is_admin:false,\n        isVerified: boolVerification,\n        roles: 'Individual Driver'\n\n\n\n      });\n\n     Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n        \n\n\n\n\n        const token = TokenGenerator.generateToken(result);\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              token,\n              user,\n            },\n          ],\n          message: 'User created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n    \n  }\n\n  static manageDriversDetail(request,response){\n       let boolVerification;\n\n     const {\n      firstname,\n      lastname,\n      username,\n      password,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n      status,\n      is_verified\n    } = request.body;\n\n    if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n\n\n\n    if(!password.length){\n      \n        console.log('err here1')\n        return res.status(400).send({ msg: 'password do not match.' });\n      \n    }\n\n    \n\n\n    UserModel.findOne({ _id:  request.params.id, roles:'Individual Driver' }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      if(password==\"unchanged\" ){\n       user.password= user.password;\n       console.log(\"old:\" + user.password)\n      } else{\n        user.password= TokenGenerator.hashPassword(password.trim());\n        console.log(\"new pass: \"+ user.password)\n      }\n\n     \n      // Verify and save the user\n    \n      user.username= username || user.username;\n      user.email= email || user.email;\n      user.status= status || user.status;\n      user.avatar= avatar || user.avatar;\n      user.roles= user_type|| user.user_type;\n      user.firstname= firstname|| user.firstname;\n      user.lastname = lastname || user.lastname;\n      user.phone_number = phoneNumber|| user.phone_number;\n      user.test_certificate = certificate || user.test_certificate;\n      //user.isVerified = boolVerification || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  static manageDriversDetailVerification(request,response){\n  \n     const {\n      isVerified\n    } = request.body;\n\n   \n   \n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  static managePartners(request,response){\n    PartnersModel.find()\n      .then(data => {\n        const partners = data;\n        console.log(partners +\"partners available\")\n        if (partners.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              partners:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              partners,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static deletePartner(request,response){\n    PartnersModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        PartnersModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static createNewPartner(request,response){\n       let boolVerification;\n    let address ='';\n    if(request.body.address){\n      address = request.body.address;\n    }\n      let {\n            firstname,\n          lastname,\n          username,\n          email,\n\n          password,\n          // passwordComfirm,\n          phoneNumber,\n          avatar,\n          certificate,\n          user_type,\n          status,\n          is_verified,\n          totalCars,\n          bankAccount,\n          bankAccountName,\n          bankAccountNumber,\n\n      \n        } = request.body;\n\n        if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n    \n\n    password = TokenGenerator.hashPassword(password.trim());\n   \n    const Newuser = new  PartnersModel({ \n      id: new AutoincrementId(PartnersModel).counter(), \n       firstName: firstname,\n        lastName: lastname,\n        userName: username,\n        name: firstname + \" \" + lastname,\n        email,\n        password,\n        address:address,\n        totalCars,\n        \n        phoneNumber: phoneNumber,\n        phone: phoneNumber,\n        avatar,\n        businessName:certificate,\n        roles: user_type,\n        status :status,\n        isVerified: boolVerification,\n        totalCars,\n\n          bankAccount,\n          bankAccountName,\n          bankAccountNumber,\n      });\n\n     Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n        \n        const token = TokenGenerator.generateToken(result);\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              token,\n              user,\n            },\n          ],\n          message: 'User created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n  }\n\n\n  static managePartnersDetail(request,response){\n       let boolVerification;\n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      totalCars,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n      address,\n      status,\n      is_verified,\n\n          bankAccount,\n          bankAccountName,\n          bankAccountNumber,\n\n    } = request.body;\n\n    if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n\n\n\n  \n      if(!password){\n        console.log('err here1')\n        return res.status(400).send({ msg: 'password field required' });\n      }\n    \n\n    \n\n\n    PartnersModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if(err){\n        return response.status(400).send({ msg: 'Some error occured.' });\n      }\n\n      if (!user) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n      \n      if(password===\"unchanged\" ){\n       user.password= user.password;\n       console.log(\"old:\" + password+ \"==\"+  user.password)\n      } else{\n        user.password= TokenGenerator.hashPassword(password.trim());\n        console.log(\"new pass: \"+ password+ \"==\"+ user.password)\n      }\n\n     \n      // Verify and save the user\n      user.avatar= avatar || user.avatar;\n      user.userName= username || user.userName;\n      user.email= email || user.email;\n      user.businessName= certificate || user.businessName;\n      user.roles= user_type || user.roles;\n      user.firstName= firstname|| user.firstName;\n      user.lastName = lastname || user.lastName;\n      user.phoneNumber = phoneNumber|| user.phoneNumber;\n      user.status = status|| user.status;\n      user.address= address || user.address;\n      user.totalCars = totalCars || user.totalCars;\n      user.bankAccount = bankAccount || user.bankAccount;\n      user.bankAccountName = bankAccountName || user.bankAccountName;\n      user.bankAccountNumber = bankAccountNumber || user.bankAccountNumber;\n      //user.isVerified = boolVerification || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n\n  static managePartnersDetailVerification(request,response){\n  \n     const {\n      isVerified\n    } = request.body;\n\n    \n   \n    PartnersModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  \n  //partners earnings\n  static managePartnersEarnings(request,response){\n    EarningsModel.find()\n      .then(data => {\n        const earnings = data;\n        //console.log(partners +\"partners available\")\n        if (earnings.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              earnings:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              earnings,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static deletePartnersEarnings(request,response){\n    EarningsModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        EarningsModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static createNewPartnersEarnings(request,response){\n      \n      let {\n            \n              \n              paymentDate,\n              PaymentStatus,\n              PaymentAmount,\n              paymentReference,\n              partnerId,\n              partnerEmail,\n              partnerBankAccount,\n              vehicleId,\n              vehicleName,\n              vehiclePlateNo,\n        \n      \n        \n        } = request.body;\n\n        let pid = partnerId;\n\n        \n    const Newuser = new  EarningsModel({ \n      id: new AutoincrementId(EarningsModel).counter(), \n       \n              paymentDate,\n              PaymentStatus,\n              PaymentAmount,\n              paymentReference,\n              partnerId,\n              partnerEmail,\n              partnerBankAccount,\n              vehicleId,\n              vehicleName,\n              vehiclePlateNo,\n              partner: pid,\n      });\n\n     Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              user,\n            },\n          ],\n          message: 'User created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n  }\n\n\n  static managePartnersEarningsDetail(request,response){\n      \n\n    const {\n       type,\n              paymentDate,\n              PaymentStatus,\n              PaymentAmount,\n              paymentReference,\n              partnerId,\n              partnerEmail,\n              partnerBankAccount,\n              vehicleId,\n              vehicleName,\n              vehiclePlateNo,\n              \n    } = request.body;\n\n        let pid = partnerId; \n\n    \n\n\n    EarningsModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if(err){\n        return response.status(400).send({ msg: 'Some error occured.' });\n      }\n\n      if (!user) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n\n     \n      \n      \n     \n      // Verify and save the user\n      user.type= type || user.type;\n      user.paymentDate= paymentDate || user.paymentDate;\n      user.paymentStatus= PaymentStatus || user.PaymentStatus;\n      user.paymentAmount= PaymentAmount || user.PaymentAmount;\n      user.paymentReference= paymentReference || user.paymentReference;\n      user.partnerId= partnerId || user.partnerId;\n      user.partnerEmail= partnerEmail || user.partnerEmail;\n      user.partnerBankAccount = partnerBankAccount || user.partnerBankAccount;\n      user.vehicleId = vehicleId || user.vehicleId;\n      user.vehicleName = vehicleName || user.vehicleName;\n      user.vehiclePlateNo = vehiclePlateNo || user.vehiclePlateNo;\n      user.partner = partnerId || user.partnerId;\n      \n      //user.isVerified = boolVerification || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  static manageProfile(request,response){\n    UserModel.find({_id: request.params.id, is_admin:true})\n      .then(data => {\n        console.log(\"specific profile:\" + data)\n        \n       \n        const profile = data; //related\n        if (profile.length <= 0) {\n                return response.status(404).json({\n                  status: 404,\n                  error: 'The user with the given id does not exists',\n                });\n        }\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    profile,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n    \n  }\n\n  static manageProfileDetail(request,response){\n       let boolVerification;\n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      // passwordConfirm,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n      //status,\n      is_verified\n    } = request.body;\n\n\n\n    if(!password.length ){\n    \n        console.log('err here1')\n        return res.status(400).send({ msg: 'password do not match.' });\n      \n    }\n\n    \n\n\n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n\n      if(password==\"unchanged\" ){\n       user.password= user.password;\n       console.log(\"old:\" + user.password)\n      } else{\n        user.password= TokenGenerator.hashPassword(password.trim());\n        console.log(\"new pass: \"+ user.password)\n      }\n\n     \n      // Verify and save the user\n      user.avatar= avatar || user.avatar;\n      user.username= username || user.username;\n      user.email= email || user.email;\n   \n      user.roles= user_type|| user.user_type;\n      user.firstname= firstname|| user.firstname;\n      user.lastname = lastname || user.lastname;\n      user.phone_number = phoneNumber|| user.phone_number;\n      user.test_certificate = certificate|| user.test_certificate;\n      //user.status = status || user.status;\n      //user.isVerified = boolVerification || user.isVerified\n      user.save(function (err,user) {\n        if (err) { \n          console.log(err)\n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n\n  static manageProfileDetailVerification(request,response){\n  \n     const {\n      isVerified\n    } = request.body;\n\n    \n   \n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n\n\n\n  static managePlanPackage(request,response){\n    \n\n    IndividualPlanModel.find()\n      .then(data => {\n        const individualPlans = data;\n\n        \n\n        console.log(individualPlans+ \"individual available plans\")\n        if (individualPlans.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              individualPlans:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n\n\n\n        \n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              individualPlans,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n        \n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n   \n  \n\n  }\n\n\n  static managePlanPackageCorporate(request,response){\n    coperatePlanModel.find()\n      .then(data => {\n        const corporatePlans = data;\n\n        console.log(corporatePlans+ \"coperatePlans available plans\")\n        if (corporatePlans.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              corporatePlans:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n\n\n  \n          \n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                \n              \n                corporatePlans,\n            \n                message: 'Successful',\n              },\n            ],\n          });\n\n  \n\n\n        \n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n  static deletePlanPackage(request,response){\n    console.log(request.params + \"soloewe\")\n     if(request.params.delete_type==\"Individual\"){\n\n      IndividualPlanModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        IndividualPlanModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n     }else if(request.params.delete_type==\"Corporate\"){\n\n      coperatePlanModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        coperatePlanModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n     }\n     \n  }\n\n\n  static createNewPlan(request,response){\n\n    \n      let {\n          plan_name,\n          plan_categories,\n          status,\n          description,\n          max_car,\n          price,\n\n          \n\n      \n        } = request.body;\n\n        let Newuser;\n        let plan;\n    \n    if(plan_categories===\"Individual\"){\n\n      Newuser = new  IndividualPlanModel({ \n      id: new AutoincrementId(IndividualPlanModel).counter(), \n          plan_name,\n          plan_categories,\n          status,\n          description,\n          car_max:max_car,\n          price\n      });\n\n     Newuser.save()\n      .then(data => {\n        plan = data;\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              plan,\n            },\n          ],\n          message: 'Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n\n    }else {\n\n       Newuser = new  coperatePlanModel({ \n      id: new AutoincrementId(coperatePlanModel).counter(), \n       plan_name,\n          plan_categories,\n          status,\n          description,\n          car_max: max_car,\n          price\n          \n        \n      });\n\n     Newuser.save()\n      .then(data => {\n        plan = data;\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              plan\n            },\n          ],\n          message: 'Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n    }\n    \n    \n  }\n\n\n  static managePlanPackageDetail(request,response){\n\n    const {\n      plan_name,\n      plan_categories,\n      description,\n      max_car,\n      price,\n      status\n    } = request.body;\n\n   console.log(plan_name+ \"is here 2\")\n\n    if(plan_name==\"Individual\" ){\n        console.log(plan_name+ \"is here\")\n        IndividualPlanModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        plan.plan_name= plan_name || plan.plan_name;\n        plan.plan_categories= plan_categories || plan.plan_categories;\n     \n        plan.price= price || plan.price;\n        plan.description= description || plan.description;\n        plan.car_max = max_car || plan.car_max;\n        plan.status = status || plan.status;\n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n      \n    }else{\n\n      coperatePlanModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        plan.plan_name= plan_name || plan.plan_name;\n        plan.plan_categories= plan_categories || plan.plan_categories;\n     \n        plan.price= price || plan.price;\n        plan.description= description || plan.description;\n        plan.car_max = max_car || plan.car_max;\n        plan.status = status || plan.status;\n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); \n          }\n          console.log(plan + 'hello')\n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n\n    }\n    \n  }\n\n\n\n  static manageInspection(request,response){\n \n  \n        \n\n\n    CarsModel.find({health_status:{'$ne':'Completed'}})\n      .then(data => {\n        const inspections = data;\n\n        console.log(inspections)\n\n        \n        if (inspections.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              inspections:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n\n\n  \n          \n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                \n              \n                inspections,\n            \n                message: 'Successful',\n              },\n            ],\n          });\n\n  \n\n\n        \n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n  static manageInspectionDetail(request,response){\n     const {\n           health_status, \n           confirmedInspectionDate,\n           confirmedInspectionTime,\n           partnerEmail\n           // description,\n           //  username, email,\n           //  time, createdDate,\n           //  phone_number\n\n\n          } = request.body\n\n    CarsModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n \n        plan.health_status= health_status || plan.health_status;\n        plan.confirmedInspectionTime= confirmedInspectionTime || plan.confirmedInspectionTime;\n        plan.confirmedInspectionDate = confirmedInspectionDate || plan.confirmedInspectionDate;     \n        \n        let date = plan.confirmedInspectionDate;\n        let time = plan.confirmedInspectionTime;\n\n        console.log(confirmedInspectionTime, plan.confirmedInspectionDate)\n        if(plan.status=='Pending'){\n            plan.status = 'Available' ;     \n        \n        }\n        // plan.username= username || plan.username;\n        // plan.email= email || plan.email;\n        // plan.time = time || plan.time;\n        // plan.createdDate = createdDate || plan.createdDate;\n        // plan.phone_number = phone_number ||  plan.phone_number\n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n\n            return response.status(500).send({ msg: err.message });\n          }\n\n          //send email to partner\n\n          UserService.NotificationEmail(request,response,'/views/templates/inspection_confirmation.html', {\n                     username: partnerEmail,\n                     confirmedInspectionDate: date,\n                    confirmedInspectionTime:time,\n                    link:process.env.DEPLOY_FRONT_URL \n            },partnerEmail,200)\n\n\n            return response.status(200).send({ status:200, success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n  }\n\n\n  static createNewInspection(request,response){\n    const {\n           username,\n            email,\n            phone_number,\n            description,\n            createdDate,\n            time,\n            status,\n            car_id,\n\n\n          } = request.body\n\n        let Newuser;\n        let plan;\n    \n    \n\n      Newuser = new  InspectionModel({ \n      id: new AutoincrementId(InspectionModel).counter(), \n         username,\n            email,\n            phone_number,\n            description,\n            createdDate,\n            time,\n            status,\n            car_id,\n      });\n\n     Newuser.save()\n      .then(data => {\n        plan = data;\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              plan,\n            },\n          ],\n          message: 'Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n\n    \n    \n  }\n  \n   static deleteInspection(request,response){\n      \n    \n\n      InspectionModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        InspectionModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n     \n    \n  }\n\n  \n\n  static manageDriveTest(request,response){\n\n    DriveTestModel.find()\n      .then(data => {\n        const testDrive = data;\n\n        console.log(testDrive+ \"coperatePlans available plans\")\n       if (testDrive.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              testDrive:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n\n\n  \n          \n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                \n              \n                testDrive,\n            \n                message: 'Successful',\n              },\n            ],\n          });\n\n  \n\n\n        \n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n  static addDriveTestFromItinerary(request,response){\n\n    const {\n           username,\n                email,\n                phone_number,\n                car_id,\n                status,\n                description,\n                \n                createdDate,\n\n\n          } = request.body;\n\n        let Newuser;\n        let plan;\n    \n    \n\n      Newuser = new  DriveTestModel({ \n      id: new AutoincrementId(DriveTestModel).counter(), \n         username,\n         email,\n         phone_number,\n         car_id,\n         status:\"Pending\",\n         description,       \n         createdDate,\n      });\n\n     Newuser.save()\n      .then(data => {\n        plan = data;\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              plan,\n            },\n          ],\n          message: 'Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n\n  }\n\n\n  static createNewDriveTest(request,response){\n\n       const {\n           username,\n            email,\n            phone_number,\n            description,\n            createdDate,\n            time,\n            status,\n            car_id,\n\n\n          } = request.body;\n\n        let Newuser;\n        let plan;\n    \n    \n\n      Newuser = new  DriveTestModel({ \n      id: new AutoincrementId(DriveTestModel).counter(), \n         username,\n            email,\n            phone_number,\n            description,\n            createdDate,\n            time,\n            test_center:time,\n\n            status,\n            car_id,\n      });\n\n     Newuser.save()\n      .then(data => {\n        plan = data;\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              plan,\n            },\n          ],\n          message: 'Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n\n    \n    \n  }\n\n  static manageUsersDriveTestCenterUpdate(request,response){\n\n     const {\n           test_center,\n           test_center_address,\n\n\n          } = request.body;\n    UserModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a user with that id.' });\n        }\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        // plan.plan_name= plan_name || plan.plan_name;\n        // plan.plan_categories= plan_categories || plan.plan_categories;\n     \n        // plan.price= price || plan.price;\n        // plan.description= description || plan.description;\n        // plan.car_max = max_car || plan.car_max;\n        plan.test_center = test_center || plan.test_center;\n        plan.test_center_address = test_center_address || plan.test_center_address\n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n           return response.status(200).send({ status:200, success:'ok', msg: 'Successfully updated .' });\n        }); \n      });\n\n  }\n\n  static manageDriveTestDetail(request,response){\n\n     const {\n           // username,\n           //  email,\n           //  phone_number,\n           //  description,\n           //  createdDate,\n           //  time,\n            status,\n            // car_id,\n\n\n          } = request.body;\n    DriveTestModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        // plan.plan_name= plan_name || plan.plan_name;\n        // plan.plan_categories= plan_categories || plan.plan_categories;\n     \n        // plan.price= price || plan.price;\n        // plan.description= description || plan.description;\n        // plan.car_max = max_car || plan.car_max;\n        plan.status = status || plan.status;\n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n           return response.status(200).send({ status:200, success:'ok', msg: 'Successfully updated .' });\n        }); \n      });\n  }\n\n\n   static deleteDriveTest(request,response){\n\n        \n\n      DriveTestModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        DriveTestModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n     \n    \n  }\n\n\n  static managePreviledges(request,response){\n\n    // import DriveTestModel from  \"../models/DriveTest.model\";\n// import Previledges from \"../models/Roles.model\";\n    RolesAndPreviledgesModel.find()\n      .then(data => {\n        const users = data;\n\n\n        if (users.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              previledges:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n\n        \n\n\n\n       \n  \n          \n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                \n              \n                previledges: users ,\n            \n                message: 'Successful',\n              },\n            ],\n          });\n\n  \n\n\n        \n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n\n  static createNewPreviledges(request,response){\n     const {previledges_description, previledges_info,usergroups_old} = request.body\n\n        let Newuser;\n        let plan;\n    \n    \n\n      Newuser = new  RolesAndPreviledgesModel({ \n      id: new AutoincrementId(RolesAndPreviledgesModel).counter(), \n          previledges_description, previledges_info\n      });\n\n     Newuser.save()\n      .then(data => {\n        plan = data;\n\n\n\n        RolesAndPreviledgesModel.find({ for_admins:  true }, function (err, users) {\n           \n                      if (!users) {\n                        return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n                      }\n\n                      let usergroup = [...usergroups_old,previledges_info]\n\n                      RolesAndPreviledgesModel.updateMany({ for_admins:  true },{ $set:{  usergroup_set:usergroup}},{ multi: true }, function(err,result){\n                         if (err) {\n                              console.log(err)\n                              res.send(err);\n                            } else {\n\n                            \n\n                               UserModel.find({ for_users:  true }, function (err, users) {\n           \n                                      if (!users) {\n                                        return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n                                      }\n\n                                      UserModel.updateMany({ for_users:  true },{ $set:{  usergroup_set:usergroup}},{ multi: true }, function(err,result){\n                                         if (err) {\n                                              console.log(err)\n                                              res.send(err);\n                                            } else {\n\n                                              return response.status(201).json({\n                                                status: 201,\n                                                data: [\n                                                  {\n                                                    success:'ok',\n                                                    result,\n                                                  },\n                                                ],\n                                                message: 'Updated all users with fields and status changed',\n                                              });\n                                            }\n\n                                       })     \n\n\n\n                         })\n\n\n\n\n\n\n\n\n\n\n\n\n                            }\n\n                       })     \n\n\n\n         })\n        \n        // return response.status(201).json({\n        //   status: 201,\n        //   data: [\n        //     {\n              \n        //       plan,\n        //     },\n        //   ],\n        //   message: 'Plan created successfully',\n        // });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n         \n\n                //find all users of usch roles and update\n         \n\n\n\n    \n\n    \n    \n  }\n\n  static adminPreviledgesEdit(request,response){\n\n         const {\n          view_bookings,\n          view_quotations,\n          view_transactions,\n          view_payments,\n          view_drivers,\n          view_sos,\n          view_partners,\n          view_package,\n          view_cars,\n          previledges_info,\n          view_tickets,\n          view_faqs,\n          view_users,\n          view_admins,\n          view_settings,\n          view_car_inspection,\n          view_drive_test,\n\n          status,\n\n\n          manage_bookings,\n          manage_quotations,\n          manage_payments,\n          manage_drivers,\n          manage_sos,\n         manage_partners,\n          manage_package,\n         manage_transactions,\n          manage_cars,\n          manage_tickets,\n          manage_faqs,\n          manage_settings,\n          manage_users,\n          manage_admins,\n          manage_drive_test,\n          manage_car_inspection,\n        }  = request.body;  \n\n    \n\n\n    RolesAndPreviledgesModel.findOne({ _id:  new String( request.params.id) }, function (err, roles) {\n\n        if (!roles) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        roles.status = status || roles.status;\n        roles.view_bookings= view_bookings || roles.view_bookings;\n          roles.view_quotations= view_quotations || roles.view_quotations;\n          roles.view_transactions= view_transactions || roles.view_transactions;\n          roles.view_payments = view_payments || roles.view_payments;\n          roles.view_drivers = view_drivers || roles.view_drivers;\n          roles.view_sos= view_sos || roles.view_sos;\n          roles.view_partners = view_partners || roles.view_partners;\n          roles.view_package= view_package || roles.view_package;\n          roles.view_cars= view_cars || roles.view_cars;\n          roles.view_tickets = view_tickets || roles.view_tickets;\n          roles.view_faqs = view_faqs || roles.view_faqs;\n          roles.view_users = view_users || roles.view_users;\n          roles.view_admins = view_admins || roles.view_admins;\n          roles.view_settings = view_settings || roles.view_settings;\n\n          roles.view_drive_test = view_drive_test || roles.view_drive_test;\n          roles.view_car_inspection = view_car_inspection || roles.view_car_inspection;\n\n\n        \n        roles.manage_bookings= manage_bookings || roles.manage_bookings;\n          roles.manage_quotations= manage_quotations || roles.manage_quotations;\n          roles.manage_transactions= manage_transactions || roles.manage_transactions;\n          roles.manage_payments = manage_payments || roles.manage_payments;\n          roles.manage_drivers = manage_drivers || roles.manage_drivers;\n          roles.manage_sos= manage_sos || roles.manage_sos;\n          roles.manage_partners = manage_partners || roles.manage_partners;\n          roles.manage_package= manage_package || roles.manage_package;\n          roles.manage_cars= manage_cars || roles.manage_cars;\n          roles.manage_tickets = manage_tickets || roles.manage_tickets;\n          roles.manage_faqs = manage_faqs || roles.manage_faqs;\n          roles.manage_users = manage_users || roles.manage_users;\n          roles.manage_admins = manage_admins || roles.manage_admins;\n          roles.manage_settings = manage_settings || roles.manage_settings;\n\n          roles.manage_drive_test = manage_drive_test || roles.manage_drive_test;\n          roles.manage_car_inspection = manage_car_inspection || roles.manage_car_inspection;\n\n    \n\n     \n        roles.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n\n          console.log(user)\n\n          //find all users of usch roles and update\n          UserModel.find({ roles:  previledges_info }, function (err, users) {\n\n                if (!users) {\n                  return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n                }\n\n               \n\n               UserModel.updateMany({ roles: previledges_info },\n                 { $set:\n                       { view_bookings,\n                          view_quotations,\n                          view_transactions,\n                          view_payments,\n                          view_drivers,\n                          view_sos,\n                          view_partners,\n                          view_package,\n                          view_cars,\n                          view_tickets,\n                          view_faqs,\n                          view_users,\n                          view_admins,\n                          view_settings,\n                          status ,\n\n\n                          manage_bookings,\n                          manage_quotations,\n                          manage_payments,\n                          manage_drivers,\n                          manage_sos,\n                         manage_partners,\n                          manage_package,\n                         manage_transactions,\n                          manage_cars,\n                          manage_tickets,\n                          manage_faqs,\n                          manage_settings,\n                          manage_users,\n                          manage_admins,\n\n\n          view_car_inspection,\n          view_drive_test,\n           manage_drive_test,\n          manage_car_inspection,\n\n\n                        }\n              },{ multi: true }\n\n\n\n\n               , function(err,result)\n                 {\n                  if (err) {\n                    console.log(err)\n                    res.send(err);\n                  } else {\n                    \n                    return response.status(200).json({\n                      status: 200,\n                      data: [\n                        {\n                          success:'ok',\n                          result,\n                        },\n                      ],\n                      message: 'Updated all users with fields and status changed',\n                    });\n                  }\n              \n              });\n\n\n\n\n           })\n\n\n        }); \n      });\n  }\n\n  static managePreviledgesDetail(request,response){\n    const {previledges_description, previledges_info} = request.body\n    RolesAndPreviledgesModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        plan.previledges_info= previledges_info || plan.previledges_info;\n        plan.previledges_description= previledges_description || plan.previledges_description;\n     \n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n\n          //find all users of usch roles and update\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n  }\n\n\n  static managePreviledgesRulesDetail(request,response){\n    const {field, value} = request.body\n    UserModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        plan[field]= value || plan[field];\n        \n     \n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user roles andd permission profile.' });\n        }); \n      });\n  }\n\n\n   static deletePreviledges(request,response){\n         //if(request.params.delete_type==\"Individual\"){\n\n      RolesAndPreviledgesModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        RolesAndPreviledgesModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n     //}\n    \n  }\n\n\n\n  static manageSOS(request,response){\n    SOSModel.find()\n      .then(data => {\n        let redFlag = data;\n        console.log(redFlag,\"SOS VALUES\")\n        if (redFlag.length === 0) {\n          \n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                redFlag:[],\n                message: 'No SOS found',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              redFlag,\n              message: 'All sos/redflags was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  \n\n\n  static manageSOSDetail(request,response){\n\n    SOSModel.find({_id: request.params.id})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status } = request.body;\n     \n\n            SOSModel.updateOne({_id: request.params.id }, {\n                    \n                      status: status\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>{\n                console.log(err)\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                });\n              });\n\n    \n      })\n      .catch(error => {\n         console.log(err)\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                });\n      });\n\n  }\n\n  static deleteSOS(request,response){\n    SOSModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        SOSModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static deleteTicket(request,response){\n\n    InterventionsModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        InterventionsModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n  }\n\n  static manageTickets(request,response){\n    InterventionsModel.find()\n      .then(data => {\n        console.log(\"all tickets>>>>\" + data)\n        let intervention = data;\n        if (intervention.length === 0) {\n          \n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                intervention:[],\n                message: 'No records yet',\n              },\n            ],\n          });\n        }\n        //console.log( intervention)\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              intervention,\n              message: 'All interventions was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n  }\n\n\n  static createNewTicket(request,res){\n    const { status , subject, category, response, username,phone_number,email, assigned_to,comment} = request.body;\n\n    const NewCars = new InterventionsModel({ \n            id:  new AutoincrementId(InterventionsModel).counter(),\n            status , category, subject, response, username,phone_number,email, assigned_to,comment\n      });\n\n    NewCars.save()\n      .then(data => {\n        const Cars = data;\n        return res.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: Cars.id,\n              message: 'Created car record',\n            },\n          ],\n        });\n      })\n      .catch(err =>{\n        console.log(err)\n        res.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static manageTicketsDetail(request,responses){\n\n    InterventionsModel.find({_id: request.params.id})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return responses.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status , category, response, username,phone_number,email, assigned_to} = request.body;\n   \n\n\n            InterventionsModel.updateOne({_id: request.params.id }, {\n                    \n                      status: status || redId.status,\n                      category: category || redId.category,\n                      username: username || redId.username,\n                      phone_number: phone_number || redId.phone_number,\n                      email: email || redId.email,\n                      response: response || redId.response, \n                      assigned_to: assigned_to || redId.assigned_to,\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return responses.status(201).json({\n                  status: 201,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err => {\n                responses.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                });\n              });\n\n    \n\n      })\n      .catch(error => {\n        responses.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        });\n      });\n\n  }\n\n\n\n  static manageUserNotificationCounter(request,responses){\n\n    UserModel.find({email: request.params.id})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return responses.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { notification_count} = request.body;\n   \n\n\n            UserModel.updateOne({_id: request.params.id }, {\n                    \n                      notification_count: notification_count || redId.notification_count,\n                      \n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return responses.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated user notification record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err => {\n                responses.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                });\n              });\n\n    \n\n      })\n      .catch(error => {\n        responses.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        });\n      });\n\n  }\n\n  static createNewFAQ(request,response){\n    const { question , answer, status} = request.body;\n\n    const NewCars = new FAQModel({ \n            id:  new AutoincrementId(FAQModel).counter(),\n            question , answer,status\n      });\n\n    NewCars.save()\n      .then(data => {\n        const Cars = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: Cars.id,\n              message: 'Created car record',\n            },\n          ],\n        });\n      })\n      .catch(err =>{\n        console.log(err)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n\n  static manageFaqs(request,response){\n   FAQModel.find()\n      .then(data => {\n        let faqs= data;\n        console.log(faqs,\"faqs\")\n        if (faqs.length === 0) {\n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                faqs:[],\n                message: 'All faqs was retrieved successfully',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              faqs,\n              message: 'All faqs was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n         \n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static manageFaqsDetail(request,response){\n\n    FAQModel.find({_id: request.params.id})\n    .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { question , answer, status} = request.body;\n        \n\n\n             FAQModel.updateOne({_id: request.params.id }, {\n                    \n                      question: question || redId.question,\n                      answer: answer || redId.answer,\n                      status: status || redId.status,\n                  \n                }).then(data => {\n                  \n                const faq = data;\n                \n                return response.status(201).json({\n                  status: 201,\n                  data: [\n                    {\n                      id: faq.status,\n                      message: 'Updated faq record’s detail',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n\n\n  }\n\n\n\n\n\n\n\n\n\n  static manageCars(request,response){\n     CarsModel.find()\n      .then(data => {\n        let carsAvailable = data;\n        console.log(carsAvailable+ \"all cars here\")\n        if (carsAvailable.length === 0) {\n           cars= [];\n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n               carsAvailable:[],\n                message: 'All Cars was retrieved successfully',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              carsAvailable,\n              message: 'All Carss was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static manageCarsDetail(request,response){\n    const {\n      status,\n      health_status,\n      car_status,\n      car_type,\n      car_model,\n      description,\n      car_year,\n      assigned_driver_name,\n      assigned_driver_email,\n      assigned_driver_phone,\n      partner_id,\n      inspection_detail,\n      plate_number,\n      license,\n      assigned_driver_id,\n      images,\n      inspectionDate,\n      vehicleIdentificationNumber,\n\ninspectionTime,\n\n    } = request.body;\n\n\n      CarsModel.find({_id: request.params.id})\n    .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { question , answer} = request.body;\n        \n\n\n         CarsModel.updateOne({_id: request.params.id }, {\n                    \n                      status: status || redId.status,\n                      health_status: health_status || redId.health_status,\n                      car_status: car_status || redId.car_status,\n                      car_type: car_type|| redId.car_type,\n                      car_model: car_model || redId.car_model,\n                      description: description || redId.description,\n                      car_year : car_year || redId.car_year,\n                      assigned_driver_name: assigned_driver_name || redId.assigned_driver_name,\n                      assigned_driver_email: assigned_driver_email || redId.assigned_driver_email,\n                      assigned_driver_phone: assigned_driver_phone || redId.assigned_driver_phone,\n                      partner_id: partner_id || redId.partner_id,\n                      inspection_detail: inspection_detail || redId.inspection_detail,\n                      plate_number: plate_number || redId.plate_number,\n                      license: license || redId.license,\n                      assigned_driver_id: assigned_driver_id || redId.assigned_driver_id,\n                      images: images || redId.images,\n                      inspectionDate: inspectionDate || redId.inspectionDate,\n                      vehicleIdentificationNumber: vehicleIdentificationNumber || redId.vehicleIdentificationNumber,\n                      inspectionTime : inspectionTime || redId.inspectionTime ,\n                      //images\n                  \n                }).then(data => {\n                  \n                const cars = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: cars._id,\n                      data: cars,\n                      message: 'Updated faq record’s detail',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n\n\n  }\n\n\n  static createNewCar(request,response){\n    const {\n       status,\n       health_status,\n       car_status,\n            color,\n            model,\n      car_type,\n      car_model,\n      description,\n      car_year,\n      assigned_driver_name,\n      assigned_driver_email,\n      assigned_driver_phone,\n      partner_id,\n      inspection_detail,\n      plate_number,\n      license,\n      assigned_driver_id,\n      images,\n      car,\n\n      carModel,\n      vehicleIdentificationNumber,\n\ncarYear,\n\nvehicleColor,\n\nplateNo,\n\ninspectionDate,\n\ninspectionTime,\n\ncarDescription,\n\nimagePath,\n\ncreator,\n\ndate_created,\npartnerEmail,\n\n    } = request.body;\n    \n    const NewCars = new CarsModel({ \n            id:  new AutoincrementId(CarsModel).counter(),\n            status,\n            health_status,\n            car_status,\n            color,\n            model: car_model,\n      car_type,\n      car_model,\n      description,\n      car_year,\n      assigned_driver_name,\n      assigned_driver_email,\n      assigned_driver_phone,\n      partner_id,\n      inspection_detail,\n      plate_number,\n      license,\n      assigned_driver_id,\n      images,\n      car,\n\n      \n\n      carModel,\n      vehicleIdentificationNumber,\n\ncarYear,\n\nvehicleColor,\n\nplateNo,\n\ninspectionDate,\n\ninspectionTime,\n\ncarDescription,\n\nimagePath,\n\ncreator,\n\ndate_created,\npartnerEmail,\n\n\n\n\n\n\n      });\n\n    NewCars.save()\n      .then(data => {\n        const Cars = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: Cars.id,\n              message: 'Created car record',\n            },\n          ],\n        });\n      })\n      .catch(err =>{\n        console.log(err)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n static  getCarsInfo(request,response){\n\n           return   response.status(200).json({\n          status: 200,\n          data: [\n            {\n              carInfo: carsApi,\n              message: 'Created car record',\n            },\n          ],\n        });\n\n    // const dataValues = [];\n    // fs.createReadStream('cars_api_info.csv')\n    //   .pipe(csv())\n    //   .on('data', (row) => {\n    //     try{\n    //       dataValues.push(row)\n    //     }catch(e){\n    //        return  response.status(400).json({\n    //       status: 400,\n    //       data: [\n    //         {\n              \n    //           message: e,\n    //         },\n    //       ],\n    //     });\n    //     }\n    //     //console.log(row);\n    //   })\n    //   .on('end', () => {\n    //     //console.log('CSV file successfully processed');\n    //     //console.log(dataValues)\n    //     return   response.status(200).json({\n    //       status: 200,\n    //       data: [\n    //         {\n    //           carInfo: dataValues,\n    //           message: 'Created car record',\n    //         },\n    //       ],\n    //     });\n    //   });\n  }\n\n\n  \n\n\n\n  \n\n\n\n  \n  static manageGoogleSettings(request,response){\n    \n      GmailSettingModel.find()\n      .then(data => {\n        const googleSettings = data;\n        console.log(googleSettings,\"users available are here\")\n        if (googleSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              googleSettings,\n               \n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getAllRepairs(request,response){\n\n    MechModel.find()\n      .then(data => {\n        const mech = data;\n        //console.log(googleSettings,\"users available are here\")\n        if (mech.length === 0) {\n\n          return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              mech:[],\n               \n          \n              message: 'Successful',\n            },\n          ],\n        });\n          \n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              mech,\n               \n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n\n  static changeRepairStatus(request,response){\n\n    MechModel.find({_id: request.params.id})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status } = request.body;\n    \n\n\n            MechModel.updateOne({_id:request.params.id }, {\n                    \n                      status: status\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(201).json({\n                  status: 201,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>{\n                console.log(err)\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                });\n              });\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n\n\n    static getAllPartnerEarnings(request,response){\n\n    EarningsModel.find()\n      .then(data => {\n        const earnings = data;\n        //console.log(googleSettings,\"users available are here\")\n        if (earnings.length === 0) {\n\n          return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              earnings:[],\n               \n          \n              message: 'Successful',\n            },\n          ],\n        });\n          \n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              earnings,\n               \n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n\n  static createNewPartnerEarnings(request,response){\n    let mongoose = require('mongoose');\n\n    const { paymentDate,\nPaymentStatus,\nPaymentAmount,\npaymentReference,\npartnerId,\npartnerEmail,\npartnerBankAccount,\nvehicleId,\nvehicleName,\nvehiclePlateNo,} = request.body;\n\n    const NewEarnings = new EarningsModel({ \n            id:  new AutoincrementId(EarningsModel).counter(),\n            paymentDate,\npaymentStatus: PaymentStatus,\npaymentAmount: PaymentAmount,\npaymentReference,\npartnerId,\npartnerEmail,\npartnerBankAccount,\nvehicleId: mongoose.Types.ObjectId(vehicleId),\nvehicleName,\nvehiclePlateNo,\npartner: mongoose.Types.ObjectId(partnerId),\nvehicle: mongoose.Types.ObjectId(vehicleId),\ndate_created: new Date(),\n      });\n\n    NewEarnings.save()\n      .then(data => {\n        const Earnings = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: Earnings.id,\n              message: 'Created car record',\n            },\n          ],\n        });\n      })\n      .catch(err =>{\n        console.log(err)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static manageFacebookSettings(request,response){\n     FacebookSettingModel.find()\n      .then(data => {\n        const facebookSettings = data;\n        console.log(facebookSettings,\"facebookSettings available are here\")\n        if (facebookSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              facebookSettings,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static managePaystackSettings(request,response){\n     PaystackSettingModel.find()\n      .then(data => {\n        const paystackSettings = data;\n        console.log(paystackSettings,\"paystackSettings available are here\")\n        if (paystackSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              paystackSettings,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static manageEmailSettings(request,response){\n     SendgridEmailSettingModel.find()\n      .then(data => {\n        const sendgridSettings = data;\n        console.log(sendgridSettings,\"sendgridSettings available are here\")\n        if (sendgridSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              sendgridSettings,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageS3BucketSettings(request,response){\n     AwsS3Model.find()\n      .then(data => {\n        const awsSettings = data;\n        console.log(awsSettings,\"awsSettings available are here\")\n        if (awsSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              awsSettings,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageInstagramSettings(request,response){\n     InstagramSettingModel.find()\n      .then(data => {\n        const instagramSettings = data;\n        console.log(instagramSettings,\"instagramSettings available are here\")\n        if (instagramSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              instagramSettings,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageSettingsDetail(request,response){\n\n    const {\n      test_secret_key,\n      test_public_key,\n      live_public_key,\n      live_secret_key,\n      api_mode,\n      type\n\n    } = request.body;\n   \n\n    switch (type){\n      case \"google\":\n       GmailSettingModel.findOne({ _id:  request.params.id }, function (err, settings) {\n\n        if (!settings) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n        settings.test_secret_key= test_secret_key || settings.test_secret_key;\n        settings.test_public_key= test_public_key || settings.test_public_key;\n     \n        settings.live_secret_key= live_secret_key || settings.live_secret_key;\n        settings.live_public_key= live_public_key || settings.live_public_key;\n        settings.api_mode = api_mode || settings.api_mode;\n        \n        settings.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); }\n          \n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n        break;\n      case \"aws\":\n      \n        AwsS3Model.findOne({ _id:  request.params.id }, function (err, settings) {\n\n        if (!settings) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        settings.test_secret_key= test_secret_key || settings.test_secret_key;\n        settings.test_public_key= test_public_key || settings.test_public_key;\n     \n        settings.live_secret_key= live_secret_key || settings.live_secret_key;\n        settings.live_public_key= live_public_key || settings.live_public_key;\n        settings.api_mode = api_mode || settings.api_mode;\n        \n        settings.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); }\n          \n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n        break;\n      case \"facebook\":\n      \n\n       FacebookSettingModel.findOne({ _id:  request.params.id }, function (err, settings) {\n\n        if (!settings) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n        settings.test_secret_key= test_secret_key || settings.test_secret_key;\n        settings.test_public_key= test_public_key || settings.test_public_key;\n     \n        settings.live_secret_key= live_secret_key || settings.live_secret_key;\n        settings.live_public_key= live_public_key || settings.live_public_key;\n        settings.api_mode = api_mode || settings.api_mode;\n        \n        settings.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); }\n         \n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n       break;\n      case \"instagram\":\n      \n\n       InstagramSettingModel.findOne({ _id:  request.params.id }, function (err, settings) {\n\n        if (!settings) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        settings.test_secret_key= test_secret_key || settings.test_secret_key;\n        settings.test_public_key= test_public_key || settings.test_public_key;\n     \n        settings.live_secret_key= live_secret_key || settings.live_secret_key;\n        settings.live_public_key= live_public_key || settings.live_public_key;\n        settings.api_mode = api_mode || settings.api_mode;\n        \n        settings.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); }\n          \n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n       break;\n      case \"paystack\":\n      \n\n       PaystackSettingModel.findOne({ _id:  request.params.id }, function (err, settings) {\n\n        if (!settings) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n        settings.test_secret_key= test_secret_key || settings.test_secret_key;\n        settings.test_public_key= test_public_key || settings.test_public_key;\n     \n        settings.live_secret_key= live_secret_key || settings.live_secret_key;\n        settings.live_public_key= live_public_key || settings.live_public_key;\n        settings.api_mode = api_mode || settings.api_mode;\n        \n        settings.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); }\n         \n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n       break;\n      case \"sendgrid\":\n\n       SendgridEmailSettingModel.findOne({ _id:  request.params.id }, function (err, settings) {\n\n        if (!settings) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        settings.test_secret_key= test_secret_key || settings.test_secret_key;\n        settings.test_public_key= test_public_key || settings.test_public_key;\n     \n        settings.live_secret_key= live_secret_key || settings.live_secret_key;\n        settings.live_public_key= live_public_key || settings.live_public_key;\n        settings.api_mode = api_mode || settings.api_mode;\n        \n        settings.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); }\n          \n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n       break;\n    }\n\n  }\n\n\n  static manageBookings(request,response){\n    return  UserService.manageBookings(request,response)\n  }\n\n\n \n\n   static makeQuotation(request,response){\n      let  {\n                   plan_id,\n                  price,\n                  status,\n                  full_name,\n                  quotation_id,\n                  email,\n                  reference,\n                  amount,\n                  createdDateOfQuotation,\n                  phone_number\n\n                }  = request.body;\n\n\n    \n     const NewUserPlan = new QuoteModel({ \n      id: new AutoincrementId(QuoteModel).counter(), \n      plan_id,\n      price,\n      status,\n      full_name,\n      quotation_id,\n      email,\n      reference,\n      amount,\n      createdDateOfQuotation,\n      phone_number,\n     });\n\n\n     NewUserPlan.save()\n      .then(data => {\n        const user = data;\n        console.log(user + \"plans\")\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              user\n            },\n          ],\n          message: 'User Plan created successfully',\n        });\n      \n      })\n      .catch(err => {\n        console.log(err+ 'error here user plan')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n      // UserService.saveUsersItinerary(request,response);\n  }\n             \n\n\n  static createNewPlanBooking(request,response){\n    //   let {\n    //    itineraries,\n    //   user_id,\n    //   carsSelected,\n    //   planName,\n    //   price,\n    //   planCategoryName,\n    //   no_hours,\n    //   username,\n    //   email,\n    //   phone_number,\n    //   plan_id,\n    // } = request.body;\n\n    let {\n       plan_id,\n                     createdDate,\n                    itineraries ,\n                    user_id, \n                    carsSelected,\n                    // plan_name:  plan_name.options[plan_name.selectedIndex].text,   //plan_name.value,\n                    price,\n                    // plan_categories: plan_categories,\n                    status,\n                    no_hours,\n                    duration,\n                    phone_number,\n                     plan_category,//plan_categories1.value,\n              plan_name,//plan_name1.value,\n\n                    username,\n                    email,\n                     has_been_updated,\n    }= request.body;\n\n   \n\n\n    \n     const NewUserPlan = new UserPlanModel({ \n      id: new AutoincrementId(UserPlanModel).counter(), \n     plan_id,\n\n    \n                    createdDateOfQuotation: createdDate,\n                    itineries:itineraries ,\n                    user_id, \n                    cars_on_plan:carsSelected,\n                    // plan_name:  plan_name.options[plan_name.selectedIndex].text,   //plan_name.value,\n                    price,\n                    // plan_categories: plan_categories,\n                    status,\n                    no_hours,\n                    duration,\n                    phone_number,\n\n                     plan_category_name: plan_category,//plan_categories1.value,\n              plan_name,//plan_name1.value,\n\n                    username,\n                    email,\n                    has_updated: 'Yes',\n     });\n\n\n     NewUserPlan.save()\n      .then(data => {\n        const user = data;\n        console.log(user + \"plans\")\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              user\n            },\n          ],\n          message: 'User Plan created successfully',\n        });\n      \n      })\n      .catch(err => {\n        console.log(err+ 'error here user plan')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n      // UserService.saveUsersItinerary(request,response);\n  }\n\n\n\n  \n\n  static manageBookingsDetail(request,response){\n    return  UserService.manageBookingsDetail(request,response)\n  }\n\n  static manageManualBooking(request,response){\n    //return  UserService.manageManualBooking(request,response)\n  }\n\n  static manageItineraries(request,response){\n    ItineraryModel.find()\n      .then(data => {\n        const itineraries = data;\n        console.log(data+ \"either empty itins\")\n        if (itineraries.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              itineraries:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              itineraries,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static manageUsersPlan(request,response){\n    UserPlanModel.find()\n      //.populate('users_collections')\n      .then(data => {\n        const usersPlan = data;\n        console.log(data+ \"either empty itins\")\n        if (usersPlan.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              usersPlan:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              usersPlan,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  \n\n\n\n\n\n  static createNewItinerary(request, response) {\n    // console.log(request.body)\n\n\n\n  \n    let {\n       plan_category,\n       start_location,\n       destination,\n       travel_option:drive_option,\n       no_hours,\n       travel_option,\n       plan_name,\n       status,\n       start_time,\n    \n       drivingschool,\n       user_id,\n       username,\n       email,\n       phone_number,\n       plan_id,\n       end_time,\n        pickup_time,\n      certificate_id,\n      certificate_date\n    } = request.body;\n\n\n   \n\n    \n    const NewItinerary = new ItineraryModel({ \n      id: new AutoincrementId(ItineraryModel).counter(), \n       plan_category,\n       start_location,\n       destination,\n       travel_option:drive_option,\n       no_hours,\n       travel_option,\n       plan_name,\n       status,\n       start_time,\n       travel_option,\n       drivingschool,\n       user_id,\n       username,\n       email,\n       phone_number,\n       plan_id,\n       end_time,\n        pickup_time,\n      certificate_id,\n      certificate_date\n\n       \n     });\n\n     NewItinerary.save()\n      .then(data => {\n        const user = data;\n        const result = {\n           plan_category: user.plan_category,\n      start_location: user.start_location,\n      destination: user.destination,\n      drive_option:user.drive_option,\n      no_hours:user.no_hours,\n        travel_option:user.travel_option,\n      plan_name,\n      status,\n      start_time,\n      drivingschool,\n      username: user.username,\n      email:user.email\n           // cars_id: user.cars_id\n        };\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              result\n            },\n          ],\n          message: 'User Itinerary created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n\n\n  \n\n \n\n  static manageItineraryDetail(request,response){\n\n\n    ItineraryModel.find({_id: request.params.id})\n    .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given itinerary id does not exists',\n                    });\n        }\n         const { status, assigned_driver_id, assigned_driver_name, assigned_driver_email, assigned_driver_phone} = request.body;\n\n    \n        \n\n\n        ItineraryModel.updateOne({_id: request.params.id }, {\n                    \n                      status: status || redId.status,\n                      assigned_driver_id : assigned_driver_id || redId.assigned_driver_name,\n                      assigned_driver_name : assigned_driver_name || redId.assigned_driver_name,\n                      assigned_driver_email : assigned_driver_email || redId.assigned_driver_email,\n                      assigned_driver_phone: assigned_driver_phone || redId.assigned_driver_phone\n                      \n                  \n                }).then(data => {\n                  \n                const faq = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: faq._id,\n                      message: 'Updated faq record’s detail',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n\n    \n  }\n\n  static manageWalletHistory(req,res){\n    WalletModel.find().then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect(process.env.DEPLOY_BACK_URL+ '/error')\n          }\n         const tranx = donor;\n         console.log(tranx)\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    tranx,\n                    message: 'Get all wallet amount  was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect(process.env.DEPLOY_BACK_URL+ '/error')\n      })\n\n  }\n\n\n  static adminDashboardTodaySales(request,response){\n    //var now = new Date();\n    //var startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    // WalletModel.find({createdDate: {$gte: startOfToday}}, function (err, docs) { \n    //    if(err){\n    //      console.log(err)\n    //    }\n\n    //    return response.status(200).json({\n    //             status: 200,\n    //             data: [\n    //               {\n    //                 todaySales:docs,\n    //                 message: 'Get all wallet amount  was successful',\n    //               },\n    //             ],\n    //       });\n\n    //  });\n\n\n      const now = new Date();\n      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n      PaymentModel.find({created_at: {$gte: today}}).exec(function(err,wallet){\n           if(err){ \n              return response.status(400).json({\n                status: 400,\n                message: 'Get all wallet amount  was successful',     \n              });\n\n           }\n\n             let totalToday =0;\n             let todaySales_from_account = wallet.map((item,i)=>{\n                 totalToday+=item.amount\n              })\n\n            return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    todaySales:totalToday,\n                    message: 'Get all wallet amount  was successful',\n                  },\n                ],\n          });\n\n      });\n\n\n       \n  }\n\n  static adminDashboardYesterdaySales(request,response){\n\n    var yesterdayStart = new Date();\n    yesterdayStart.setDate(yesterdayStart.getDate() - 1);\n    yesterdayStart.setHours(0,0,0,0);\n    //var startId = Math.floor(yesterdayStart.getTime() / 1000).toString(16) + \"0000000000000000\";\n\n    var yesterdayEnd = new Date();\n    yesterdayEnd.setDate(yesterdayEnd.getDate() - 1);\n    yesterdayEnd.setHours(23,59,59,999);\n    \n\n\n\n    PaymentModel.find({ \"createdDate\": { $gt: new Date(Date.now() - 24*60*60 * 1000)} }).exec(function(err,wallet){\n           if(err){  console.log(err)}\n\n\n\n             let totalYest =0;\n             let todaySales_from_account = wallet.map((item,i)=>{\n                 totalYest+=item.amount\n              })\n\n             console.log(totalYest)\n\n            return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    yesterdaysSales:totalYest,\n                    message: 'Get all wallet amount  was successful',\n                  },\n                ],\n          });\n\n      });\n\n    \n\n  }\n\n  static adminDashboardWeeklySales(request,response){\n     let oneWeekAgo = Date(new Date() - 7 * 60 * 60 * 24 * 1000);\n\n     // WalletModel.find({createdDate: {\n     //       $gte: oneWeekAgo\n      \n     //    }\n     //  }, function (err, docs) { \n\n     //     if(err){\n     //     console.log(err)\n     //   }\n\n     //   return response.status(200).json({\n     //            status: 200,\n     //            data: [\n     //              {\n     //                weeklySales:docs,\n     //                message: 'Get all wallet amount  was successful',\n     //              },\n     //            ],\n     //      });\n\n     // });\n\n     \n\n      PaymentModel.find({ \"createdDate\": { $gte: oneWeekAgo} }).exec(function(err,wallet){\n           if(err){  console.log(err)}\n\n\n\n             let totalWeek =0;\n             let todaySales_from_account = wallet.map((item,i)=>{\n                 totalWeek+=item.amount\n              })\n\n        \n\n            return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    weeklySales:totalWeek,\n                    message: 'Get all wallet amount  was successful',\n                  },\n                ],\n          });\n\n      });\n  }\n\n  static adminDashboardMonthlySales(request,response){\n     const lastMonths = new Date( (new Date().getMonth() -1));\n     PaymentModel.find({\"createdDate\": {\n           \n           $lte: lastMonths\n        }\n      }, function (err, docs) {\n\n       if(err){\n         console.log(err)\n       }\n\n       return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    lastMonth:docs,\n                    message: 'Get all wallet amount  was successful',\n                  },\n                ],\n          });\n\n\n     });\n\n\n  }\n\n  \n\n  \n\n   \n\n  static adminGetAllUsers(request,response){\n    \n  }\n\n\n\n  static adminGetAllUsersPlans(request,response){\n    \n  }\n\n\n\n  static paystackHistoryAdmin(req,res){\n    const id = new String(req.params.id);\n    WalletModel.find().then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect(process.env.DEPLOY_BACK_URL+ '/error')\n          }\n         const tranx = donor;\n         console.log(tranx +\"for the user\")\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    wallets:tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect(process.env.DEPLOY_BACK_URL+ '/error')\n      })\n  }\n\n\n  static paystackPaymentsAdmin(req,res){\n    const id = new String(req.params.id);\n    PaymentModel.find().then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect(process.env.DEPLOY_BACK_URL+ '/error')\n          }\n         const tranx = donor;\n         console.log(tranx +\"for the user\")\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    payments:tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect(process.env.DEPLOY_BACK_URL+ '/error')\n      })\n  }\n\n\n  static paystackQuotationsAdmin(req,res){\n    const id = new String(req.params.id);\n    QuoteModel.find().then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect(process.env.DEPLOY_BACK_URL+ '/error')\n          }\n         const tranx = donor;\n         console.log(tranx +\"for the user quotations\")\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    quotations:tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect(process.env.DEPLOY_BACK_URL+ '/error')\n      })\n  }\n\n\n\n\n  static updateUsersPlanStatusAdmin(request, response) {\n    \n      const  {\n                    status,\n                    payment_status,\n                    email,\n                     has_updated,\n                     plan_id,\n                     price,\n                     createdDateOfQuotation\n                  }= request.body;\n\n\n    UserPlanModel.findOne({ plan_id:request.params.id }, function (err, user) {\n\n      // Verify and save the user\n      user.status= status || user.status;\n      user.payment_status= payment_status || user.payment_status;\n      user.email= email || user.email;\n   \n      user.has_updated= has_updated || user.has_updated;\n      user.plan_id= plan_id || user.plan_id;\n      user.price = price || user.price;\n      user.createdDateOfQuotation = createdDateOfQuotation || user.createdDateOfQuotation\n      \n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n\n\n           \n\n          \n          UserPlanModel.updateMany({ plan_id: request.params.id },{\n                                            $set:{  //status:status, \n                                                    \"itineries.$[].status\":status,\n                                                  }},{ multi: true }, function(err,result){\n                                     if (err) {\n                                          console.log(err)\n                                          response.send(err);\n                                        } else {\n                                          console.log(result)\n\n\n                                          if(user.status==\"Unpaid\"){\n\n                                                 \n                                               UserService.NotificationEmail(request,response,'/views/templates/notification.html', {\n                                                       username: user.username,\n                                                       plan_id:user.plan_id,\n                                                       price: user.price,\n                                                       date: createdDateOfQuotation.substring(0,10),\n                                                       link: process.env.DEPLOY_FRONT_URL,   \n                                                      description: \"Payment is required\"\n                                                  },user.email,200)\n\n\n                                            }else{\n\n                                              UserService.NotificationEmail(request,response,'/views/templates/notification.html', {\n                                                       username: user.username,\n                                                       plan_id:user.plan_id,\n                                                       price: user.price,\n                                                       date: createdDateOfQuotation.substring(0,10),\n                                                       link: process.env.DEPLOY_FRONT_URL,   \n                                                      description: \"Payment is required\"  \n                                                      \n                                                  },user.email,200)\n\n                                              \n                                            }\n\n\n                                          \n\n\n\n                                          //return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated itineraries of this plan .' });\n                                \n                                        }\n\n          })\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          //return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n      }); \n    });\n\n\n    \n  }\n\n\n\n\n\n\n\n  static updateItineraryStatusAdmin(request, response) {\n\n     const {  status,\n              user_plan_id,\n              has_received_quote,\n                  \n                  } = request.body;\n        let has_received_payments ='No';\n        if(request.body.has_received_payments ){\n                     has_received_payments = request.body.has_received_payments\n        }\n      \n                  //multiple updates of the status for this itineraries attached to this plan\n\n    // ItineraryModel.findOne({plan_id: request.params.id}, function (err, user) {\n\n    //   if(err){\n    //     console.log(err)\n    //   }\n\n    //   // Verify and save the user\n    //   user.status= status || user.status;\n      \n    //   user.plan_id= request.params.id || user.plan_id;\n    //   user.user_plan_id= user_plan_id || user.user_plan_id;\n      \n    //   user.save(function (err,user) {\n    //     if (err) { return response.status(500).send({ msg: err.message }); }\n    //     console.log(user + 'hello')\n    //       //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n\n\n          ItineraryModel.updateMany({ plan_id: user_plan_id },{\n              $set:{  status:status, \n                      user_plan_id: user_plan_id,\n                       has_received_quote:has_received_quote,\n                        has_received_payments: has_received_payments\n                      }},{ multi: true }, function(err,result){\n                         if (err) {\n                              console.log(err)\n                              response.send(err);\n                            } else {\n\n\n                               \n                              // console.log(result)\n                              return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated itineraries of this plan .' });\n                    \n                            }\n\n               })     \n\n          //return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n      // }); \n    // });\n\n\n\n\n   \n  }\n\n\n\n\n//drivers\n\nstatic driverConfirmBooking(request,response){\n   return response.sendFile(path.join(__dirname + '/driver_confirm.html'));\n}\n\n\n\nstatic showUserInfo(request,response){\n\n  UserModel.find({email: request.params.id})\n      .then(data => {\n        console.log(\"specific profile:\" + data)\n        \n       \n        const userInfo = data; //related\n        if (userInfo.length <= 0) {\n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                  {\n                    userInfo,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n                });\n        }\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    userInfo,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n    \n\n}\n\n\nstatic getTrails(request,response){\n\n\n  AuditNotificationModel.find({})\n      .then(data => {\n        console.log(\"specific profile:\" + data)\n        \n       \n        const audit = data; //related\n        if (audit.length <= 0) {\n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                  {\n                    audit,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n                });\n\n        }\n      \n\n\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    audit,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>{\n              console.log(err +\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\")\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              });\n            });\n}\n\n\nstatic createTrail(request,response){\n\n\n  let { date,\n           admin,\n           user,\n           module_name,\n           status,\n           message_type,\n           logMessage,\n           avatar,\n    } = request.body;\n\n    \n\n    const NewAuditTrail = new AuditNotificationModel({ \n      id: new AutoincrementId(AuditNotificationModel).counter(), \n      date,\n           admin,\n           user,\n           module_name,\n           status,\n           message_type,\n           logMessage,\n           avatar\n       });\n\n\n     NewAuditTrail.save()\n      .then(data => {\n        const user = data;\n        return response.status(201).json({\n                status: 201,\n                data: [\n                  {\n                    user,\n                    message: 'AUDIT SUCCESSFULLY CREATED',\n                  },\n                ],\n          });\n        \n\n        \n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n}\n\n\n\nstatic revokecar(request,response){\n\n  let { \n\n    status,\n  \n        date_created,\n        retrievalComments,\n        vehiclePlateNo,\n        vehicleName,\n        vehicleID,\n        vehicle,\n        partner,\n        partnerID,\n        partnerName,\n        partnerEmail,\n        retrievalDate,\n        hasBeenRevoked,\n    } = request.body;\n\n    \n\n    const RetrievalTrail = new Retrieval({ \n      id: new AutoincrementId(Retrieval).counter(), \n      \n    status,\n  \n        date_created,\n        retrievalComments,\n        vehiclePlateNo,\n        vehicleName,\n        vehicleID,\n        vehicle,\n        partner,\n        partnerID,\n        partnerName,\n        partnerEmail,\n        retrievalDate,\n        hasBeenRevoked,\n       });\n\n  \n     RetrievalTrail.save()\n      .then(data => {\n        const user = data;\n        return response.status(201).json({\n                status: 201,\n                data: [\n                  {\n                    user,\n                    message: 'AUDIT SUCCESSFULLY CREATED',\n                  },\n                ],\n          });\n        \n\n        \n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n}\n\n\n\nstatic revokecarstatus(request,response){\n\n  let { \n\n        car_status,\n        hasBeenRevoked,\n    } = request.body;\n\n    \n\n  \n\n\n    CarsModel.findOne({ _id:  request.params.id }, function (err, car) {\n\n      if (!car) return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      \n      // Verify and save the user\n      car.car_status= car_status || car.car_status;\n      car.hasBeenRevoked= true || car.hasBeenRevoked;\n      \n      car.save(function (err,user) {\n        if (err) { \n          console.log(err)\n          return response.status(500).send({ msg: err.message });\n        }\n\n        \n        \n        return response.status(200).send({ status: 200,success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n \n      \n    \n\n}\n\n\nstatic getrevokecars(request,response){\n  Retrieval.find({})\n      .then(data => {\n        \n       \n        const carsNotInUse = data; //related\n        if (carsNotInUse.length <= 0) {\n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                  {\n                    carsNotInUse,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n                });\n\n        }\n      \n\n\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    carsNotInUse,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>{\n              \n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              });\n            });\n}\n\n\n\n  \n  \n}\n"],"file":"user_service.js"}