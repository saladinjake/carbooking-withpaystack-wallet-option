{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/services/user_service.js"],"names":["dotenv","config","csv","require","uuidv4","sendgridTransport","request","initializePayment","verifyPayment","MongooseDatabase","getInstance","Database","readHTMLFile","path","callback","fs","readFile","encoding","err","html","UserService","req","res","review","UserPlanModel","username","body","rating","save","then","result","User","findOne","user","reviews","push","json","message","error","status","UserModel","password","email","params","response","firstname","lastname","phoneNumber","user_type","console","log","TokenGenerator","hashPassword","trim","Newuser","id","AutoincrementId","counter","phone_number","is_admin","data","emailT","crypto","randomBytes","toString","emailtoken","EmailTokenMakerForSignUp","_userId","email_confirm_token","smtpConfig","host","port","service","secure","auth","pass","transporter","nodemailer","createTransport","api_user","process","env","SENDGRID_USERNAME","api_key","SENDGRID_PASSWORD","mailOptions","from","to","subject","__dirname","template","handlebars","compile","replacements","link","headers","htmlToSend","sendMail","token","generateToken","ErrorHandler","errors","validationError","isVerified","checkIfPasswordMatch","_id","isAdmin","profile","avatar","plan","plan_name","balance","notification_count","roles","test_certificate","account_num","accountNumber","send","type","msg","sendFile","join","hashedStringToSend","Storage","setItem","ForgotModelToken","ForgotPasswordToken","email_to_reset","confirmPass","confirmPassword","getItem","find","Number","userInfo","length","old_balance","success","passwordConfirm","certificate","plan_id","itineraries","user_id","carsSelected","planName","price","planCategoryName","no_hours","NewUserPlan","plan_category_name","cars_on_plan","itineries","duration","plan_category","start_location","destination","drive_option","start_time","travel_option","drivingschool","NewItinerary","ItineraryModel","redId","updateOne","redflagStatus","certificate_id","end_time","cars_id","IndividualPlanModel","individualPlans","coperatePlanModel","coperatePlan","JSON","strigify","redflags","stringify","removeOne","deletedRedFlag","itinerary","RedFlagModel","plans","QuoteModel","String","quote","oldBalance","debit_amount","bal","amount","has_updated","userItins","updateMany","$set","multi","userPlanInfo","fullname","form","metadata","full_name","amout","redirect","parse","url","authorization_url","query","reference","trxref","ref","customer","phone","newDonor","donor","WalletModel","convertedBal","e","quotation_id","PaymentModel","findById","tranx","remove","deletedUser","NotificationModel","description","NewNotificationModel","offline","detail","users","boolVerification","passwordComfirm","is_verified","admins","RolesAndPreviledgesModel","for_admins","usergroup_set","view_bookings","view_quotations","view_transactions","view_payments","view_drivers","view_sos","view_partners","view_package","view_cars","view_tickets","view_faqs","view_users","view_admins","view_settings","manage_bookings","manage_quotations","manage_transactions","manage_payments","manage_drivers","manage_sos","manage_partners","manage_package","manage_cars","manage_tickets","manage_faqs","manage_users","manage_admins","manage_settings","is_active","drivers","PartnersModel","partners","address","totalCars","firstName","lastName","userName","businessName","corporatePlans","delete_type","plan_categories","max_car","car_max","InspectionModel","inspections","createdDate","time","car_id","DriveTestModel","testDrive","test_center","test_center_address","previledges","previledges_description","previledges_info","usergroups_old","usergroup","for_users","field","value","SOSModel","redFlag","InterventionsModel","intervention","category","assigned_to","comment","NewCars","Cars","responses","question","answer","FAQModel","faqs","faq","CarsModel","carsAvailable","cars","car_type","car_model","car_year","assigned_driver_name","assigned_driver_email","assigned_driver_phone","partner_id","inspection_detail","plate_number","license","assigned_driver_id","images","color","model","dataValues","createReadStream","pipe","on","row","carInfo","GmailSettingModel","googleSettings","FacebookSettingModel","facebookSettings","PaystackSettingModel","paystackSettings","SendgridEmailSettingModel","sendgridSettings","AwsS3Model","awsSettings","InstagramSettingModel","instagramSettings","test_secret_key","test_public_key","live_public_key","live_secret_key","api_mode","settings","manageBookings","createdDateOfQuotation","manageBookingsDetail","manageManualBooking","usersPlan","pickup_time","certificate_date","now","Date","today","getFullYear","getMonth","getDate","created_at","$gte","exec","wallet","totalToday","todaySales_from_account","map","item","i","todaySales","yesterdayStart","setDate","setHours","yesterdayEnd","$gt","totalYest","yesterdaysSales","oneWeekAgo","totalWeek","weeklySales","lastMonths","$lte","docs","lastMonth","wallets","payments","quotations","payment_status","date","substring","user_plan_id"],"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","sourcesContent":["/* eslint-disable prefer-const */\n//import mongoose from 'mongoose';\nimport dotenv from 'dotenv';\ndotenv.config();\nimport Database from '../models/db';\n\nconst csv = require('csv-parser');\nconst uuidv4 = require('uuid/v4');\n\n\nimport {passport ,express} from '../App'; \nimport UserPlanModel from '../models/UserPlan.model';\nimport PlanModel from \"../models/Plan.model\";\nimport ItineraryModel from '../models/Itinerary.model';\nimport IndividualPlanModel from '../models/IndividualPlan.model';\nimport NotificationModel from '../models/Notification.model'\nimport FAQModel from \"../models/FAQ.model\";\nimport coperatePlanModel from '../models/CoperatePlan.model';\nimport { TokenGenerator } from '../helpers/token_generator';\nimport { ErrorHandler } from '../helpers/error_handler';\nimport { ResponseHandler } from '../helpers/response_handler';\nimport UserModel from '../models/User.model.js';\nimport PartnersModel from \"../models/Partners.model.js\";\n//import DriversModel from \"../models/Driver.model.js\";\nimport WalletModel from '../models/Wallet.model.js';\nimport PaymentModel from \"../models/Payments.model.js\";\nimport QuotationsModel from \"../models/Quotation.model.js\"\nimport QuoteModel from \"../models/Quote.model.js\";\nimport AutoincrementId from '../helpers/autoincrement_mongo.js';\nimport EmailTokenMakerForSignUp from '../models/Token.model.js';\nimport ForgotPasswordToken from '../models/ForgotPassword.model.js';\nimport CarsModel from \"../models/Cars.model.js\";\nimport SOSModel from \"../models/SOS.model\";\nimport  InterventionsModel from '../models/Feedback.model';\nimport SendgridEmailSettingModel from \"../models/SendgridEmailSettings.model\";\nimport PaystackSettingModel from \"../models/PaystackSettings.model\";\nimport InstagramSettingModel from \"../models/InstagramSettings.model\";\nimport FacebookSettingModel from \"../models/FacebookSettings.model\";\nimport AwsS3Model from \"../models/AWS3BucketSettings.model\";\nimport GmailSettingModel from \"../models/GmailSettings.model\";\n\nimport InspectionModel from \"../models/Inspection.model\";\nimport DriveTestModel from  \"../models/DriveTest.model\";\nimport RolesAndPreviledgesModel from '../models/RolesAndPreviledges.model'\n\nimport nodemailer from 'nodemailer';\nimport crypto from 'crypto';\nimport path from 'path';\nconst sendgridTransport = require('nodemailer-sendgrid-transport');\n//import SocialAuthService from './social_auth_service';\nimport Storage from '../helpers/storage';\nimport multer from 'multer';\nimport Mixins from '../helpers/mixins';\nimport fs from 'fs';\nimport handlebars from 'handlebars';\n\n/*pAy stack*/\nimport request from 'request';\nimport _ from 'lodash';\n\n// import carInfo  from \"../migrations/cars_info\";\n\n\n//other services\nimport CarsService  from \"./cars_services\";\nimport FaqService  from \"./faqs_service\";\nimport  FeedbackService  from './feedback_service';\nimport  SOSService  from \"./sos_service\";\n\nconst {initializePayment, verifyPayment} = require('../config/paystack')(request);\n\n\nconst MongooseDatabase =  Database.getInstance() || new  Database();\n\n// const MongooseDatabase = Database.getInstance() || new Database();\n\n\n\nvar readHTMLFile = function(path, callback) {\n    fs.readFile(path, {encoding: 'utf-8'}, function (err, html) {\n        if (err) {\n            throw err;\n            callback(err);\n        }\n        else {\n            callback(null, html);\n        }\n    });\n};\n\n\nexport class UserService {\n  static signup(request, response) {\n    // console.log(request.body)\n    let { firstname, \n          lastname,  \n          username, \n          email, \n          phoneNumber,\n          user_type, \n          password \n    } = request.body;\n\n    console.log(password)\n    password = TokenGenerator.hashPassword(password.trim());\n\n    const Newuser = new UserModel({ \n      id: new AutoincrementId(UserModel).counter(), \n      firstname, \n      lastname, \n      user_type, \n      username, \n      email, \n      phone_number: phoneNumber, \n      password,\n      is_admin: false,\n      //accountNumber: uuidv4()\n       });\n\n\n     Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n        let emailT = crypto.randomBytes(16).toString('hex');\n        // Create a verification token for this user\n        var emailtoken = new EmailTokenMakerForSignUp({ _userId: user.id, email_confirm_token: emailT });\n        \n\n        \n        // Save the verification token\n        emailtoken.save(function (err) {\n            if (err) { \n              return console.log(err.message );\n             }\n            console.log(emailtoken.email_confirm_token, emailtoken._userId)\n            var smtpConfig = {\n              host: 'smtp.gmail.com',\n              port: 587,\n              service:'gmail',\n              secure: true, // use SSL, \n                            // you can try with TLS, but port is then 587\n              auth: {\n                user:  'juwavictor@gmail.com',//process.env.APPLICATION_GMAIL, // Your email id\n                pass:  'saladin123!@jhjhj#'// process.env.APPLICATION_GMAIL_PASSWORD\n              }\n            };\n            // Send the email\n            // var transporter = nodemailer.createTransport(\n            //   //{ service: 'Sendgrid', auth: { user: process.env.SENDGRID_USERNAME, pass: process.env.SENDGRID_PASSWORD } }\n            //   smtpConfig\n            //   );\n\n            // Configure Nodemailer SendGrid Transporter\n            const transporter = nodemailer.createTransport(\n              sendgridTransport({\n                auth: {\n                  api_user: process.env.SENDGRID_USERNAME,    // SG username\n                  api_key: process.env.SENDGRID_PASSWORD, // SG password\n                },\n              })\n            );\n\n            // var transporter = nodemailer.createTransport({\n            //    service: 'SendGrid', \n            //     secure : false, // true for 465, false for other ports\n            //    auth: { \n            //     user: process.env.SENDGRID_USERNAME,\n            //      pass: process.env.SENDGRID_PASSWORD \n            //    } ,\n            //    // tls: {rejectUnauthorized: false}\n            // });\n            \n            var mailOptions = { \n              from:  'juwavictor@gmail.com', //process.env.APPLICATION_GMAIL, \n              to: user.email, \n              subject: 'Account Verification Token', \n              // text: 'Hello,\\n\\n' + 'Please verify your account by clicking the link: \\nhttp:\\/\\/' + request.headers.host + '\\/api/v1/auth/confirmation\\/' + emailtoken.email_confirm_token + '.\\n' \n              //html: ``,\n\n            };\n\n            console.log(__dirname + '/views/templates/signup-verification.html')\n\n            readHTMLFile(__dirname + '/views/templates/signup-verification.html', function(err, html) {\n                var template = handlebars.compile(html);\n                var replacements = {\n                     username: user.firstname,\n                     link: 'http:\\/\\/' + request.headers.host + '\\/api/v1/auth/confirmation\\/' + emailtoken.email_confirm_token \n                };\n                var htmlToSend = template(replacements);\n                \n                 mailOptions.html = htmlToSend;\n                transporter.sendMail(mailOptions, function (error, response) {\n                    if (error) {\n                        console.log(error+\"eroor here\");\n                        //callback(error);\n                    }\n                });\n            });\n\n\n            // transporter.sendMail(mailOptions, function (err) {\n            //     if (err) { //return response.status(500).send({ msg: err.message }); \n            //        //console.log(err.message)\n            //      }\n            //     //res.status(200).send('A verification email has been sent to ' + user.email + '.');\n            //     //console.log(\"verification email sent\")\n            // });\n        });\n\n\n        const token = TokenGenerator.generateToken(result);\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              token,\n              user,\n            },\n          ],\n          message: 'User created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static login(request, response) {\n    const { email, password } = request.body;\n    UserModel.findOne({email: email})\n      .then(data => {\n        const user = data;\n        console.log(user.isVerified)\n\n\n        if (!user) {\n          return response.status(422).json({\n            status: 422,\n            error: 'User does not exists',\n          });\n\n          \n        }\n\n\n\n        if(!user.isVerified){\n          return response.status(422).json({\n            status: 422,\n            error: `<h6>Email verification step is needed. please check your email for a verification link or click the link to resend you an email verification</h6> \n\n            <a href=\"http://localhost:12000/api/v1/auth/resend/${email}\">Resend </a>`,\n          });\n        }\n        // console.log(email);\n        // console.log(password);\n        if (!TokenGenerator.checkIfPasswordMatch(password, user.password)) {\n          return response.status(422).json({\n            status: 422,\n            error: 'Invalid login details. Email or password is wrong',\n          });\n        }\n\n        //request.session.user = user;\n\n\n\n        const result = {\n          id: user.id,\n          _id: user._id,\n          email: user.email,\n          isAdmin: user.is_admin,\n          isVerified:user.isVerified,\n          firstname: user.firstname,\n          username: user.username,\n           profile: user.avatar,\n          plan: user.plan_name,\n          balance: user.balance,\n          notification_count: user.notification_count,\n          user_type: user.user_type,\n          username:user.username,\n          phoneNumber: user.phone_number,\n          roles: user.roles,\n          test_certificate: user.test_certificate\n\n        };\n        const token = TokenGenerator.generateToken(result);\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              token,\n              user: {\n                id: user.id,\n                 _id: user._id,\n                email: user.email,\n                isAdmin: user.is_admin,\n                isVerified:user.isVerified,\n                firstname: user.firstname,\n                username: user.username,\n                profile: user.avatar,\n                plan_name: user.plan_name,\n                balance: user.balance,\n                notification_count: user.notification_count,\n                 user_type: user.user_type,\n                 account_num: user.accountNumber,\n                 username:user.username,\n          phoneNumber: user.phone_number,\n          roles: user.roles,\n           test_certificate: user.test_certificate\n              },\n            },\n          ],\n          message: 'Successfully signed in',\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static logout(request,response){\n//     router.post('/logout', function(req, res) {\n//   logout.logoutUser(req, res, function(err, data) {\n//     if (err) {\n//       res.json({ 'error': data.error, 'message': data.message });\n//     } else {\n//       res.json({ 'success': data.success, 'message': data.message });\n//     }\n//   });\n// });\n  }\n\n  static confirmationPost (req, res) {\n   \n\n    // Find a matching token\n    EmailTokenMakerForSignUp.findOne({ email_confirm_token:  req.params.id }, function (err, token) {\n       \n        if (!token) return res.status(400).send({ type: 'not-verified', msg: 'We were unable to find a valid token. Your token my have expired.' });\n\n        // If we found a token, find a matching user email: req.body.email\n        UserModel.findOne({ id: token._userId  }, function (err, user) {\n            if (!user) {\n              //return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\n              return  res.sendFile(path.join(__dirname + '../../../../../UI/user/page-503.html'));\n            }\n            if (user.isVerified) {\n              //return res.status(201).send({ type: 'already-verified', msg: 'This user has already been verified.' });\n              return  res.sendFile(path.join(__dirname + '/views/templates/already-verified.html'));\n            \n\n            }\n\n            // Verify and save the user\n            user.isVerified = true;\n            user.save(function (err) {\n                if (err) { return res.status(500).send({ msg: err.message }); }\n                //res.status(200).send(\"The account has been verified. Please wait...\");\n               \n                 return  res.sendFile(path.join(__dirname + '/views/templates/proceed-to-login.html'));\n               \n\n            });\n\n\n            \n        });\n    });\n}\n\n\n/**\n* POST /resend\n*/\nstatic resendTokenPost (req, res) {\n    UserModel.findOne({ email: req.params.id }, function (err, user) {\n        if (!user) return res.status(400).send({ msg: 'We were unable to find a user with that email.' });\n        \n        if (user.isVerified) return  res.sendFile(path.join(__dirname + '/views/already-verified.html'));\n        \n\n        // Create a verification token, save it, and send email\n        var token = new EmailTokenMakerForSignUp({ _userId: user.id, email_confirm_token: crypto.randomBytes(16).toString('hex') });\n        // Save the token\n        token.save(function (err) {\n            if (err) { return res.status(500).send({ msg: err.message }); }\n\n            // Send the email\n           \n\n                        const transporter = nodemailer.createTransport(\n              sendgridTransport({\n                auth: {\n                  api_user: process.env.SENDGRID_USERNAME,    // SG username\n                  api_key: process.env.SENDGRID_PASSWORD, // SG password\n                },\n              })\n            );\n\n            // var transporter = nodemailer.createTransport({\n            //    service: 'SendGrid', \n            //     secure : false, // true for 465, false for other ports\n            //    auth: { \n            //     user: process.env.SENDGRID_USERNAME,\n            //      pass: process.env.SENDGRID_PASSWORD \n            //    } ,\n            //    // tls: {rejectUnauthorized: false}\n            // });\n            \n            var mailOptions = { \n              from:  'juwavictor@gmail.com', //process.env.APPLICATION_GMAIL, \n              to: user.email, \n              subject: 'Account Verification Token', \n              // text: 'Hello,\\n\\n' + 'Please verify your account by clicking the link: \\nhttp:\\/\\/' + request.headers.host + '\\/api/v1/auth/confirmation\\/' + emailtoken.email_confirm_token + '.\\n' \n              //html: ``,\n\n            };\n\n            console.log(__dirname + '/templates/signup-verification.html')\n\n            readHTMLFile(__dirname + '/views/templates/signup-verification.html', function(err, html) {\n                var template = handlebars.compile(html);\n                var replacements = {\n                     username: user.firstname,\n                     link: 'http:\\/\\/' + req.headers.host + '\\/api/v1/auth/confirmation\\/' + token.email_confirm_token \n                };\n                var htmlToSend = template(replacements);\n                \n                 mailOptions.html = htmlToSend;\n                transporter.sendMail(mailOptions, function (error, response) {\n                    if (error) {\n                        console.log(error+\"eroor here\");\n                        //callback(error);\n                    }\n                   // return res.status(200).send({ msg: \"sent email request\" });\n                });\n            });\n\n            \n        });\n\n    });\n}\n\n\nstatic passwordForgot(req, res){\n\n    let email = req.body.email;\n    UserModel.findOne({ email: email }, function (err, user) {\n        if (!user) return res.status(400).send({ msg: 'We were unable to find a user with that email.' });\n        let hashedStringToSend = crypto.randomBytes(16).toString('hex');\n\n        Storage.setItem('hasher', hashedStringToSend);\n            // Create a verification token for this user\n        var ForgotModelToken = new ForgotPasswordToken({ \n             _userId: user.id, \n             email_confirm_token: hashedStringToSend,\n             email_to_reset: email \n        });\n            \n\n            \n            // Save the verification token\n        ForgotModelToken.save(function (err) {\n            if (err) { \n              return res.status(500).send({ msg: err.message });\n            }\n            // send email to the given users email for password reset confirmation\n            var smtpConfig = {\n                      host: 'smtp.gmail.com',\n                      port: 587,\n                      service:'gmail',\n                      //secure: true, // use SSL, \n                                    // you can try with TLS, but port is then 587\n                      auth: {\n                        user: 'juwavictor@gmail.com', // Your email id\n                        pass: 'saladin123!@#' // Your password\n                      }\n            };\n           \n                    // Send the email\n           var transporter = nodemailer.createTransport({\n               service: 'SendGrid', \n               auth: { \n                user: process.env.SENDGRID_USERNAME,\n                 pass: process.env.SENDGRID_PASSWORD \n               } \n            });\n            \n            var mailOptions = { \n               from:  'juwavictor@gmail.com', //process.env.APPLICATION_GMAIL, \n               to: user.email, \n               subject: 'Account Verification Token', \n            };\n\n            readHTMLFile(__dirname + '/views/templates/reset-password.html', function(err, html) {\n                var template = handlebars.compile(html);\n                var replacements = {\n                     username: user.firstname,\n                     link: 'http:\\/\\/' + req.headers.host + '\\/api/v1/auth/resetMyPassword\\/' + hashedStringToSend \n                };\n                var htmlToSend = template(replacements);\n                \n                 mailOptions.html = htmlToSend;\n                transporter.sendMail(mailOptions, function (error, response) {\n                    if (err) { return res.status(500).send({ msg: err.message }); }\n                    return res.status(200).send({ msg: \"successfully sent you a password reset link\", status:'ok' }); \n                });\n            });\n\n        });\n\n    });\n\n  }\n\n\n  static confirmResetPassword (req, res) {\n     return  res.sendFile(path.join(__dirname + '/pw-reset.html'));\n            \n  }\n\n  static changePasswordTrigger(req,res){\n    let password = req.body.password;\n    let confirmPass = req.body.confirmPassword;\n    if(password!= confirmPass){\n      console.log('err here1')\n       return res.status(400).send({ msg: 'password do not match.' });\n    }\n    // console.log(req.params.id)\n   \n    // Find a matching token\n    ForgotPasswordToken.findOne({  email_confirm_token:  Storage.getItem('hasher') }, function (err, token) {\n         console.log(token)\n         console.log(Storage.getItem('hasher'))\n        if (!token) { \n          console.log('error here 2');\n          console.log(err)\n          return res.status(400).send({ type: 'not-verified', msg: 'We were unable to find a valid token. Your token my have expired.' });\n\n        }\n\n        // If we found a token, find a matching user email: req.body.email\n        UserModel.findOne({ email: token.email_to_reset  }, function (err, user) {\n            if (!user) return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\n            if (user.email != token.email_to_reset) return res.status(400).send({ type: 'No Reset Token', msg: 'This user reset token was not set.' });\n\n            // Verify and save the user\n            user.password = TokenGenerator.hashPassword(password.trim());\n            user.save(function (err) {\n                if (err) { return res.status(500).send({ msg: err.message }); }\n                return res.status(200).send({ msg:\"The account password has been reset. Please wait...\" , status:'ok'});\n                //return  res.sendFile(path.join(__dirname + '/pw-reset-success.html'));\n            }); \n        });\n    });\n  }\n\n \n  \n  static showProfile(request,response){//profile-admin-rights\n\n    UserModel.find({id: Number(request.params.id)})\n      .then(data => {\n        console.log(\"specific profile:\" + data)\n        \n       \n        const userInfo = data; //related\n        if (userInfo.length <= 0) {\n                return response.status(404).json({\n                  status: 404,\n                  error: 'The user with the given id does not exists',\n                });\n        }\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    userInfo,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n    \n    \n  }\n\n\n  static showProfileRights(request,response){//profile-admin-rights\n\n    UserModel.find({_id: request.params.id})\n      .then(data => {\n        console.log(\"specific profile:\" + data)\n        \n       \n        const userInfo = data; //related\n        if (userInfo.length <= 0) {\n                return response.status(404).json({\n                  status: 404,\n                  error: 'The user with the given id does not exists',\n                });\n        }\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    userInfo,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n    \n    \n  }\n\n\n\n  static getUserPreviledges(request,response){\n\n    UserModel.find({email: request.params.id})\n      .then(data => {\n        console.log(\"specific profile:\" + data)\n        \n       \n        const userInfo = data; //related\n        if (userInfo.length <= 0) {\n                return response.status(404).json({\n                  status: 404,\n                  error: 'The user with the given id does not exists',\n                });\n\n        }\n       //  let previledges = {\n       //      view_payments:userInfo[0].view_payments,\n       //  view_transactions:userInfo[0].view_transactions,\n       \n       //  view_quotations:userInfo[0].view_quotations,\n       //  view_cars:userInfo[0].view_cars,\n       //  view_drivers:userInfo[0].view_drivers,\n       // view_drivers:userInfo[0].view_drivers,\n       //  view_sos:userInfo[0].view_sos,\n       //  view_package:userInfo[0].view_package,\n       //  view_bookings:userInfo[0].view_bookings,\n       //  };\n\n\n\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    userInfo,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n\n  }\n\n\n  static setOldBalance(request,response){\n       const {\n      old_balance\n    } = request.body;\n\n\n\n    \n\n    \n\n\n    UserModel.findOne({ id:  request.params.id }, function (err, user) {\n\n      if (!user) return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n     \n      user.old_balance = old_balance|| user.old_balance;\n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  static updateProfile(request,response){\n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      passwordConfirm,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n    } = request.body;\n\n\n\n    if(password.length && passwordConfirm.length){\n      if(password!= passwordConfirm){\n        console.log('err here1')\n        return res.status(400).send({ msg: 'password do not match.' });\n      }\n    }\n\n    \n\n\n    UserModel.findOne({ id:  request.params.id }, function (err, user) {\n\n      if (!user) return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      if(password==\"unchanged\" && passwordConfirm==\"unchanged\"){\n       user.password= user.password;\n       console.log(\"old:\" + user.password)\n      } else{\n        user.password= TokenGenerator.hashPassword(password.trim());\n        console.log(\"new pass: \"+ user.password)\n      }\n\n     \n      console.log(avatar)\n      // Verify and save the user\n      user.avatar= avatar || user.avatar;\n      user.username= username || user.username;\n      user.email= email || user.email;\n   \n      user.user_type= user_type|| user.user_type;\n      user.firstname= firstname|| user.firstname;\n      user.lastname = lastname || user.lastname;\n      user.phone_number = phoneNumber|| user.phone_number;\n      user.test_certificate = certificate|| user.test_certificate;\n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n\n  // static loginWithTwitter(request,response){\n  //   //return UserService.loginWithTwitter(request,response)\n  // }\n\n  // static loginWithFaceBook(request,response){\n  //  //return UserService.loginWithFaceBook(request,response)\n  // }\n\n  // static loginWithGoogle(request,response){\n  //  //return UserService.loginWithGoogle(request,response)\n  // }\n\n  \n  // static initializeGoogleLogin(request,response){\n  //   return passport.authenticate('google', { scope : ['profile', 'email'] });\n  // }\n\n  \n  static addNewPlans(request,response){\n      let {\n       plan_id, \n       itineraries,\n      user_id,\n      carsSelected,\n      planName,\n      price,\n      planCategoryName,\n      no_hours,\n      username,\n      email\n    } = request.body;\n\n\n    \n     const NewUserPlan = new UserPlanModel({ \n      id: new AutoincrementId(UserPlanModel).counter(), \n      user_id,\n      price,\n      plan_category_name:planCategoryName,\n      plan_name:planName,\n      cars_on_plan: carsSelected,\n      itineries: itineraries,\n      duration:no_hours,\n      no_hours:no_hours,\n      username: username,\n      email: email,\n      plan_id\n     });\n\n\n     NewUserPlan.save()\n      .then(data => {\n        const user = data;\n        console.log(user + \"plans\")\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              user\n            },\n          ],\n          message: 'User Plan created successfully',\n        });\n      \n      })\n      .catch(err => {\n        console.log(err+ 'error here user plan')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n      // UserService.saveUsersItinerary(request,response);\n  }\n\n\n\n\n\n\n  static saveUsersItinerary(request, response) {\n    // console.log(request.body)\n\n  \n    let {\n      plan_category,\n      start_location,\n      destination,\n      drive_option,\n      no_hours,\n    \n      plan_name,\n      status,\n      start_time,\n      travel_option,\n      drivingschool,\n      username,\n      email,\n      phone_number,\n      plan_id\n    } = request.body;\n\n\n   \n\n    \n    const NewItinerary = new ItineraryModel({ \n      id: new AutoincrementId(ItineraryModel).counter(), \n       plan_category,\n      start_location,\n      destination,\n      travel_option:drive_option,\n      no_hours,\n      travel_option,\n      plan_name,\n      status,\n      start_time,\n      travel_option,\n      drivingschool,\n      user_id:request.user.id,\n      username,\n      email,\n      phone_number,\n      plan_id\n\n       \n     });\n\n     NewItinerary.save()\n      .then(data => {\n        const user = data;\n        const result = {\n           plan_category: user.plan_category,\n      start_location: user.start_location,\n      destination: user.destination,\n      drive_option:user.drive_option,\n      no_hours:user.no_hours,\n        travel_option:user.travel_option,\n      plan_name,\n      status,\n      start_time,\n      drivingschool,\n      username: user.username,\n      email:user.email\n           // cars_id: user.cars_id\n        };\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              result\n            },\n          ],\n          message: 'User Itinerary created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n    static editViewUsersItinerary(request,response){\n\n    ItineraryModel.find({user_id: Number(request.params.id)})\n      .then(data => {\n        console.log(\"specific:\" + data)\n        \n       \n        const userInfo = data; //related\n        if (userInfo.length <= 0) {\n                return response.status(404).json({\n                  status: 404,\n                  error: 'The user with the given id does not exists',\n                });\n        }\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    userInfo,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n    \n    \n  }\n\n\n  static updateUsersPlanItineraryStatus(request, response) {\n    UserPlanModel.find({id: Number(request.params.id)})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status } = request.body;\n    \n\n\n            UserPlanModel.updateOne({id: Number(request.params.id) }, {\n                    \n                      status: status\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static updateItineraryStatus(request, response) {\n    ItineraryModel.find({id: Number(request.params.id)})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status } = request.body;\n     \n\n            ItineraryModel.updateOne({id: Number(request.params.id) }, {\n                    \n                      status: status\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n\n\n  static updateUserItineraryStatus(request, response) {\n    ItineraryModel.find({id: Number(request.params.id)})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status } = request.body;\n     \n\n            ItineraryModel.updateOne({id: Number(request.params.id) }, {\n                    \n                      status: status\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n\n\n\nstatic updateUsersItinerary(request,response){\n    const {\n      certificate_id,\n       start_location ,\n       destination ,\n       no_hours,\n       start_time ,\n       end_time , \n       drive_option,\n       user_id,\n       travel_option,\n       cars_id\n    } = request.body;\n\n\n    \n    ItineraryModel.findOne({ user_id:  request.params.id }, function (err, user) {\n\n      if (!user) return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      console.log(avatar)\n      // Verify and save the user\n      \n      user.certificate_id= certificate_id;\n      user.start_location= start_location;\n      user.destination= destination;\n      user.no_hours= no_hours;\n      user.start_time= start_time;\n      user.end_time= end_time;\n      user.drive_option = drive_option;\n      user.user_id = user_id;\n      user.travel_option = travel_option;\n      user.cars_id = cars_id;\n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'successfully updated itinerary.' });\n      \n               \n\n      }); \n    });\n  }\n\n\n  static individualPlans(request,response){\n       IndividualPlanModel.find()\n    \n      .then(data => {\n        const individualPlans = data;\n        console.log(data)\n        if (individualPlans.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'No Plans for IndividualPlan module has been recorded by admin',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              individualPlans,\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static coperatePlans(request,response){\n       coperatePlanModel.find()\n    \n      .then(data => {\n        const coperatePlan = data;\n        console.log(data)\n        if (coperatePlan.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'No Plans for CoperatePlan module has been recorded by admin',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              coperatePlan,\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n    static updateItem(request, response) {\n  \n\n  const  {\n      certificate_id,\n       start_location ,\n       destination ,\n       no_hours,\n       start_time ,\n       end_time , \n       drive_option,\n       user_id,\n       travel_option,\n       \n    } = request.body;\n\n\n\n    \n       ItineraryModel.findOne({ id:  request.params.id }, function (err, user) {\n\n        if (!user){\n          console.log(JSON.strigify(err))\n         return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n\n       }\n        \n     \n      // Verify and save the user\n\n      \n       user.certificate_id= certificate_id;\n      user.start_location= start_location;\n      user.destination= destination;\n      user.no_hours= no_hours;\n      user.start_time= start_time;\n      user.end_time= end_time;\n      user.drive_option = drive_option;\n      user.user_id = user_id;\n      user.travel_option = travel_option;\n      \n      user.save(function (err,user) {\n        if (err) { \n           console.log(err)\n          return response.status(500).send({ msg: err.message });\n         }\n          console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n      return response.status(200).send({success:'ok', msg: 'successfully updated itinerary.' });\n      \n               \n\n      });\n      \n       \n    });\n  }\n\n\n  static deleteItem(request, response) {\n    UserPlanModel.find({id: request.params.id})\n      .then(data => {\n        const redflags = data;\n\n        if ( redflags.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The red-flag with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The red-flag with the given id does not exists',\n          });\n        }\n        UserPlanModel.removeOne({id: request.params.id})\n          .then(data => {\n            const deletedRedFlag = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedRedFlag._id,\n                  message: 'red-flag record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            }),\n          );\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n  static getAllItineries(request, response) {\n\n    ItineraryModel.find()\n    \n      .then(data => {\n        const itinerary = data;\n        console.log(data+ \"either empty itins\")\n        if (itinerary.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no itinerary record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              itinerary,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n    \n  }\n\n\n  static getUsersItinerary(request,response){\n    ItineraryModel.find({ user_id: Number(request.params.id) })\n    \n      .then(data => {\n        const itinerary = data;\n        if (itinerary.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no itinerary record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              itinerary,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static updateRedFlagStatus(request, response) {\n   RedFlagModel.find({id: Number(request.params.id)})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status } = request.body;\n     if ( Number(request.user.id) )  {\n\n\n            RedFlagModel.updateOne({id: Number(request.params.id) }, {\n                    \n                      status: status\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n    } else {\n          return response.status(401).json({\n            status: 401,\n            error: 'You must signup or login to access this route',\n          });\n        }\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n\n\n  static getAllUsersPlans(request,response){\n    UserPlanModel.find({ user_id: Number(request.params.id) })\n    \n      .then(data => {\n        const plans = data;\n        if (plans.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no plans record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              plans,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getAllUsersQuotations(request,response){\n    \n    QuoteModel.find({ plan_id : new String(request.params.id) })\n    \n      .then(data => {\n        const quote = data;\n        if (quote.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no plans record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              quote,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static debitWallet(request,response){\n    const {oldBalance,debit_amount} = request.body;\n\n\n\n    \n\n    UserModel.findOne({ id: Number(request.params.id) }, function (err, user) {\n\n      \n      \n      let bal = Number(user.balance) - Number(debit_amount);\n      user.balance = new String(bal)\n\n\n      \n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        \n\n         console.log(user)\n          return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n      }); \n    });\n\n  }\n\n\n\n  static updatePlanStatus(request,response){\n\n    const  {\n              status,\n              amount, \n              has_updated,    \n            }= request.body;\n\n\n    UserPlanModel.findOne({ plan_id:new String(request.params.id) }, function (err, user) {\n\n      // Verify and save the user\n      user.status= status || user.status;\n      \n      user.price = amount || user.price;\n\n      user.has_updated = has_updated || user.has_updated;\n\n      let userItins = user.itineries;\n\n      // userItins.map((item) =>{\n      //    item.status = status;\n      // } )\n\n      // user.itineries = userItins;\n      \n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        \n\n\n          return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n      }); \n    });\n\n\n  }\n\n\n\n\n  static updateItinStatus(request,response){\n\n    const  {\n              status,\n              //plan_id,\n             \n            }= request.body;\n\n\n   // ItineraryModel.findOne({ plan_id:new String(request.params.id) }, function (err, user) {\n\n   //    // Verify and save the user\n   //    user.status= status || user.status;\n      \n    \n      \n   //    user.save(function (err,user) {\n   //      if (err) { return response.status(500).send({ msg: err.message }); }\n   //      console.log(user + 'hello')\n\n\n   //        return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n   //    }); \n   //  });\n\n\n\n    ItineraryModel.updateMany({ plan_id: new String(request.params.id) },{ $set:{  status:status}},{ multi: true }, function(err,result){\n                         if (err) {\n                              console.log(err)\n                              res.send(err);\n                            } else {\n                              console.log(result)\n                              return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated itineraries of this plan .' });\n                    \n                            }\n\n    })   \n\n\n\n  }\n\n\n\n  static updateQuoteStatus(request,response){\n\n    const  {\n              status,\n              amount, \n              has_updated    \n            }= request.body;\n\n\n    QuoteModel.findOne({ plan_id:new String(request.params.id) }, function (err, user) {\n\n      // Verify and save the user\n      user.status= status || user.status;\n      \n      user.amount = amount || user.amount;\n      user.has_updated = has_updated || user.has_updated;\n      \n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n\n\n          return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n      }); \n    });\n\n  }\n\n\n  static getOnePlanById(request,response){\n    UserPlanModel\n    .find({id: Number(request.params.id)})\n      .then(data => {\n        console.log(\"specific:\" + data)\n        \n       \n        const userPlanInfo = data; //related\n        if (userPlanInfo.length <= 0) {\n          return response.status(404).json({\n                  status: 404,\n                  error: 'The user plan with the given id does not exists',\n          });\n        }\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    userPlanInfo,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n    \n\n  }\n\n\n\n  static paystackPayMeMoney(req,res){\n     const {\n      fullname,\n      email,\n      amount,\n      phone_number\n      //old_balance\n     } = req.body;\n     console.log(fullname,\n      email,\n      amount)\n     //const form = _.pick(req.body,['amount','email','full_name']);\n      \n     const form = {\n      fullname,\n      email,\n      amount,\n      phone_number\n     }\n    form.metadata = {\n          full_name : form.fullname\n    }\n    form.amount *= 100;\n    form.amout *=100;\n      \n    initializePayment(form, (error, body)=>{\n          console.log(body)\n          if(error){\n              //handle errors\n              console.log(error);\n              return res.redirect('/error')\n            \n          }\n          var response = JSON.parse(body);\n          \n          \n          let url =response.data.authorization_url;\n\n\n          \n           \n          //res.redirect(url)\n          //console.log(url)\n          //res.send(`${url}`)\n\n          return res.status(201).json({\n            status: 201,\n            message: `<h6>Please click the link to make payments.<a style=\"color:red;text-decoration:none\"  href=\"${url}\">Proceed to payment</a></h6> \n            `,\n          });\n          \n    });\n  \n  }\n\n  static paystackCallBack(req,res){\n    const {reference,trxref} = req.query;\n    //console.log(req.query)\n    const ref = reference;\n      verifyPayment(ref, (error,body)=>{\n          if(error){\n              //handle errors appropriately\n              console.log(error)\n              return res.redirect('/error');\n          }\n\n          var response = JSON.parse(body);\n          console.log(JSON.stringify(response.data) +\"given here\") \n\n          const {id,reference, amount,customer, metadata,phone_number} = response.data;  \n          console.log(id,reference,amount,customer,phone_number,customer.phone)     \n\n          \n          const newDonor = {id: new String(id), reference, amount:(amount/100), email: customer.email,full_name: metadata.full_name,phone_number}\n\n          const donor = new WalletModel(newDonor)\n\n          donor.save().then((donor,error)=>{\n              if(!donor){\n                console.log(error)\n                  return res.redirect('/api/v1/error');\n              }\n\n\n              UserModel.findOne({email: customer.email},function (err, user) {\n\n                   if (!user) return res.status(400).send({ msg: 'We were unable to find a user with that email.' });\n                  let convertedBal = Number(amount)/100;\n                  user.balance = Number(user.balance)+ convertedBal;\n                  user.save(function (err,user) {\n                    if (err) { return res.status(500).send({ msg: err.message }); }\n                    //console.log(user + 'hello')\n                      //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n                      res.redirect('/api/v1/receipt/'+donor._id);\n                  }); \n          });\n\n              \n          }).catch((e)=>{\n             console.log(e)\n              res.redirect('/api/v1/error');\n          });\n\n          \n      })\n\n  }\n\n  static createPaymentDetail(request,response){\n\n\n    let {\n        status,\n                reference,\n                plan_id,\n                quotation_id,\n                amount,\n                username,\n                email,\n                phone_number ,\n    } = request.body;\n\n\n   \n\n    \n    const NewItinerary = new PaymentModel({ \n      id: new AutoincrementId(PaymentModel).counter(), \n        status:'Paid',\n                reference,\n                plan_id,\n                quotation_id,\n                amount,\n                username,\n                email,\n                phone_number,\n\n       \n     });\n\n     PaymentModel.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          reference,\n                plan_id,\n                quotation_id,\n                amount,\n                username,\n                email,\n                phone_number,\n      email:user.email\n           // cars_id: user.cars_id\n        };\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              result\n            },\n          ],\n          message: 'User Itinerary created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n  }\n\n  static paystackReceipt(req,res){\n    const id = new String(req.params.id);\n    WalletModel.findById(id).then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect('/api/v1/error')\n          }\n\n          // res.render('success.pug',{donor});\n          return  res.sendFile(path.join(__dirname + '/views/templates/topup-successful.html'));\n      }).catch((e)=>{\n          console.log(e)\n          res.redirect('/api/v1/error')\n      })\n  }\n\n  static paystackHistory(req,res){\n    const id = new String(req.params.id);\n    WalletModel.find({email:req.params.id}).then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect('/api/v1/error')\n          }\n         const tranx = donor;\n         console.log(tranx +\"for the user\")\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect('/api/v1/error')\n      })\n  }\n\n\n  static paystackPayments(req,res){\n    const id = new String(req.params.id);\n    PaymentModel.find({email:req.params.id}).then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect('/api/v1/error')\n          }\n         const tranx = donor;\n         console.log(tranx +\"for the user\")\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect('/api/v1/error')\n      })\n  }\n\n\n  static paystackQuotations(req,res){\n    const id = new String(req.params.id);\n    QuoteModel.find({email:req.params.id}).then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect('/api/v1/error')\n          }\n         const tranx = donor;\n         console.log(tranx +\"for the user\")\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect('/api/v1/error')\n      })\n  }\n\n\n\n  static deleteQuotation(request,response){\n    QuoteModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        QuoteModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static deletePayment(request,response){\n    PaymentModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        PaymentModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static deleteWallet(request,response){\n    WalletModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        WalletModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static getUserNotification(request,response){\n\n    const id = new String(request.params.id);\n    console.log(id)\n    NotificationModel.find({user_id:request.params.id}).then((donor,error)=>{\n      if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              \n      }\n      const tranx = donor;\n      console.log(tranx +\"for the user\")\n      return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect('/api/v1/error')\n      })\n\n  }\n\n\n  static makeNotification(request,response){\n    // console.log(request.body)\n    let { \n     user_id,\n      type,\n      description,\n  \n    } = request.body;\n\n   \n    const NewNotificationModel = new NotificationModel({ \n      id: new AutoincrementId(NotificationModel).counter(), \n      user_id,\n      type,\n      description,\n\n    \n      //accountNumber: uuidv4()\n       });\n\n\n     NewNotificationModel.save()\n      .then(data => {\n        const user = data;\n        \n        \n        \n      \n            var smtpConfig = {\n              host: 'smtp.gmail.com',\n              port: 587,\n              service:'gmail',\n              secure: true, // use SSL, \n                            // you can try with TLS, but port is then 587\n              auth: {\n                user:  'juwavictor@gmail.com',//process.env.APPLICATION_GMAIL, // Your email id\n                pass:  'saladin123!@jhjhj#'// process.env.APPLICATION_GMAIL_PASSWORD\n              }\n            };\n            // Send the email\n            // var transporter = nodemailer.createTransport(\n            //   //{ service: 'Sendgrid', auth: { user: process.env.SENDGRID_USERNAME, pass: process.env.SENDGRID_PASSWORD } }\n            //   smtpConfig\n            //   );\n\n            // Configure Nodemailer SendGrid Transporter\n            const transporter = nodemailer.createTransport(\n              sendgridTransport({\n                auth: {\n                  api_user: process.env.SENDGRID_USERNAME,    // SG username\n                  api_key: process.env.SENDGRID_PASSWORD, // SG password\n                },\n              })\n            );\n\n            \n            \n            var mailOptions = { \n              from:  'juwavictor@gmail.com', //process.env.APPLICATION_GMAIL, \n              to: user.email, \n              subject: 'Account Verification Token', \n              // text: 'Hello,\\n\\n' + 'Please verify your account by clicking the link: \\nhttp:\\/\\/' + request.headers.host + '\\/api/v1/auth/confirmation\\/' + emailtoken.email_confirm_token + '.\\n' \n              //html: ``,\n\n            };\n\n            let offline = 'No';\n\n            \n\n            readHTMLFile(__dirname + '/views/templates/notification.html', function(err, html) {\n                var template = handlebars.compile(html);\n                var replacements = {\n                     username: user_id,\n                     detail: description\n                };\n                var htmlToSend = template(replacements);\n                \n                 mailOptions.html = htmlToSend;\n                transporter.sendMail(mailOptions, function (error, response) {\n                    if (error) {\n                        console.log(error+\"eroor here\");\n                        offline = 'Yes';\n\n                     }   \n                        \n\n\n\n                        \n                });\n            });\n\n            if(offline==\"Yes\"){\n\n\n            return response.status(422).json({\n                              status: 422,\n                              data: [\n                                {\n                            \n                                  user,\n                                },\n                              ],\n                              message: 'You could be offline sending the mail to the user.',\n                        });\n            }else{\n\n                  \n\n                            return response.status(201).json({\n                              status: 201,\n                              data: [\n                                {\n                            \n                                  user,\n                                },\n                              ],\n                              message: 'User created successfully',\n                            });\n                       \n          }\n\n\n          \n     \n\n        \n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n  }\n\n\n\n\n  createUserPlan = (req, res) => {\n    const review = new UserPlanModel();\n    review.username = req.body.username;\n    review.rating = req.body.rating;\n    review.body = req.body.body;\n    review.save()\n      .then((result) => {\n        User.findOne({ username: review.username }, (err, user) => {\n            if (user) {\n                // The below two lines will add the newly saved review's \n                // ObjectID to the the User's reviews array field\n                user.reviews.push(review);\n                user.save();\n                res.json({ message: 'Review created!' });\n            }\n        });\n      })\n      .catch((error) => {\n        res.status(500).json({ error });\n      });\n  }\n\n\n  createUser = (req, res) => {\n   const user = new UserModel();\n   user.username = req.body.password;\n   user.email = req.body.email;\n   user.save()\n       .then((result) => {\n            res.json({ message: 'User created!', result });\n        })\n        .catch((error) => {\n          res.status(500).json({ error });\n        });\n  }\n\n// . . .\n// returns the user object associated with the username if any\n// with the reviews field containing an array of review objects \n// consisting of the reviews created by the user\ngetUser = (req, res) => {\n    User.findOne({ username: req.params.username })\n      //.populate('reviews')\n      .then((result) => {\n        res.json(result);\n      })\n      .catch((error) => {\n        res.status(500).json({ error });\n      });\n  }\n\n\n\n  //Admin functionality\n\n\n  static adminDashboard(request,response){\n    \n\n  \n  }\n\n  static manageUsers(request,response){\n   UserModel.find({is_admin:false,roles:\"user\"})\n      .then(data => {\n        const users = data;\n        console.log(users,\"users available are here\")\n        if (users.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              users,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static deleteUser(request,response){\n    UserModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        UserModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static createNewUser(request,response){\n       let boolVerification;\n     let {\n          firstname,\n        lastname,\n        username,\n        email,\n        password,\n        passwordComfirm,\n        phoneNumber,\n        avatar,\n        certificate,\n        user_type,\n        status,\n        is_verified\n      } = request.body;\n\n     \n\n      if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n\n    password = TokenGenerator.hashPassword(password.trim());\n\n    const Newuser = new UserModel({ \n      id: new AutoincrementId(UserModel).counter(), \n       firstname,\n        lastname,\n        username,\n        email,\n        password,\n        \n        phone_number: phoneNumber,\n        avatar: avatar,\n        certificate,\n        user_type,\n        status :\"Active\",\n        is_admin:false,\n        isVerified:boolVerification,\n\n\n\n      });\n\n     Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n        \n\n\n\n\n        const token = TokenGenerator.generateToken(result);\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              token,\n              user,\n            },\n          ],\n          message: 'User created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n  }\n\n  static manageUsersDetail(request,response){\n     let boolVerification;\n     const {\n      firstname,\n      lastname,\n      username,\n      password,\n      phoneNumber,\n      certificate,\n      user_type,\n      email,\n      status,\n      avatar,\n      is_verified\n    } = request.body;\n\n    console.log(is_verified + \":our user verification\")\n\n    if(is_verified==\"false\"){\n      boolVerification =false;\n    }else if(is_verified==\"true\"){\n      boolVerification =true;\n    }\n\n\n\n    if(!password.length){\n      \n        console.log('err here1')\n        return res.status(400).send({ msg: 'password do not match.' });\n      \n    }\n\n    \n\n\n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      if(password==\"unchanged\" ){\n       user.password= user.password;\n       console.log(\"old:\" + user.password)\n      } else{\n        user.password= TokenGenerator.hashPassword(password.trim());\n        console.log(\"new pass: \"+ user.password)\n      }\n\n     \n      // Verify and save the user\n    \n      user.username= username || user.username;\n      user.email= email || user.email;\n      user.status= status || user.status;\n      user.avatar= avatar || user.avatar;\n      user.user_type= user_type|| user.user_type;\n      user.firstname= firstname|| user.firstname;\n      user.lastname = lastname || user.lastname;\n      user.phone_number = phoneNumber|| user.phone_number;\n      user.test_certificate = certificate || user.test_certificate;\n      //user.isVerified = boolVerification || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n\n  static manageUsersDetailVerification(request,response){\n  \n     const {\n      isVerified\n    } = request.body;\n\n   \n\n   \n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  static manageAdmins(request,response){\n    UserModel.find({is_admin:true})\n      .then(data => {\n        const admins = data;\n        console.log(admins+\"admins available here admins\")\n        if (admins.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              admins,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static deleteAdmin(request,response){\n    UserModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        UserModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n\n\n\n\n  static createNewAdmin(request,response){\n       let boolVerification;\n    let {\n          firstname,\n        lastname,\n        username,\n        email,\n        password,\n        passwordComfirm,\n        phoneNumber,\n        avatar,\n        //certificate,\n        user_type,\n        status,\n        is_verified,\n      } = request.body;\n\n      if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n\n    password = TokenGenerator.hashPassword(password.trim());\n\n\n    \n\n        RolesAndPreviledgesModel.findOne({ for_admins:  true, usergroup_set: user_type }, function (err, roles) {\n           \n          if (!roles) {\n                        return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n          }\n          console.log(roles)\n\n          const Newuser = new UserModel({ \n                id: new AutoincrementId(UserModel).counter(), \n                 firstname,\n                  lastname,\n                  username,\n                  email,\n                  password,\n                  \n                  phone_number: phoneNumber,\n                  avatar: avatar,\n                  //certificate,\n                  roles: user_type,\n                  status :\"Active\",\n                  is_admin:true,\n                  isVerified: boolVerification,\n                  view_bookings: roles.view_bookings,\n                  view_quotations: roles.view_quotations,\n                  view_transactions:  roles.view_transactions,\n                  view_payments :roles.view_payments,\n                  view_drivers :  roles.view_drivers,\n                  view_sos: roles.view_sos,\n                  view_partners : roles.view_partners,\n                  view_package:  roles.view_package,\n                  view_cars: roles.view_cars,\n                  view_tickets :  roles.view_tickets,\n                  view_faqs : roles.view_faqs,\n                  view_users : roles.view_users,\n                  view_admins :  roles.view_admins,\n                  view_settings :  roles.view_settings,\n                  manage_bookings: roles.manage_bookings,\n                  manage_quotations: roles.manage_quotations,\n                  manage_transactions:  roles.manage_transactions,\n                  manage_payments : roles.manage_payments,\n                  manage_drivers : roles.manage_drivers,\n                  manage_sos: roles.manage_sos,\n                  manage_partners : roles.manage_partners,\n                  manage_package: roles.manage_package,\n                  manage_cars: roles.manage_cars,\n                   manage_tickets : roles.manage_tickets,\n                  manage_faqs : roles.manage_faqs,\n                  manage_users : roles.manage_users,\n                  manage_admins : roles.manage_admins,\n                  manage_settings : roles.manage_settings,\n\n\n\n                });\n\n               Newuser.save()\n                .then(data => {\n                  const user = data;\n\n                  const result = {\n                    id: user.id,\n                    email: user.email,\n                    username: user.username,\n                  };\n                  \n\n\n                  const token = TokenGenerator.generateToken(result);\n                  console.log(user)\n                  return response.status(201).json({\n                    status: 201,\n                    data: [\n                      {\n                        token,\n                        user,\n                      },\n                    ],\n                    message: 'User created successfully',\n                  });\n                })\n                .catch(err => {\n                  console.log(err+ 'error here')\n                  response.status(400).json({\n                    status: 400,\n                    error: ErrorHandler.errors().validationError,\n                  });\n                });\n\n  \n\n\n\n         })\n        \n    \n\n\n\n\n    \n    \n  }\n\n  static manageAdminsDetail(request,response){\n       let boolVerification;\n\n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n      status,\n      is_verified,\n\n    } = request.body;\n\n    if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n\n\n\n    if(!password.length){\n      \n        console.log('err here1')\n        return res.status(400).send({ msg: 'password do not match.' });\n      \n    }\n\n    \n\n\n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      if(password==\"unchanged\" ){\n       user.password= user.password;\n       console.log(\"old:\" + user.password)\n      } else{\n        user.password= TokenGenerator.hashPassword(password.trim());\n        console.log(\"new pass: \"+ user.password)\n      }\n\n     \n      // Verify and save the user\n    \n      user.username= username || user.username;\n      user.email= email || user.email;\n      user.status= status || user.status;\n      user.avatar= avatar || user.avatar;\n      user.roles= user_type|| user.user_type;\n      user.firstname= firstname|| user.firstname;\n      user.lastname = lastname || user.lastname;\n      user.phone_number = phoneNumber|| user.phone_number;\n      user.test_certificate = certificate || user.test_certificate;\n      //user.isVerified = boolVerification || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  static manageAdminsDetailVerification(request,response){\n  \n     const {\n      isVerified\n    } = request.body;\n\n    \n   \n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  static manageDrivers(request,response){\n    UserModel.find({is_active:true,roles:'Individual Driver'})\n      .then(data => {\n        const drivers = data;\n        console.log(drivers,\"drivers are here\")\n        if (drivers.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              drivers,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static deleteDriver(request,response){\n    UserModel.find({_id: request.params.id,roles:'Individual Driver'})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        UserModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n\n  static createNewDriver(request,response){\n       let boolVerification;\n\n     let {\n          firstname,\n        lastname,\n        username,\n        email,\n        password,\n        passwordComfirm,\n        phoneNumber,\n        avatar,\n        certificate,\n        user_type,\n        status,\n        is_verified\n      } = request.body;\n\n      if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n\n    password = TokenGenerator.hashPassword(password.trim());\n\n    const Newuser = new UserModel({ \n      id: new AutoincrementId(UserModel).counter(), \n       firstname,\n        lastname,\n        username,\n        email,\n        password,\n        \n        phone_number: phoneNumber,\n        avatar,\n        test_certificate:certificate,\n  \n        status :\"Active\",\n        is_admin:false,\n        isVerified: boolVerification,\n        roles: 'Individual Driver'\n\n\n\n      });\n\n     Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n        \n\n\n\n\n        const token = TokenGenerator.generateToken(result);\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              token,\n              user,\n            },\n          ],\n          message: 'User created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n    \n  }\n\n  static manageDriversDetail(request,response){\n       let boolVerification;\n\n     const {\n      firstname,\n      lastname,\n      username,\n      password,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n      status,\n      is_verified\n    } = request.body;\n\n    if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n\n\n\n    if(!password.length){\n      \n        console.log('err here1')\n        return res.status(400).send({ msg: 'password do not match.' });\n      \n    }\n\n    \n\n\n    UserModel.findOne({ _id:  request.params.id, roles:'Individual Driver' }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      if(password==\"unchanged\" ){\n       user.password= user.password;\n       console.log(\"old:\" + user.password)\n      } else{\n        user.password= TokenGenerator.hashPassword(password.trim());\n        console.log(\"new pass: \"+ user.password)\n      }\n\n     \n      // Verify and save the user\n    \n      user.username= username || user.username;\n      user.email= email || user.email;\n      user.status= status || user.status;\n      user.avatar= avatar || user.avatar;\n      user.roles= user_type|| user.user_type;\n      user.firstname= firstname|| user.firstname;\n      user.lastname = lastname || user.lastname;\n      user.phone_number = phoneNumber|| user.phone_number;\n      user.test_certificate = certificate || user.test_certificate;\n      //user.isVerified = boolVerification || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  static manageDriversDetailVerification(request,response){\n  \n     const {\n      isVerified\n    } = request.body;\n\n   \n   \n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  static managePartners(request,response){\n    PartnersModel.find()\n      .then(data => {\n        const partners = data;\n        console.log(partners +\"partners available\")\n        if (partners.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              partners,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static deletePartner(request,response){\n    PartnersModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        PartnersModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static createNewPartner(request,response){\n       let boolVerification;\n    let address ='';\n    if(request.body.address){\n      address = request.body.address;\n    }\n      let {\n            firstname,\n          lastname,\n          username,\n          email,\n\n          password,\n          // passwordComfirm,\n          phoneNumber,\n          avatar,\n          certificate,\n          user_type,\n          status,\n          is_verified,\n          totalCars\n\n      \n        } = request.body;\n\n        if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n    \n\n    password = TokenGenerator.hashPassword(password.trim());\n   \n    const Newuser = new  PartnersModel({ \n      id: new AutoincrementId(PartnersModel).counter(), \n       firstName: firstname,\n        lastName: lastname,\n        userName: username,\n\n        email,\n        password,\n        address:address,\n        totalCars,\n        \n        phoneNumber: phoneNumber,\n        avatar,\n        businessName:certificate,\n        roles: user_type,\n        status :status,\n        isVerified: boolVerification,\n        totalCars\n      });\n\n     Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n        \n        const token = TokenGenerator.generateToken(result);\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              token,\n              user,\n            },\n          ],\n          message: 'User created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n  }\n\n\n  static managePartnersDetail(request,response){\n       let boolVerification;\n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      totalCars,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n      address,\n      status,\n      is_verified\n    } = request.body;\n\n    if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n\n\n\n  \n      if(!password){\n        console.log('err here1')\n        return res.status(400).send({ msg: 'password field required' });\n      }\n    \n\n    \n\n\n    PartnersModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if(err){\n        return response.status(400).send({ msg: 'Some error occured.' });\n      }\n\n      if (!user) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n      \n      if(password===\"unchanged\" ){\n       user.password= user.password;\n       console.log(\"old:\" + password+ \"==\"+  user.password)\n      } else{\n        user.password= TokenGenerator.hashPassword(password.trim());\n        console.log(\"new pass: \"+ password+ \"==\"+ user.password)\n      }\n\n     \n      // Verify and save the user\n      user.avatar= avatar || user.avatar;\n      user.userName= username || user.userName;\n      user.email= email || user.email;\n      user.businessName= certificate || user.businessName;\n      user.roles= user_type || user.roles;\n      user.firstName= firstname|| user.firstName;\n      user.lastName = lastname || user.lastName;\n      user.phoneNumber = phoneNumber|| user.phoneNumber;\n      user.status = status|| user.status;\n      user.address= address || user.address;\n      user.totalCars = totalCars || user.totalCars;\n      //user.isVerified = boolVerification || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n\n  static managePartnersDetailVerification(request,response){\n  \n     const {\n      isVerified\n    } = request.body;\n\n    \n   \n    PartnersModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  static manageProfile(request,response){\n    UserModel.find({_id: request.params.id, is_admin:true})\n      .then(data => {\n        console.log(\"specific profile:\" + data)\n        \n       \n        const profile = data; //related\n        if (profile.length <= 0) {\n                return response.status(404).json({\n                  status: 404,\n                  error: 'The user with the given id does not exists',\n                });\n        }\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    profile,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n    \n  }\n\n  static manageProfileDetail(request,response){\n       let boolVerification;\n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      // passwordConfirm,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n      //status,\n      is_verified\n    } = request.body;\n\n\n\n    if(!password.length ){\n    \n        console.log('err here1')\n        return res.status(400).send({ msg: 'password do not match.' });\n      \n    }\n\n    \n\n\n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n\n      if(password==\"unchanged\" ){\n       user.password= user.password;\n       console.log(\"old:\" + user.password)\n      } else{\n        user.password= TokenGenerator.hashPassword(password.trim());\n        console.log(\"new pass: \"+ user.password)\n      }\n\n     \n      // Verify and save the user\n      user.avatar= avatar || user.avatar;\n      user.username= username || user.username;\n      user.email= email || user.email;\n   \n      user.roles= user_type|| user.user_type;\n      user.firstname= firstname|| user.firstname;\n      user.lastname = lastname || user.lastname;\n      user.phone_number = phoneNumber|| user.phone_number;\n      user.test_certificate = certificate|| user.test_certificate;\n      //user.status = status || user.status;\n      //user.isVerified = boolVerification || user.isVerified\n      user.save(function (err,user) {\n        if (err) { \n          console.log(err)\n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n\n  static manageProfileDetailVerification(request,response){\n  \n     const {\n      isVerified\n    } = request.body;\n\n    \n   \n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n\n\n\n  static managePlanPackage(request,response){\n    \n\n    IndividualPlanModel.find()\n      .then(data => {\n        const individualPlans = data;\n\n        \n\n        console.log(individualPlans+ \"individual available plans\")\n        if (individualPlans.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n\n\n\n        \n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              individualPlans,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n        \n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n   \n  \n\n  }\n\n\n  static managePlanPackageCorporate(request,response){\n    coperatePlanModel.find()\n      .then(data => {\n        const corporatePlans = data;\n\n        console.log(corporatePlans+ \"coperatePlans available plans\")\n        if (corporatePlans.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n\n\n  \n          \n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                \n              \n                corporatePlans,\n            \n                message: 'Successful',\n              },\n            ],\n          });\n\n  \n\n\n        \n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n  static deletePlanPackage(request,response){\n    console.log(request.params + \"soloewe\")\n     if(request.params.delete_type==\"Individual\"){\n\n      IndividualPlanModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        IndividualPlanModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n     }else if(request.params.delete_type==\"Corporate\"){\n\n      coperatePlanModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        coperatePlanModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n     }\n     \n  }\n\n\n  static createNewPlan(request,response){\n\n    \n      let {\n          plan_name,\n          plan_categories,\n          status,\n          description,\n          max_car,\n          price,\n\n          \n\n      \n        } = request.body;\n\n        let Newuser;\n        let plan;\n    \n    if(plan_categories===\"Individual\"){\n\n      Newuser = new  IndividualPlanModel({ \n      id: new AutoincrementId(IndividualPlanModel).counter(), \n          plan_name,\n          plan_categories,\n          status,\n          description,\n          car_max:max_car,\n          price\n      });\n\n     Newuser.save()\n      .then(data => {\n        plan = data;\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              plan,\n            },\n          ],\n          message: 'Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n\n    }else {\n\n       Newuser = new  coperatePlanModel({ \n      id: new AutoincrementId(coperatePlanModel).counter(), \n       plan_name,\n          plan_categories,\n          status,\n          description,\n          car_max: max_car,\n          price\n          \n        \n      });\n\n     Newuser.save()\n      .then(data => {\n        plan = data;\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              plan\n            },\n          ],\n          message: 'Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n    }\n    \n    \n  }\n\n\n  static managePlanPackageDetail(request,response){\n\n    const {\n      plan_name,\n      plan_categories,\n      description,\n      max_car,\n      price,\n      status\n    } = request.body;\n\n   console.log(plan_name+ \"is here 2\")\n\n    if(plan_name==\"Individual\" ){\n        console.log(plan_name+ \"is here\")\n        IndividualPlanModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        plan.plan_name= plan_name || plan.plan_name;\n        plan.plan_categories= plan_categories || plan.plan_categories;\n     \n        plan.price= price || plan.price;\n        plan.description= description || plan.description;\n        plan.car_max = max_car || plan.car_max;\n        plan.status = status || plan.status;\n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n      \n    }else{\n\n      coperatePlanModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        plan.plan_name= plan_name || plan.plan_name;\n        plan.plan_categories= plan_categories || plan.plan_categories;\n     \n        plan.price= price || plan.price;\n        plan.description= description || plan.description;\n        plan.car_max = max_car || plan.car_max;\n        plan.status = status || plan.status;\n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); \n          }\n          console.log(plan + 'hello')\n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n\n    }\n    \n  }\n\n\n\n  static manageInspection(request,response){\n \n  \n        \n\n\n    InspectionModel.find()\n      .then(data => {\n        const inspections = data;\n\n        console.log(inspections)\n\n        \n        // if (inspections.length === 0) {\n        //   return response.status(404).json({\n        //     status: 404,\n        //     error: 'User has no  record',\n        //   });\n        // }\n\n\n  \n          \n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                \n              \n                inspections,\n            \n                message: 'Successful',\n              },\n            ],\n          });\n\n  \n\n\n        \n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n  static manageInspectionDetail(request,response){\n     const {\n           status, \n           // description,\n           //  username, email,\n           //  time, createdDate,\n           //  phone_number\n\n\n          } = request.body\n\n    InspectionModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n \n        plan.status= status || plan.status;\n        // plan.description= description || plan.description;\n     \n        // plan.username= username || plan.username;\n        // plan.email= email || plan.email;\n        // plan.time = time || plan.time;\n        // plan.createdDate = createdDate || plan.createdDate;\n        // plan.phone_number = phone_number ||  plan.phone_number\n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n          return response.status(200).send({ status:200, success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n  }\n\n\n  static createNewInspection(request,response){\n    const {\n           username,\n            email,\n            phone_number,\n            description,\n            createdDate,\n            time,\n            status,\n            car_id,\n\n\n          } = request.body\n\n        let Newuser;\n        let plan;\n    \n    \n\n      Newuser = new  InspectionModel({ \n      id: new AutoincrementId(InspectionModel).counter(), \n         username,\n            email,\n            phone_number,\n            description,\n            createdDate,\n            time,\n            status,\n            car_id,\n      });\n\n     Newuser.save()\n      .then(data => {\n        plan = data;\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              plan,\n            },\n          ],\n          message: 'Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n\n    \n    \n  }\n  \n   static deleteInspection(request,response){\n      \n    \n\n      InspectionModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        InspectionModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n     \n    \n  }\n\n  \n\n  static manageDriveTest(request,response){\n\n    DriveTestModel.find()\n      .then(data => {\n        const testDrive = data;\n\n        console.log(testDrive+ \"coperatePlans available plans\")\n        // if (testDrive.length === 0) {\n        //   return response.status(404).json({\n        //     status: 404,\n        //     error: 'User has no  record',\n        //   });\n        // }\n\n\n  \n          \n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                \n              \n                testDrive,\n            \n                message: 'Successful',\n              },\n            ],\n          });\n\n  \n\n\n        \n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n  static addDriveTestFromItinerary(request,response){\n\n    const {\n           username,\n                email,\n                phone_number,\n                car_id,\n                status,\n                description,\n                \n                createdDate,\n\n\n          } = request.body;\n\n        let Newuser;\n        let plan;\n    \n    \n\n      Newuser = new  DriveTestModel({ \n      id: new AutoincrementId(DriveTestModel).counter(), \n         username,\n         email,\n         phone_number,\n         car_id,\n         status:\"Pending\",\n         description,       \n         createdDate,\n      });\n\n     Newuser.save()\n      .then(data => {\n        plan = data;\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              plan,\n            },\n          ],\n          message: 'Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n\n  }\n\n\n  static createNewDriveTest(request,response){\n\n       const {\n           username,\n            email,\n            phone_number,\n            description,\n            createdDate,\n            time,\n            status,\n            car_id,\n\n\n          } = request.body;\n\n        let Newuser;\n        let plan;\n    \n    \n\n      Newuser = new  DriveTestModel({ \n      id: new AutoincrementId(DriveTestModel).counter(), \n         username,\n            email,\n            phone_number,\n            description,\n            createdDate,\n            time,\n            test_center:time,\n\n            status,\n            car_id,\n      });\n\n     Newuser.save()\n      .then(data => {\n        plan = data;\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              plan,\n            },\n          ],\n          message: 'Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n\n    \n    \n  }\n\n  static manageUsersDriveTestCenterUpdate(request,response){\n\n     const {\n           test_center,\n           test_center_address,\n\n\n          } = request.body;\n    UserModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a user with that id.' });\n        }\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        // plan.plan_name= plan_name || plan.plan_name;\n        // plan.plan_categories= plan_categories || plan.plan_categories;\n     \n        // plan.price= price || plan.price;\n        // plan.description= description || plan.description;\n        // plan.car_max = max_car || plan.car_max;\n        plan.test_center = test_center || plan.test_center;\n        plan.test_center_address = test_center_address || plan.test_center_address\n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n           return response.status(200).send({ status:200, success:'ok', msg: 'Successfully updated .' });\n        }); \n      });\n\n  }\n\n  static manageDriveTestDetail(request,response){\n\n     const {\n           // username,\n           //  email,\n           //  phone_number,\n           //  description,\n           //  createdDate,\n           //  time,\n            status,\n            // car_id,\n\n\n          } = request.body;\n    DriveTestModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        // plan.plan_name= plan_name || plan.plan_name;\n        // plan.plan_categories= plan_categories || plan.plan_categories;\n     \n        // plan.price= price || plan.price;\n        // plan.description= description || plan.description;\n        // plan.car_max = max_car || plan.car_max;\n        plan.status = status || plan.status;\n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n           return response.status(200).send({ status:200, success:'ok', msg: 'Successfully updated .' });\n        }); \n      });\n  }\n\n\n   static deleteDriveTest(request,response){\n\n        \n\n      DriveTestModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        DriveTestModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n     \n    \n  }\n\n\n  static managePreviledges(request,response){\n\n    // import DriveTestModel from  \"../models/DriveTest.model\";\n// import Previledges from \"../models/Roles.model\";\n    RolesAndPreviledgesModel.find()\n      .then(data => {\n        const users = data;\n        \n\n\n\n       \n  \n          \n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                \n              \n                previledges: users,\n            \n                message: 'Successful',\n              },\n            ],\n          });\n\n  \n\n\n        \n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n\n  static createNewPreviledges(request,response){\n     const {previledges_description, previledges_info,usergroups_old} = request.body\n\n        let Newuser;\n        let plan;\n    \n    \n\n      Newuser = new  RolesAndPreviledgesModel({ \n      id: new AutoincrementId(RolesAndPreviledgesModel).counter(), \n          previledges_description, previledges_info\n      });\n\n     Newuser.save()\n      .then(data => {\n        plan = data;\n\n\n\n        RolesAndPreviledgesModel.find({ for_admins:  true }, function (err, users) {\n           \n                      if (!users) {\n                        return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n                      }\n\n                      let usergroup = [...usergroups_old,previledges_info]\n\n                      RolesAndPreviledgesModel.updateMany({ for_admins:  true },{ $set:{  usergroup_set:usergroup}},{ multi: true }, function(err,result){\n                         if (err) {\n                              console.log(err)\n                              res.send(err);\n                            } else {\n\n                            \n\n                               UserModel.find({ for_users:  true }, function (err, users) {\n           \n                                      if (!users) {\n                                        return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n                                      }\n\n                                      UserModel.updateMany({ for_users:  true },{ $set:{  usergroup_set:usergroup}},{ multi: true }, function(err,result){\n                                         if (err) {\n                                              console.log(err)\n                                              res.send(err);\n                                            } else {\n\n                                              return response.status(201).json({\n                                                status: 201,\n                                                data: [\n                                                  {\n                                                    success:'ok',\n                                                    result,\n                                                  },\n                                                ],\n                                                message: 'Updated all users with fields and status changed',\n                                              });\n                                            }\n\n                                       })     \n\n\n\n                         })\n\n\n\n\n\n\n\n\n\n\n\n\n                            }\n\n                       })     \n\n\n\n         })\n        \n        // return response.status(201).json({\n        //   status: 201,\n        //   data: [\n        //     {\n              \n        //       plan,\n        //     },\n        //   ],\n        //   message: 'Plan created successfully',\n        // });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n         \n\n                //find all users of usch roles and update\n         \n\n\n\n    \n\n    \n    \n  }\n\n  static adminPreviledgesEdit(request,response){\n\n         const {\n          view_bookings,\n          view_quotations,\n          view_transactions,\n          view_payments,\n          view_drivers,\n          view_sos,\n          view_partners,\n          view_package,\n          view_cars,\n          previledges_info,\n          view_tickets,\n          view_faqs,\n          view_users,\n          view_admins,\n          view_settings,\n          status,\n\n\n          manage_bookings,\n          manage_quotations,\n          manage_payments,\n          manage_drivers,\n          manage_sos,\n         manage_partners,\n          manage_package,\n         manage_transactions,\n          manage_cars,\n          manage_tickets,\n          manage_faqs,\n          manage_settings,\n          manage_users,\n          manage_admins\n        }  = request.body;  \n\n    // const { field,value, status, previledges_info } = request.body ;\n    // let newValue =''\n    // if(value==true){\n    //   newValue=\"yes\"\n    // }else{\n    //   newValue=\"no\"\n    // }\n\n\n    RolesAndPreviledgesModel.findOne({ _id:  new String( request.params.id) }, function (err, roles) {\n\n        if (!roles) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        roles.status = status || roles.status;\n        roles.view_bookings= view_bookings || roles.view_bookings;\n          roles.view_quotations= view_quotations || roles.view_quotations;\n          roles.view_transactions= view_transactions || roles.view_transactions;\n          roles.view_payments = view_payments || roles.view_payments;\n          roles.view_drivers = view_drivers || roles.view_drivers;\n          roles.view_sos= view_sos || roles.view_sos;\n          roles.view_partners = view_partners || roles.view_partners;\n          roles.view_package= view_package || roles.view_package;\n          roles.view_cars= view_cars || roles.view_cars;\n          roles.view_tickets = view_tickets || roles.view_tickets;\n          roles.view_faqs = view_faqs || roles.view_faqs;\n          roles.view_users = view_users || roles.view_users;\n          roles.view_admins = view_admins || roles.view_admins;\n          roles.view_settings = view_settings || roles.view_settings;\n\n\n        \n        roles.manage_bookings= manage_bookings || roles.manage_bookings;\n          roles.manage_quotations= manage_quotations || roles.manage_quotations;\n          roles.manage_transactions= manage_transactions || roles.manage_transactions;\n          roles.manage_payments = manage_payments || roles.manage_payments;\n          roles.manage_drivers = manage_drivers || roles.manage_drivers;\n          roles.manage_sos= manage_sos || roles.manage_sos;\n          roles.manage_partners = manage_partners || roles.manage_partners;\n          roles.manage_package= manage_package || roles.manage_package;\n          roles.manage_cars= manage_cars || roles.manage_cars;\n          roles.manage_tickets = manage_tickets || roles.manage_tickets;\n          roles.manage_faqs = manage_faqs || roles.manage_faqs;\n          roles.manage_users = manage_users || roles.manage_users;\n          roles.manage_admins = manage_admins || roles.manage_admins;\n          roles.manage_settings = manage_settings || roles.manage_settings;\n    \n\n     \n        roles.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n\n          console.log(user)\n\n          //find all users of usch roles and update\n          UserModel.find({ roles:  previledges_info }, function (err, users) {\n\n                if (!users) {\n                  return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n                }\n\n                // users[field] = newValue;\n                // users.status = status;\n\n\n\n\n\n\n\n\n               UserModel.updateMany({ roles: previledges_info },\n                 { $set:\n                       { view_bookings,\n                          view_quotations,\n                          view_transactions,\n                          view_payments,\n                          view_drivers,\n                          view_sos,\n                          view_partners,\n                          view_package,\n                          view_cars,\n                          view_tickets,\n                          view_faqs,\n                          view_users,\n                          view_admins,\n                          view_settings,\n                          status ,\n\n\n                          manage_bookings,\n                          manage_quotations,\n                          manage_payments,\n                          manage_drivers,\n                          manage_sos,\n                         manage_partners,\n                          manage_package,\n                         manage_transactions,\n                          manage_cars,\n                          manage_tickets,\n                          manage_faqs,\n                          manage_settings,\n                          manage_users,\n                          manage_admins\n\n\n                        }\n              },{ multi: true }\n\n\n\n\n               , function(err,result)\n                 {\n                  if (err) {\n                    console.log(err)\n                    res.send(err);\n                  } else {\n                    console.log( view_bookings,\n                    view_quotations,\n                    view_transactions,\n                    view_payments,\n                    view_drivers,\n                    view_sos,\n                    view_partners,\n                    view_package,\n                    view_cars,\n                     view_tickets,\n                    view_faqs,\n                    view_users,\n                    view_admins,\n                    view_settings,\n                    status,\n\n\n                    manage_bookings,\n                    manage_quotations,\n                    manage_payments,\n                    manage_drivers,\n                    manage_sos,\n                   manage_partners,\n                    manage_package,\n                   manage_transactions,\n                    manage_cars,\n                    manage_tickets,\n                    manage_faqs,\n                    manage_settings,\n                    manage_users,\n                    manage_admins \n                   )\n                    return response.status(200).json({\n                      status: 200,\n                      data: [\n                        {\n                          success:'ok',\n                          result,\n                        },\n                      ],\n                      message: 'Updated all users with fields and status changed',\n                    });\n                  }\n              \n              });\n\n\n\n\n           })\n\n\n        }); \n      });\n  }\n\n  static managePreviledgesDetail(request,response){\n    const {previledges_description, previledges_info} = request.body\n    RolesAndPreviledgesModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        plan.previledges_info= previledges_info || plan.previledges_info;\n        plan.previledges_description= previledges_description || plan.previledges_description;\n     \n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n\n          //find all users of usch roles and update\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n  }\n\n\n  static managePreviledgesRulesDetail(request,response){\n    const {field, value} = request.body\n    UserModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        plan[field]= value || plan[field];\n        \n     \n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user roles andd permission profile.' });\n        }); \n      });\n  }\n\n\n   static deletePreviledges(request,response){\n         //if(request.params.delete_type==\"Individual\"){\n\n      RolesAndPreviledgesModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        RolesAndPreviledgesModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n     //}\n    \n  }\n\n\n\n  static manageSOS(request,response){\n    SOSModel.find()\n      .then(data => {\n        let redFlag = data;\n        console.log(redFlag,\"SOS VALUES\")\n        if (redFlag.length === 0) {\n          \n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                \n                message: 'No SOS found',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              redFlag,\n              message: 'All sos/redflags was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  \n\n\n  static manageSOSDetail(request,response){\n\n    SOSModel.find({_id: request.params.id})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status } = request.body;\n     \n\n            SOSModel.updateOne({_id: request.params.id }, {\n                    \n                      status: status\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>{\n                console.log(err)\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                });\n              });\n\n    \n      })\n      .catch(error => {\n         console.log(err)\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                });\n      });\n\n  }\n\n  static deleteSOS(request,response){\n    SOSModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        SOSModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static deleteTicket(request,response){\n\n    InterventionsModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        InterventionsModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n  }\n\n  static manageTickets(request,response){\n    InterventionsModel.find()\n      .then(data => {\n        console.log(\"all tickets>>>>\" + data)\n        let intervention = data;\n        if (intervention.length === 0) {\n          \n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                // intervention,\n                message: 'No records yet',\n              },\n            ],\n          });\n        }\n        //console.log( intervention)\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              intervention,\n              message: 'All interventions was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n  }\n\n\n  static createNewTicket(request,res){\n    const { status , subject, category, response, username,phone_number,email, assigned_to,comment} = request.body;\n\n    const NewCars = new InterventionsModel({ \n            id:  new AutoincrementId(InterventionsModel).counter(),\n            status , category, subject, response, username,phone_number,email, assigned_to,comment\n      });\n\n    NewCars.save()\n      .then(data => {\n        const Cars = data;\n        return res.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: Cars.id,\n              message: 'Created car record',\n            },\n          ],\n        });\n      })\n      .catch(err =>{\n        console.log(err)\n        res.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static manageTicketsDetail(request,responses){\n\n    InterventionsModel.find({_id: request.params.id})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return responses.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status , category, response, username,phone_number,email, assigned_to} = request.body;\n   \n\n\n            InterventionsModel.updateOne({_id: request.params.id }, {\n                    \n                      status: status || redId.status,\n                      category: category || redId.category,\n                      username: username || redId.username,\n                      phone_number: phone_number || redId.phone_number,\n                      email: email || redId.email,\n                      response: response || redId.response, \n                      assigned_to: assigned_to || redId.assigned_to,\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return responses.status(201).json({\n                  status: 201,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err => {\n                responses.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                });\n              });\n\n    \n\n      })\n      .catch(error => {\n        responses.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        });\n      });\n\n  }\n\n\n\n  static manageUserNotificationCounter(request,responses){\n\n    UserModel.find({email: request.params.id})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return responses.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { notification_count} = request.body;\n   \n\n\n            UserModel.updateOne({_id: request.params.id }, {\n                    \n                      notification_count: notification_count || redId.notification_count,\n                      \n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return responses.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated user notification record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err => {\n                responses.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                });\n              });\n\n    \n\n      })\n      .catch(error => {\n        responses.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        });\n      });\n\n  }\n\n  static createNewFAQ(request,response){\n    const { question , answer, status} = request.body;\n\n    const NewCars = new FAQModel({ \n            id:  new AutoincrementId(FAQModel).counter(),\n            question , answer,status\n      });\n\n    NewCars.save()\n      .then(data => {\n        const Cars = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: Cars.id,\n              message: 'Created car record',\n            },\n          ],\n        });\n      })\n      .catch(err =>{\n        console.log(err)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n\n  static manageFaqs(request,response){\n   FAQModel.find()\n      .then(data => {\n        let faqs= data;\n        console.log(faqs,\"faqs\")\n        if (faqs.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                \n                message: 'All faqs was retrieved successfully',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              faqs,\n              message: 'All faqs was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n         console.log(err)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static manageFaqsDetail(request,response){\n\n    FAQModel.find({_id: request.params.id})\n    .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { question , answer, status} = request.body;\n        \n\n\n             FAQModel.updateOne({_id: request.params.id }, {\n                    \n                      question: question || redId.question,\n                      answer: answer || redId.answer,\n                      status: status || redId.status,\n                  \n                }).then(data => {\n                  \n                const faq = data;\n                \n                return response.status(201).json({\n                  status: 201,\n                  data: [\n                    {\n                      id: faq.status,\n                      message: 'Updated faq record’s detail',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n\n\n  }\n\n\n\n\n\n\n\n\n\n  static manageCars(request,response){\n     CarsModel.find()\n      .then(data => {\n        let carsAvailable = data;\n        console.log(carsAvailable+ \"all cars here\")\n        if (carsAvailable.length === 0) {\n           cars= [];\n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n              \n                message: 'All Cars was retrieved successfully',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              carsAvailable,\n              message: 'All Carss was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static manageCarsDetail(request,response){\n    const {\n      status,\n      car_type,\n      car_model,\n      description,\n      car_year,\n      assigned_driver_name,\n      assigned_driver_email,\n      assigned_driver_phone,\n      partner_id,\n      inspection_detail,\n      plate_number,\n      license,\n      assigned_driver_id,\n      images\n\n    } = request.body;\n\n\n      CarsModel.find({_id: request.params.id})\n    .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { question , answer} = request.body;\n        \n\n\n         CarsModel.updateOne({_id: request.params.id }, {\n                    \n                      status: status || redId.status,\n                      car_type: car_type|| redId.car_type,\n                      car_model: car_model || redId.car_model,\n                      description: description || redId.description,\n                      car_year : car_year || redId.car_year,\n                      assigned_driver_name: assigned_driver_name || redId.assigned_driver_name,\n                      assigned_driver_email: assigned_driver_email || redId.assigned_driver_email,\n                      assigned_driver_phone: assigned_driver_phone || redId.assigned_driver_phone,\n                      partner_id: partner_id || redId.partner_id,\n                      inspection_detail: inspection_detail || redId.inspection_detail,\n                      plate_number: plate_number || redId.plate_number,\n                      license: license || redId.license,\n                      assigned_driver_id: assigned_driver_id || redId.assigned_driver_id,\n                      images: images || redId.images\n                      //images\n                  \n                }).then(data => {\n                  \n                const cars = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: cars._id,\n                      data: cars,\n                      message: 'Updated faq record’s detail',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n\n\n  }\n\n\n  static createNewCar(request,response){\n    const {\n       status,\n            color,\n            model,\n      car_type,\n      car_model,\n      description,\n      car_year,\n      assigned_driver_name,\n      assigned_driver_email,\n      assigned_driver_phone,\n      partner_id,\n      inspection_detail,\n      plate_number,\n      license,\n      assigned_driver_id,\n      images\n\n    } = request.body;\n    \n    const NewCars = new CarsModel({ \n            id:  new AutoincrementId(CarsModel).counter(),\n            status,\n            color,\n            model: car_model,\n      car_type,\n      car_model,\n      description,\n      car_year,\n      assigned_driver_name,\n      assigned_driver_email,\n      assigned_driver_phone,\n      partner_id,\n      inspection_detail,\n      plate_number,\n      license,\n      assigned_driver_id,\n      images\n      });\n\n    NewCars.save()\n      .then(data => {\n        const Cars = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: Cars.id,\n              message: 'Created car record',\n            },\n          ],\n        });\n      })\n      .catch(err =>{\n        console.log(err)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n static  getCarsInfo(request,response){\n\n    const dataValues = [];\n    fs.createReadStream('cars_api_info.csv')\n      .pipe(csv())\n      .on('data', (row) => {\n        try{\n          dataValues.push(row)\n        }catch(e){\n           return  response.status(400).json({\n          status: 400,\n          data: [\n            {\n              \n              message: e,\n            },\n          ],\n        });\n        }\n        //console.log(row);\n      })\n      .on('end', () => {\n        //console.log('CSV file successfully processed');\n        //console.log(dataValues)\n        return   response.status(200).json({\n          status: 200,\n          data: [\n            {\n              carInfo: dataValues,\n              message: 'Created car record',\n            },\n          ],\n        });\n      });\n  }\n\n\n  \n\n\n\n  \n\n\n\n  \n  static manageGoogleSettings(request,response){\n    \n      GmailSettingModel.find()\n      .then(data => {\n        const googleSettings = data;\n        console.log(googleSettings,\"users available are here\")\n        if (googleSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              googleSettings,\n               \n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static manageFacebookSettings(request,response){\n     FacebookSettingModel.find()\n      .then(data => {\n        const facebookSettings = data;\n        console.log(facebookSettings,\"facebookSettings available are here\")\n        if (facebookSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              facebookSettings,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static managePaystackSettings(request,response){\n     PaystackSettingModel.find()\n      .then(data => {\n        const paystackSettings = data;\n        console.log(paystackSettings,\"paystackSettings available are here\")\n        if (paystackSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              paystackSettings,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static manageEmailSettings(request,response){\n     SendgridEmailSettingModel.find()\n      .then(data => {\n        const sendgridSettings = data;\n        console.log(sendgridSettings,\"sendgridSettings available are here\")\n        if (sendgridSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              sendgridSettings,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageS3BucketSettings(request,response){\n     AwsS3Model.find()\n      .then(data => {\n        const awsSettings = data;\n        console.log(awsSettings,\"awsSettings available are here\")\n        if (awsSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              awsSettings,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageInstagramSettings(request,response){\n     InstagramSettingModel.find()\n      .then(data => {\n        const instagramSettings = data;\n        console.log(instagramSettings,\"instagramSettings available are here\")\n        if (instagramSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              instagramSettings,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageSettingsDetail(request,response){\n\n    const {\n      test_secret_key,\n      test_public_key,\n      live_public_key,\n      live_secret_key,\n      api_mode,\n      type\n\n    } = request.body;\n   \n\n    switch (type){\n      case \"google\":\n       GmailSettingModel.findOne({ _id:  request.params.id }, function (err, settings) {\n\n        if (!settings) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n        settings.test_secret_key= test_secret_key || settings.test_secret_key;\n        settings.test_public_key= test_public_key || settings.test_public_key;\n     \n        settings.live_secret_key= live_secret_key || settings.live_secret_key;\n        settings.live_public_key= live_public_key || settings.live_public_key;\n        settings.api_mode = api_mode || settings.api_mode;\n        \n        settings.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); }\n          \n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n        break;\n      case \"aws\":\n      \n        AwsS3Model.findOne({ _id:  request.params.id }, function (err, settings) {\n\n        if (!settings) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        settings.test_secret_key= test_secret_key || settings.test_secret_key;\n        settings.test_public_key= test_public_key || settings.test_public_key;\n     \n        settings.live_secret_key= live_secret_key || settings.live_secret_key;\n        settings.live_public_key= live_public_key || settings.live_public_key;\n        settings.api_mode = api_mode || settings.api_mode;\n        \n        settings.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); }\n          \n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n        break;\n      case \"facebook\":\n      \n\n       FacebookSettingModel.findOne({ _id:  request.params.id }, function (err, settings) {\n\n        if (!settings) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n        settings.test_secret_key= test_secret_key || settings.test_secret_key;\n        settings.test_public_key= test_public_key || settings.test_public_key;\n     \n        settings.live_secret_key= live_secret_key || settings.live_secret_key;\n        settings.live_public_key= live_public_key || settings.live_public_key;\n        settings.api_mode = api_mode || settings.api_mode;\n        \n        settings.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); }\n         \n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n       break;\n      case \"instagram\":\n      \n\n       InstagramSettingModel.findOne({ _id:  request.params.id }, function (err, settings) {\n\n        if (!settings) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        settings.test_secret_key= test_secret_key || settings.test_secret_key;\n        settings.test_public_key= test_public_key || settings.test_public_key;\n     \n        settings.live_secret_key= live_secret_key || settings.live_secret_key;\n        settings.live_public_key= live_public_key || settings.live_public_key;\n        settings.api_mode = api_mode || settings.api_mode;\n        \n        settings.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); }\n          \n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n       break;\n      case \"paystack\":\n      \n\n       PaystackSettingModel.findOne({ _id:  request.params.id }, function (err, settings) {\n\n        if (!settings) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n        settings.test_secret_key= test_secret_key || settings.test_secret_key;\n        settings.test_public_key= test_public_key || settings.test_public_key;\n     \n        settings.live_secret_key= live_secret_key || settings.live_secret_key;\n        settings.live_public_key= live_public_key || settings.live_public_key;\n        settings.api_mode = api_mode || settings.api_mode;\n        \n        settings.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); }\n         \n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n       break;\n      case \"sendgrid\":\n\n       SendgridEmailSettingModel.findOne({ _id:  request.params.id }, function (err, settings) {\n\n        if (!settings) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        settings.test_secret_key= test_secret_key || settings.test_secret_key;\n        settings.test_public_key= test_public_key || settings.test_public_key;\n     \n        settings.live_secret_key= live_secret_key || settings.live_secret_key;\n        settings.live_public_key= live_public_key || settings.live_public_key;\n        settings.api_mode = api_mode || settings.api_mode;\n        \n        settings.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); }\n          \n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n       break;\n    }\n\n  }\n\n\n  static manageBookings(request,response){\n    return  UserService.manageBookings(request,response)\n  }\n\n\n \n\n   static makeQuotation(request,response){\n      let  {\n                   plan_id,\n                  price,\n                  status,\n                  full_name,\n                  quotation_id,\n                  email,\n                  reference,\n                  amount,\n                  createdDateOfQuotation,\n                  phone_number\n\n                }  = request.body;\n\n\n    \n     const NewUserPlan = new QuoteModel({ \n      id: new AutoincrementId(QuoteModel).counter(), \n      plan_id,\n      price,\n      status,\n      full_name,\n      quotation_id,\n      email,\n      reference,\n      amount,\n      createdDateOfQuotation,\n      phone_number,\n     });\n\n\n     NewUserPlan.save()\n      .then(data => {\n        const user = data;\n        console.log(user + \"plans\")\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              user\n            },\n          ],\n          message: 'User Plan created successfully',\n        });\n      \n      })\n      .catch(err => {\n        console.log(err+ 'error here user plan')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n      // UserService.saveUsersItinerary(request,response);\n  }\n             \n\n\n  static createNewPlanBooking(request,response){\n      let {\n       itineraries,\n      user_id,\n      carsSelected,\n      planName,\n      price,\n      planCategoryName,\n      no_hours,\n      username,\n      email,\n      phone_number,\n      plan_id,\n    } = request.body;\n\n\n    \n     const NewUserPlan = new UserPlanModel({ \n      id: new AutoincrementId(UserPlanModel).counter(), \n      user_id,\n      price,\n      plan_id,\n      phone_number,\n      plan_category_name:planCategoryName,\n      plan_name:planName,\n      cars_on_plan: carsSelected,\n      itineries: itineraries,\n      duration:no_hours,\n      no_hours:no_hours,\n      username: username,\n      email: email\n     });\n\n\n     NewUserPlan.save()\n      .then(data => {\n        const user = data;\n        console.log(user + \"plans\")\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              user\n            },\n          ],\n          message: 'User Plan created successfully',\n        });\n      \n      })\n      .catch(err => {\n        console.log(err+ 'error here user plan')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n      // UserService.saveUsersItinerary(request,response);\n  }\n\n\n\n  \n\n  static manageBookingsDetail(request,response){\n    return  UserService.manageBookingsDetail(request,response)\n  }\n\n  static manageManualBooking(request,response){\n    return  UserService.manageManualBooking(request,response)\n  }\n\n  static manageItineraries(request,response){\n    ItineraryModel.find()\n      .then(data => {\n        const itineraries = data;\n        console.log(data+ \"either empty itins\")\n        if (itineraries.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no itinerary record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              itineraries,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static manageUsersPlan(request,response){\n    UserPlanModel.find()\n      //.populate('users_collections')\n      .then(data => {\n        const usersPlan = data;\n        console.log(data+ \"either empty itins\")\n        if (usersPlan.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no plans record',\n          });\n        }\n\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              usersPlan,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  \n\n\n\n\n\n  static createNewItinerary(request, response) {\n    // console.log(request.body)\n\n\n\n  \n    let {\n       plan_category,\n       start_location,\n       destination,\n       travel_option:drive_option,\n       no_hours,\n       travel_option,\n       plan_name,\n       status,\n       start_time,\n    \n       drivingschool,\n       user_id,\n       username,\n       email,\n       phone_number,\n       plan_id,\n       end_time,\n        pickup_time,\n      certificate_id,\n      certificate_date\n    } = request.body;\n\n\n   \n\n    \n    const NewItinerary = new ItineraryModel({ \n      id: new AutoincrementId(ItineraryModel).counter(), \n       plan_category,\n       start_location,\n       destination,\n       travel_option:drive_option,\n       no_hours,\n       travel_option,\n       plan_name,\n       status,\n       start_time,\n       travel_option,\n       drivingschool,\n       user_id,\n       username,\n       email,\n       phone_number,\n       plan_id,\n       end_time,\n        pickup_time,\n      certificate_id,\n      certificate_date\n\n       \n     });\n\n     NewItinerary.save()\n      .then(data => {\n        const user = data;\n        const result = {\n           plan_category: user.plan_category,\n      start_location: user.start_location,\n      destination: user.destination,\n      drive_option:user.drive_option,\n      no_hours:user.no_hours,\n        travel_option:user.travel_option,\n      plan_name,\n      status,\n      start_time,\n      drivingschool,\n      username: user.username,\n      email:user.email\n           // cars_id: user.cars_id\n        };\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              result\n            },\n          ],\n          message: 'User Itinerary created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n\n\n  \n\n \n\n  static manageItineraryDetail(request,response){\n\n\n    ItineraryModel.find({_id: request.params.id})\n    .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given itinerary id does not exists',\n                    });\n        }\n         const { status, assigned_driver_id, assigned_driver_name, assigned_driver_email, assigned_driver_phone} = request.body;\n\n    \n        \n\n\n        ItineraryModel.updateOne({_id: request.params.id }, {\n                    \n                      status: status || redId.status,\n                      assigned_driver_id : assigned_driver_id || redId.assigned_driver_name,\n                      assigned_driver_name : assigned_driver_name || redId.assigned_driver_name,\n                      assigned_driver_email : assigned_driver_email || redId.assigned_driver_email,\n                      assigned_driver_phone: assigned_driver_phone || redId.assigned_driver_phone\n                      \n                  \n                }).then(data => {\n                  \n                const faq = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: faq._id,\n                      message: 'Updated faq record’s detail',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n\n    \n  }\n\n  static manageWalletHistory(req,res){\n    WalletModel.find().then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect('/api/v1/error')\n          }\n         const tranx = donor;\n         console.log(tranx)\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    tranx,\n                    message: 'Get all wallet amount  was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect('/api/v1/error')\n      })\n\n  }\n\n\n  static adminDashboardTodaySales(request,response){\n    //var now = new Date();\n    //var startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    // WalletModel.find({createdDate: {$gte: startOfToday}}, function (err, docs) { \n    //    if(err){\n    //      console.log(err)\n    //    }\n\n    //    return response.status(200).json({\n    //             status: 200,\n    //             data: [\n    //               {\n    //                 todaySales:docs,\n    //                 message: 'Get all wallet amount  was successful',\n    //               },\n    //             ],\n    //       });\n\n    //  });\n\n\n      const now = new Date();\n      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n      PaymentModel.find({created_at: {$gte: today}}).exec(function(err,wallet){\n           if(err){ \n              return response.status(400).json({\n                status: 400,\n                message: 'Get all wallet amount  was successful',     \n              });\n\n           }\n\n             let totalToday =0;\n             let todaySales_from_account = wallet.map((item,i)=>{\n                 totalToday+=item.amount\n              })\n\n            return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    todaySales:totalToday,\n                    message: 'Get all wallet amount  was successful',\n                  },\n                ],\n          });\n\n      });\n\n\n       \n  }\n\n  static adminDashboardYesterdaySales(request,response){\n\n    var yesterdayStart = new Date();\n    yesterdayStart.setDate(yesterdayStart.getDate() - 1);\n    yesterdayStart.setHours(0,0,0,0);\n    //var startId = Math.floor(yesterdayStart.getTime() / 1000).toString(16) + \"0000000000000000\";\n\n    var yesterdayEnd = new Date();\n    yesterdayEnd.setDate(yesterdayEnd.getDate() - 1);\n    yesterdayEnd.setHours(23,59,59,999);\n    \n\n\n\n    PaymentModel.find({ \"createdDate\": { $gt: new Date(Date.now() - 24*60*60 * 1000)} }).exec(function(err,wallet){\n           if(err){  console.log(err)}\n\n\n\n             let totalYest =0;\n             let todaySales_from_account = wallet.map((item,i)=>{\n                 totalYest+=item.amount\n              })\n\n             console.log(totalYest)\n\n            return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    yesterdaysSales:totalYest,\n                    message: 'Get all wallet amount  was successful',\n                  },\n                ],\n          });\n\n      });\n\n    \n\n  }\n\n  static adminDashboardWeeklySales(request,response){\n     let oneWeekAgo = Date(new Date() - 7 * 60 * 60 * 24 * 1000);\n\n     // WalletModel.find({createdDate: {\n     //       $gte: oneWeekAgo\n      \n     //    }\n     //  }, function (err, docs) { \n\n     //     if(err){\n     //     console.log(err)\n     //   }\n\n     //   return response.status(200).json({\n     //            status: 200,\n     //            data: [\n     //              {\n     //                weeklySales:docs,\n     //                message: 'Get all wallet amount  was successful',\n     //              },\n     //            ],\n     //      });\n\n     // });\n\n     \n\n      PaymentModel.find({ \"createdDate\": { $gte: oneWeekAgo} }).exec(function(err,wallet){\n           if(err){  console.log(err)}\n\n\n\n             let totalWeek =0;\n             let todaySales_from_account = wallet.map((item,i)=>{\n                 totalWeek+=item.amount\n              })\n\n        \n\n            return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    weeklySales:totalWeek,\n                    message: 'Get all wallet amount  was successful',\n                  },\n                ],\n          });\n\n      });\n  }\n\n  static adminDashboardMonthlySales(request,response){\n     const lastMonths = new Date( (new Date().getMonth() -1));\n     PaymentModel.find({\"createdDate\": {\n           \n           $lte: lastMonths\n        }\n      }, function (err, docs) {\n\n       if(err){\n         console.log(err)\n       }\n\n       return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    lastMonth:docs,\n                    message: 'Get all wallet amount  was successful',\n                  },\n                ],\n          });\n\n\n     });\n\n\n  }\n\n  \n\n  \n\n   \n\n  static adminGetAllUsers(request,response){\n    \n  }\n\n\n\n  static adminGetAllUsersPlans(request,response){\n    \n  }\n\n\n\n  static paystackHistoryAdmin(req,res){\n    const id = new String(req.params.id);\n    WalletModel.find().then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect('/api/v1/error')\n          }\n         const tranx = donor;\n         console.log(tranx +\"for the user\")\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    wallets:tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect('/api/v1/error')\n      })\n  }\n\n\n  static paystackPaymentsAdmin(req,res){\n    const id = new String(req.params.id);\n    PaymentModel.find().then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect('/api/v1/error')\n          }\n         const tranx = donor;\n         console.log(tranx +\"for the user\")\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    payments:tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect('/api/v1/error')\n      })\n  }\n\n\n  static paystackQuotationsAdmin(req,res){\n    const id = new String(req.params.id);\n    QuoteModel.find().then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect('/api/v1/error')\n          }\n         const tranx = donor;\n         console.log(tranx +\"for the user quotations\")\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    quotations:tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect('/api/v1/error')\n      })\n  }\n\n\n\n\n  static updateUsersPlanStatusAdmin(request, response) {\n    \n      const  {\n                    status,\n                    payment_status,\n                    email,\n                     has_updated,\n                     plan_id,\n                     price,\n                     createdDateOfQuotation\n                  }= request.body;\n\n\n    UserPlanModel.findOne({ plan_id:request.params.id }, function (err, user) {\n\n      // Verify and save the user\n      user.status= status || user.status;\n      user.payment_status= payment_status || user.payment_status;\n      user.email= email || user.email;\n   \n      user.has_updated= has_updated || user.has_updated;\n      user.plan_id= plan_id || user.plan_id;\n      user.price = price || user.price;\n      user.createdDateOfQuotation = createdDateOfQuotation || user.createdDateOfQuotation\n      \n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n\n\n        var smtpConfig = {\n              host: 'smtp.gmail.com',\n              port: 587,\n              service:'gmail',\n              secure: true, // use SSL, \n                            // you can try with TLS, but port is then 587\n              auth: {\n                user:  'juwavictor@gmail.com',//process.env.APPLICATION_GMAIL, // Your email id\n                pass:  'saladin123!@jhjhj#'// process.env.APPLICATION_GMAIL_PASSWORD\n              }\n            };\n            // Send the email\n            // var transporter = nodemailer.createTransport(\n            //   //{ service: 'Sendgrid', auth: { user: process.env.SENDGRID_USERNAME, pass: process.env.SENDGRID_PASSWORD } }\n            //   smtpConfig\n            //   );\n\n            // Configure Nodemailer SendGrid Transporter\n            const transporter = nodemailer.createTransport(\n              sendgridTransport({\n                auth: {\n                  api_user: process.env.SENDGRID_USERNAME,    // SG username\n                  api_key: process.env.SENDGRID_PASSWORD, // SG password\n                },\n              })\n            );\n\n            \n            \n            var mailOptions = { \n              from:  'juwavictor@gmail.com', //process.env.APPLICATION_GMAIL, \n              to: user.email, \n              subject: 'Commute Plan Update', \n              \n\n            };\n\n           \n\n           if(user.status==\"Unpaid\"){\n\n            readHTMLFile(__dirname + '/templates/notification.html', function(err, html) {\n                var template = handlebars.compile(html);\n                var replacements = {\n                     username: user.username,\n                     plan_id:user.plan_id,\n                     price: user.price,\n                     date: createdDateOfQuotation.substring(0,10)\n                    //link: 'http:\\/\\/' + 'localhost:4000/'   \n                    //description: description\n                };\n                var htmlToSend = template(replacements);\n                \n                 mailOptions.html = htmlToSend;\n                transporter.sendMail(mailOptions, function (error, response) {\n                    if (error) {\n                        console.log(error+\"eroor here\");\n                        //callback(error);\n                    }\n                });\n            });\n\n          }else{\n\n             readHTMLFile(__dirname + '/templates/paid.html', function(err, html) {\n                var template = handlebars.compile(html);\n                var replacements = {\n                     username: user.username,\n                     plan_id:user.plan_id,\n                     price: user.price,\n                     date: createdDateOfQuotation.substring(0,10)\n                    //link: 'http:\\/\\/' + 'localhost:4000/'   \n                    //description: description\n                };\n                var htmlToSend = template(replacements);\n                \n                 mailOptions.html = htmlToSend;\n                transporter.sendMail(mailOptions, function (error, response) {\n                    if (error) {\n                        console.log(error+\"eroor here\");\n                        //callback(error);\n                    }\n                });\n            });\n\n          }\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n      }); \n    });\n\n    \n  }\n\n\n\n\n\n\n\n  static updateItineraryStatusAdmin(request, response) {\n\n     const {  status,\n                    user_plan_id,\n                  \n                  } = request.body;\n\n                  //multiple updates of the status for this itineraries attached to this plan\n\n    ItineraryModel.findOne({plan_id: request.params.id}, function (err, user) {\n\n      if(err){\n        console.log(err)\n      }\n\n      // Verify and save the user\n      user.status= status || user.status;\n      \n      user.plan_id= request.params.id || user.plan_id;\n      user.user_plan_id= user_plan_id || user.user_plan_id;\n      \n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n      }); \n    });\n\n // ItineraryModel.updateMany({ plan_id: plan_id },{ $set:{  status:status}},{ multi: true }, function(err,result){\n //                         if (err) {\n //                              console.log(err)\n //                              res.send(err);\n //                            } else {\n //                              console.log(result)\n //                              return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated itineraries of this plan .' });\n                    \n //                            }\n\n //    })     \n\n\n\n   \n  }\n\n\n\n\n//   const month = 10;\n// const year = 2016;\n// const fromDate = new Date(year, month, 1);\n// const toDate = new Date(fromDate.getFullYear(), fromDate.getMonth() + 1, 0);\n\n// const condition = {\"createdAt\": {'$gte': date, '$lte': lastDay)}};\n\n// Account.find(condition, function(err, response){\n//     if (!err){\n//         console.log(response);\n//     }\n// });\n\n\n  \n\n\n\n  \n\n//drivers\n\nstatic driverConfirmBooking(request,response){\n   return response.sendFile(path.join(__dirname + '/driver_confirm.html'));\n}\n\n\n\nstatic showUserInfo(request,response){\n\n  UserModel.find({email: request.params.id})\n      .then(data => {\n        console.log(\"specific profile:\" + data)\n        \n       \n        const userInfo = data; //related\n        if (userInfo.length <= 0) {\n                return response.status(404).json({\n                  status: 404,\n                  error: 'The user with the given id does not exists',\n                });\n        }\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    userInfo,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n    \n\n}\n\n\n\n\n\n\n\n  \n  \n}\n"],"file":"user_service.js"}