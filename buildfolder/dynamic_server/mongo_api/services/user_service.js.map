{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/services/user_service.js"],"names":["dotenv","config","csv","require","uuidv4","sgMail","postmark","sendgridTransport","process","env","gmailTransport","MailConfig","GmailTransport","smtpTransport","SMTPTransport","request","initializePayment","verifyPayment","MongooseDatabase","getInstance","Database","BACKEND_API","readHTMLFile","path","callback","fs","readFile","encoding","err","html","UserService","req","res","review","UserPlanModel","username","body","rating","save","then","result","User","findOne","user","reviews","push","json","message","error","status","UserModel","password","email","params","response","templateDir","replacements","userEmail","STATUS","HelperOptions","from","to","subject","context","name","address","__dirname","template","handlebars","compile","htmlToSend","sendMail","info","console","log","send","msg","success","data","replacementObj","tokenSTR","link","tokenToSend","firstname","lastname","phoneNumber","user_type","TokenGenerator","hashPassword","trim","Newuser","id","AutoincrementId","counter","phone_number","is_admin","emailT","crypto","randomBytes","toString","emailtoken","EmailTokenMakerForSignUp","_userId","_id","email_confirm_token","ress","newUserMail","token","generateToken","ErrorHandler","errors","validationError","isVerified","checkIfPasswordMatch","isAdmin","profile","avatar","plan","plan_name","balance","notification_count","roles","test_certificate","account_num","accountNumber","from_mobile","type","sendFile","join","phone","result2","hashedStringToSend","Storage","setItem","ForgotModelToken","ForgotPasswordToken","email_to_reset","passwordResetsMail","plan_id","plan_id_to_pay","accountBalance","newDonor","String","Date","reference","amount","customer","full_name","metadata","donor","WalletModel","confirmPass","confirmPassword","getItem","find","userInfo","length","RolesAndPreviledgesModel","for_admins","previledges_info","view_bookings","view_quotations","view_transactions","view_payments","view_drivers","view_sos","view_partners","view_package","view_cars","view_tickets","view_faqs","view_users","view_admins","view_settings","manage_bookings","manage_quotations","manage_transactions","manage_payments","manage_drivers","manage_sos","manage_partners","manage_package","manage_cars","manage_tickets","manage_faqs","manage_users","manage_admins","manage_settings","view_car_inspection","view_drive_test","manage_drive_test","manage_car_inspection","users","updateMany","$set","multi","old_balance","currentBalance","passwordConfirm","certificate","itineraries","user_id","carsSelected","planName","price","planCategoryName","no_hours","NewUserPlan","plan_category_name","cars_on_plan","itineries","duration","ItineraryModel","JSON","stringify","remove","deletedUser","plan_category","start_location","destination","drive_option","start_time","travel_option","drivingschool","NewItinerary","Number","redId","updateOne","redflagStatus","NotificationModel","totalAvg","ratings","parseInt","ratings_average","certificate_id","end_time","cars_id","IndividualPlanModel","individualPlans","coperatePlanModel","coperatePlan","strigify","redflags","removeOne","deletedRedFlag","itinerary","RedFlagModel","plans","QuoteModel","quote","oldBalance","debit_amount","bal","has_updated","userItins","user_plan_id","has_received_payments","has_received_quote","userPlanInfo","fullname","form","amout","redirect","parse","url","authorization_url","query","trxref","ref","convertedBal","e","quotation_id","PaymentModel","findById","tranx","for_users","description","NewNotificationModel","now","startOfToday","getFullYear","getMonth","getDate","sort","field","allNotification","boolVerification","passwordComfirm","is_verified","admins","usergroup_set","is_active","drivers","PartnersModel","partners","totalCars","bankAccount","bankAccountName","bankAccountNumber","firstName","lastName","userName","businessName","EarningsModel","earnings","paymentDate","PaymentStatus","PaymentAmount","paymentReference","partnerId","partnerEmail","partnerBankAccount","vehicleId","vehicleName","vehiclePlateNo","pid","partner","paymentStatus","paymentAmount","corporatePlans","delete_type","plan_categories","max_car","car_max","CarsModel","health_status","inspections","confirmedInspectionDate","confirmedInspectionTime","date","time","NotificationEmail","DEPLOY_FRONT_URL","createdDate","car_id","InspectionModel","DriveTestModel","testDrive","test_center","test_center_address","previledges","previledges_description","usergroups_old","usergroup","value","SOSModel","redFlag","InterventionsModel","intervention","category","assigned_to","comment","NewCars","Cars","responses","question","answer","FAQModel","faqs","faq","carsAvailable","cars","car_status","car_type","car_model","car_year","assigned_driver_name","assigned_driver_email","assigned_driver_phone","partner_id","inspection_detail","plate_number","license","assigned_driver_id","images","inspectionDate","vehicleIdentificationNumber","inspectionTime","color","model","car","carModel","carYear","vehicleColor","plateNo","carDescription","imagePath","creator","date_created","carInfo","carsApi","GmailSettingModel","googleSettings","MechModel","mech","mongoose","NewEarnings","Types","ObjectId","vehicle","Earnings","FacebookSettingModel","facebookSettings","PaystackSettingModel","paystackSettings","SendgridEmailSettingModel","sendgridSettings","AwsS3Model","awsSettings","InstagramSettingModel","instagramSettings","test_secret_key","test_public_key","live_public_key","live_secret_key","api_mode","settings","manageBookings","createdDateOfQuotation","has_been_updated","manageBookingsDetail","usersPlan","pickup_time","certificate_date","today","created_at","$gte","exec","wallet","totalToday","todaySales_from_account","map","item","i","todaySales","yesterdayStart","setDate","setHours","yesterdayEnd","$gt","totalYest","yesterdaysSales","oneWeekAgo","totalWeek","weeklySales","lastMonths","$lte","docs","lastMonth","wallets","payments","quotations","payment_status","substring","AuditNotificationModel","audit","admin","module_name","message_type","logMessage","NewAuditTrail","retrievalComments","vehicleID","partnerID","partnerName","retrievalDate","hasBeenRevoked","RetrievalTrail","Retrieval","carsNotInUse","promiseList","promistList"],"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ACRyB,YAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AADQ;AAER,mBAAOM,QAAQ,CAACL,MAAT,CAAgB,GAAhB,EAAqB0B,IAArB,CAA0B;AAAEC,cAAAA,GAAG,EAAE5B;AAAP,aAA1B,CAAP;AAED,WAJD;AAAA;AAAA;;AADgD;AAMhDyB,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AANgD;AAOhDD,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAPgD,CAQhD;AAQL,SAhBD;AAsBT,OAhCS,CAAZ;AAsCD,K,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","sourcesContent":["/* eslint-disable prefer-const */\n\n\nimport dotenv from 'dotenv';\ndotenv.config();\nimport Database from '../models/db';\n/*pAy stack*/\nimport request from 'request';\nimport _ from 'lodash';\n\nconst csv = require('csv-parser');\nconst uuidv4 = require('uuid/v4');\nconst sgMail = require('@sendgrid/mail');\n\nvar postmark = require(\"postmark\");\n\nimport carsApi from './cars_api';\n\nimport {passport ,express} from '../App'; \n//import EarningsModel from '../models/EarningsModel';\nimport AuditNotificationModel from '../models/AuditNotification.model';\nimport Retrieval from '../models/Retrival.model';\nimport UserPlanModel from '../models/UserPlan.model';\nimport PlanModel from \"../models/Plan.model\";\nimport ItineraryModel from '../models/Itinerary.model';\nimport IndividualPlanModel from '../models/IndividualPlan.model';\nimport NotificationModel from '../models/Notification.model'\nimport FAQModel from \"../models/FAQ.model\";\nimport coperatePlanModel from '../models/CoperatePlan.model';\nimport { TokenGenerator } from '../helpers/token_generator';\nimport { ErrorHandler } from '../helpers/error_handler';\nimport { ResponseHandler } from '../helpers/response_handler';\nimport UserModel from '../models/User.model.js';\nimport PartnersModel from \"../models/Partners.model.js\";\nimport EarningsModel from '../models/EarningsModel';\n//import DriversModel from \"../models/Driver.model.js\";\nimport WalletModel from '../models/Wallet.model.js';\nimport PaymentModel from \"../models/Payments.model.js\";\nimport QuotationsModel from \"../models/Quotation.model.js\"\nimport QuoteModel from \"../models/Quote.model.js\";\nimport AutoincrementId from '../helpers/autoincrement_mongo.js';\nimport EmailTokenMakerForSignUp from '../models/Token.model.js';\nimport ForgotPasswordToken from '../models/ForgotPassword.model.js';\nimport CarsModel from \"../models/Cars.model.js\";\nimport SOSModel from \"../models/SOS.model\";\nimport  InterventionsModel from '../models/Feedback.model';\nimport SendgridEmailSettingModel from \"../models/SendgridEmailSettings.model\";\nimport PaystackSettingModel from \"../models/PaystackSettings.model\";\nimport InstagramSettingModel from \"../models/InstagramSettings.model\";\nimport FacebookSettingModel from \"../models/FacebookSettings.model\";\nimport AwsS3Model from \"../models/AWS3BucketSettings.model\";\nimport GmailSettingModel from \"../models/GmailSettings.model\";\n\nimport InspectionModel from \"../models/Inspection.model\";\nimport DriveTestModel from  \"../models/DriveTest.model\";\nimport RolesAndPreviledgesModel from '../models/RolesAndPreviledges.model'\nimport MechModel from '../models/Repairs.model';\nimport nodemailer from 'nodemailer';\nimport crypto from 'crypto';\nimport path from 'path';\nconst sendgridTransport = require('nodemailer-sendgrid-transport');\n//import SocialAuthService from './social_auth_service';\nimport Storage from '../helpers/storage';\nimport multer from 'multer';\nimport Mixins from '../helpers/mixins';\nimport fs from 'fs';\nimport handlebars from 'handlebars';\n\nimport MailMan from './MailMan'\n\n\n\n// import carInfo  from \"../migrations/cars_info\";\n\n\n//other services\nimport CarsService  from \"./cars_services\";\nimport FaqService  from \"./faqs_service\";\nimport  FeedbackService  from './feedback_service';\nimport  SOSService  from \"./sos_service\";\n\n\n\nimport MailConfig from '../config/email';\n\nprocess.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0;\n\nvar gmailTransport = MailConfig.GmailTransport;\nvar smtpTransport = MailConfig.SMTPTransport;\n\n\nconst {initializePayment, verifyPayment} = require('../config/paystack')(request);\n\n\nconst MongooseDatabase =  Database.getInstance() || new  Database();\nlet BACKEND_API = \"https://demouserapp.commute.ng:12000/api/v1\";\n\n\nvar readHTMLFile = function(path, callback) {\n    fs.readFile(path, {encoding: 'utf-8'}, function (err, html) {\n        if (err) {\n            throw err;\n            callback(err);\n        }\n        else {\n            callback(null, html);\n        }\n    });\n};\n\n\n\n\n\n\n\n\nexport class UserService {\n\n  static NotificationEmail( request, response,templateDir, replacements,userEmail,STATUS=201){\n   //MailConfig.ViewOption(gmailTransport,hbs);\n    let HelperOptions = {\n      from:    ' \"Commute\" <noreply@commute.ng>',         //\"tester@softclo.com\", //'\"COMMUTE TAXI SERVICE\" <juwavictor@gmail.com>',\n      to:  userEmail, //'Joshua.adedoyin@softclo.com',\n      subject: 'Notification',\n      html: 'test',\n      context: {\n        name:\"COMMUTE TAXI\",\n        email: \"tester@softclo.com\",\n        address: \"3A DOTUN CLOSE, IKEJA LAGOS\"\n      }\n    };\n\n//     Signed out\n// Adedoyin Joshua\n//joshadedoyin.aj@gmail.com\n   \n\n    readHTMLFile(__dirname + templateDir, function(err, html) {\n                var template = handlebars.compile(html);\n               // var replacements = replacements;\n                var htmlToSend = template(replacements);\n                \n                HelperOptions.html = htmlToSend;\n                smtpTransport.sendMail(HelperOptions, (error,info) => {\n                      if(error) {\n                        console.log(error);\n                        //res.json(error);\n                        return response.status(400).send({ msg: error });\n                      }\n                      // console.log(\"email is send\");\n                      // console.log(info);\n                      //res.json(info)\n                      return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .', data: info });\n                     // return res.status(STATUS).send({ msg: \"successfully sent you a password reset link\", status:'ok',data: info }); \n                \n                });\n    })   \n\n }\n\n  static passwordResetsMail( request, response,userEmail,templateDir, replacementObj={username:'saladin'}, tokenSTR){\n    let HelperOptions = {\n      from: ' \"Commute\" <noreply@commute.ng>',            //'\"COMMUTE TAXI SERVICE\" <juwavictor@gmail.com>',\n      to:  userEmail, \n      subject: 'Hellow world!',\n      html: 'test',\n      context: {\n        name:\"COMMUTE TAXI\",\n        email: \"tester@softclo.com\",\n        address: \"3A DOTUN CLOSE, IKEJA LAGOS\"\n      }\n    };\n\n   \n    readHTMLFile(__dirname + templateDir, function(err, html) {\n                var template = handlebars.compile(html);\n                var replacements = {\n                     username: replacementObj.username ,//'juwavictor@gmail.com'\n                     link: BACKEND_API + '/auth/resetMyPassword\\/' + tokenSTR \n                };\n                var htmlToSend = template(replacements);\n                \n                HelperOptions.html = htmlToSend;\n                smtpTransport.sendMail(HelperOptions, (error,info) => {\n                      if(error) {\n                        // console.log(error);\n                        //res.json(error);\n                        return response.status(400).send({ msg: error });\n                      }\n                      // console.log(\"email is send\");\n                      // console.log(info);\n                      //res.json(info)\n                      \n                });\n\n               \n\n                   \n\n             })   \n\n }\n\n  static newUserMail(request,response, result, templateDir='/views/templates/signup-verification.html', tokenToSend, status=201){\n\n\n\n    let HelperOptions = {\n      from:   ' \"Commute\" <noreply@commute.ng>',  //'\"COMMUTE TAXI SERVICE\" <juwavictor@gmail.com>',  // process.env.SMTP_USER_NAME,\n      to:  result.email, //'Joshua.adedoyin@softclo.com',\n      subject: 'Sign Up Activation Email',\n      html: 'test',\n      context: {\n        name:\"COMMUTE TAXI\",\n        email:  \"tester@softclo.com\",\n        address: \"3A DOTUN CLOSE, IKEJA LAGOS\"\n      }\n    };\n\n\n   \n    readHTMLFile(__dirname + templateDir, function(err, html) {\n                var template = handlebars.compile(html);\n                var replacements = {\n                     username: result.username,\n                     link:  BACKEND_API +'/auth/confirmation/' + tokenToSend, \n                \n                };\n                var htmlToSend = template(replacements);\n                \n                HelperOptions.html = htmlToSend;\n                smtpTransport.sendMail(HelperOptions, (error,info) => {\n                      if(error) {\n                        console.log(error);\n                        return response.status(400).send({ msg: error });\n                       \n                      }\n                      console.log(\"email is send\");\n                      console.log(info);\n                      //res.json(info)\n                      \n                       \n                       \n\n\n\n\n                });\n\n               \n\n                   \n\n      })   \n\n    \n\n   \n\n  }\n  // static signup(request, response) {\n  //     let { firstname, \n  //         lastname,  \n  //         username, \n  //         email, \n  //         phoneNumber,\n  //         user_type, \n  //         password,\n           \n  //   } = request.body;\n\n   \n\n  //   let from_mobile = false;\n  //   if(request.body.from_mobile==true){\n  //     from_mobile =true;\n  //   }\n\n  //   console.log(password)\n  //   password = TokenGenerator.hashPassword(password.trim());\n  //   let roles = '';\n  //   if(request.body.roles){\n  //     roles = request.body.roles\n  //   }else{\n  //     roles = 'user';\n  //   }\n\n  //   let Newuser =null\n\n\n  //   if(request.body.from_mobile){\n  //     Newuser = new UserModel({ \n  //       id: new AutoincrementId(UserModel).counter(), \n  //       firstname, \n  //       lastname, \n  //       user_type, \n  //       username, \n  //       email, \n  //       phone_number: phoneNumber, \n  //       password,\n  //       is_admin: false,\n  //       roles: roles,\n  //       isVerified: true,\n  //       //accountNumber: uuidv4()\n  //        });\n\n  //   }else{\n        \n  //     Newuser = new UserModel({ \n  //           id: new AutoincrementId(UserModel).counter(), \n  //           firstname, \n  //           lastname, \n  //           user_type, \n  //           username, \n  //           email, \n  //           phone_number: phoneNumber, \n  //           password,\n  //           is_admin: false,\n  //           roles: roles,\n  //       //accountNumber: uuidv4()\n  //     });\n\n\n  //   }\n    \n\n     \n\n  //   if(from_mobile==false){\n\n  //     Newuser.save()\n  //     .then(data => {\n  //       const user = data;\n  //       const result = {\n  //         id: user.id,\n  //         email: user.email,\n  //         username: user.username,\n  //       };\n  //       let emailT = crypto.randomBytes(16).toString('hex');\n  //       // Create a verification token for this user\n  //       var emailtoken = new EmailTokenMakerForSignUp({ _userId: user._id, email_confirm_token: emailT });\n        \n  //                         // Save the verification token\n  //       emailtoken.save(function (err) {\n  //           if (err) { \n  //              return console.log(err.message );\n  //           }\n                              \n  //                             //console.log(__dirname + '/views/templates/signup-verification.html')\n\n  //          UserService.newUserMail(request,response, result,'/views/templates/signup-verification.html', emailtoken.email_confirm_token,201)\n  //               const token = TokenGenerator.generateToken(result);\n  //               return response.status(201).json({\n  //                                          status: 201,\n  //                                         data: [\n  //                                                {\n  //                                                  token,\n  //                                                   from_mobile:true,\n  //                                                   user,\n  //                                                },\n  //                                               ],\n  //                                                message: 'User created successfully',\n  //               });\n\n  //          })\n\n\n                            \n  //     })\n  //     .catch(err => {\n  //           console.log(err+ 'error here')\n  //           response.status(400).json({\n  //             status: 400,\n  //             error: ErrorHandler.errors().validationError,\n  //           });\n  //     });\n\n\n\n\n\n  //   }else{\n    \n\n  //     Newuser.save()\n  //     .then(data => {\n  //       const user = data;\n  //       const result = {\n  //         id: user.id,\n  //         email: user.email,\n  //         username: user.username,\n  //       };\n\n\n  //       const token = TokenGenerator.generateToken(result);\n  //       return response.status(201).json({\n  //               status: 201,\n  //               data: [\n  //                      {\n  //                       token,\n  //                       user,\n  //                      },\n  //                     ],\n  //                     message: 'User created successfully',\n  //             });                 \n  //     })\n  //     .catch(err => {\n  //           console.log(err+ 'error here')\n  //           response.status(400).json({\n  //             status: 400,\n  //             error: ErrorHandler.errors().validationError,\n  //           });\n  //     });\n\n\n  //   }\n\n      \n  // }\n\n  // static login(request, response) {\n  //   const { email, password } = request.body;\n  //   UserModel.findOne({email: email})\n  //     .then(data => {\n  //       const user = data;\n  //       console.log(user.isVerified)\n\n\n  //       if (!user) {\n  //         return response.status(422).json({\n  //           status: 422,\n  //           error: 'User does not exists',\n  //         });\n\n          \n  //       }\n\n\n\n  //       if(!user.isVerified){\n  //         let link = BACKEND_API + '/auth'\n  //         return response.status(422).json({\n  //           status: 422,\n  //           error: `<h6>Email verification step is needed. please check your email for a verification link or click the link to resend you an email verification</h6> \n\n  //           <a href=\"${link}/resend/${email}\">Resend </a>`,\n  //         });\n  //       }\n        \n  //       if (!TokenGenerator.checkIfPasswordMatch(password, user.password)) {\n  //         return response.status(422).json({\n  //           status: 422,\n  //           error: 'Invalid login details. Email or password is wrong',\n  //         });\n  //       }\n\n       \n\n  //       const result = {\n  //         id: user.id,\n  //         _id: user._id,\n  //         email: user.email,\n  //         isAdmin: user.is_admin,\n  //         isVerified:user.isVerified,\n  //         firstname: user.firstname,\n  //         username: user.username,\n  //          profile: user.avatar,\n  //         plan: user.plan_name,\n  //         balance: user.balance,\n  //         notification_count: user.notification_count,\n  //         user_type: user.user_type,\n  //         username:user.username,\n  //         phoneNumber: user.phone_number,\n  //         roles: user.roles,\n  //         test_certificate: user.test_certificate\n\n  //       };\n  //       const token = TokenGenerator.generateToken(result);\n  //       return response.status(200).json({\n  //         status: 200,\n  //         data: [\n  //           {\n  //             token,\n  //             user: {\n  //               id: user.id,\n  //                _id: user._id,\n  //               email: user.email,\n  //               isAdmin: user.is_admin,\n  //               isVerified:user.isVerified,\n  //               firstname: user.firstname,\n  //               username: user.username,\n  //               profile: user.avatar,\n  //               plan_name: user.plan_name,\n  //               balance: user.balance,\n  //               notification_count: user.notification_count,\n  //                user_type: user.user_type,\n  //                account_num: user.accountNumber,\n  //                username:user.username,\n  //                phoneNumber: user.phone_number,\n  //                roles: user.roles,\n  //               test_certificate: user.test_certificate\n  //             },\n  //           },\n  //         ],\n  //         message: 'Successfully signed in',\n  //       });\n  //     })\n  //     .catch(err =>\n  //       response.status(400).json({\n  //         status: 400,\n  //         error: ErrorHandler.errors().validationError,\n  //       }),\n  //     );\n  // }\n\n\n\n\n\n\n\n\n\n\n\n  //web sign up and login\n  static signup(request, response) {\n    let { firstname, \n         lastname,  \n         username, \n         email, \n         phoneNumber,\n         user_type, \n         password \n   } = request.body;\n\n   console.log(password)\n   password = TokenGenerator.hashPassword(password.trim());\n\n   const Newuser = new UserModel({ \n     id: new AutoincrementId(UserModel).counter(), \n     firstname, \n     lastname, \n     user_type, \n     username, \n     email, \n     phone_number: phoneNumber, \n     password,\n     is_admin: false,\n     //accountNumber: uuidv4()\n      });\n\n\n    Newuser.save()\n     .then(data => {\n       const user = data;\n       const result = {\n         id: user.id,\n         email: user.email,\n         username: user.username,\n       };\n       let emailT = crypto.randomBytes(16).toString('hex');\n       // Create a verification token for this user\n       var emailtoken = new EmailTokenMakerForSignUp({ _userId: user._id, email_confirm_token: emailT });\n       \n\n       \n       // Save the verification token\n       emailtoken.save(function (err) {\n           if (err) { \n             return console.log(err.message );\n            }\n           console.log(emailtoken.email_confirm_token, emailtoken._userId)\n           \n\n           //console.log(__dirname + '/views/templates/signup-verification.html')\n\n           let ress = UserService.newUserMail(request,response, result,'/views/templates/signup-verification.html', emailtoken.email_confirm_token,201)\n            \n           const token = TokenGenerator.generateToken(result);\n           \n\n                  return response.status(201).json({\n                    status: 201,\n                    data: [\n                      {\n                        token,\n                        user,\n                      },\n                    ],\n                    message: 'User created successfully',\n                  });\n\n           \n           \n\n\n\n           \n       });\n\n\n       \n     })\n     .catch(err => {\n       console.log(err+ 'error here')\n       response.status(400).json({\n         status: 400,\n         error: ErrorHandler.errors().validationError,\n       });\n     });\n }\n\n static login(request, response) {\n   const { email, password } = request.body;\n   UserModel.findOne({email: email})\n     .then(data => {\n       const user = data;\n       console.log(user.isVerified)\n\n\n       if (!user) {\n         return response.status(422).json({\n           status: 422,\n           error: 'User does not exists',\n         });\n\n         \n       }\n\n\n       \n\n\n       if(!user.isVerified){\n         return response.status(422).json({\n           status: 422,\n           error: `<h6>Email verification step is needed. please check your email for a verification link or click the link to resend you an email verification</h6> \n\n           <a href=\"https://demouserapp.commute.ng/api/v1/auth/resend/${email}\">Resend </a>`,\n         });\n       }\n       // console.log(email);\n       // console.log(password);\n       if (!TokenGenerator.checkIfPasswordMatch(password, user.password)) {\n         return response.status(422).json({\n           status: 422,\n           error: 'Invalid login details. Email or password is wrong',\n         });\n       }\n\n       //request.session.user = user;\n\n\n\n\n       const result = {  \n         id: user.id,\n         _id: user._id,\n         email: user.email,\n         isAdmin: user.is_admin,\n         isVerified:user.isVerified,\n         firstname: user.firstname,\n         lastname: user.lastname,\n         username: user.username,\n          profile: user.avatar,\n         plan: user.plan_name,\n         balance: user.balance,\n         notification_count: user.notification_count,\n         user_type: user.user_type,\n         username:user.username,\n         phoneNumber: user.phone_number,\n         roles: user.roles,\n         test_certificate: user.test_certificate\n\n       };\n       const token = TokenGenerator.generateToken(result);\n\n\n       //if request host is from user and user role is user or admin allow\n      //  if(request.headers.host==\"demouserapp.commute.ng\" && user.roles!=\"Individual Driver\"){\n           return response.status(200).json({\n         status: 200,\n         data: [\n           {\n             token,\n             user: {\n               id: user.id,\n                _id: user._id,\n               email: user.email,\n               isAdmin: user.is_admin,\n               isVerified:user.isVerified,\n               firstname: user.firstname,\n               username: user.username,\n               profile: user.avatar,\n               plan_name: user.plan_name,\n               balance: user.balance,\n               notification_count: user.notification_count,\n                user_type: user.user_type,\n                account_num: user.accountNumber,\n                username:user.username,\n         phoneNumber: user.phone_number,\n         roles: user.roles,\n          test_certificate: user.test_certificate\n             },\n           },\n         ],\n         message: 'Successfully signed in',\n       });\n      //  }\n       \n     })\n     .catch(err =>\n       response.status(400).json({\n         status: 400,\n         error: ErrorHandler.errors().validationError,\n       }),\n     );\n }\n\n\n\n\n\n\n  //web sign up and login\n  static signupMobile(request, response) {\n    let { firstname, \n         lastname,  \n         username, \n         email, \n         phoneNumber,\n         user_type, \n         password \n   } = request.body;\n\n   console.log(password)\n   password = TokenGenerator.hashPassword(password.trim());\n\n\n       let from_mobile = false;\n    if(request.body.from_mobile==true){\n      from_mobile =true;\n    }\n\n    console.log(password)\n    \n    let roles = '';\n    if(request.body.roles){\n      roles = request.body.roles\n    }else{\n      roles = 'user';\n    }\n\n\n\n\n\n\n    \n\n  const Newuser = new UserModel({ \n    id: new AutoincrementId(UserModel).counter(), \n    firstname, \n    lastname, \n    user_type, \n    username, \n    email, \n    phone_number: phoneNumber, \n    password,\n    is_admin: false,\n    isVerified: true,\n    roles\n    //accountNumber: uuidv4()\n     });\n\n\n   Newuser.save()\n    .then(data => {\n      const user = data;\n      const result = {\n        id: user.id,\n        email: user.email,\n        username: user.username,\n      };\n      let emailT = crypto.randomBytes(16).toString('hex');\n      // Create a verification token for this user\n      // var emailtoken = new EmailTokenMakerForSignUp({ _userId: user._id, email_confirm_token: emailT });\n      \n\n      \n      // Save the verification token\n      // emailtoken.save(function (err) {\n      //     if (err) { \n      //       return console.log(err.message );\n      //      }\n      //     console.log(emailtoken.email_confirm_token, emailtoken._userId)\n          \n\n          //console.log(__dirname + '/views/templates/signup-verification.html')\n\n          // UserService.newUserMail(request,response, result,'/views/templates/signup-verification.html', emailtoken.email_confirm_token,201)\n           const token = TokenGenerator.generateToken(result);\n           return response.status(201).json({\n                                              status: 201,\n                                              data: [\n                                                {\n                                                  token,\n                                                  user,\n                                                },\n                                              ],\n                                              message: 'User created successfully',\n                      });\n\n\n\n          \n      // });\n\n\n      \n    })\n    .catch(err => {\n      console.log(err+ 'error here')\n      response.status(400).json({\n        status: 400,\n        error: ErrorHandler.errors().validationError,\n      });\n    });\n }\n\n static loginMobile(request, response) {\n   const { email, password } = request.body;\n   UserModel.findOne({email: email})\n     .then(data => {\n       const user = data;\n       console.log(user.isVerified)\n\n\n       if (!user) {\n         return response.status(422).json({\n           status: 422,\n           error: 'User does not exists',\n         });\n\n         \n       }\n\n\n       \n\n\n       if(!user.isVerified){\n         return response.status(422).json({\n           status: 422,\n           error: `<h6>Email verification step is needed. please check your email for a verification link or click the link to resend you an email verification</h6> \n\n           <a href=\"https://demouserapp.commute.ng/api/v1/auth/resend/${email}\">Resend </a>`,\n         });\n       }\n       // console.log(email);\n       // console.log(password);\n       if (!TokenGenerator.checkIfPasswordMatch(password, user.password)) {\n         return response.status(422).json({\n           status: 422,\n           error: 'Invalid login details. Email or password is wrong',\n         });\n       }\n\n       //request.session.user = user;\n\n\n       \n\n       const result = {  \n         id: user.id,\n         _id: user._id,\n         email: user.email,\n         isAdmin: user.is_admin,\n         isVerified:user.isVerified,\n         firstname: user.firstname,\n         username: user.username,\n          profile: user.avatar,\n         plan: user.plan_name,\n         balance: user.balance,\n         notification_count: user.notification_count,\n         user_type: user.user_type,\n         username:user.username,\n         phoneNumber: user.phone_number,\n         roles: user.roles,\n         test_certificate: user.test_certificate\n\n       };\n       const token = TokenGenerator.generateToken(result);\n\n\n       //if request host is from user and user role is user or admin allow\n      //  if(request.headers.host==\"demouserapp.commute.ng\" && user.roles!=\"Individual Driver\"){\n           return response.status(200).json({\n         status: 200,\n         data: [\n           {\n             token,\n             user: {\n               id: user.id,\n                _id: user._id,\n               email: user.email,\n               isAdmin: user.is_admin,\n               isVerified:user.isVerified,\n               firstname: user.firstname,\n               username: user.username,\n               profile: user.avatar,\n               plan_name: user.plan_name,\n               balance: user.balance,\n               notification_count: user.notification_count,\n                user_type: user.user_type,\n                account_num: user.accountNumber,\n                username:user.username,\n         phoneNumber: user.phone_number,\n         roles: user.roles,\n          test_certificate: user.test_certificate\n             },\n           },\n         ],\n         message: 'Successfully signed in',\n       });\n      //  }\n       \n     })\n     .catch(err =>\n       response.status(400).json({\n         status: 400,\n         error: ErrorHandler.errors().validationError,\n       }),\n     );\n }\n\n\n\n\n\n  static logout(request,response){\n\n  }\n\n  static confirmationPost (req, res) {\n   \n\n    // Find a matching token\n    EmailTokenMakerForSignUp.findOne({ email_confirm_token:  req.params.id }, function (err, token) {\n       \n        if (!token) return res.status(400).send({ type: 'not-verified', msg: 'We were unable to find a valid token. Your token my have expired.' });\n\n        // If we found a token, find a matching user email: req.body.email\n        UserModel.findOne({ _id: token._userId  }, function (err, user) {\n            if (!user) {\n              //return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\n              return  res.sendFile(path.join(__dirname + '../../../../../UI/user/page-503.html'));\n            }\n            if (user.isVerified) {\n              //return res.status(201).send({ type: 'already-verified', msg: 'This user has already been verified.' });\n              return  res.sendFile(path.join(__dirname + '/views/templates/already-verified.html'));\n            \n\n            }\n\n            // Verify and save the user\n            user.isVerified = true;\n            user.save(function (err) {\n                if (err) { return res.status(500).send({ msg: err.message }); }\n                //res.status(200).send(\"The account has been verified. Please wait...\");\n                   \n                if(user.roles!='Individual Driver'){\n                  return  res.sendFile(path.join(__dirname + '/views/templates/proceed-to-login.html'));\n               \n                } \n                return  res.sendFile(path.join(__dirname + '/views/templates/proceed-to-login-driver.html'));\n                     \n                 \n\n            });\n\n\n            \n        });\n    });\n}\n\n\nstatic userExists(request,response){\n\n  UserModel.findOne({ email: request.body.email }, function (err, user) {\n        if (!user) {\n          return response.status(404).json({\n            status: 404,\n            data: [\n              {\n              \n                \n              },\n            ],\n            message: 'User Not found ',\n          });\n        }\n        \n        \n        return response.status(200).json({\n            status: 200,\n            data: [\n              {\n              email: user.email,\n              phone: user.phone_number,\n              username: user.username\n                \n              },\n            ],\n            message: 'User found successfully',\n          });\n\n  })\n    \n}\n\n\n/**\n* POST /resend\n*/\nstatic resendTokenPost (req, res) {\n    UserModel.findOne({ email: req.params.id }, function (err, user) {\n        if (!user) return res.status(400).send({ msg: 'We were unable to find a user with that email.' });\n        \n        if (user.isVerified) return  res.sendFile(path.join(__dirname + '/views/already-verified.html'));\n        \n\n        // Create a verification token, save it, and send email\n        var token = new EmailTokenMakerForSignUp({ _userId: user.id, email_confirm_token: crypto.randomBytes(16).toString('hex') });\n        // Save the token\n        token.save(function (err) {\n            if (err) { return res.status(500).send({ msg: err.message }); }\n\n            \n            var result = { \n              id:user.id,\n              username: user.username, \n              firstname: user.firstname,\n              email: user.email,\n              \n             \n\n            };\n\n            var result2 = { \n              id:user.id,\n              username: user.username, \n              firstname: user.firstname,\n              email: user.email,\n              \n             \n\n            };\n\n          UserService.newUserMail(req,res, result2,'/views/templates/signup-verification.html', token.email_confirm_token, 200)\n           \n           const token = TokenGenerator.generateToken(result);\n            return res.status(200).json({\n                                                status: 200,\n                                                data: [\n                                                  {\n                                                    token,\n                                                    result,\n                                                  },\n                                                ],\n                                                message: 'User created successfully',\n                        });\n\n           \n\n         \n            \n        });\n\n    });\n}\n\n\nstatic passwordForgot(req, res){\n\n    let email = req.body.email;\n    UserModel.findOne({ email: email }, function (err, user) {\n        if (!user) return res.status(400).send({ msg: 'We were unable to find a user with that email.' });\n        let hashedStringToSend = crypto.randomBytes(16).toString('hex');\n\n        Storage.setItem('hasher', hashedStringToSend);\n            // Create a verification token for this user\n        var ForgotModelToken = new ForgotPasswordToken({ \n             _userId: user.id, \n             email_confirm_token: hashedStringToSend,\n             email_to_reset: email \n        });\n            \n\n            \n\n            // Save the verification token\n        ForgotModelToken.save(function (err) {\n            if (err) { \n              return res.status(500).send({ msg: err.message });\n            }\n\n\n            UserService.passwordResetsMail( req, res,user.email,'/views/templates/reset-password.html', {username:user.username}, hashedStringToSend)\n            return res.status(200).send({ msg: \"successfully sent you a password reset link\", status:'ok' }); \n                \n         \n        });\n\n    });\n\n  }\n\n\n  static confirmResetPassword (req, res) {\n     return  res.sendFile(path.join(__dirname + '/views/pw-reset.html'));\n            \n  }\n\n\n\n  \n  static changePasswordTriggerMobile(req,res){\n    let password = req.body.password;\n    let email = req.body.email;\n   \n    // console.log(req.params.id)\n   \n    // Find a matching token\n   \n        // If we found a token, find a matching user email: req.body.email\n        UserModel.findOne({ email: email  }, function (err, user) {\n            if (!user) return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\n            //if (user.email != token.email_to_reset) return res.status(400).send({ type: 'No Reset Token', msg: 'This user reset token was not set.' });\n\n            // Verify and save the user\n            user.password = TokenGenerator.hashPassword(password.trim());\n            user.save(function (err) {\n                if (err) { return res.status(500).send({ msg: err.message }); }\n                return res.status(200).send({ msg:\"The account password has been reset. Please wait...\" , status:'ok'});\n                //return  res.sendFile(path.join(__dirname + '/pw-reset-success.html'));\n            }); \n        });\n    \n  }\n\n  static setPlanIdForUser(request,response){\n\n   \n    let email = req.body.email;\n    let plan_id = req.body.plan_id;\n   \n    // console.log(req.params.id)\n   \n    // Find a matching token\n   \n        // If we found a token, find a matching user email: req.body.email\n        UserModel.findOne({ email: email  }, function (err, user) {\n            if (!user) return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\n            //if (user.email != token.email_to_reset) return res.status(400).send({ type: 'No Reset Token', msg: 'This user reset token was not set.' });\n\n            // Verify and save the user\n            user.plan_id_to_pay = plan_id || \"No plan id\"\n            user.save(function (err) {\n                if (err) { return res.status(500).send({ msg: err.message }); }\n                return res.status(200).send({ msg:\"The plan id  has been updated\" , status:'ok'});\n                //return  res.sendFile(path.join(__dirname + '/pw-reset-success.html'));\n            }); \n        });\n   \n\n  }\n\n\n  \n  static getPlanIdForUser(request,response){\n\n   \n    let email = req.params.id;\n    \n   \n    // console.log(req.params.id)\n   \n    // Find a matching token\n   \n        // If we found a token, find a matching user email: req.body.email\n        UserModel.findOne({ email: email  }, function (err, user) {\n            if (!user) return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\n            //if (user.email != token.email_to_reset) return res.status(400).send({ type: 'No Reset Token', msg: 'This user reset token was not set.' });\n\n            // Verify and save the user\n            let plan_id = user.plan_id_to_pay || \"No plan id\"\n            user.save(function (err) {\n                if (err) { return res.status(500).send({ msg: err.message }); }\n                return res.status(200).send({ plan_id:plan_id , status:'ok'});\n                //return  res.sendFile(path.join(__dirname + '/pw-reset-success.html'));\n            }); \n        });\n   \n\n  }\n\n\n  static walletUpgradeViaMobile(req,res){\n    let balance= req.body.accountBalance;\n    let email = req.body.email;\n   \n    // console.log(req.params.id)\n   \n    // Find a matching token\n   \n        // If we found a token, find a matching user email: req.body.email\n        UserModel.findOne({ email: email  }, function (err, user) {\n            if (!user) return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\n            //if (user.email != token.email_to_reset) return res.status(400).send({ type: 'No Reset Token', msg: 'This user reset token was not set.' });\n\n            // Verify and save the user\n            user.balance = balance;\n            user.save(function (err) {\n\n              \n                if (err) { return res.status(500).send({ msg: err.message }); }\n\n\n                //add wallet transaction\n\n                const newDonor = {id: new String(new Date()), reference, amount:(amount/100), email: customer.email,full_name: metadata.full_name,phone_number}\n\n                const donor = new WalletModel(newDonor)\n      \n                donor.save().then((donor,error)=>{\n                    if(!donor){\n                      console.log(error)\n                      return res.status(500).send({ msg: error });\n                    }\n                    return res.status(200).send({ msg:\"The account balance has been updated\" , status:'ok'});\n                \n\n                })\n\n\n                  //return  res.sendFile(path.join(__dirname + '/pw-reset-success.html'));\n            }); \n        });\n\n\n\n    \n  }\n\n  static changePasswordTrigger(req,res){\n    let password = req.body.password;\n    let confirmPass = req.body.confirmPassword;\n    if(password!= confirmPass){\n      console.log('err here1')\n       return res.status(400).send({ msg: 'password do not match.' });\n    }\n    // console.log(req.params.id)\n   \n    // Find a matching token\n    ForgotPasswordToken.findOne({  email_confirm_token:  Storage.getItem('hasher') }, function (err, token) {\n         console.log(token)\n         console.log(Storage.getItem('hasher'))\n        if (!token) { \n          console.log('error here 2');\n          console.log(err)\n          return res.status(400).send({ type: 'not-verified', msg: 'We were unable to find a valid token. Your token my have expired.' });\n\n        }\n\n        // If we found a token, find a matching user email: req.body.email\n        UserModel.findOne({ email: token.email_to_reset  }, function (err, user) {\n            if (!user) return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\n            if (user.email != token.email_to_reset) return res.status(400).send({ type: 'No Reset Token', msg: 'This user reset token was not set.' });\n\n            // Verify and save the user\n            user.password = TokenGenerator.hashPassword(password.trim());\n            user.save(function (err) {\n                if (err) { return res.status(500).send({ msg: err.message }); }\n                return res.status(200).send({ msg:\"The account password has been reset. Please wait...\" , status:'ok'});\n                //return  res.sendFile(path.join(__dirname + '/pw-reset-success.html'));\n            }); \n        });\n    });\n  }\n\n \n  \n  static showProfile(request,response){//profile-admin-rights\n\n    // UserModel.find({id: Number(request.params.id)})\n    UserModel.find({email:request.params.id})\n      .then(data => {\n        console.log(\"specific profile:\" + data)\n        \n       \n        const userInfo = data; //related\n        if (userInfo.length <= 0) {\n                return response.status(404).json({\n                  status: 404,\n                  error: 'The user with the given id does not exists',\n                });\n        }\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    userInfo,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n    \n    \n  }\n\n\n  \n\nstatic getAsyncRoles = async function(request,response){\n    try{\n        const promiseList = await RolesAndPreviledgesModel.findOne({ for_admins:  true, previledges_info: request.params.roles }).exec;\n        return promistList;\n    }catch(err){\n        return err;\n    }\n}\n\n\nstatic getAsyncUsers = async function(request,response){\n    try{\n        const promiseList = await RolesAndPreviledgesModel.findOne({ for_admins:  true, previledges_info: request.params.roles }).exec();\n        return promistList;\n    }catch(err){\n        return err;\n    }\n}\n\n\nstatic updateAsyncUserPreviledges = async function(request,response){\n    try{\n        const promiseList = await  UserModel.find({_id: request.params.id}).exec();\n        return promistList;\n    }catch(err){\n        return err;\n    }\n}\n\n\n\n\n  static showProfileRights(request,response){//profile-admin-rights\n\n    console.log(request.params.roles +\"what we need\")\n\n\n    RolesAndPreviledgesModel.findOne({ for_admins:  true, previledges_info: request.params.roles }, function (err, roles) {\n\n        if (!roles) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        roles.status =  roles.status;\n        roles.view_bookings=  roles.view_bookings;\n          roles.view_quotations=  roles.view_quotations;\n          roles.view_transactions= roles.view_transactions;\n          roles.view_payments = roles.view_payments;\n          roles.view_drivers =  roles.view_drivers;\n          roles.view_sos= roles.view_sos;\n          roles.view_partners = roles.view_partners;\n          roles.view_package= roles.view_package;\n          roles.view_cars= roles.view_cars;\n          roles.view_tickets = roles.view_tickets;\n          roles.view_faqs = roles.view_faqs;\n          roles.view_users = roles.view_users;\n          roles.view_admins =  roles.view_admins;\n          roles.view_settings = roles.view_settings;\n\n\n        \n        roles.manage_bookings= roles.manage_bookings;\n          roles.manage_quotations=  roles.manage_quotations;\n          roles.manage_transactions=  roles.manage_transactions;\n          roles.manage_payments =roles.manage_payments;\n          roles.manage_drivers = roles.manage_drivers;\n          roles.manage_sos= roles.manage_sos;\n          roles.manage_partners =  roles.manage_partners;\n          roles.manage_package=  roles.manage_package;\n          roles.manage_cars= roles.manage_cars;\n          roles.manage_tickets = roles.manage_tickets;\n          roles.manage_faqs =  roles.manage_faqs;\n          roles.manage_users =  roles.manage_users;\n          roles.manage_admins =  roles.manage_admins;\n          roles.manage_settings = roles.manage_settings;\n\n          roles.view_car_inspection = roles.view_car_inspection;\n          roles.view_drive_test = roles.view_drive_test;\n\n          roles.manage_drive_test = roles.manage_drive_test;\n          roles.manage_car_inspection = roles.manage_car_inspection\n\n\n\n    \n\n     \n        roles.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n\n          console.log(user)\n\n          //find all users of usch roles and update\n          UserModel.find({ roles:  request.params.roles }, function (err, users) {\n\n                if (!users) {\n                  return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n                }\n\n               \n               console.log(roles.view_faqs,roles.view_package,roles.view_drivers)\n               UserModel.updateMany({ roles: new String(request.params.roles) },\n                 { $set:\n                       { \n\n\n                            view_bookings: roles.view_bookings,\n                            view_quotations: roles.view_quotations,\n                            view_transactions: roles.view_transactions,\n                            view_payments : roles.view_payments,\n                            view_drivers :  roles.view_drivers,\n                            view_sos: roles.view_sos,\n                            view_partners :  roles.view_partners,\n                            view_package:roles.view_package,\n                            view_cars: roles.view_cars,\n                            view_tickets : roles.view_tickets,\n                            view_faqs : roles.view_faqs,\n                            view_users : roles.view_users,\n                            view_admins : roles.view_admins,\n                            view_settings : roles.view_settings,\n\n\n                          \n                            manage_bookings : roles.manage_bookings,\n                            manage_quotations : roles.manage_quotations,\n                            manage_transactions : roles.manage_transactions,\n                            manage_payments : roles.manage_payments,\n                            manage_drivers : roles.manage_drivers,\n                            manage_sos: roles.manage_sos,\n                            manage_partners : roles.manage_partners,\n                            manage_package: roles.manage_package,\n                            manage_cars: roles.manage_cars,\n                            manage_tickets : roles.manage_tickets,\n                            manage_faqs : roles.manage_faqs,\n                            manage_users : roles.manage_users,\n                            manage_admins : roles.manage_admins,\n                            manage_settings : roles.manage_settings,\n\n                            view_drive_test: roles.view_drive_test,\n                            view_car_inspection: roles.view_car_inspection,\n                            manage_drive_test: roles.manage_drive_test,\n                            manage_car_inspection: roles.manage_car_inspection\n\n\n                        }\n              },{ multi: true }\n              \n              , function(err,result)\n                 {\n                  if (err) {\n                    console.log(err)\n                    res.send(err);\n                  } else {\n                    \n                           UserModel.find({email: request.params.id})\n                                  .then(data => {\n                                    console.log(\"specific profile:\" + data)\n                                    \n                                   \n                                    const userInfo = data; //related\n                                    if (userInfo.length <= 0) {\n                                            return response.status(404).json({\n                                              status: 404,\n                                              error: 'The user with the given id does not exists',\n                                            });\n                                    }\n                                    return response.status(200).json({\n                                            status: 200,\n                                            data: [\n                                              {\n                                                userInfo,\n                                                message: 'Get a specific user was successful',\n                                              },\n                                            ],\n                                      });\n                                  })\n                                  .catch(err =>\n                                          response.status(400).json({\n                                            status: 400,\n                                            error: ErrorHandler.errors().validationError,\n                                          }),\n                                        );\n                  }\n              \n              });\n\n\n\n\n           })\n\n\n        }); \n      });\n\n\n\n\n\n\n  }\n\n\n\n  static getUserPreviledges(request,response){\n\n    UserModel.find({email: request.params.id})\n      .then(data => {\n        console.log(\"specific profile:\" + data)\n        \n       \n        const userInfo = data; //related\n        if (userInfo.length <= 0) {\n                return response.status(404).json({\n                  status: 404,\n                  error: 'The user with the given id does not exists',\n                });\n\n        }\n      \n\n\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    userInfo,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n\n  }\n\n\n  static setOldBalance(request,response){\n       const {\n      old_balance,\n      currentBalance\n    } = request.body;\n\n\n\n    \n\n    \n\n\n    UserModel.findOne({ email:  request.params.id }, function (err, user) {\n\n      if (!user) return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n     \n      user.old_balance = old_balance|| user.old_balance;\n      user.balance = currentBalance || user.balance;\n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n\n\n\n  static updateProfile(request,response){\n\n    \n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      passwordConfirm,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n    } = request.body;\n\n\n\n    if(password.length && passwordConfirm.length){\n      if(password!= passwordConfirm){\n        console.log('err here1')\n        return res.status(400).send({ msg: 'password do not match.' });\n      }\n    }\n\n    \n\n\n\n    UserModel.findOne({ email:  request.params.id }, function (err, user) {\n\n      if (!user) return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      if(password==\"unchanged\" && passwordConfirm==\"unchanged\"){\n       user.password= user.password;\n       console.log(\"old:\" + user.password)\n      } else{\n        user.password= TokenGenerator.hashPassword(password.trim());\n        console.log(\"new pass: \"+ user.password)\n      }\n\n     \n      console.log(avatar)\n      // Verify and save the user\n      user.avatar= avatar || user.avatar;\n      user.username= username || user.username;\n      user.email= email || user.email;\n   \n      user.roles= user_type|| user.user_type;\n      user.firstname= firstname|| user.firstname;\n      user.lastname = lastname || user.lastname;\n      user.phone_number = phoneNumber|| user.phone_number;\n      user.test_certificate = certificate|| user.test_certificate;\n      user.save(function (err,user) {\n        if (err) { \n          console.log(err)\n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n\n  // static loginWithTwitter(request,response){\n  //   //return UserService.loginWithTwitter(request,response)\n  // }\n\n  // static loginWithFaceBook(request,response){\n  //  //return UserService.loginWithFaceBook(request,response)\n  // }\n\n  // static loginWithGoogle(request,response){\n  //  //return UserService.loginWithGoogle(request,response)\n  // }\n\n  \n  // static initializeGoogleLogin(request,response){\n  //   return passport.authenticate('google', { scope : ['profile', 'email'] });\n  // }\n\n  \n  static addNewPlans(request,response){\n      let {\n       plan_id, \n       itineraries,\n      user_id,\n      carsSelected,\n      planName,\n      price,\n      planCategoryName,\n      no_hours,\n      username,\n      email\n    } = request.body;\n\n\n    \n     const NewUserPlan = new UserPlanModel({ \n      id: new AutoincrementId(UserPlanModel).counter(), \n      user_id,\n      price,\n      plan_category_name:planCategoryName,\n      plan_name:planName,\n      cars_on_plan: carsSelected,\n      itineries: itineraries,\n      duration:no_hours,\n      no_hours:no_hours,\n      username: username,\n      email: email,\n      plan_id\n     });\n\n\n     NewUserPlan.save()\n      .then(data => {\n        const user = data;\n        console.log(user + \"plans\")\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              user\n            },\n          ],\n          message: 'User Plan created successfully',\n        });\n      \n      })\n      .catch(err => {\n        console.log(err+ 'error here user plan')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n      // UserService.saveUsersItinerary(request,response);\n  }\n\n\n  \n\n\n\n  static deleteItinerary(request,response){\n    ItineraryModel.find({plan_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        ItineraryModel.remove({plan_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n\n\n  static saveUsersItinerary(request, response) {\n    // console.log(request.body)\n\n  \n    let {\n      plan_category,\n      start_location,\n      destination,\n      drive_option,\n      no_hours,\n    \n      plan_name,\n      status,\n      start_time,\n      travel_option,\n      drivingschool,\n      username,\n      email,\n      phone_number,\n      plan_id\n    } = request.body;\n\n\n   \n\n    \n    const NewItinerary = new ItineraryModel({ \n      id: new AutoincrementId(ItineraryModel).counter(), \n       plan_category,\n      start_location,\n      destination,\n      travel_option:drive_option,\n      drive_option,\n      no_hours,\n      travel_option,\n      plan_name,\n      status,\n      start_time,\n      travel_option,\n      drivingschool,\n      user_id:request.user.id,\n      username,\n      email,\n      phone_number,\n      plan_id\n\n       \n     });\n\n     NewItinerary.save()\n      .then(data => {\n        const user = data;\n        const result = {\n           plan_category: user.plan_category,\n      start_location: user.start_location,\n      destination: user.destination,\n      drive_option:user.drive_option,\n      no_hours:user.no_hours,\n        travel_option:user.travel_option,\n      plan_name,\n      status,\n      start_time,\n      drivingschool,\n      username: user.username,\n      email:user.email\n           // cars_id: user.cars_id\n        };\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              result\n            },\n          ],\n          message: 'User Itinerary created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n    static editViewUsersItinerary(request,response){\n\n    ItineraryModel.find({user_id: Number(request.params.id)})\n      .then(data => {\n        console.log(\"specific:\" + data)\n        \n       \n        const userInfo = data; //related\n        if (userInfo.length <= 0) {\n                return response.status(404).json({\n                  status: 404,\n                  error: 'The user with the given id does not exists',\n                });\n        }\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    userInfo,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n    \n    \n  }\n\n\n  static updateUsersPlanItineraryStatus(request, response) {\n    UserPlanModel.find({id: Number(request.params.id)})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status } = request.body;\n    \n\n\n            UserPlanModel.updateOne({id: Number(request.params.id) }, {\n                    \n                      status: status\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n   \n\n   static updateNotificationStatus(request,response){\n\n      NotificationModel.find({_id: request.params.id})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: '0',\n                      message: 'Data not found',\n                    },\n                  ],\n                });\n              \n        }\n         const { status } = request.body;\n    \n\n\n            NotificationModel.updateOne({_id: request.params.id }, {\n                    \n                      status: 'old'\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n\n   }\n\n  static updateItineraryStatus(request, response) {\n    ItineraryModel.find({_id: request.params.id})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status } = request.body;\n     \n\n            ItineraryModel.updateOne({_id: request.params.id }, {\n                    \n                      status: status\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static updateDriverRatings(request, response) {\n    UserModel.find({email: request.params.id})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n        let totalAvg= 0\n         const { ratings } = request.body;\n         if(!parseInt(redId.ratings_average,10)){\n              totalAvg = parseInt(redId.ratings_average,10) + parseInt(ratings,10)\n       \n         }else{\n           totalAvg = parseInt(redId.ratings_average,10) + parseInt(ratings,10)\n       \n         }\n\n          totalAvg = (totalAvg/2)\n\n            UserModel.updateOne({email: request.params.id }, {\n                    \n                      ratings_average: totalAvg\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n\n\n\n  static updateUserItineraryStatus(request, response) {\n    ItineraryModel.find({id: Number(request.params.id)})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status } = request.body;\n     \n\n            ItineraryModel.updateOne({id: Number(request.params.id) }, {\n                    \n                      status: status\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n\n\n\nstatic updateUsersItinerary(request,response){\n    const {\n      certificate_id,\n       start_location ,\n       destination ,\n       no_hours,\n       start_time ,\n       end_time , \n       drive_option,\n       user_id,\n       travel_option,\n       cars_id\n    } = request.body;\n\n\n    \n    ItineraryModel.findOne({ user_id:  request.params.id }, function (err, user) {\n\n      if (!user) return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      console.log(avatar)\n      // Verify and save the user\n      \n      user.certificate_id= certificate_id;\n      user.start_location= start_location;\n      user.destination= destination;\n      user.no_hours= no_hours;\n      user.start_time= start_time;\n      user.end_time= end_time;\n      user.drive_option = drive_option;\n      user.user_id = user_id;\n      user.travel_option = travel_option;\n      user.cars_id = cars_id;\n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'successfully updated itinerary.' });\n      \n               \n\n      }); \n    });\n  }\n\n\n  static individualPlans(request,response){\n       IndividualPlanModel.find()\n    \n      .then(data => {\n        const individualPlans = data;\n        console.log(data)\n        if (individualPlans.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'No Plans for IndividualPlan module has been recorded by admin',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              individualPlans,\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static coperatePlans(request,response){\n       coperatePlanModel.find()\n    \n      .then(data => {\n        const coperatePlan = data;\n        console.log(data)\n        if (coperatePlan.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'No Plans for CoperatePlan module has been recorded by admin',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              coperatePlan,\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n    static updateItem(request, response) {\n  \n\n  const  {\n      certificate_id,\n       start_location ,\n       destination ,\n       no_hours,\n       start_time ,\n       end_time , \n       drive_option,\n       user_id,\n       travel_option,\n       \n    } = request.body;\n\n\n\n    \n       ItineraryModel.findOne({ id:  request.params.id }, function (err, user) {\n\n        if (!user){\n          console.log(JSON.strigify(err))\n         return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n\n       }\n        \n     \n      // Verify and save the user\n\n      \n       user.certificate_id= certificate_id;\n      user.start_location= start_location;\n      user.destination= destination;\n      user.no_hours= no_hours;\n      user.start_time= start_time;\n      user.end_time= end_time;\n      user.drive_option = drive_option;\n      user.user_id = user_id;\n      user.travel_option = travel_option;\n      \n      user.save(function (err,user) {\n        if (err) { \n           console.log(err)\n          return response.status(500).send({ msg: err.message });\n         }\n          console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n      return response.status(200).send({success:'ok', msg: 'successfully updated itinerary.' });\n      \n               \n\n      });\n      \n       \n    });\n  }\n\n\n  static deleteItem(request, response) {\n    UserPlanModel.find({id: request.params.id})\n      .then(data => {\n        const redflags = data;\n\n        if ( redflags.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The red-flag with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The red-flag with the given id does not exists',\n          });\n        }\n        UserPlanModel.removeOne({id: request.params.id})\n          .then(data => {\n            const deletedRedFlag = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedRedFlag._id,\n                  message: 'red-flag record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            }),\n          );\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n  static getAllItineries(request, response) {\n\n    ItineraryModel.find()\n    \n      .then(data => {\n        const itinerary = data;\n        console.log(data+ \"either empty itins\")\n        if (itinerary.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no itinerary record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              itinerary,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n    \n  }\n\n\n  static getUsersItinerary(request,response){\n    ItineraryModel.find({ email: request.params.id })\n    \n      .then(data => {\n        const itinerary = data;\n        if (itinerary.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            error: 'User has no itinerary record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              itinerary,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static updateRedFlagStatus(request, response) {\n   RedFlagModel.find({id: Number(request.params.id)})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status } = request.body;\n     if ( Number(request.user.id) )  {\n\n\n            RedFlagModel.updateOne({id: Number(request.params.id) }, {\n                    \n                      status: status\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n    } else {\n          return response.status(401).json({\n            status: 401,\n            error: 'You must signup or login to access this route',\n          });\n        }\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n\n\n  static getAllUsersPlans(request,response){\n    UserPlanModel.find({ email: request.params.id })\n      .then(data => {\n        const plans = data;\n        console.log(plans)\n        // if (plans.length === 0) {\n        //   return response.status(404).json({\n        //     status: 404,\n        //     error: 'User has no plans record',\n        //   });\n        // }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              plans,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getAllUsersQuotations(request,response){\n    \n    QuoteModel.find({ plan_id : new String(request.params.id) })\n    \n      .then(data => {\n        const quote = data;\n        if (quote.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no plans record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              quote,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static debitWallet(request,response){\n    const {oldBalance,debit_amount} = request.body;\n\n\n\n    \n\n    UserModel.findOne({ email: request.params.id }, function (err, user) {\n\n      \n      \n      let bal = Number(user.balance) - Number(debit_amount);\n      user.balance = new String(bal)\n\n\n      \n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        \n\n         console.log(user)\n          return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n      }); \n    });\n\n  }\n\n\n\n  static updatePlanStatus(request,response){\n\n    const  {\n              status,\n              amount, \n              has_updated,    \n            }= request.body;\n\n\n\n\n\n    UserPlanModel.findOne({ plan_id:new String(request.params.id) }, function (err, user) {\n\n      // Verify and save the user\n      user.status= status || user.status;\n      \n      user.price = amount || user.price;\n\n      user.has_updated = has_updated || user.has_updated;\n\n      let userItins = user.itineries;\n\n      // userItins.map((item) =>{\n      //    item.status = status;\n      // } )\n\n      // user.itineries = userItins;\n      \n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n\n\n        UserPlanModel.updateMany({ plan_id: request.params.id },{\n                                            $set:{   status:status, \n                                                      price: amount,\n                                                      has_updated:has_updated,\n                                                    \"itineries.$[].status\":status,\n                                                  }},{ multi: true }, function(err,result){\n                                     if (err) {\n                                          console.log(err)\n                                          response.send(err);\n                                        } else {\n                                          console.log(result)\n                                          return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated itineraries of this plan .' });\n                                \n                                        }\n\n          })\n\n\n\n        \n\n\n          // return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n      }); \n    });\n\n\n  }\n\n\n\n\n  static updateItinStatus(request,response){\n\n    const  {\n              status,\n              //plan_id,\n              user_plan_id,\n              has_received_payments,\n              has_received_quote,\n             \n            }= request.body;\n\n\n   // ItineraryModel.findOne({ plan_id:new String(request.params.id) }, function (err, user) {\n\n   //    // Verify and save the user\n   //    user.status= status || user.status;\n      \n    \n      \n   //    user.save(function (err,user) {\n   //      if (err) { return response.status(500).send({ msg: err.message }); }\n   //      console.log(user + 'hello')\n\n\n   //        return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n   //    }); \n   //  });\n\n\n\n    ItineraryModel.updateMany({ plan_id: new String(request.params.id) },{ $set:{ \n              status: status,\n              //plan_id,\n              user_plan_id:new String(request.params.id),\n              has_received_payments: has_received_payments,\n              has_received_quote: has_received_quote\n            }},{ multi: true }, function(err,result){\n                         if (err) {\n                              console.log(err)\n                              res.send(err);\n                            } else {\n                              console.log(result)\n                              return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated itineraries of this plan .' });\n                    \n                            }\n\n    })   \n\n\n\n  }\n\n\n\n  static updateQuoteStatus(request,response){\n\n    const  {\n              status,\n              amount, \n              has_updated    \n            }= request.body;\n\n\n    QuoteModel.findOne({ plan_id:new String(request.params.id) }, function (err, user) {\n\n      // Verify and save the user\n      user.status= status || user.status;\n      \n      user.amount = amount || user.amount;\n      user.has_updated = has_updated || user.has_updated;\n      \n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n\n\n          return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n      }); \n    });\n\n  }\n\n\n  static getOnePlanById(request,response){\n    UserPlanModel\n    .find({id: Number(request.params.id)})\n      .then(data => {\n        console.log(\"specific:\" + data)\n        \n       \n        const userPlanInfo = data; //related\n        if (userPlanInfo.length <= 0) {\n          return response.status(404).json({\n                  status: 404,\n                  error: 'The user plan with the given id does not exists',\n          });\n        }\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    userPlanInfo,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n    \n\n  }\n\n\n\n  static paystackPayMeMoney(req,res){\n     const {\n      fullname,\n      email,\n      amount,\n      phone_number\n      //old_balance\n     } = req.body;\n     console.log(fullname,\n      email,\n      amount)\n     //const form = _.pick(req.body,['amount','email','full_name']);\n      \n     const form = {\n      fullname,\n      email,\n      amount,\n      phone_number\n     }\n    form.metadata = {\n          full_name : form.fullname\n    }\n    form.amount *= 100;\n    form.amout *=100;\n      \n    initializePayment(form, (error, body)=>{\n          console.log(body)\n          if(error){\n              //handle errors\n              console.log(error);\n              return res.redirect('/error')\n            \n          }\n          var response = JSON.parse(body);\n          \n          \n          let url =response.data.authorization_url;\n\n\n          \n           \n          //res.redirect(url)\n          //console.log(url)\n          //res.send(`${url}`)\n\n          return res.status(201).json({\n            status: 201,\n            message: `<h6>Please click the link to make payments.<a style=\"color:red;text-decoration:none\"  href=\"${url}\">Proceed to payment</a></h6> \n            `,\n          });\n          \n    });\n  \n  }\n\n  static paystackCallBack(req,res){\n    const {reference,trxref} = req.query;\n    //console.log(req.query)\n    const ref = reference;\n      verifyPayment(ref, (error,body)=>{\n          if(error){\n              //handle errors appropriately\n              console.log(error)\n              return res.redirect('/error');\n          }\n\n          var response = JSON.parse(body);\n          console.log(JSON.stringify(response.data) +\"given here\") \n\n          const {id,reference, amount,customer, metadata,phone_number} = response.data;  \n          console.log(id,reference,amount,customer,phone_number,customer.phone)     \n\n          \n          const newDonor = {id: new String(id), reference, amount:(amount/100), email: customer.email,full_name: metadata.full_name,phone_number}\n\n          const donor = new WalletModel(newDonor)\n\n          donor.save().then((donor,error)=>{\n              if(!donor){\n                console.log(error)\n                  return res.redirect('/api/v1/error');\n              }\n\n\n              UserModel.findOne({email: customer.email},function (err, user) {\n\n                   if (!user) return res.status(400).send({ msg: 'We were unable to find a user with that email.' });\n                  let convertedBal = Number(amount)/100;\n                  user.balance = Number(user.balance)+ convertedBal;\n                  user.save(function (err,user) {\n                    if (err) { return res.status(500).send({ msg: err.message }); }\n                    //console.log(user + 'hello')\n                      //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n                      res.redirect('/api/v1/receipt/'+donor._id);\n                  }); \n          });\n\n              \n          }).catch((e)=>{\n             console.log(e)\n              res.redirect('/api/v1/error');\n          });\n\n          \n      })\n\n  }\n\n  static createPaymentDetail(request,response){\n    // var PaymentModel = mongoose.model('PaymentModel', User);\n\n    let {\n        status,\n                reference,\n                plan_id,\n                quotation_id,\n                amount,\n                username,\n                email,\n                phone_number ,\n    } = request.body;\n\n\n    // var user = new PaymentModel({ \n    //   id: new AutoincrementId(PaymentModel).counter(), \n    //     status:'Paid',\n    //             reference,\n    //             plan_id,\n    //             quotation_id,\n    //             amount,\n    //             username,\n    //             email,\n    //             phone_number,\n\n       \n    //  })\n\n\n   \n\n    \n    const NewItinerary = new PaymentModel({ \n      id: new AutoincrementId(PaymentModel).counter(), \n        status:'Successful',\n                reference,\n                plan_id,\n                quotation_id,\n                amount,\n                username,\n                email,\n                phone_number,\n\n       \n     });\n\n     NewItinerary.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          reference,\n                plan_id,\n                quotation_id,\n                amount,\n                username,\n                email,\n                phone_number,\n      email:user.email\n           // cars_id: user.cars_id\n        };\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              result\n            },\n          ],\n          message: 'User Itinerary created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n  }\n\n  static paystackReceipt(req,res){\n    const id = new String(req.params.id);\n    WalletModel.findById(id).then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect('/api/v1/error')\n          }\n\n          // res.render('success.pug',{donor});\n          return  res.sendFile(path.join(__dirname + '/views/templates/topup-successful.html'));\n      }).catch((e)=>{\n          console.log(e)\n          res.redirect('/api/v1/error')\n      })\n  }\n\n  static paystackHistory(req,res){\n    const id = new String(req.params.id);\n    WalletModel.find({email:req.params.id}).then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect('/api/v1/error')\n          }\n         const tranx = donor;\n         console.log(tranx +\"for the user\")\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect('/api/v1/error')\n      })\n  }\n\n\n  static paystackPayments(req,res){\n    const id = new String(req.params.id);\n    PaymentModel.find({email:req.params.id}).then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect('/api/v1/error')\n          }\n         const tranx = donor;\n         console.log(tranx +\"for the user\")\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect('/api/v1/error')\n      })\n  }\n\n\n  static paystackQuotations(req,res){\n    const id = new String(req.params.id);\n    QuoteModel.find({email:req.params.id}).then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect(BACKEND_API+ '/error')\n          }\n         const tranx = donor;\n         console.log(tranx +\"for the user\")\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect(BACKEND_API+ '/error')\n      })\n  }\n\n\n\n  static deleteQuotation(request,response){\n    QuoteModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        QuoteModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static deletePayment(request,response){\n    PaymentModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        PaymentModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static deleteWallet(request,response){\n    WalletModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        WalletModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static getUserNotification(request,response){\n\n    const id = new String(request.params.id);\n    console.log(id)\n    NotificationModel.find({user_id:request.params.id, for_users: true}).then((donor,error)=>{\n      if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              \n      }\n      const tranx = donor;\n      console.log(tranx +\"for the user\")\n      return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect(BACKEND_API+ '/error')\n      })\n\n  }\n\n\n  static makeNotification(request,response){\n    // console.log(request.body)\n    let { \n     user_id,\n      type,\n      description,\n  \n    } = request.body;\n    let for_users =true;\n\n    if(request.body.for_users){\n      for_users =false;\n    }\n\n   \n    const NewNotificationModel = new NotificationModel({ \n      id: new AutoincrementId(NotificationModel).counter(), \n      user_id,\n      type,\n      description,\n      for_users\n\n    \n      //accountNumber: uuidv4()\n       });\n\n\n     NewNotificationModel.save()\n      .then(data => {\n        const user = data;\n\n\n         return response.status(201).json({\n                status: 201,\n                data: [\n                  {\n                    user,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n\n            // UserService.NotificationEmail(request,response,'/views/templates/notification.html', {\n            //          username: user_id,\n            //          detail: description\n            // },user_id,201)\n\n\n        \n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n  }\n\n\n\n  static getAllNotification(request,response){\n\n    var now = new Date();\nvar startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n\n\n    //created_at: {$gte: startOfToday}\n    NotificationModel.find({for_users:true},null, {sort: { field : -1 }}).then((donor,error)=>{\n      if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              \n      }\n      const allNotification = donor;\n      //console.log(tranx +\"for the user\")\n      return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    allNotification,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect(BACKEND_API+ '/error')\n      })\n\n  }\n\n\n\n\n\n  createUserPlan = (req, res) => {\n    const review = new UserPlanModel();\n    review.username = req.body.username;\n    review.rating = req.body.rating;\n    review.body = req.body.body;\n    review.save()\n      .then((result) => {\n        User.findOne({ username: review.username }, (err, user) => {\n            if (user) {\n                // The below two lines will add the newly saved review's \n                // ObjectID to the the User's reviews array field\n                user.reviews.push(review);\n                user.save();\n                res.json({ message: 'Review created!' });\n            }\n        });\n      })\n      .catch((error) => {\n        res.status(500).json({ error });\n      });\n  }\n\n\n  createUser = (req, res) => {\n   const user = new UserModel();\n   user.username = req.body.password;\n   user.email = req.body.email;\n   user.save()\n       .then((result) => {\n            res.json({ message: 'User created!', result });\n        })\n        .catch((error) => {\n          res.status(500).json({ error });\n        });\n  }\n\n// . . .\n// returns the user object associated with the username if any\n// with the reviews field containing an array of review objects \n// consisting of the reviews created by the user\ngetUser = (req, res) => {\n    User.findOne({ username: req.params.username })\n      //.populate('reviews')\n      .then((result) => {\n        res.json(result);\n      })\n      .catch((error) => {\n        res.status(500).json({ error });\n      });\n  }\n\n\n\n  //Admin functionality\n\n\n  static adminDashboard(request,response){\n    \n\n  \n  }\n\n  static manageUsers(request,response){\n   UserModel.find({is_admin:false,roles:\"user\"})\n      .then(data => {\n        const users = data;\n        console.log(users,\"users available are here\")\n        if (users.length === 0) {\n          return response.status(200).json({\n            status: 200,\n\n            data: [\n            {\n              users:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              users,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static deleteUser(request,response){\n    UserModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        UserModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static createNewUser(request,response){\n       let boolVerification;\n     let {\n          firstname,\n        lastname,\n        username,\n        email,\n        password,\n        passwordComfirm,\n        phoneNumber,\n        avatar,\n        certificate,\n        user_type,\n        status,\n        is_verified\n      } = request.body;\n\n     \n\n      if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n\n    password = TokenGenerator.hashPassword(password.trim());\n\n    const Newuser = new UserModel({ \n      id: new AutoincrementId(UserModel).counter(), \n       firstname,\n        lastname,\n        username,\n        email,\n        password,\n        \n        phone_number: phoneNumber,\n        avatar: avatar,\n        certificate,\n        user_type,\n        status :\"Active\",\n        is_admin:false,\n        isVerified:boolVerification,\n\n\n\n      });\n\n     Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n        \n\n\n\n\n        const token = TokenGenerator.generateToken(result);\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              token,\n              user,\n            },\n          ],\n          message: 'User created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n  }\n\n  static manageUsersDetail(request,response){\n     let boolVerification;\n     const {\n      firstname,\n      lastname,\n      username,\n      password,\n      phoneNumber,\n      certificate,\n      user_type,\n      email,\n      status,\n      avatar,\n      is_verified\n    } = request.body;\n\n    console.log(is_verified + \":our user verification\")\n\n    if(is_verified==\"false\"){\n      boolVerification =false;\n    }else if(is_verified==\"true\"){\n      boolVerification =true;\n    }\n\n\n\n    if(!password.length){\n      \n        console.log('err here1')\n        return res.status(400).send({ msg: 'password do not match.' });\n      \n    }\n\n    \n\n\n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      if(password==\"unchanged\" ){\n       user.password= user.password;\n       console.log(\"old:\" + user.password)\n      } else{\n        user.password= TokenGenerator.hashPassword(password.trim());\n        console.log(\"new pass: \"+ user.password)\n      }\n\n     \n      // Verify and save the user\n    \n      user.username= username || user.username;\n      user.email= email || user.email;\n      user.status= status || user.status;\n      user.avatar= avatar || user.avatar;\n      user.user_type= user_type|| user.user_type;\n      user.firstname= firstname|| user.firstname;\n      user.lastname = lastname || user.lastname;\n      user.phone_number = phoneNumber|| user.phone_number;\n      user.test_certificate = certificate || user.test_certificate;\n      //user.isVerified = boolVerification || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n\n  static manageUsersDetailVerification(request,response){\n  \n     const {\n      isVerified\n    } = request.body;\n\n   \n\n   \n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  static manageAdmins(request,response){\n    UserModel.find({is_admin:true})\n      .then(data => {\n        const admins = data;\n        console.log(admins+\"admins available here admins\")\n        if (admins.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              admins:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              admins,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>{\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        })\n      });\n  }\n\n\n  static deleteAdmin(request,response){\n    UserModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        UserModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n\n\n\n\n  static createNewAdmin(request,response){\n       let boolVerification;\n    let {\n          firstname,\n        lastname,\n        username,\n        email,\n        password,\n        passwordComfirm,\n        phoneNumber,\n        avatar,\n        //certificate,\n        user_type,\n        status,\n        is_verified,\n      } = request.body;\n\n      if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n\n    password = TokenGenerator.hashPassword(password.trim());\n\n\n    \n\n        RolesAndPreviledgesModel.findOne({ for_admins:  true, usergroup_set: user_type }, function (err, roles) {\n           \n          if (!roles) {\n                        return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n          }\n          console.log(roles)\n\n          const Newuser = new UserModel({ \n                id: new AutoincrementId(UserModel).counter(), \n                 firstname,\n                  lastname,\n                  username,\n                  email,\n                  password,\n                  \n                  phone_number: phoneNumber,\n                  avatar: avatar,\n                  //certificate,\n                  roles: user_type,\n                  status :\"Active\",\n                  is_admin:true,\n                  isVerified: boolVerification,\n                  view_bookings: roles.view_bookings,\n                  view_quotations: roles.view_quotations,\n                  view_transactions:  roles.view_transactions,\n                  view_payments :roles.view_payments,\n                  view_drivers :  roles.view_drivers,\n                  view_sos: roles.view_sos,\n                  view_partners : roles.view_partners,\n                  view_package:  roles.view_package,\n                  view_cars: roles.view_cars,\n                  view_tickets :  roles.view_tickets,\n                  view_faqs : roles.view_faqs,\n                  view_users : roles.view_users,\n                  view_admins :  roles.view_admins,\n                  view_settings :  roles.view_settings,\n                  manage_bookings: roles.manage_bookings,\n                  manage_quotations: roles.manage_quotations,\n                  manage_transactions:  roles.manage_transactions,\n                  manage_payments : roles.manage_payments,\n                  manage_drivers : roles.manage_drivers,\n                  manage_sos: roles.manage_sos,\n                  manage_partners : roles.manage_partners,\n                  manage_package: roles.manage_package,\n                  manage_cars: roles.manage_cars,\n                   manage_tickets : roles.manage_tickets,\n                  manage_faqs : roles.manage_faqs,\n                  manage_users : roles.manage_users,\n                  manage_admins : roles.manage_admins,\n                  manage_settings : roles.manage_settings,\n\n\n                  view_drive_test : roles.view_drive_test,\n                  manage_drive_test : roles.manage_drive_test,\n                  view_car_inspection : roles.view_car_inspection,\n                  manage_car_inspection : roles.manage_car_inspection,\n\n\n\n                });\n\n               Newuser.save()\n                .then(data => {\n                  const user = data;\n\n                  const result = {\n                    id: user.id,\n                    email: user.email,\n                    username: user.username,\n                  };\n                  \n\n\n                  const token = TokenGenerator.generateToken(result);\n                  console.log(user)\n                  return response.status(201).json({\n                    status: 201,\n                    data: [\n                      {\n                        token,\n                        user,\n                      },\n                    ],\n                    message: 'User created successfully',\n                  });\n                })\n                .catch(err => {\n                  console.log(err+ 'error here')\n                  response.status(400).json({\n                    status: 400,\n                    error: ErrorHandler.errors().validationError,\n                  });\n                });\n\n  \n\n\n\n         })\n        \n    \n\n\n\n\n    \n    \n  }\n\n  static manageAdminsDetail(request,response){\n       let boolVerification;\n\n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n      status,\n      is_verified,\n\n    } = request.body;\n\n    if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n\n\n\n    if(!password.length){\n      \n        console.log('err here1')\n        return res.status(400).send({ msg: 'password do not match.' });\n      \n    }\n\n\n     RolesAndPreviledgesModel.findOne({ for_admins:  true, usergroup_set: user_type }, function (err, roles) {\n           \n          if (!roles) {\n                        return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n          }\n          console.log(roles)\n\n    \n\n\n            UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n              if (!user){ \n               return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n              \n              }\n              if(password==\"unchanged\" ){\n               user.password= user.password;\n               console.log(\"old:\" + user.password)\n              } else{\n                user.password= TokenGenerator.hashPassword(password.trim());\n                console.log(\"new pass: \"+ user.password)\n              }\n\n             \n              // Verify and save the user\n            \n              user.username= username || user.username;\n              user.email= email || user.email;\n              user.status= status || user.status;\n              user.avatar= avatar || user.avatar;\n              user.roles= user_type|| user.user_type;\n              user.firstname= firstname|| user.firstname;\n              user.lastname = lastname || user.lastname;\n              user.phone_number = phoneNumber|| user.phone_number;\n              user.test_certificate = certificate || user.test_certificate;\n              //user.isVerified = boolVerification || user.isVerified;\n\n\n              \n            user.view_bookings=  roles.view_bookings;\n          user.view_quotations= roles.view_quotations;\n          user.view_transactions= roles.view_transactions;\n          user.view_payments = roles.view_payments;\n          user.view_drivers =  roles.view_drivers;\n          user.view_sos= roles.view_sos;\n          user.view_partners =  roles.view_partners;\n          user.view_package= roles.view_package;\n          user.view_cars= roles.view_cars;\n          user.view_tickets = roles.view_tickets;\n          user.view_faqs = roles.view_faqs;\n          user.view_users = roles.view_users;\n          user.view_admins = roles.view_admins;\n          user.view_settings = roles.view_settings;\n\n\n        \n          user.manage_bookings= roles.manage_bookings;\n          user.manage_quotations= roles.manage_quotations;\n          user.manage_transactions=roles.manage_transactions;\n          user.manage_payments = roles.manage_payments;\n          user.manage_drivers = roles.manage_drivers;\n          user.manage_sos= roles.manage_sos;\n          user.manage_partners = roles.manage_partners;\n          user.manage_package= roles.manage_package;\n          user.manage_cars= roles.manage_cars;\n          user.manage_tickets = roles.manage_tickets;\n          user.manage_faqs = roles.manage_faqs;\n          user.manage_users = roles.manage_users;\n          user.manage_admins = roles.manage_admins;\n          user.manage_settings = roles.manage_settings;\n\n\n          user.view_drive_test = roles.view_drive_test;\n                  user.manage_drive_test = roles.manage_drive_test;\n                  user.view_car_inspection = roles.view_car_inspection;\n                  user.manage_car_inspection = roles.manage_car_inspection;\n\n\n\n\n\n              user.save(function (err,user) {\n                if (err) { console.log(err) \n                  return response.status(500).send({ msg: err.message }); }\n                console.log(user + 'hello')\n                  //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n                  return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n              }); \n            });\n\n\n     })\n  }\n\n  static manageAdminsDetailVerification(request,response){\n  \n     const {\n      isVerified\n    } = request.body;\n\n    \n   \n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  static manageDrivers(request,response){\n    UserModel.find({is_active:true,roles:'Individual Driver'})\n      .then(data => {\n        const drivers = data;\n        console.log(drivers,\"drivers are here\")\n        if (drivers.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              drivers:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              drivers,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>{\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        })\n      });\n  }\n\n  static deleteDriver(request,response){\n    UserModel.find({_id: request.params.id,roles:'Individual Driver'})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        UserModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n\n  static createNewDriver(request,response){\n       let boolVerification;\n\n     let {\n          firstname,\n        lastname,\n        username,\n        email,\n        password,\n        passwordComfirm,\n        phoneNumber,\n        avatar,\n        certificate,\n        user_type,\n        status,\n        is_verified\n      } = request.body;\n\n      if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n\n    password = TokenGenerator.hashPassword(password.trim());\n\n    const Newuser = new UserModel({ \n      id: new AutoincrementId(UserModel).counter(), \n       firstname,\n        lastname,\n        username,\n        email,\n        password,\n        \n        phone_number: phoneNumber,\n        avatar,\n        test_certificate:certificate,\n  \n        status :\"Active\",\n        is_admin:false,\n        isVerified: boolVerification,\n        roles: 'Individual Driver'\n\n\n\n      });\n\n     Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n        \n\n\n\n\n        const token = TokenGenerator.generateToken(result);\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              token,\n              user,\n            },\n          ],\n          message: 'User created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n    \n  }\n\n  static manageDriversDetail(request,response){\n       let boolVerification;\n\n     const {\n      firstname,\n      lastname,\n      username,\n      password,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n      status,\n      is_verified\n    } = request.body;\n\n    if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n\n\n\n    if(!password.length){\n      \n        console.log('err here1')\n        return res.status(400).send({ msg: 'password do not match.' });\n      \n    }\n\n    \n\n\n    UserModel.findOne({ _id:  request.params.id, roles:'Individual Driver' }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      if(password==\"unchanged\" ){\n       user.password= user.password;\n       console.log(\"old:\" + user.password)\n      } else{\n        user.password= TokenGenerator.hashPassword(password.trim());\n        console.log(\"new pass: \"+ user.password)\n      }\n\n     \n      // Verify and save the user\n    \n      user.username= username || user.username;\n      user.email= email || user.email;\n      user.status= status || user.status;\n      user.avatar= avatar || user.avatar;\n      user.roles= user_type|| user.user_type;\n      user.firstname= firstname|| user.firstname;\n      user.lastname = lastname || user.lastname;\n      user.phone_number = phoneNumber|| user.phone_number;\n      user.test_certificate = certificate || user.test_certificate;\n      //user.isVerified = boolVerification || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  static manageDriversDetailVerification(request,response){\n  \n     const {\n      isVerified\n    } = request.body;\n\n   \n   \n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  static managePartners(request,response){\n    PartnersModel.find()\n      .then(data => {\n        const partners = data;\n        console.log(partners +\"partners available\")\n        if (partners.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              partners:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              partners,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static deletePartner(request,response){\n    PartnersModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        PartnersModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static createNewPartner(request,response){\n       let boolVerification;\n    let address ='';\n    if(request.body.address){\n      address = request.body.address;\n    }\n      let {\n            firstname,\n          lastname,\n          username,\n          email,\n\n          password,\n          // passwordComfirm,\n          phoneNumber,\n          avatar,\n          certificate,\n          user_type,\n          status,\n          is_verified,\n          totalCars,\n          bankAccount,\n          bankAccountName,\n          bankAccountNumber,\n\n      \n        } = request.body;\n\n        if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n    \n\n    password = TokenGenerator.hashPassword(password.trim());\n   \n    const Newuser = new  PartnersModel({ \n      id: new AutoincrementId(PartnersModel).counter(), \n       firstName: firstname,\n        lastName: lastname,\n        userName: username,\n        name: firstname + \" \" + lastname,\n        email,\n        password,\n        address:address,\n        totalCars,\n        \n        phoneNumber: phoneNumber,\n        phone: phoneNumber,\n        avatar,\n        businessName:certificate,\n        roles: user_type,\n        status :status,\n        isVerified: boolVerification,\n        totalCars,\n\n          bankAccount,\n          bankAccountName,\n          bankAccountNumber,\n      });\n\n     Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n        \n        const token = TokenGenerator.generateToken(result);\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              token,\n              user,\n            },\n          ],\n          message: 'User created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n  }\n\n\n  static managePartnersDetail(request,response){\n       let boolVerification;\n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      totalCars,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n      address,\n      status,\n      is_verified,\n\n          bankAccount,\n          bankAccountName,\n          bankAccountNumber,\n\n    } = request.body;\n\n    if(is_verified==\"false\"){\n            boolVerification =false;\n      }else{\n        boolVerification =true;\n      }\n\n\n\n  \n      if(!password){\n        console.log('err here1')\n        return res.status(400).send({ msg: 'password field required' });\n      }\n    \n\n    \n\n\n    PartnersModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if(err){\n        return response.status(400).send({ msg: 'Some error occured.' });\n      }\n\n      if (!user) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n      \n      if(password===\"unchanged\" ){\n       user.password= user.password;\n       console.log(\"old:\" + password+ \"==\"+  user.password)\n      } else{\n        user.password= TokenGenerator.hashPassword(password.trim());\n        console.log(\"new pass: \"+ password+ \"==\"+ user.password)\n      }\n\n     \n      // Verify and save the user\n      user.avatar= avatar || user.avatar;\n      user.userName= username || user.userName;\n      user.email= email || user.email;\n      user.businessName= certificate || user.businessName;\n      user.roles= user_type || user.roles;\n      user.firstName= firstname|| user.firstName;\n      user.lastName = lastname || user.lastName;\n      user.phoneNumber = phoneNumber|| user.phoneNumber;\n      user.status = status|| user.status;\n      user.address= address || user.address;\n      user.totalCars = totalCars || user.totalCars;\n      user.bankAccount = bankAccount || user.bankAccount;\n      user.bankAccountName = bankAccountName || user.bankAccountName;\n      user.bankAccountNumber = bankAccountNumber || user.bankAccountNumber;\n      //user.isVerified = boolVerification || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n\n  static managePartnersDetailVerification(request,response){\n  \n     const {\n      isVerified\n    } = request.body;\n\n    \n   \n    PartnersModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  \n  //partners earnings\n  static managePartnersEarnings(request,response){\n    EarningsModel.find()\n      .then(data => {\n        const earnings = data;\n        //console.log(partners +\"partners available\")\n        if (earnings.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              earnings:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              earnings,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static deletePartnersEarnings(request,response){\n    EarningsModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        EarningsModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static createNewPartnersEarnings(request,response){\n      \n      let {\n            \n              \n              paymentDate,\n              PaymentStatus,\n              PaymentAmount,\n              paymentReference,\n              partnerId,\n              partnerEmail,\n              partnerBankAccount,\n              vehicleId,\n              vehicleName,\n              vehiclePlateNo,\n        \n      \n        \n        } = request.body;\n\n        let pid = partnerId;\n\n        \n    const Newuser = new  EarningsModel({ \n      id: new AutoincrementId(EarningsModel).counter(), \n       \n              paymentDate,\n              PaymentStatus,\n              PaymentAmount,\n              paymentReference,\n              partnerId,\n              partnerEmail,\n              partnerBankAccount,\n              vehicleId,\n              vehicleName,\n              vehiclePlateNo,\n              partner: pid,\n      });\n\n     Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              user,\n            },\n          ],\n          message: 'User created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n  }\n\n\n  static managePartnersEarningsDetail(request,response){\n      \n\n    const {\n       type,\n              paymentDate,\n              PaymentStatus,\n              PaymentAmount,\n              paymentReference,\n              partnerId,\n              partnerEmail,\n              partnerBankAccount,\n              vehicleId,\n              vehicleName,\n              vehiclePlateNo,\n              \n    } = request.body;\n\n        let pid = partnerId; \n\n    \n\n\n    EarningsModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if(err){\n        return response.status(400).send({ msg: 'Some error occured.' });\n      }\n\n      if (!user) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n\n     \n      \n      \n     \n      // Verify and save the user\n      user.type= type || user.type;\n      user.paymentDate= paymentDate || user.paymentDate;\n      user.paymentStatus= PaymentStatus || user.PaymentStatus;\n      user.paymentAmount= PaymentAmount || user.PaymentAmount;\n      user.paymentReference= paymentReference || user.paymentReference;\n      user.partnerId= partnerId || user.partnerId;\n      user.partnerEmail= partnerEmail || user.partnerEmail;\n      user.partnerBankAccount = partnerBankAccount || user.partnerBankAccount;\n      user.vehicleId = vehicleId || user.vehicleId;\n      user.vehicleName = vehicleName || user.vehicleName;\n      user.vehiclePlateNo = vehiclePlateNo || user.vehiclePlateNo;\n      user.partner = partnerId || user.partnerId;\n      \n      //user.isVerified = boolVerification || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n  static manageProfile(request,response){\n    UserModel.find({email: request.params.id})\n      .then(data => {\n        console.log(\"specific profile:\" + data)\n        \n       \n        const profile = data; //related\n        if (profile.length <= 0) {\n                return response.status(404).json({\n                  status: 404,\n                  error: 'The user with the given id does not exists',\n                });\n        }\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    profile,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>{\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              })\n      });\n    \n  }\n\n  static manageProfileDetail(request,response){\n       let boolVerification;\n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      // passwordConfirm,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n      //status,\n      is_verified\n    } = request.body;\n\n\n\n    if(!password.length ){\n    \n        console.log('err here1')\n        return res.status(400).send({ msg: 'password do not match.' });\n      \n    }\n\n    \n\n\n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user) {\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      }\n\n      if(password==\"unchanged\" ){\n       user.password= user.password;\n       console.log(\"old:\" + user.password)\n      } else{\n        user.password= TokenGenerator.hashPassword(password.trim());\n        console.log(\"new pass: \"+ user.password)\n      }\n\n     \n      // Verify and save the user\n      user.avatar= avatar || user.avatar;\n      user.username= username || user.username;\n      user.email= email || user.email;\n   \n      user.roles= user_type|| user.user_type;\n      user.firstname= firstname|| user.firstname;\n      user.lastname = lastname || user.lastname;\n      user.phone_number = phoneNumber|| user.phone_number;\n      user.test_certificate = certificate|| user.test_certificate;\n      //user.status = status || user.status;\n      //user.isVerified = boolVerification || user.isVerified\n      user.save(function (err,user) {\n        if (err) { \n          console.log(err)\n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n\n  static manageProfileDetailVerification(request,response){\n  \n     const {\n      isVerified\n    } = request.body;\n\n    \n   \n    UserModel.findOne({ _id:  request.params.id }, function (err, user) {\n\n      if (!user){ \n       return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      }\n      user.isVerified = isVerified || user.isVerified;\n      user.save(function (err,user) {\n        if (err) { console.log(err) \n          return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n  }\n\n\n\n\n  static managePlanPackage(request,response){\n    \n\n    IndividualPlanModel.find()\n      .then(data => {\n        const individualPlans = data;\n\n        \n\n        console.log(individualPlans+ \"individual available plans\")\n        if (individualPlans.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              individualPlans:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n\n\n\n        \n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              individualPlans,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n        \n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n   \n  \n\n  }\n\n\n  static managePlanPackageCorporate(request,response){\n    coperatePlanModel.find()\n      .then(data => {\n        const corporatePlans = data;\n\n        console.log(corporatePlans+ \"coperatePlans available plans\")\n        if (corporatePlans.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              corporatePlans:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n\n\n  \n          \n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                \n              \n                corporatePlans,\n            \n                message: 'Successful',\n              },\n            ],\n          });\n\n  \n\n\n        \n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n  static deletePlanPackage(request,response){\n    console.log(request.params + \"soloewe\")\n     if(request.params.delete_type==\"Individual\"){\n\n      IndividualPlanModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        IndividualPlanModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n     }else if(request.params.delete_type==\"Corporate\"){\n\n      coperatePlanModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        coperatePlanModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n     }\n     \n  }\n\n\n  static createNewPlan(request,response){\n\n    \n      let {\n          plan_name,\n          plan_categories,\n          status,\n          description,\n          max_car,\n          price,\n\n          \n\n      \n        } = request.body;\n\n        let Newuser;\n        let plan;\n    \n    if(plan_categories===\"Individual\"){\n\n      Newuser = new  IndividualPlanModel({ \n      id: new AutoincrementId(IndividualPlanModel).counter(), \n          plan_name,\n          plan_categories,\n          status,\n          description,\n          car_max:max_car,\n          price\n      });\n\n     Newuser.save()\n      .then(data => {\n        plan = data;\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              plan,\n            },\n          ],\n          message: 'Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n\n    }else {\n\n       Newuser = new  coperatePlanModel({ \n      id: new AutoincrementId(coperatePlanModel).counter(), \n       plan_name,\n          plan_categories,\n          status,\n          description,\n          car_max: max_car,\n          price\n          \n        \n      });\n\n     Newuser.save()\n      .then(data => {\n        plan = data;\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              plan\n            },\n          ],\n          message: 'Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n    }\n    \n    \n  }\n\n\n  static managePlanPackageDetail(request,response){\n\n    const {\n      plan_name,\n      plan_categories,\n      description,\n      max_car,\n      price,\n      status\n    } = request.body;\n\n   console.log(plan_name+ \"is here 2\")\n\n    if(plan_name==\"Individual\" ){\n        console.log(plan_name+ \"is here\")\n        IndividualPlanModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        plan.plan_name= plan_name || plan.plan_name;\n        plan.plan_categories= plan_categories || plan.plan_categories;\n     \n        plan.price= price || plan.price;\n        plan.description= description || plan.description;\n        plan.car_max = max_car || plan.car_max;\n        plan.status = status || plan.status;\n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n      \n    }else{\n\n      coperatePlanModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        plan.plan_name= plan_name || plan.plan_name;\n        plan.plan_categories= plan_categories || plan.plan_categories;\n     \n        plan.price= price || plan.price;\n        plan.description= description || plan.description;\n        plan.car_max = max_car || plan.car_max;\n        plan.status = status || plan.status;\n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); \n          }\n          console.log(plan + 'hello')\n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n\n    }\n    \n  }\n\n\n\n  static manageInspection(request,response){\n \n  \n        \n\n\n    CarsModel.find({health_status:{'$ne':'Completed'}})\n      .then(data => {\n        const inspections = data;\n\n        console.log(inspections)\n\n        \n        if (inspections.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              inspections:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n\n\n  \n          \n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                \n              \n                inspections,\n            \n                message: 'Successful',\n              },\n            ],\n          });\n\n  \n\n\n        \n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n  static manageInspectionDetail(request,response){\n     const {\n           health_status, \n           confirmedInspectionDate,\n           confirmedInspectionTime,\n           partnerEmail\n           // description,\n           //  username, email,\n           //  time, createdDate,\n           //  phone_number\n\n\n          } = request.body\n\n    CarsModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n \n        plan.health_status= health_status || plan.health_status;\n        plan.confirmedInspectionTime= confirmedInspectionTime || plan.confirmedInspectionTime;\n        plan.confirmedInspectionDate = confirmedInspectionDate || plan.confirmedInspectionDate;     \n        \n        let date = plan.confirmedInspectionDate;\n        let time = plan.confirmedInspectionTime;\n\n        console.log(confirmedInspectionTime, plan.confirmedInspectionDate)\n        if(plan.status=='Pending'){\n            plan.status = 'Available' ;     \n        \n        }\n        // plan.username= username || plan.username;\n        // plan.email= email || plan.email;\n        // plan.time = time || plan.time;\n        // plan.createdDate = createdDate || plan.createdDate;\n        // plan.phone_number = phone_number ||  plan.phone_number\n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n\n            return response.status(500).send({ msg: err.message });\n          }\n\n          //send email to partner\n\n          UserService.NotificationEmail(request,response,'/views/templates/inspection_confirmation.html', {\n                     username: partnerEmail,\n                     confirmedInspectionDate: date,\n                    confirmedInspectionTime:time,\n                    link:process.env.DEPLOY_FRONT_URL \n            },partnerEmail,200)\n\n\n            return response.status(200).send({ status:200, success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n  }\n\n\n  static createNewInspection(request,response){\n    const {\n           username,\n            email,\n            phone_number,\n            description,\n            createdDate,\n            time,\n            status,\n            car_id,\n\n\n          } = request.body\n\n        let Newuser;\n        let plan;\n    \n    \n\n      Newuser = new  InspectionModel({ \n      id: new AutoincrementId(InspectionModel).counter(), \n         username,\n            email,\n            phone_number,\n            description,\n            createdDate,\n            time,\n            status,\n            car_id,\n      });\n\n     Newuser.save()\n      .then(data => {\n        plan = data;\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              plan,\n            },\n          ],\n          message: 'Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n\n    \n    \n  }\n  \n   static deleteInspection(request,response){\n      \n    \n\n      InspectionModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        InspectionModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n     \n    \n  }\n\n  \n\n  static manageDriveTest(request,response){\n\n    DriveTestModel.find()\n      .then(data => {\n        const testDrive = data;\n\n        console.log(testDrive+ \"coperatePlans available plans\")\n       if (testDrive.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              testDrive:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n\n\n  \n          \n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                \n              \n                testDrive,\n            \n                message: 'Successful',\n              },\n            ],\n          });\n\n  \n\n\n        \n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n  static addDriveTestFromItinerary(request,response){\n\n    const {\n           username,\n                email,\n                phone_number,\n                car_id,\n                status,\n                description,\n                \n                createdDate,\n\n\n          } = request.body;\n\n        let Newuser;\n        let plan;\n    \n    \n\n      Newuser = new  DriveTestModel({ \n      id: new AutoincrementId(DriveTestModel).counter(), \n         username,\n         email,\n         phone_number,\n         car_id,\n         status:\"Pending\",\n         description,       \n         createdDate,\n      });\n\n     Newuser.save()\n      .then(data => {\n        plan = data;\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              plan,\n            },\n          ],\n          message: 'Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n\n  }\n\n\n  static createNewDriveTest(request,response){\n\n       const {\n           username,\n            email,\n            phone_number,\n            description,\n            createdDate,\n            time,\n            status,\n            car_id,\n\n\n          } = request.body;\n\n        let Newuser;\n        let plan;\n    \n    \n\n      Newuser = new  DriveTestModel({ \n      id: new AutoincrementId(DriveTestModel).counter(), \n         username,\n            email,\n            phone_number,\n            description,\n            createdDate,\n            time,\n            test_center:time,\n\n            status,\n            car_id,\n      });\n\n     Newuser.save()\n      .then(data => {\n        plan = data;\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              plan,\n            },\n          ],\n          message: 'Plan created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n\n    \n    \n  }\n\n  static manageUsersDriveTestCenterUpdate(request,response){\n\n     const {\n           test_center,\n           test_center_address,\n\n\n          } = request.body;\n    UserModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a user with that id.' });\n        }\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        // plan.plan_name= plan_name || plan.plan_name;\n        // plan.plan_categories= plan_categories || plan.plan_categories;\n     \n        // plan.price= price || plan.price;\n        // plan.description= description || plan.description;\n        // plan.car_max = max_car || plan.car_max;\n        plan.test_center = test_center || plan.test_center;\n        plan.test_center_address = test_center_address || plan.test_center_address\n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n           return response.status(200).send({ status:200, success:'ok', msg: 'Successfully updated .' });\n        }); \n      });\n\n  }\n\n  static manageDriveTestDetail(request,response){\n\n     const {\n           // username,\n           //  email,\n           //  phone_number,\n           //  description,\n           //  createdDate,\n           //  time,\n            status,\n            // car_id,\n\n\n          } = request.body;\n    DriveTestModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        // plan.plan_name= plan_name || plan.plan_name;\n        // plan.plan_categories= plan_categories || plan.plan_categories;\n     \n        // plan.price= price || plan.price;\n        // plan.description= description || plan.description;\n        // plan.car_max = max_car || plan.car_max;\n        plan.status = status || plan.status;\n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n           return response.status(200).send({ status:200, success:'ok', msg: 'Successfully updated .' });\n        }); \n      });\n  }\n\n\n   static deleteDriveTest(request,response){\n\n        \n\n      DriveTestModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        DriveTestModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n     \n    \n  }\n\n\n  static managePreviledges(request,response){\n\n    // import DriveTestModel from  \"../models/DriveTest.model\";\n// import Previledges from \"../models/Roles.model\";\n    RolesAndPreviledgesModel.find()\n      .then(data => {\n        const users = data;\n\n\n        if (users.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              previledges:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n\n        \n\n\n\n       \n  \n          \n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                \n              \n                previledges: users ,\n            \n                message: 'Successful',\n              },\n            ],\n          });\n\n  \n\n\n        \n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n\n  static createNewPreviledges(request,response){\n     const {previledges_description, previledges_info,usergroups_old} = request.body\n\n        let Newuser;\n        let plan;\n    \n    \n\n      Newuser = new  RolesAndPreviledgesModel({ \n      id: new AutoincrementId(RolesAndPreviledgesModel).counter(), \n          previledges_description, previledges_info\n      });\n\n     Newuser.save()\n      .then(data => {\n        plan = data;\n\n\n\n        RolesAndPreviledgesModel.find({ for_admins:  true }, function (err, users) {\n           \n                      if (!users) {\n                        return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n                      }\n\n                      let usergroup = [...usergroups_old,previledges_info]\n\n                      RolesAndPreviledgesModel.updateMany({ for_admins:  true },{ $set:{  usergroup_set:usergroup}},{ multi: true }, function(err,result){\n                         if (err) {\n                              console.log(err)\n                              res.send(err);\n                            } else {\n\n                            \n\n                               UserModel.find({ for_users:  true }, function (err, users) {\n           \n                                      if (!users) {\n                                        return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n                                      }\n\n                                      UserModel.updateMany({ for_users:  true },{ $set:{  usergroup_set:usergroup}},{ multi: true }, function(err,result){\n                                         if (err) {\n                                              console.log(err)\n                                              res.send(err);\n                                            } else {\n\n                                              return response.status(201).json({\n                                                status: 201,\n                                                data: [\n                                                  {\n                                                    success:'ok',\n                                                    result,\n                                                  },\n                                                ],\n                                                message: 'Updated all users with fields and status changed',\n                                              });\n                                            }\n\n                                       })     \n\n\n\n                         })\n\n\n\n\n\n\n\n\n\n\n\n\n                            }\n\n                       })     \n\n\n\n         })\n        \n        // return response.status(201).json({\n        //   status: 201,\n        //   data: [\n        //     {\n              \n        //       plan,\n        //     },\n        //   ],\n        //   message: 'Plan created successfully',\n        // });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n         \n\n                //find all users of usch roles and update\n         \n\n\n\n    \n\n    \n    \n  }\n\n  static adminPreviledgesEdit(request,response){\n\n         const {\n          view_bookings,\n          view_quotations,\n          view_transactions,\n          view_payments,\n          view_drivers,\n          view_sos,\n          view_partners,\n          view_package,\n          view_cars,\n          previledges_info,\n          view_tickets,\n          view_faqs,\n          view_users,\n          view_admins,\n          view_settings,\n          view_car_inspection,\n          view_drive_test,\n\n          status,\n\n\n          manage_bookings,\n          manage_quotations,\n          manage_payments,\n          manage_drivers,\n          manage_sos,\n         manage_partners,\n          manage_package,\n         manage_transactions,\n          manage_cars,\n          manage_tickets,\n          manage_faqs,\n          manage_settings,\n          manage_users,\n          manage_admins,\n          manage_drive_test,\n          manage_car_inspection,\n        }  = request.body;  \n\n    \n\n\n    RolesAndPreviledgesModel.findOne({ _id:  new String( request.params.id) }, function (err, roles) {\n\n        if (!roles) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        roles.status = status || roles.status;\n        roles.view_bookings= view_bookings || roles.view_bookings;\n          roles.view_quotations= view_quotations || roles.view_quotations;\n          roles.view_transactions= view_transactions || roles.view_transactions;\n          roles.view_payments = view_payments || roles.view_payments;\n          roles.view_drivers = view_drivers || roles.view_drivers;\n          roles.view_sos= view_sos || roles.view_sos;\n          roles.view_partners = view_partners || roles.view_partners;\n          roles.view_package= view_package || roles.view_package;\n          roles.view_cars= view_cars || roles.view_cars;\n          roles.view_tickets = view_tickets || roles.view_tickets;\n          roles.view_faqs = view_faqs || roles.view_faqs;\n          roles.view_users = view_users || roles.view_users;\n          roles.view_admins = view_admins || roles.view_admins;\n          roles.view_settings = view_settings || roles.view_settings;\n\n          roles.view_drive_test = view_drive_test || roles.view_drive_test;\n          roles.view_car_inspection = view_car_inspection || roles.view_car_inspection;\n\n\n        \n        roles.manage_bookings= manage_bookings || roles.manage_bookings;\n          roles.manage_quotations= manage_quotations || roles.manage_quotations;\n          roles.manage_transactions= manage_transactions || roles.manage_transactions;\n          roles.manage_payments = manage_payments || roles.manage_payments;\n          roles.manage_drivers = manage_drivers || roles.manage_drivers;\n          roles.manage_sos= manage_sos || roles.manage_sos;\n          roles.manage_partners = manage_partners || roles.manage_partners;\n          roles.manage_package= manage_package || roles.manage_package;\n          roles.manage_cars= manage_cars || roles.manage_cars;\n          roles.manage_tickets = manage_tickets || roles.manage_tickets;\n          roles.manage_faqs = manage_faqs || roles.manage_faqs;\n          roles.manage_users = manage_users || roles.manage_users;\n          roles.manage_admins = manage_admins || roles.manage_admins;\n          roles.manage_settings = manage_settings || roles.manage_settings;\n\n          roles.manage_drive_test = manage_drive_test || roles.manage_drive_test;\n          roles.manage_car_inspection = manage_car_inspection || roles.manage_car_inspection;\n\n    \n\n     \n        roles.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n\n          console.log(user)\n\n          //find all users of usch roles and update\n          UserModel.find({ roles:  previledges_info }, function (err, users) {\n\n                if (!users) {\n                  return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n                }\n\n               \n\n               UserModel.updateMany({ roles: previledges_info },\n                 { $set:\n                       { view_bookings,\n                          view_quotations,\n                          view_transactions,\n                          view_payments,\n                          view_drivers,\n                          view_sos,\n                          view_partners,\n                          view_package,\n                          view_cars,\n                          view_tickets,\n                          view_faqs,\n                          view_users,\n                          view_admins,\n                          view_settings,\n                          status ,\n\n\n                          manage_bookings,\n                          manage_quotations,\n                          manage_payments,\n                          manage_drivers,\n                          manage_sos,\n                         manage_partners,\n                          manage_package,\n                         manage_transactions,\n                          manage_cars,\n                          manage_tickets,\n                          manage_faqs,\n                          manage_settings,\n                          manage_users,\n                          manage_admins,\n\n\n          view_car_inspection,\n          view_drive_test,\n           manage_drive_test,\n          manage_car_inspection,\n\n\n                        }\n              },{ multi: true }\n\n\n\n\n               , function(err,result)\n                 {\n                  if (err) {\n                    console.log(err)\n                    res.send(err);\n                  } else {\n                    \n                    return response.status(200).json({\n                      status: 200,\n                      data: [\n                        {\n                          success:'ok',\n                          result,\n                        },\n                      ],\n                      message: 'Updated all users with fields and status changed',\n                    });\n                  }\n              \n              });\n\n\n\n\n           })\n\n\n        }); \n      });\n  }\n\n  static managePreviledgesDetail(request,response){\n    const {previledges_description, previledges_info} = request.body\n    RolesAndPreviledgesModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        plan.previledges_info= previledges_info || plan.previledges_info;\n        plan.previledges_description= previledges_description || plan.previledges_description;\n     \n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n\n          //find all users of usch roles and update\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n  }\n\n\n  static managePreviledgesRulesDetail(request,response){\n    const {field, value} = request.body\n    UserModel.findOne({ _id:  request.params.id }, function (err, plan) {\n\n        if (!plan) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n\n        // Verify and save the user\n        // user.avatar= avatar || user.avatar;\n        plan[field]= value || plan[field];\n        \n     \n        plan.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message });\n          }\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user roles andd permission profile.' });\n        }); \n      });\n  }\n\n\n   static deletePreviledges(request,response){\n         //if(request.params.delete_type==\"Individual\"){\n\n      RolesAndPreviledgesModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        RolesAndPreviledgesModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n     //}\n    \n  }\n\n\n\n  static manageSOS(request,response){\n    SOSModel.find()\n      .then(data => {\n        let redFlag = data;\n        console.log(redFlag,\"SOS VALUES\")\n        if (redFlag.length === 0) {\n          \n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                redFlag:[],\n                message: 'No SOS found',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              redFlag,\n              message: 'All sos/redflags was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  \n\n\n  static manageSOSDetail(request,response){\n\n    SOSModel.find({_id: request.params.id})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status } = request.body;\n     \n\n            SOSModel.updateOne({_id: request.params.id }, {\n                    \n                      status: status\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>{\n                console.log(err)\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                });\n              });\n\n    \n      })\n      .catch(error => {\n         console.log(err)\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                });\n      });\n\n  }\n\n  static deleteSOS(request,response){\n    SOSModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        SOSModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static deleteTicket(request,response){\n\n    InterventionsModel.find({_id: request.params.id})\n      .then(data => {\n        const user = data;\n\n        if ( user.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The user with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n\n        InterventionsModel.remove({_id: request.params.id})\n          .then(data => {\n            const deletedUser = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedUser._id,\n                  message: 'user record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n         console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n  }\n\n  static manageTickets(request,response){\n    InterventionsModel.find()\n      .then(data => {\n        console.log(\"all tickets>>>>\" + data)\n        let intervention = data;\n        if (intervention.length === 0) {\n          \n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                intervention:[],\n                message: 'No records yet',\n              },\n            ],\n          });\n        }\n        //console.log( intervention)\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              intervention,\n              message: 'All interventions was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n    \n  }\n\n\n  static createNewTicket(request,res){\n    const { status , subject, category, response, username,phone_number,email, assigned_to,comment} = request.body;\n\n    const NewCars = new InterventionsModel({ \n            id:  new AutoincrementId(InterventionsModel).counter(),\n            status , category, subject, response, username,phone_number,email, assigned_to,comment\n      });\n\n    NewCars.save()\n      .then(data => {\n        const Cars = data;\n        return res.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: Cars.id,\n              message: 'Created car record',\n            },\n          ],\n        });\n      })\n      .catch(err =>{\n        console.log(err)\n        res.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static manageTicketsDetail(request,responses){\n\n    InterventionsModel.find({_id: request.params.id})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return responses.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status , category, response, username,phone_number,email, assigned_to} = request.body;\n   \n\n\n            InterventionsModel.updateOne({_id: request.params.id }, {\n                    \n                      status: status || redId.status,\n                      category: category || redId.category,\n                      username: username || redId.username,\n                      phone_number: phone_number || redId.phone_number,\n                      email: email || redId.email,\n                      response: response || redId.response, \n                      assigned_to: assigned_to || redId.assigned_to,\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return responses.status(201).json({\n                  status: 201,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err => {\n                responses.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                });\n              });\n\n    \n\n      })\n      .catch(error => {\n        responses.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        });\n      });\n\n  }\n\n\n\n  static manageUserNotificationCounter(request,responses){\n\n    UserModel.find({email: request.params.id})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return responses.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { notification_count} = request.body;\n   \n\n\n            UserModel.updateOne({_id: request.params.id }, {\n                    \n                      notification_count: notification_count || redId.notification_count,\n                      \n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return responses.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated user notification record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err => {\n                responses.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                });\n              });\n\n    \n\n      })\n      .catch(error => {\n        responses.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        });\n      });\n\n  }\n\n  static createNewFAQ(request,response){\n    const { question , answer, status} = request.body;\n\n    const NewCars = new FAQModel({ \n            id:  new AutoincrementId(FAQModel).counter(),\n            question , answer,status\n      });\n\n    NewCars.save()\n      .then(data => {\n        const Cars = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: Cars.id,\n              message: 'Created car record',\n            },\n          ],\n        });\n      })\n      .catch(err =>{\n        console.log(err)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n\n  static manageFaqs(request,response){\n   FAQModel.find()\n      .then(data => {\n        let faqs= data;\n        console.log(faqs,\"faqs\")\n        if (faqs.length === 0) {\n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                faqs:[],\n                message: 'All faqs was retrieved successfully',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              faqs,\n              message: 'All faqs was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n         \n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static manageFaqsDetail(request,response){\n\n    FAQModel.find({_id: request.params.id})\n    .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { question , answer, status} = request.body;\n        \n\n\n             FAQModel.updateOne({_id: request.params.id }, {\n                    \n                      question: question || redId.question,\n                      answer: answer || redId.answer,\n                      status: status || redId.status,\n                  \n                }).then(data => {\n                  \n                const faq = data;\n                \n                return response.status(201).json({\n                  status: 201,\n                  data: [\n                    {\n                      id: faq.status,\n                      message: 'Updated faq record’s detail',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n\n\n  }\n\n\n\n\n\n\n\n\n\n  static manageCars(request,response){\n     CarsModel.find()\n      .then(data => {\n        let carsAvailable = data;\n        console.log(carsAvailable+ \"all cars here\")\n        if (carsAvailable.length === 0) {\n           cars= [];\n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n               carsAvailable:[],\n                message: 'All Cars was retrieved successfully',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              carsAvailable,\n              message: 'All Carss was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static manageCarsDetail(request,response){\n    const {\n      status,\n      health_status,\n      car_status,\n      car_type,\n      car_model,\n      description,\n      car_year,\n      assigned_driver_name,\n      assigned_driver_email,\n      assigned_driver_phone,\n      partner_id,\n      inspection_detail,\n      plate_number,\n      license,\n      assigned_driver_id,\n      images,\n      inspectionDate,\n      vehicleIdentificationNumber,\n\ninspectionTime,\n\n    } = request.body;\n\n\n      CarsModel.find({_id: request.params.id})\n    .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { question , answer} = request.body;\n        \n\n\n         CarsModel.updateOne({_id: request.params.id }, {\n                    \n                      status: status || redId.status,\n                      health_status: health_status || redId.health_status,\n                      car_status: car_status || redId.car_status,\n                      car_type: car_type|| redId.car_type,\n                      car_model: car_model || redId.car_model,\n                      description: description || redId.description,\n                      car_year : car_year || redId.car_year,\n                      assigned_driver_name: assigned_driver_name || redId.assigned_driver_name,\n                      assigned_driver_email: assigned_driver_email || redId.assigned_driver_email,\n                      assigned_driver_phone: assigned_driver_phone || redId.assigned_driver_phone,\n                      partner_id: partner_id || redId.partner_id,\n                      inspection_detail: inspection_detail || redId.inspection_detail,\n                      plate_number: plate_number || redId.plate_number,\n                      license: license || redId.license,\n                      assigned_driver_id: assigned_driver_id || redId.assigned_driver_id,\n                      images: images || redId.images,\n                      inspectionDate: inspectionDate || redId.inspectionDate,\n                      vehicleIdentificationNumber: vehicleIdentificationNumber || redId.vehicleIdentificationNumber,\n                      inspectionTime : inspectionTime || redId.inspectionTime ,\n                      //images\n                  \n                }).then(data => {\n                  \n                const cars = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: cars._id,\n                      data: cars,\n                      message: 'Updated faq record’s detail',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n\n\n  }\n\n\n  static createNewCar(request,response){\n    const {\n       status,\n       health_status,\n       car_status,\n            color,\n            model,\n      car_type,\n      car_model,\n      description,\n      car_year,\n      assigned_driver_name,\n      assigned_driver_email,\n      assigned_driver_phone,\n      partner_id,\n      inspection_detail,\n      plate_number,\n      license,\n      assigned_driver_id,\n      images,\n      car,\n\n      carModel,\n      vehicleIdentificationNumber,\n\ncarYear,\n\nvehicleColor,\n\nplateNo,\n\ninspectionDate,\n\ninspectionTime,\n\ncarDescription,\n\nimagePath,\n\ncreator,\n\ndate_created,\npartnerEmail,\n\n    } = request.body;\n    \n    const NewCars = new CarsModel({ \n            id:  new AutoincrementId(CarsModel).counter(),\n            status,\n            health_status,\n            car_status,\n            color,\n            model: car_model,\n      car_type,\n      car_model,\n      description,\n      car_year,\n      assigned_driver_name,\n      assigned_driver_email,\n      assigned_driver_phone,\n      partner_id,\n      inspection_detail,\n      plate_number,\n      license,\n      assigned_driver_id,\n      images,\n      car,\n\n      \n\n      carModel,\n      vehicleIdentificationNumber,\n\ncarYear,\n\nvehicleColor,\n\nplateNo,\n\ninspectionDate,\n\ninspectionTime,\n\ncarDescription,\n\nimagePath,\n\ncreator,\n\ndate_created,\npartnerEmail,\n\n\n\n\n\n\n      });\n\n    NewCars.save()\n      .then(data => {\n        const Cars = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: Cars.id,\n              message: 'Created car record',\n            },\n          ],\n        });\n      })\n      .catch(err =>{\n        console.log(err)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n static  getCarsInfo(request,response){\n\n           return   response.status(200).json({\n          status: 200,\n          data: [\n            {\n              carInfo: carsApi,\n              message: 'Created car record',\n            },\n          ],\n        });\n\n    // const dataValues = [];\n    // fs.createReadStream('cars_api_info.csv')\n    //   .pipe(csv())\n    //   .on('data', (row) => {\n    //     try{\n    //       dataValues.push(row)\n    //     }catch(e){\n    //        return  response.status(400).json({\n    //       status: 400,\n    //       data: [\n    //         {\n              \n    //           message: e,\n    //         },\n    //       ],\n    //     });\n    //     }\n    //     //console.log(row);\n    //   })\n    //   .on('end', () => {\n    //     //console.log('CSV file successfully processed');\n    //     //console.log(dataValues)\n    //     return   response.status(200).json({\n    //       status: 200,\n    //       data: [\n    //         {\n    //           carInfo: dataValues,\n    //           message: 'Created car record',\n    //         },\n    //       ],\n    //     });\n    //   });\n  }\n\n\n  \n\n\n\n  \n\n\n\n  \n  static manageGoogleSettings(request,response){\n    \n      GmailSettingModel.find()\n      .then(data => {\n        const googleSettings = data;\n        console.log(googleSettings,\"users available are here\")\n        if (googleSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              googleSettings,\n               \n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getAllRepairs(request,response){\n\n    MechModel.find()\n      .then(data => {\n        const mech = data;\n        //console.log(googleSettings,\"users available are here\")\n        if (mech.length === 0) {\n\n          return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              mech:[],\n               \n          \n              message: 'Successful',\n            },\n          ],\n        });\n          \n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              mech,\n               \n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n\n  static changeRepairStatus(request,response){\n\n    MechModel.find({_id: request.params.id})\n  .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given red-flag id does not exists',\n                    });\n        }\n         const { status } = request.body;\n    \n\n\n            MechModel.updateOne({_id:request.params.id }, {\n                    \n                      status: status\n                  \n                }).then(data => {\n                  \n                const redflagStatus = data;\n                \n                return response.status(201).json({\n                  status: 201,\n                  data: [\n                    {\n                      id: redflagStatus._id,\n                      message: 'Updated red-flag record’s status',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>{\n                console.log(err)\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                });\n              });\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n\n\n    static getAllPartnerEarnings(request,response){\n\n    EarningsModel.find()\n      .then(data => {\n        const earnings = data;\n        //console.log(googleSettings,\"users available are here\")\n        if (earnings.length === 0) {\n\n          return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              earnings:[],\n               \n          \n              message: 'Successful',\n            },\n          ],\n        });\n          \n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              earnings,\n               \n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n\n  static createNewPartnerEarnings(request,response){\n    let mongoose = require('mongoose');\n\n    const { paymentDate,\nPaymentStatus,\nPaymentAmount,\npaymentReference,\npartnerId,\npartnerEmail,\npartnerBankAccount,\nvehicleId,\nvehicleName,\nvehiclePlateNo,} = request.body;\n\n    const NewEarnings = new EarningsModel({ \n            id:  new AutoincrementId(EarningsModel).counter(),\n            paymentDate,\npaymentStatus: PaymentStatus,\npaymentAmount: PaymentAmount,\npaymentReference,\npartnerId,\npartnerEmail,\npartnerBankAccount,\nvehicleId: mongoose.Types.ObjectId(vehicleId),\nvehicleName,\nvehiclePlateNo,\npartner: mongoose.Types.ObjectId(partnerId),\nvehicle: mongoose.Types.ObjectId(vehicleId),\ndate_created: new Date(),\n      });\n\n    NewEarnings.save()\n      .then(data => {\n        const Earnings = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: Earnings.id,\n              message: 'Created car record',\n            },\n          ],\n        });\n      })\n      .catch(err =>{\n        console.log(err)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n  static manageFacebookSettings(request,response){\n     FacebookSettingModel.find()\n      .then(data => {\n        const facebookSettings = data;\n        console.log(facebookSettings,\"facebookSettings available are here\")\n        if (facebookSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              facebookSettings,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static managePaystackSettings(request,response){\n     PaystackSettingModel.find()\n      .then(data => {\n        const paystackSettings = data;\n        console.log(paystackSettings,\"paystackSettings available are here\")\n        if (paystackSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              paystackSettings,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static manageEmailSettings(request,response){\n     SendgridEmailSettingModel.find()\n      .then(data => {\n        const sendgridSettings = data;\n        console.log(sendgridSettings,\"sendgridSettings available are here\")\n        if (sendgridSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              sendgridSettings,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageS3BucketSettings(request,response){\n     AwsS3Model.find()\n      .then(data => {\n        const awsSettings = data;\n        console.log(awsSettings,\"awsSettings available are here\")\n        if (awsSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              awsSettings,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageInstagramSettings(request,response){\n     InstagramSettingModel.find()\n      .then(data => {\n        const instagramSettings = data;\n        console.log(instagramSettings,\"instagramSettings available are here\")\n        if (instagramSettings.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no  record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              instagramSettings,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static manageSettingsDetail(request,response){\n\n    const {\n      test_secret_key,\n      test_public_key,\n      live_public_key,\n      live_secret_key,\n      api_mode,\n      type\n\n    } = request.body;\n   \n\n    switch (type){\n      case \"google\":\n       GmailSettingModel.findOne({ _id:  request.params.id }, function (err, settings) {\n\n        if (!settings) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n        settings.test_secret_key= test_secret_key || settings.test_secret_key;\n        settings.test_public_key= test_public_key || settings.test_public_key;\n     \n        settings.live_secret_key= live_secret_key || settings.live_secret_key;\n        settings.live_public_key= live_public_key || settings.live_public_key;\n        settings.api_mode = api_mode || settings.api_mode;\n        \n        settings.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); }\n          \n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n        break;\n      case \"aws\":\n      \n        AwsS3Model.findOne({ _id:  request.params.id }, function (err, settings) {\n\n        if (!settings) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        settings.test_secret_key= test_secret_key || settings.test_secret_key;\n        settings.test_public_key= test_public_key || settings.test_public_key;\n     \n        settings.live_secret_key= live_secret_key || settings.live_secret_key;\n        settings.live_public_key= live_public_key || settings.live_public_key;\n        settings.api_mode = api_mode || settings.api_mode;\n        \n        settings.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); }\n          \n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n        break;\n      case \"facebook\":\n      \n\n       FacebookSettingModel.findOne({ _id:  request.params.id }, function (err, settings) {\n\n        if (!settings) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n        settings.test_secret_key= test_secret_key || settings.test_secret_key;\n        settings.test_public_key= test_public_key || settings.test_public_key;\n     \n        settings.live_secret_key= live_secret_key || settings.live_secret_key;\n        settings.live_public_key= live_public_key || settings.live_public_key;\n        settings.api_mode = api_mode || settings.api_mode;\n        \n        settings.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); }\n         \n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n       break;\n      case \"instagram\":\n      \n\n       InstagramSettingModel.findOne({ _id:  request.params.id }, function (err, settings) {\n\n        if (!settings) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        settings.test_secret_key= test_secret_key || settings.test_secret_key;\n        settings.test_public_key= test_public_key || settings.test_public_key;\n     \n        settings.live_secret_key= live_secret_key || settings.live_secret_key;\n        settings.live_public_key= live_public_key || settings.live_public_key;\n        settings.api_mode = api_mode || settings.api_mode;\n        \n        settings.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); }\n          \n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n       break;\n      case \"paystack\":\n      \n\n       PaystackSettingModel.findOne({ _id:  request.params.id }, function (err, settings) {\n\n        if (!settings) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n        settings.test_secret_key= test_secret_key || settings.test_secret_key;\n        settings.test_public_key= test_public_key || settings.test_public_key;\n     \n        settings.live_secret_key= live_secret_key || settings.live_secret_key;\n        settings.live_public_key= live_public_key || settings.live_public_key;\n        settings.api_mode = api_mode || settings.api_mode;\n        \n        settings.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); }\n         \n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n       break;\n      case \"sendgrid\":\n\n       SendgridEmailSettingModel.findOne({ _id:  request.params.id }, function (err, settings) {\n\n        if (!settings) {\n          return response.status(400).send({ msg: 'We were unable to find a plan with that id.' });\n        }\n\n        settings.test_secret_key= test_secret_key || settings.test_secret_key;\n        settings.test_public_key= test_public_key || settings.test_public_key;\n     \n        settings.live_secret_key= live_secret_key || settings.live_secret_key;\n        settings.live_public_key= live_public_key || settings.live_public_key;\n        settings.api_mode = api_mode || settings.api_mode;\n        \n        settings.save(function (err,user) {\n          if (err) { \n            console.log(err)\n            return response.status(500).send({ msg: err.message }); }\n          \n            //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n            return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\n        }); \n      });\n      \n       break;\n    }\n\n  }\n\n\n  static manageBookings(request,response){\n    return  UserService.manageBookings(request,response)\n  }\n\n\n \n\n   static makeQuotation(request,response){\n      let  {\n                   plan_id,\n                  price,\n                  status,\n                  full_name,\n                  quotation_id,\n                  email,\n                  reference,\n                  amount,\n                  createdDateOfQuotation,\n                  phone_number\n\n                }  = request.body;\n\n\n    \n     const NewUserPlan = new QuoteModel({ \n      id: new AutoincrementId(QuoteModel).counter(), \n      plan_id,\n      price,\n      status,\n      full_name,\n      quotation_id,\n      email,\n      reference,\n      amount,\n      createdDateOfQuotation,\n      phone_number,\n     });\n\n\n     NewUserPlan.save()\n      .then(data => {\n        const user = data;\n        console.log(user + \"plans\")\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              user\n            },\n          ],\n          message: 'User Plan created successfully',\n        });\n      \n      })\n      .catch(err => {\n        console.log(err+ 'error here user plan')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n      // UserService.saveUsersItinerary(request,response);\n  }\n             \n\n\n  static createNewPlanBooking(request,response){\n    //   let {\n    //    itineraries,\n    //   user_id,\n    //   carsSelected,\n    //   planName,\n    //   price,\n    //   planCategoryName,\n    //   no_hours,\n    //   username,\n    //   email,\n    //   phone_number,\n    //   plan_id,\n    // } = request.body;\n\n    let {\n       plan_id,\n                     createdDate,\n                    itineraries ,\n                    user_id, \n                    carsSelected,\n                    // plan_name:  plan_name.options[plan_name.selectedIndex].text,   //plan_name.value,\n                    price,\n                    // plan_categories: plan_categories,\n                    status,\n                    no_hours,\n                    duration,\n                    phone_number,\n                     plan_category,//plan_categories1.value,\n              plan_name,//plan_name1.value,\n\n                    username,\n                    email,\n                     has_been_updated,\n    }= request.body;\n\n   \n\n\n    \n     const NewUserPlan = new UserPlanModel({ \n      id: new AutoincrementId(UserPlanModel).counter(), \n     plan_id,\n\n    \n                    createdDateOfQuotation: createdDate,\n                    itineries:itineraries ,\n                    user_id, \n                    cars_on_plan:carsSelected,\n                    // plan_name:  plan_name.options[plan_name.selectedIndex].text,   //plan_name.value,\n                    price,\n                    // plan_categories: plan_categories,\n                    status,\n                    no_hours,\n                    duration,\n                    phone_number,\n\n                     plan_category_name: plan_category,//plan_categories1.value,\n              plan_name,//plan_name1.value,\n\n                    username,\n                    email,\n                    has_updated: 'Yes',\n     });\n\n\n     NewUserPlan.save()\n      .then(data => {\n        const user = data;\n        console.log(user + \"plans\")\n\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              user\n            },\n          ],\n          message: 'User Plan created successfully',\n        });\n      \n      })\n      .catch(err => {\n        console.log(err+ 'error here user plan')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n      // UserService.saveUsersItinerary(request,response);\n  }\n\n\n\n  \n\n  static manageBookingsDetail(request,response){\n    return  UserService.manageBookingsDetail(request,response)\n  }\n\n  static manageManualBooking(request,response){\n    //return  UserService.manageManualBooking(request,response)\n  }\n\n  static manageItineraries(request,response){\n    ItineraryModel.find()\n      .then(data => {\n        const itineraries = data;\n        console.log(data+ \"either empty itins\")\n        if (itineraries.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              itineraries:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              itineraries,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static manageUsersPlan(request,response){\n    UserPlanModel.find()\n      //.populate('users_collections')\n      .then(data => {\n        const usersPlan = data;\n        console.log(data+ \"either empty itins\")\n        if (usersPlan.length === 0) {\n          return response.status(200).json({\n            status: 200,\n            data: [\n            {\n              usersPlan:[],\n          \n              message: 'Successful',\n            },\n          ],\n          });\n        }\n\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              usersPlan,\n          \n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  \n\n\n\n\n\n  static createNewItinerary(request, response) {\n    // console.log(request.body)\n\n\n\n  \n    let {\n       plan_category,\n       start_location,\n       destination,\n       travel_option:drive_option,\n       no_hours,\n       travel_option,\n       plan_name,\n       status,\n       start_time,\n    \n       drivingschool,\n       user_id,\n       username,\n       email,\n       phone_number,\n       plan_id,\n       end_time,\n        pickup_time,\n      certificate_id,\n      certificate_date\n    } = request.body;\n\n\n   \n\n    \n    const NewItinerary = new ItineraryModel({ \n      id: new AutoincrementId(ItineraryModel).counter(), \n       plan_category,\n       start_location,\n       destination,\n       travel_option:drive_option,\n       no_hours,\n       travel_option,\n       plan_name,\n       status,\n       start_time,\n       travel_option,\n       drivingschool,\n       user_id,\n       username,\n       email,\n       phone_number,\n       plan_id,\n       end_time,\n        pickup_time,\n      certificate_id,\n      certificate_date\n\n       \n     });\n\n     NewItinerary.save()\n      .then(data => {\n        const user = data;\n        const result = {\n           plan_category: user.plan_category,\n      start_location: user.start_location,\n      destination: user.destination,\n      drive_option:user.drive_option,\n      no_hours:user.no_hours,\n        travel_option:user.travel_option,\n      plan_name,\n      status,\n      start_time,\n      drivingschool,\n      username: user.username,\n      email:user.email\n           // cars_id: user.cars_id\n        };\n        \n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              \n              result\n            },\n          ],\n          message: 'User Itinerary created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n\n\n\n  \n\n \n\n  static manageItineraryDetail(request,response){\n\n\n    ItineraryModel.find({_id: request.params.id})\n    .then(redId => {\n        if (redId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given itinerary id does not exists',\n                    });\n        }\n         const { status, assigned_driver_id, assigned_driver_name, assigned_driver_email, assigned_driver_phone} = request.body;\n\n    \n        \n\n\n        ItineraryModel.updateOne({_id: request.params.id }, {\n                    \n                      status: status || redId.status,\n                      assigned_driver_id : assigned_driver_id || redId.assigned_driver_name,\n                      assigned_driver_name : assigned_driver_name || redId.assigned_driver_name,\n                      assigned_driver_email : assigned_driver_email || redId.assigned_driver_email,\n                      assigned_driver_phone: assigned_driver_phone || redId.assigned_driver_phone\n                      \n                  \n                }).then(data => {\n                  \n                const faq = data;\n                \n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                    {\n                      id: faq._id,\n                      message: 'Updated faq record’s detail',\n                    },\n                  ],\n                });\n              })\n              .catch(err =>\n                response.status(400).json({\n                  status: 400,\n                  error: ErrorHandler.errors().validationError,\n                }),\n              );\n\n  \n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n\n    \n  }\n\n  static manageWalletHistory(req,res){\n    WalletModel.find().then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect(BACKEND_API+ '/error')\n          }\n         const tranx = donor;\n         console.log(tranx)\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    tranx,\n                    message: 'Get all wallet amount  was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect(BACKEND_API+ '/error')\n      })\n\n  }\n\n\n  static adminDashboardTodaySales(request,response){\n    //var now = new Date();\n    //var startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    // WalletModel.find({createdDate: {$gte: startOfToday}}, function (err, docs) { \n    //    if(err){\n    //      console.log(err)\n    //    }\n\n    //    return response.status(200).json({\n    //             status: 200,\n    //             data: [\n    //               {\n    //                 todaySales:docs,\n    //                 message: 'Get all wallet amount  was successful',\n    //               },\n    //             ],\n    //       });\n\n    //  });\n\n\n      const now = new Date();\n      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n      PaymentModel.find({created_at: {$gte: today}}).exec(function(err,wallet){\n           if(err){ \n              return response.status(400).json({\n                status: 400,\n                message: 'Get all wallet amount  was successful',     \n              });\n\n           }\n\n             let totalToday =0;\n             let todaySales_from_account = wallet.map((item,i)=>{\n                 totalToday+=item.amount\n              })\n\n            return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    todaySales:totalToday,\n                    message: 'Get all wallet amount  was successful',\n                  },\n                ],\n          });\n\n      });\n\n\n       \n  }\n\n  static adminDashboardYesterdaySales(request,response){\n\n    var yesterdayStart = new Date();\n    yesterdayStart.setDate(yesterdayStart.getDate() - 1);\n    yesterdayStart.setHours(0,0,0,0);\n    //var startId = Math.floor(yesterdayStart.getTime() / 1000).toString(16) + \"0000000000000000\";\n\n    var yesterdayEnd = new Date();\n    yesterdayEnd.setDate(yesterdayEnd.getDate() - 1);\n    yesterdayEnd.setHours(23,59,59,999);\n    \n\n\n\n    PaymentModel.find({ \"createdDate\": { $gt: new Date(Date.now() - 24*60*60 * 1000)} }).exec(function(err,wallet){\n           if(err){  console.log(err)}\n\n\n\n             let totalYest =0;\n             let todaySales_from_account = wallet.map((item,i)=>{\n                 totalYest+=item.amount\n              })\n\n             console.log(totalYest)\n\n            return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    yesterdaysSales:totalYest,\n                    message: 'Get all wallet amount  was successful',\n                  },\n                ],\n          });\n\n      });\n\n    \n\n  }\n\n  static adminDashboardWeeklySales(request,response){\n     let oneWeekAgo = Date(new Date() - 7 * 60 * 60 * 24 * 1000);\n\n     // WalletModel.find({createdDate: {\n     //       $gte: oneWeekAgo\n      \n     //    }\n     //  }, function (err, docs) { \n\n     //     if(err){\n     //     console.log(err)\n     //   }\n\n     //   return response.status(200).json({\n     //            status: 200,\n     //            data: [\n     //              {\n     //                weeklySales:docs,\n     //                message: 'Get all wallet amount  was successful',\n     //              },\n     //            ],\n     //      });\n\n     // });\n\n     \n\n      PaymentModel.find({ \"createdDate\": { $gte: oneWeekAgo} }).exec(function(err,wallet){\n           if(err){  console.log(err)}\n\n\n\n             let totalWeek =0;\n             let todaySales_from_account = wallet.map((item,i)=>{\n                 totalWeek+=item.amount\n              })\n\n        \n\n            return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    weeklySales:totalWeek,\n                    message: 'Get all wallet amount  was successful',\n                  },\n                ],\n          });\n\n      });\n  }\n\n  static adminDashboardMonthlySales(request,response){\n     const lastMonths = new Date( (new Date().getMonth() -1));\n     PaymentModel.find({\"createdDate\": {\n           \n           $lte: lastMonths\n        }\n      }, function (err, docs) {\n\n       if(err){\n         console.log(err)\n       }\n\n       return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    lastMonth:docs,\n                    message: 'Get all wallet amount  was successful',\n                  },\n                ],\n          });\n\n\n     });\n\n\n  }\n\n  \n\n  \n\n   \n\n  static adminGetAllUsers(request,response){\n    \n  }\n\n\n\n  static adminGetAllUsersPlans(request,response){\n    \n  }\n\n\n\n  static paystackHistoryAdmin(req,res){\n    const id = new String(req.params.id);\n    WalletModel.find().then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect(BACKEND_API+ '/error')\n          }\n         const tranx = donor;\n         console.log(tranx +\"for the user\")\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    wallets:tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect(BACKEND_API+ '/error')\n      })\n  }\n\n\n  static paystackPaymentsAdmin(req,res){\n    const id = new String(req.params.id);\n    PaymentModel.find().then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect(BACKEND_API+ '/error')\n          }\n         const tranx = donor;\n         console.log(tranx +\"for the user\")\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    payments:tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect(BACKEND_API+ '/error')\n      })\n  }\n\n\n  static paystackQuotationsAdmin(req,res){\n    const id = new String(req.params.id);\n    QuoteModel.find().then((donor,error)=>{\n          if(!donor){\n              //handle error when the donor is not found\n              console.log(error)\n              res.redirect(BACKEND_API+ '/error')\n          }\n         const tranx = donor;\n         console.log(tranx +\"for the user quotations\")\n         return res.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    quotations:tranx,\n                    message: 'Get a specific user plan was successful',\n                  },\n                ],\n          });\n        \n      }).catch((e)=>{\n          console.log(e)\n          res.redirect(BACKEND_API+ '/error')\n      })\n  }\n\n\n\n\n  static updateUsersPlanStatusAdmin(request, response) {\n    \n      const  {\n                    status,\n                    payment_status,\n                    email,\n                     has_updated,\n                     plan_id,\n                     price,\n                     createdDateOfQuotation\n                  }= request.body;\n\n\n    UserPlanModel.findOne({ plan_id:request.params.id }, function (err, user) {\n\n      // Verify and save the user\n      user.status= status || user.status;\n      user.payment_status= payment_status || user.payment_status;\n      user.email= email || user.email;\n   \n      user.has_updated= has_updated || user.has_updated;\n      user.plan_id= plan_id || user.plan_id;\n      user.price = price || user.price;\n      user.createdDateOfQuotation = createdDateOfQuotation || user.createdDateOfQuotation\n      \n      user.save(function (err,user) {\n        if (err) { return response.status(500).send({ msg: err.message }); }\n        console.log(user + 'hello')\n\n\n           \n\n          \n          UserPlanModel.updateMany({ plan_id: request.params.id },{\n                                            $set:{  //status:status, \n                                                    \"itineries.$[].status\":status,\n                                                  }},{ multi: true }, function(err,result){\n                                     if (err) {\n                                          console.log(err)\n                                          response.send(err);\n                                        } else {\n                                          console.log(result)\n\n\n                                          if(user.status==\"Unpaid\"){\n\n                                                 \n                                               UserService.NotificationEmail(request,response,'/views/templates/notification.html', {\n                                                       username: user.username,\n                                                       plan_id:user.plan_id,\n                                                       price: user.price,\n                                                       date: createdDateOfQuotation.substring(0,10),\n                                                       link: process.env.DEPLOY_FRONT_URL,   \n                                                      description: \"Payment is required\"\n                                                  },user.email,200)\n\n\n                                            }else{\n\n                                              UserService.NotificationEmail(request,response,'/views/templates/notification.html', {\n                                                       username: user.username,\n                                                       plan_id:user.plan_id,\n                                                       price: user.price,\n                                                       date: createdDateOfQuotation.substring(0,10),\n                                                       link: process.env.DEPLOY_FRONT_URL,   \n                                                      description: \"Payment is required\"  \n                                                      \n                                                  },user.email,200)\n\n                                              \n                                            }\n\n\n                                          \n\n\n\n                                          //return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated itineraries of this plan .' });\n                                \n                                        }\n\n          })\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n          //return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated  .' });\n      }); \n    });\n\n\n    \n  }\n\n\n\n\n\n\n\n  static updateItineraryStatusAdmin(request, response) {\n\n     const {  status,\n              user_plan_id,\n              has_received_quote,\n                  \n                  } = request.body;\n        let has_received_payments ='No';\n        if(request.body.has_received_payments ){\n                     has_received_payments = request.body.has_received_payments\n        }\n      \n                  //multiple updates of the status for this itineraries attached to this plan\n\n    // ItineraryModel.findOne({plan_id: request.params.id}, function (err, user) {\n\n    //   if(err){\n    //     console.log(err)\n    //   }\n\n    //   // Verify and save the user\n    //   user.status= status || user.status;\n      \n    //   user.plan_id= request.params.id || user.plan_id;\n    //   user.user_plan_id= user_plan_id || user.user_plan_id;\n      \n    //   user.save(function (err,user) {\n    //     if (err) { return response.status(500).send({ msg: err.message }); }\n    //     console.log(user + 'hello')\n    //       //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n\n\n          ItineraryModel.updateMany({ plan_id: user_plan_id },{\n              $set:{  status:status, \n                      user_plan_id: user_plan_id,\n                       has_received_quote:has_received_quote,\n                        has_received_payments: has_received_payments\n                      }},{ multi: true }, function(err,result){\n                         if (err) {\n                              console.log(err)\n                              response.send(err);\n                            } else {\n\n\n                               \n                              // console.log(result)\n                              return response.status(200).send({status: 200 ,success:'ok', msg: 'Successfully updated itineraries of this plan .' });\n                    \n                            }\n\n               })     \n\n          \n  }\n\n\n\n\n//drivers\n\nstatic driverConfirmBooking(request,response){\n   return response.sendFile(path.join(__dirname + '/driver_confirm.html'));\n}\n\n\n\nstatic showUserInfo(request,response){\n\n  UserModel.find({email: request.params.id})\n      .then(data => {\n        console.log(\"specific profile:\" + data)\n        \n       \n        const userInfo = data; //related\n        if (userInfo.length <= 0) {\n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                  {\n                    userInfo,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n                });\n        }\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    userInfo,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n    \n\n}\n\n\nstatic getTrails(request,response){\n\n\n  AuditNotificationModel.find({})\n      .then(data => {\n        console.log(\"specific profile:\" + data)\n        \n       \n        const audit = data; //related\n        if (audit.length <= 0) {\n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                  {\n                    audit,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n                });\n\n        }\n      \n\n\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    audit,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>{\n              console.log(err +\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\")\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              });\n            });\n}\n\n\nstatic createTrail(request,response){\n\n\n  let { date,\n           admin,\n           user,\n           module_name,\n           status,\n           message_type,\n           logMessage,\n           avatar,\n    } = request.body;\n\n    \n\n    const NewAuditTrail = new AuditNotificationModel({ \n      id: new AutoincrementId(AuditNotificationModel).counter(), \n      date,\n           admin,\n           user,\n           module_name,\n           status,\n           message_type,\n           logMessage,\n           avatar\n       });\n\n\n     NewAuditTrail.save()\n      .then(data => {\n        const user = data;\n        return response.status(201).json({\n                status: 201,\n                data: [\n                  {\n                    user,\n                    message: 'AUDIT SUCCESSFULLY CREATED',\n                  },\n                ],\n          });\n        \n\n        \n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n}\n\n\n\nstatic revokecar(request,response){\n\n  let { \n\n    status,\n  \n        date_created,\n        retrievalComments,\n        vehiclePlateNo,\n        vehicleName,\n        vehicleID,\n        vehicle,\n        partner,\n        partnerID,\n        partnerName,\n        partnerEmail,\n        retrievalDate,\n        hasBeenRevoked,\n    } = request.body;\n\n    \n\n    const RetrievalTrail = new Retrieval({ \n      id: new AutoincrementId(Retrieval).counter(), \n      \n    status,\n  \n        date_created,\n        retrievalComments,\n        vehiclePlateNo,\n        vehicleName,\n        vehicleID,\n        vehicle,\n        partner,\n        partnerID,\n        partnerName,\n        partnerEmail,\n        retrievalDate,\n        hasBeenRevoked,\n       });\n\n  \n     RetrievalTrail.save()\n      .then(data => {\n        const user = data;\n        return response.status(201).json({\n                status: 201,\n                data: [\n                  {\n                    user,\n                    message: 'AUDIT SUCCESSFULLY CREATED',\n                  },\n                ],\n          });\n        \n\n        \n      })\n      .catch(err => {\n        console.log(err+ 'error here')\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n\n\n}\n\n\n\nstatic revokecarstatus(request,response){\n\n  let { \n\n        car_status,\n        hasBeenRevoked,\n    } = request.body;\n\n    \n\n  \n\n\n    CarsModel.findOne({ _id:  request.params.id }, function (err, car) {\n\n      if (!car) return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      \n      \n      // Verify and save the user\n      car.car_status= car_status || car.car_status;\n      car.hasBeenRevoked= true || car.hasBeenRevoked;\n      \n      car.save(function (err,user) {\n        if (err) { \n          console.log(err)\n          return response.status(500).send({ msg: err.message });\n        }\n\n        \n        \n        return response.status(200).send({ status: 200,success:'ok', msg: 'Successfully updated user profile.' });\n      }); \n    });\n \n      \n    \n\n}\n\n\nstatic getrevokecars(request,response){\n  Retrieval.find({})\n      .then(data => {\n        \n       \n        const carsNotInUse = data; //related\n        if (carsNotInUse.length <= 0) {\n                return response.status(200).json({\n                  status: 200,\n                  data: [\n                  {\n                    carsNotInUse,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n                });\n\n        }\n      \n\n\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    carsNotInUse,\n                    message: 'Get a specific user was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>{\n              \n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              });\n            });\n}\n\n\n\n  \n  \n}\n"],"file":"user_service.js"}