{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/services/mech_service.js"],"names":["MongooseDatabase","getInstance","Database","MechService","request","response","body","user_id","location","description","status","firstname","lastname","email","carbrand","images","console","log","postData","NewMech","MechModel","id","AutoincrementId","counter","save","then","data","mechRequest","json","message","err","error","ErrorHandler","errors","validationError","find","Number","params","length","redFlag","type","mechId","user","updateOne","editMechRequest","_id","send","NewNotification","NotificationModel","notification","notifications"],"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","sourcesContent":["//import mongoose from 'mongoose';\nimport Database from '../models/db';\n\n\nimport { ResponseHandler } from '../helpers/response_handler';\nimport { ErrorHandler } from '../helpers/error_handler';\nimport MechModel from '../models/Repairs.model';\nimport NotificationModel from '../models/Notification.model';\nimport AutoincrementId from '../helpers/autoincrement_mongo.js';\n// Database.establishConnection();\nconst MongooseDatabase = Database.getInstance() || new Database();\nexport class MechService {\n  static create(request, response) {\n    const { user_id, location, description, status, firstname, lastname, email, carbrand,images } = request.body;\n    // let id = Number(user_id) || Number(request.body.user_id);\n    console.log('you user id : ' + user_id);\n    let postData = request.body;\n    const NewMech = new MechModel({\n\n        id:  new AutoincrementId(MechModel).counter(),\n        user_id, \n        location, \n  \n        status, \n        email, \n        firstname, \n        lastname,\n         carbrand, \n         description, \n         images\n      });\n\n    NewMech.save()\n      .then(data => {\n        const mechRequest = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: mechRequest.id,\n              message: 'Created mech request record',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static all(request, response) {\n    MechModel.find({user_id: Number(request.params.id)})\n      .then(data => {\n        let mechRequest = data;\n        if (mechRequest.length === 0) {\n          redFlag = [\n            {\n              id: 1,\n                user_id:5, \n                location:'89898888,09007667', \n                \n              \n            },\n          ];\n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                mechRequest,\n                message: 'All mech-request was retrieved successfully',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              mechRequest,\n              message: 'All mech-request was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  \n  static users(request, response) {\n    // UserModel.find({user_id: request.params.id})\n    MechModel.find({ user_id: Number(request.params.id) })\n    \n      .then(data => {\n        const mechRequest = data;\n        if (mechRequest.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no mech-request record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              mechRequest,\n              type: 'mechRequest',\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static update(request, response) {\n    MechModel.find({id: request.params.id})\n      .then(mechId => {\n        if (mechId.length <=0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The id for the given mech-request  does not exists',\n          });\n        }\n        const {\n          user_id,\n          firstname,\n          lastname,\n          email,\n          description,\n          carbrand,\n          \n          location,\n          \n        } = request.body;\n        if ( Number(request.user.id) === Number(mechId[0].user_id) )  {\n          MechModel.updateOne({id: Number(request.params.id)}, {\n          \n          user_id,\n          firstname,\n          lastname,\n          email,\n          description,\n          carbrand,\n          location,\n          status: 'pending',\n          // images:['a.jpg']\n             \n           }).then(data => {\n             \n              const editMechRequest = data;\n              console.log(data)\n              return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    id: editMechRequest._id,\n                    editMechRequest,\n                    message: 'Updated mech-request record’s comment',\n                  },\n                ],\n              });\n            })\n            .catch(error =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n        } else {\n          return response.status(401).json({\n            status: 401,\n            error: 'You must signup or login to access this route',\n          });\n        }\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n\n  static sendNotifications(request,response){\n\n    const { user_id, message, type, description } = request.body;\n    let id = Number(user_id) || Number(request.body.user_id);\n    console.log('you user id : ' + id);\n    let postData = request.body;\n    const NewNotification = new NotificationModel({ \n        id:  new AutoincrementId(NotificationModel).counter(),\n        user_id, message, type, description\n      });\n\n    NewNotification.save()\n      .then(data => {\n        const notification = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: notification.id,\n              message: 'Created sos record',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n\n  static getNotifications(request,response){\n    NotificationModel.find({ user_id: Number(request.params.id) })\n    \n      .then(data => {\n        const notifications = data;\n        if (notifications.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no notifications record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              notifications,\n              type: 'notifications',\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n}\n"],"file":"mech_service.js"}