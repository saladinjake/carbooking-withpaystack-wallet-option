{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/services/mech_service.js"],"names":["MongooseDatabase","getInstance","Database","MechService","request","response","body","user_id","location","description","status","firstname","lastname","email","carbrand","images","console","log","postData","NewMech","MechModel","id","AutoincrementId","counter","save","then","data","mechRequest","json","message","err","error","ErrorHandler","errors","validationError","find","Number","params","length","redFlag","type","mechId","user","updateOne","editMechRequest","_id","send","NewNotification","NotificationModel","notification","notifications"],"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","sourcesContent":["//import mongoose from 'mongoose';\nimport Database from '../models/db';\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\nimport { ResponseHandler } from '../helpers/response_handler';\nimport { ErrorHandler } from '../helpers/error_handler';\nimport MechModel from '../models/Repairs.model';\nimport NotificationModel from '../models/Notification.model';\nimport AutoincrementId from '../helpers/autoincrement_mongo.js';\n// Database.establishConnection();\nconst MongooseDatabase = Database.getInstance() || new Database();\nexport class MechService {\n  static create(request, response) {\n    const {\n      user_id,\n      location,\n      description,\n      status,\n      firstname,\n      lastname,\n      email,\n      carbrand,\n      images,\n    } = request.body;\n    // let id = Number(user_id) || Number(request.body.user_id);\n    console.log('you user id : ' + user_id);\n    let postData = request.body;\n    const NewMech = new MechModel({\n      id: new AutoincrementId(MechModel).counter(),\n      user_id,\n      location,\n\n      status,\n      email,\n      firstname,\n      lastname,\n      carbrand,\n      description,\n      images,\n    });\n\n    NewMech.save()\n      .then(data => {\n        const mechRequest = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: mechRequest.id,\n              message: 'Created mech request record',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static all(request, response) {\n    MechModel.find({ user_id: Number(request.params.id) })\n      .then(data => {\n        let mechRequest = data;\n        if (mechRequest.length === 0) {\n          redFlag = [\n            {\n              id: 1,\n              user_id: 5,\n              location: '89898888,09007667',\n            },\n          ];\n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                mechRequest,\n                message: 'All mech-request was retrieved successfully',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              mechRequest,\n              message: 'All mech-request was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static users(request, response) {\n    // UserModel.find({user_id: request.params.id})\n    MechModel.find({ user_id: request.params.id })\n\n      .then(data => {\n        const mechRequest = data;\n        if (mechRequest.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no mech-request record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              mechRequest,\n              type: 'mechRequest',\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static update(request, response) {\n    MechModel.find({ id: request.params.id })\n      .then(mechId => {\n        if (mechId.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The id for the given mech-request  does not exists',\n          });\n        }\n        const {\n          user_id,\n          firstname,\n          lastname,\n          email,\n          description,\n          carbrand,\n\n          location,\n        } = request.body;\n        if (Number(request.user.id) === Number(mechId[0].user_id)) {\n          MechModel.updateOne(\n            { id: Number(request.params.id) },\n            {\n              user_id,\n              firstname,\n              lastname,\n              email,\n              description,\n              carbrand,\n              location,\n              status: 'pending',\n              // images:['a.jpg']\n            },\n          )\n            .then(data => {\n              const editMechRequest = data;\n              console.log(data);\n              return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    id: editMechRequest._id,\n                    editMechRequest,\n                    message: 'Updated mech-request record’s comment',\n                  },\n                ],\n              });\n            })\n            .catch(error =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n        } else {\n          return response.status(401).json({\n            status: 401,\n            error: 'You must signup or login to access this route',\n          });\n        }\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static sendNotifications(request, response) {\n    const { user_id, message, type, description } = request.body;\n    let id = Number(user_id) || Number(request.body.user_id);\n    console.log('you user id : ' + id);\n    let postData = request.body;\n    const NewNotification = new NotificationModel({\n      id: new AutoincrementId(NotificationModel).counter(),\n      user_id,\n      message,\n      type,\n      description,\n    });\n\n    NewNotification.save()\n      .then(data => {\n        const notification = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: notification.id,\n              message: 'Created sos record',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getNotifications(request, response) {\n    NotificationModel.find({ user_id: Number(request.params.id) })\n\n      .then(data => {\n        const notifications = data;\n        if (notifications.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no notifications record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              notifications,\n              type: 'notifications',\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n}\n"],"file":"mech_service.js"}