{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/services/sos_service_drivers.js"],"names":["MongooseDatabase","getInstance","Database","RedFlagService","request","response","body","user_id","location","filename","address","status","media","email","phone_number","plate_number","username","console","log","postData","NewRedflag","DriversRedFlagModel","id","AutoincrementId","counter","save","then","data","redFlag","json","message","err","error","ErrorHandler","errors","validationError","find","length","Number","params","redflags","JSON","stringify","removeOne","deletedRedFlag","_id","redflagId","user","updateOne","editRedFlags","comment","editCommentRedFlag","send","redId","redflagStatus","redFlags","type","description","NewNotification","NotificationModel","notification","notifications"],"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","sourcesContent":["//import mongoose from 'mongoose';\r\nimport Database from '../models/db';\r\n\r\n\r\nimport { ResponseHandler } from '../helpers/response_handler';\r\nimport { ErrorHandler } from '../helpers/error_handler';\r\nimport DriversRedFlagModel from '../models/DriversSOS.model.js';\r\nimport DriversNotificationsModel from '../models/DriversNotifications.model';\r\nimport AutoincrementId from '../helpers/autoincrement_mongo.js';\r\n// Database.establishConnection();\r\nconst MongooseDatabase = Database.getInstance() || new Database();\r\nexport class RedFlagService {\r\n  static createRedFlag(request, response) {\r\n    const { user_id, location, filename, address, status, media,email,phone_number,plate_number,username} = request.body;\r\n    // let id = Number(user_id) || Number(request.body.user_id);\r\n    console.log('you user id : ' + user_id);\r\n    let postData = request.body;\r\n    const NewRedflag = new DriversRedFlagModel({ \r\n        id:  new AutoincrementId(DriversRedFlagModel).counter(),\r\n        user_id, location, address, status, email,phone_number,plate_number,username,media: [filename] || 'cant find it'\r\n      });\r\n\r\n    NewRedflag.save()\r\n      .then(data => {\r\n        const redFlag = data;\r\n        return response.status(201).json({\r\n          status: 201,\r\n          data: [\r\n            {\r\n              id: redFlag.id,\r\n              message: 'Created sos record',\r\n            },\r\n          ],\r\n        });\r\n      })\r\n      .catch(err =>\r\n        response.status(400).json({\r\n          status: 400,\r\n          error: ErrorHandler.errors().validationError,\r\n        }),\r\n      );\r\n  }\r\n\r\n  static allRedFlags(request, response) {\r\n    DriversRedFlagModel.find()\r\n      .then(data => {\r\n        let redFlag = data;\r\n        if (redFlag.length === 0) {\r\n          redFlag = [\r\n            // {\r\n            //   id: 1,\r\n            //     user_id:5, \r\n            //     location:'89898888,09007667', \r\n            //     address:'lekki', \r\n            //     status:'unresolved'\r\n              \r\n            // },\r\n          ];\r\n\r\n          return response.status(200).json({\r\n            status: 200,\r\n            data: [\r\n              {\r\n                redFlag,\r\n                message: 'All redflags was retrieved successfully',\r\n              },\r\n            ],\r\n          });\r\n        }\r\n        return response.status(200).json({\r\n          status: 200,\r\n          data: [\r\n            {\r\n              redFlag,\r\n              message: 'All redflags was retrieved successfully',\r\n            },\r\n          ],\r\n        });\r\n      })\r\n      .catch(err =>\r\n        response.status(400).json({\r\n          status: 400,\r\n          error: ErrorHandler.errors().validationError,\r\n        }),\r\n      );\r\n  }\r\n\r\n  static redFlagId(request, response) {\r\n    DriversRedFlagModel.find({id: Number(request.params.id)})\r\n      .then(data => {\r\n        const redFlag = data;\r\n        if (redFlag.length <= 0) {\r\n          return response.status(404).json({\r\n            status: 404,\r\n            error: 'The id of the given red-flag was not found',\r\n          });\r\n        }\r\n        return response.status(200).json({\r\n          status: 200,\r\n          data: [\r\n            {\r\n              redFlag,\r\n              message: 'Get a specific red-flag was successful',\r\n            },\r\n          ],\r\n        });\r\n      })\r\n      .catch(err =>\r\n        response.status(400).json({\r\n          status: 400,\r\n          error: ErrorHandler.errors().validationError,\r\n        }),\r\n      );\r\n  }\r\n\r\n  static deleteRedFlag(request, response) {\r\n    DriversRedFlagModel.find({id: Number(request.params.id)})\r\n      .then(data => {\r\n        const redflags = data;\r\n\r\n        if ( redflags.length <= 0) {\r\n          console.log(\r\n            JSON.stringify({\r\n              status: 404,\r\n              error: 'The red-flag with the given id does not exists',\r\n            }),\r\n          );\r\n          return response.status(404).json({\r\n            status: 404,\r\n            error: 'The red-flag with the given id does not exists',\r\n          });\r\n        }\r\n        DriversRedFlagModel.removeOne({id: Number(request.params.id)})\r\n          .then(data => {\r\n            const deletedRedFlag = data;\r\n            response.status(202).json({\r\n              status: 202,\r\n              data: [\r\n                {\r\n                  id: deletedRedFlag._id,\r\n                  message: 'red-flag record has been deleted',\r\n                },\r\n              ],\r\n            });\r\n          })\r\n          .catch(error =>\r\n            response.status(400).json({\r\n              status: 400,\r\n              error: ErrorHandler.errors().validationError,\r\n            }),\r\n          );\r\n      })\r\n      .catch(error =>\r\n        response.status(400).json({\r\n          status: 400,\r\n          error: ErrorHandler.errors().validationError,\r\n        }),\r\n      );\r\n  }\r\n\r\n  static editRedFlag(request, response) {\r\n    DriversRedFlagModel.find({id: Number(request.params.id)})\r\n      .then(redflagId => {\r\n        if (redflagId.length < 1) {\r\n          return response.status(404).json({\r\n            status: 404,\r\n            error: 'The location with the given red-flag id does not exists',\r\n          });\r\n        }\r\n        const { location } = request.body;\r\n        if ( Number(request.user.id) === Number(redflagId[0].user_id) )  {\r\n          DriversRedFlagModel.updateOne({id: Number(request.params.id)}, {\r\n             \r\n                location: location\r\n             \r\n           }).then(data => {\r\n              const editRedFlags = data;\r\n              return response.status(200).json({\r\n                status: 200,\r\n                data: [\r\n                  {\r\n                    id: editRedFlags._id,\r\n                    editRedFlags,\r\n                    message: 'Updated red-flag record’s location',\r\n                  },\r\n                ],\r\n              });\r\n            })\r\n            .catch(error =>\r\n              response.status(400).json({\r\n                status: 400,\r\n                error: errors.validationError,\r\n              }),\r\n            );\r\n        } else {\r\n          return response.status(403).json({\r\n            status: 403,\r\n            error: 'You must signup or login to access this route',\r\n          });\r\n        }\r\n      })\r\n      .catch(error =>\r\n        response.status(400).json({\r\n          status: 400,\r\n          error:ErrorHandler.errors().validationError,\r\n        }),\r\n      );\r\n  }\r\n\r\n  static editRedFlagComment(request, response) {\r\n    DriversRedFlagModel.find({id: request.params.id})\r\n      .then(redflagId => {\r\n        if (redflagId.length <=0) {\r\n          return response.status(404).json({\r\n            status: 404,\r\n            error: 'The comment with the given red-flag id does not exists',\r\n          });\r\n        }\r\n        const { comment } = request.body;\r\n        if ( Number(request.user.id) === Number(redflagId[0].user_id) )  {\r\n          DriversRedFlagModel.updateOne({id: Number(request.params.id)}, {\r\n            \r\n                comment: comment\r\n             \r\n           }).then(data => {\r\n              const editCommentRedFlag = data;\r\n              return response.status(200).json({\r\n                status: 200,\r\n                data: [\r\n                  {\r\n                    id: editCommentRedFlag._id,\r\n                    editCommentRedFlag,\r\n                    message: 'Updated red-flag record’s comment',\r\n                  },\r\n                ],\r\n              });\r\n            })\r\n            .catch(error =>\r\n              response.status(400).json({\r\n                status: 400,\r\n                error: ErrorHandler.errors().validationError,\r\n              }),\r\n            );\r\n        } else {\r\n          return response.status(401).json({\r\n            status: 401,\r\n            error: 'You must signup or login to access this route',\r\n          });\r\n        }\r\n      })\r\n      .catch(error =>\r\n        response.status(400).send({\r\n          status: 400,\r\n          error: ErrorHandler.errors().validationError,\r\n        }),\r\n      );\r\n  }\r\n\r\n  static updateRedFlagStatus(request, response) {\r\n   DriversRedFlagModel.find({id: Number(request.params.id)})\r\n  .then(redId => {\r\n        if (redId.length <= 0) {\r\n          return response.status(404).json({\r\n                      status: 404,\r\n                      error: 'The status with the given red-flag id does not exists',\r\n                    });\r\n        }\r\n         const { status } = request.body;\r\n     if ( Number(request.user.id) )  {\r\n\r\n\r\n            DriversRedFlagModel.updateOne({id: Number(request.params.id) }, {\r\n                    \r\n                      status: status\r\n                  \r\n                }).then(data => {\r\n                  \r\n                const redflagStatus = data;\r\n                \r\n                return response.status(200).json({\r\n                  status: 200,\r\n                  data: [\r\n                    {\r\n                      id: redflagStatus._id,\r\n                      message: 'Updated red-flag record’s status',\r\n                    },\r\n                  ],\r\n                });\r\n              })\r\n              .catch(err =>\r\n                response.status(400).json({\r\n                  status: 400,\r\n                  error: ErrorHandler.errors().validationError,\r\n                }),\r\n              );\r\n\r\n    } else {\r\n          return response.status(401).json({\r\n            status: 401,\r\n            error: 'You must signup or login to access this route',\r\n          });\r\n        }\r\n      })\r\n      .catch(error =>\r\n        response.status(400).send({\r\n          status: 400,\r\n          error:ErrorHandler.errors().validationError,\r\n        }),\r\n      );\r\n  }\r\n\r\n  static usersRedflags(request, response) {\r\n    // UserModel.find({user_id: request.params.id})\r\n    DriversRedFlagModel.find({ user_id: Number(request.params.id) })\r\n    \r\n      .then(data => {\r\n        const redFlags = data;\r\n        if (redFlags.length === 0) {\r\n          return response.status(404).json({\r\n            status: 404,\r\n            error: 'User has no red-flag record',\r\n          });\r\n        }\r\n        return response.status(200).json({\r\n          status: 200,\r\n          data: [\r\n            {\r\n              redFlags,\r\n              type: 'Red-flag',\r\n              message: 'Successful',\r\n            },\r\n          ],\r\n        });\r\n      })\r\n      .catch(error =>\r\n        response.status(400).json({\r\n          status: 400,\r\n          error: ErrorHandler.errors().validationError,\r\n        }),\r\n      );\r\n  }\r\n\r\n\r\n  static sendNotifications(request,response){\r\n\r\n    const { user_id, message, type, description } = request.body;\r\n    let id = Number(user_id) || Number(request.body.user_id);\r\n    console.log('you user id : ' + id);\r\n    let postData = request.body;\r\n    const NewNotification = new NotificationModel({ \r\n        id:  new AutoincrementId(NotificationModel).counter(),\r\n        user_id, message, type, description\r\n      });\r\n\r\n    NewNotification.save()\r\n      .then(data => {\r\n        const notification = data;\r\n        return response.status(201).json({\r\n          status: 201,\r\n          data: [\r\n            {\r\n              id: notification.id,\r\n              message: 'Created sos record',\r\n            },\r\n          ],\r\n        });\r\n      })\r\n      .catch(err =>\r\n        response.status(400).json({\r\n          status: 400,\r\n          error: ErrorHandler.errors().validationError,\r\n        }),\r\n      );\r\n\r\n  }\r\n\r\n\r\n  static getNotifications(request,response){\r\n    NotificationModel.find({ user_id: Number(request.params.id) })\r\n    \r\n      .then(data => {\r\n        const notifications = data;\r\n        if (notifications.length === 0) {\r\n          return response.status(404).json({\r\n            status: 404,\r\n            error: 'User has no notifications record',\r\n          });\r\n        }\r\n        return response.status(200).json({\r\n          status: 200,\r\n          data: [\r\n            {\r\n              notifications,\r\n              type: 'notifications',\r\n              message: 'Successful',\r\n            },\r\n          ],\r\n        });\r\n      })\r\n      .catch(error =>\r\n        response.status(400).json({\r\n          status: 400,\r\n          error: ErrorHandler.errors().validationError,\r\n        }),\r\n      );\r\n  }\r\n\r\n}\r\n"],"file":"sos_service_drivers.js"}