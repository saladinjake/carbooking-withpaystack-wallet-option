{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/services/mongooseAutoIncrement.js"],"names":["mongoose","require","extend","counterSchema","IdentityCounter","exports","initialize","connection","model","ex","name","Schema","type","String","field","count","Number","plugin","schema","options","Error","settings","startAt","incrementBy","unique","fields","ready","add","findOne","err","counter","save","nextCount","callback","method","resetCount","findOneAndUpdate","pre","next","doc","isNew","$lt","$inc","updatedIdentityCounter","setTimeout"],"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","sourcesContent":["// Module Scope\nvar mongoose = require('mongoose'),\nextend = require('extend'),\ncounterSchema,\nIdentityCounter;\n\n// Initialize plugin by creating counter collection in database.\nexports.initialize = function (connection) {\n  try {\n    IdentityCounter = connection.model('IdentityCounter');\n  } catch (ex) {\n    if (ex.name === 'MissingSchemaError') {\n      // Create new counter schema.\n      counterSchema = new mongoose.Schema({\n        model: { type: String, require: true },\n        field: { type: String, require: true },\n        count: { type: Number, default: 0 }\n      });\n\n      // Create a unique index using the \"field\" and \"model\" fields.\n      //counterSchema.index({ field: 1, model: 1 }, { unique: true, required: true, index: -1 });\n\n      // Create model using new schema.\n      IdentityCounter = connection.model('IdentityCounter', counterSchema);\n    }\n    else\n      throw ex;\n  }\n};\n\n// The function to use when invoking the plugin on a custom schema.\nexports.plugin = function (schema, options) {\n\n  // If we don't have reference to the counterSchema or the IdentityCounter model then the plugin was most likely not\n  // initialized properly so throw an error.\n  if (!counterSchema || !IdentityCounter) throw new Error(\"mongoose-auto-increment has not been initialized\");\n\n  // Default settings and plugin scope variables.\n  var settings = {\n    model: null, // The model to configure the plugin for.\n    field: '_id', // The field the plugin should track.\n    startAt: 0, // The number the count should start at.\n    incrementBy: 1, // The number by which to increment the count each time.\n    unique: true // Should we create a unique index for the field\n  },\n  fields = {}, // A hash of fields to add properties to in Mongoose.\n  ready = false; // True if the counter collection has been updated and the document is ready to be saved.\n\n  switch (typeof(options)) {\n    // If string, the user chose to pass in just the model name.\n    case 'string':\n      settings.model = options;\n    break;\n    // If object, the user passed in a hash of options.\n    case 'object':\n      extend(settings, options);\n    break;\n  }\n\n  if (settings.model == null)\n    throw new Error(\"model must be set\");\n\n  // Add properties for field in schema.\n  fields[settings.field] = {\n    type: Number,\n    require: true\n  };\n  if (settings.field !== '_id')\n    fields[settings.field].unique = settings.unique\n  schema.add(fields);\n\n  // Find the counter for this model and the relevant field.\n  IdentityCounter.findOne(\n    { model: settings.model, field: settings.field },\n    function (err, counter) {\n      if (!counter) {\n        // If no counter exists then create one and save it.\n        counter = new IdentityCounter({ model: settings.model, field: settings.field, count: settings.startAt - settings.incrementBy });\n        counter.save(function () {\n          ready = true;\n        });\n      }\n      else {\n        ready = true;\n      }\n    }\n  );\n\n  // Declare a function to get the next counter for the model/schema.\n  var nextCount = function (callback) {\n    IdentityCounter.findOne({\n      model: settings.model,\n      field: settings.field\n    }, function (err, counter) {\n      if (err) return callback(err);\n      callback(null, counter === null ? settings.startAt : counter.count + settings.incrementBy);\n    });\n  };\n  // Add nextCount as both a method on documents and a static on the schema for convenience.\n  schema.method('nextCount', nextCount);\n  schema.static('nextCount', nextCount);\n\n  // Declare a function to reset counter at the start value - increment value.\n  var resetCount = function (callback) {\n    IdentityCounter.findOneAndUpdate(\n      { model: settings.model, field: settings.field },\n      { count: settings.startAt - settings.incrementBy },\n      { new: true }, // new: true specifies that the callback should get the updated counter.\n      function (err) {\n        if (err) return callback(err);\n        callback(null, settings.startAt);\n      }\n    );\n  };\n  // Add resetCount as both a method on documents and a static on the schema for convenience.\n  schema.method('resetCount', resetCount);\n  schema.static('resetCount', resetCount);\n\n  // Every time documents in this schema are saved, run this logic.\n  schema.pre('save', function (next) {\n    // Get reference to the document being saved.\n    var doc = this;\n\n    // Only do this if it is a new document (see http://mongoosejs.com/docs/api.html#document_Document-isNew)\n    if (doc.isNew) {\n      // Declare self-invoking save function.\n      (function save() {\n        // If ready, run increment logic.\n        // Note: ready is true when an existing counter collection is found or after it is created for the\n        // first time.\n        if (ready) {\n          // check that a number has already been provided, and update the counter to that number if it is\n          // greater than the current count\n          if (typeof doc[settings.field] === 'number') {\n            IdentityCounter.findOneAndUpdate(\n              // IdentityCounter documents are identified by the model and field that the plugin was invoked for.\n              // Check also that count is less than field value.\n              { model: settings.model, field: settings.field, count: { $lt: doc[settings.field] } },\n              // Change the count of the value found to the new field value.\n              { count: doc[settings.field] },\n              function (err) {\n                if (err) return next(err);\n                // Continue with default document save functionality.\n                next();\n              }\n            );\n          } else {\n            // Find the counter collection entry for this model and field and update it.\n            IdentityCounter.findOneAndUpdate(\n              // IdentityCounter documents are identified by the model and field that the plugin was invoked for.\n              { model: settings.model, field: settings.field },\n              // Increment the count by `incrementBy`.\n              { $inc: { count: settings.incrementBy } },\n              // new:true specifies that the callback should get the counter AFTER it is updated (incremented).\n              { new: true },\n              // Receive the updated counter.\n              function (err, updatedIdentityCounter) {\n                if (err) return next(err);\n                // If there are no errors then go ahead and set the document's field to the current count.\n                doc[settings.field] = updatedIdentityCounter.count;\n                // Continue with default document save functionality.\n                next();\n              }\n            );\n          }\n        }\n        // If not ready then set a 5 millisecond timer and try to save again. It will keep doing this until\n        // the counter collection is ready.\n        else\n          setTimeout(save, 5);\n      })();\n    }\n    // If the document does not have the field we're interested in or that field isn't a number AND the user did\n    // not specify that we should increment on updates, then just continue the save without any increment logic.\n    else\n      next();\n  });\n};"],"file":"mongooseAutoIncrement.js"}