{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/services/feedback_service.js"],"names":["MongooseDatabase","getInstance","Database","InterventonService","request","res","body","comment","reportType","images","subject","location","status","user_id","category","ticket_id","username","email","phone_number","response","console","log","id","Number","postData","NewIntervention","InterventionsModel","AutoincrementId","counter","save","then","data","intervention","json","message","err","error","ErrorHandler","errors","validationError","find","length","videos","params","interventions","JSON","stringify","remove","deletedIntervention","interventionId","user","updateOne","editInterventionLocation","_id","editComment","send","interventionStatus","searchTerm","query","limit","rests","type"],"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","sourcesContent":["//import mongoose from 'mongoose';\nimport Database from '../models/db';\n\n\nimport { ResponseHandler } from '../helpers/response_handler';\nimport { ErrorHandler } from '../helpers/error_handler';\nimport  Config from '../config/mongo_config';\nimport  InterventionsModel from '../models/Feedback.model';\nimport  SingleInterventionActiveRecord from '../models/ActiveRecords/ActiveRecordSingleIntervention'\n// Database.establishConnection();\nimport AutoincrementId from '../helpers/autoincrement_mongo.js';\n\nconst MongooseDatabase = Database.getInstance() || new Database();\nexport class InterventonService {\n  static createIntervention(request, res) {\n    const {\n\n      comment,\n      reportType,\n      images,\n      subject,\n      location,\n      status,\n      user_id,\n      category,\n      ticket_id,\n      username,\n      email,\n      phone_number,\n      response,\n\n\n        } = request.body;\n    console.log('images : ' + images);\n    //console.log('videos: ' + videos);\n    let id = Number(user_id) || Number(request.body.user_id);\n    console.log('you user id : ' + id);\n    let postData = request.body;\n   \n    const NewIntervention = new InterventionsModel({ \n        id:  new AutoincrementId(InterventionsModel).counter(),\n        user_id: request.body.user_id, \n        location : request.body.location,\n        images: request.body.images,\n        subject: request.body.subject,\n        comment: request.body.comment,\n        status: request.body.status,\n        category:       reportType,\n        email: request.body.email,\n        response: request.body.response,\n        phone_number:request.body.phone_number,\n        ticket_id: request.body.ticket_id,\n        username:request.body.username\n      });\n\n    NewIntervention.save()\n      .then(data => {\n        const intervention = data;\n        return res.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: intervention.id,\n              message: 'Created intervention record',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        res.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static allInterventions(request, response) {\n    //simple use case no promises\n  //   InterventionsModel.getAllInterventions((err, data) => {\n  //   if(err){\n  //     throw err;\n  //   }\n  //   res.json(data);\n  // });\n    InterventionsModel.find()\n      .then(data => {\n        console.log(\"all\" + data)\n        let intervention = data;\n        if (intervention.length === 0) {\n          intervention = [\n            {\n              id: 1,\n              user_id: 1,\n              location: '6.524379, 3.379206',\n              images: [\n                'http://localhost/UI/images/a.jpg',\n                'http://localhost/UI/images/a.jpg',\n              ],\n              videos: [\n                'http://localhost/UI/videos/a.mp4',\n                'http://localhost/UI/videos/b.mp4',\n              ],\n              comment: 'Story for the Gods',\n              status: 'draft',\n            },\n          ];\n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                // intervention,\n                message: 'No records yet',\n              },\n            ],\n          });\n        }\n        //console.log( intervention)\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              intervention,\n              message: 'All interventions was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static interventionId(request, response) {\n    //simple use case without promises\n  //   InterventionsModel.getInterventionById(req.params.id, (err, data) => {\n  //   if(err){\n  //     throw err;\n  //   }\n  //   res.json(data);\n  // });\n    InterventionsModel.find({id: Number(request.params.id)})\n      .then(data => {\n        console.log(\"specific:\" + data)\n        \n       \n        const intervention = data; //related\n        if (intervention.length <= 0) {\n                return response.status(404).json({\n                  status: 404,\n                  error: 'The intervention with the given id does not exists',\n                });\n        }\n        return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    intervention,\n                    message: 'Get a specific intervention was successful',\n                  },\n                ],\n          });\n      })\n      .catch(err =>{\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              });\n            });\n          \n        \n        \n  }\n\n  static deleteIntervention(request, response) {\n\n    //simple use case without promises\n    //var id = req.params.id;\n  //   InterventionsModel.removeIntervention(id, (err, data) => {\n  //   if(err){\n  //     throw err;\n  //   }\n  //   res.json(data);\n  // });\n    InterventionsModel.find({id: Number(request.params.id)})\n      .then(data => {\n        const interventions = data;\n\n        if (interventions.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The intervention with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The intervention with the given id does not exists',\n          });\n        }\n        InterventionsModel.remove({id: Number(request.params.id)})\n          .then(data => {\n            const deletedIntervention = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedIntervention.id,\n                  message: 'intervention record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>{\n            console.log(error)\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error =>{\n        console.log(error)\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static interventionLocation(request, response) {\n    //simple use case with out promises\n    //var id = req.params.id;\n    //var intervention = req.body;\n  //   InterventionsModel.updateLocation(id, intervention, {}, (err, intervention) => {\n  //   if(err){\n  //     throw err;\n  //   }\n  //   res.json(intervention);\n  // });\n    InterventionsModel.find({id: Number(request.params.id)})\n      .then(interventionId => {\n        if (interventionId.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The intervention with the given id does not exists',\n          });\n        }\n        const { location } = request.body;\n        console.log(JSON.stringify(request.user)+ \" this user has record id\" + interventionId[0].user_id)\n        \n        if ( Number(request.user.id) === Number(interventionId[0].user_id) )  {\n          InterventionsModel.updateOne({id: Number(request.params.id)}, {\n                location: location\n             }).then(data => {\n              const editInterventionLocation = data;\n              return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    _id: editInterventionLocation._id,\n                    id:editInterventionLocation.id,\n                    editInterventionLocation,\n                    message: 'Updated intervention record’s location',\n                  },\n                ],\n              });\n            })\n            .catch(error =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n        } else {\n          return response.status(403).json({\n            status: 403,\n            error: 'You must signup or login to access this route',\n          });\n        }\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static editInterventionComment(request, response) {\n    //simple use case with out promises\n    //var id = req.params.id;\n    //var intervention = req.body;\n  //   InterventionsModel.updateComment(id, intervention, {}, (err, book) => {\n  //   if(err){\n  //     throw err;\n  //   }\n  //   res.json(book);\n  // });\n    InterventionsModel.find({id: Number(request.params.id)})\n      .then(interventionId => {\n        if (interventionId.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The comment with the given intervention id does not exists',\n          });\n        }\n        const { comment } = request.body;\n        if ( Number(request.user.id) === Number(interventionId[0].user_id) )  {\n          InterventionsModel.updateOne({id: Number(request.params.id)}, {\n             \n                comment: comment\n             \n           }).then(data => {\n              const editComment = data;\n              return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    _id: editComment._id,\n                    id: editComment.id,\n                    editComment,\n                    message: 'Updated intervention record’s comment',\n                  },\n                ],\n              });\n            })\n            .catch(error =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n        } else {\n          return response.status(401).json({\n            status: 401,\n            error: 'You must signup or login to access this route',\n          });\n        }\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static updateInterventionStatus(request, response) {\n    //simple use case with out promises\n    //var id = req.params.id;\n    //var intervention = req.body;\n  //   InterventionsModel.updateStatus(id, intervention, {}, (err, book) => {\n  //   if(err){\n  //     throw err;\n  //   }\n  //   res.json(book);\n  // });\n\n  InterventionsModel.find({id: Number(request.params.id)})\n  .then(interventionId => {\n        if (interventionId.length <= 0) {\n          return response.status(404).json({\n                      status: 404,\n                      error: 'The status with the given intervention id was not found',\n                    });\n        }\n         const { status } = request.body;\n     if ( Number(request.user.id) )  {\n\n             \n              InterventionsModel.updateOne({id: Number(request.params.id) }, {\n                    \n                      status: status\n                  \n                }).then(data => {\n                  const interventionStatus = data;\n                  \n                  return response.status(200).json({\n                    status: 200,\n                    data: [\n                      {\n                        _id: interventionStatus._id,\n                        id: interventionStatus.id,\n                        message: 'Updated intervention record’s status',\n                      },\n                    ],\n                  });\n                })\n                .catch(err =>\n                  response.status(400).json({\n                    status: 400,\n                    error: ErrorHandler.errors().validationError,\n                  }),\n                );\n      } else {\n          return response.status(401).json({\n            status: 401,\n            error: 'You must signup or login to access this route',\n          });\n        }\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n\n  static activateSearch(request, response){\n    let searchTerm = request.body.searchTerm;\n    let query = {\n        comment: { \n          \"$regex\": searchTerm,\n          \"$options\": \"i\" \n        }\n    };\n\n    InterventionsModel.find(query).limit(6).then(rests => {\n        const interventions = data;\n        if (interventions.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'was not found',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              id: interventionStatus._id,\n              data: interventions,\n              message: 'success in search',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n\n  }\n\n  static usersInterventions(request, response) {\n\n     InterventionsModel.find({ user_id: Number(request.params.id) })\n\n    // UserModel.find({user_id: request.params.id})\n      .then(data => {\n        const intervention = data;\n        if (intervention.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no interventions record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              intervention,\n              type: 'Intervention',\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n}\n"],"file":"feedback_service.js"}