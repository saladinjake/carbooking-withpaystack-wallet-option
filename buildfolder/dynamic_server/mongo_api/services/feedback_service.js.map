{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/services/feedback_service.js"],"names":["MongooseDatabase","getInstance","Database","InterventonService","request","res","body","comment","reportType","images","subject","location","status","user_id","category","ticket_id","username","email","phone_number","response","console","log","id","Number","postData","NewIntervention","InterventionsModel","AutoincrementId","counter","save","then","data","intervention","json","message","err","error","ErrorHandler","errors","validationError","find","length","videos","params","interventions","JSON","stringify","remove","deletedIntervention","interventionId","user","updateOne","editInterventionLocation","_id","editComment","send","interventionStatus","searchTerm","query","$regex","$options","limit","rests","type"],"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","sourcesContent":["//import mongoose from 'mongoose';\nimport Database from '../models/db';\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\nimport { ResponseHandler } from '../helpers/response_handler';\nimport { ErrorHandler } from '../helpers/error_handler';\nimport Config from '../config/mongo_config';\nimport InterventionsModel from '../models/Feedback.model';\nimport SingleInterventionActiveRecord from '../models/ActiveRecords/ActiveRecordSingleIntervention';\n// Database.establishConnection();\nimport AutoincrementId from '../helpers/autoincrement_mongo.js';\n\nconst MongooseDatabase = Database.getInstance() || new Database();\nexport class InterventonService {\n  static createIntervention(request, res) {\n    const {\n      comment,\n      reportType,\n      images,\n      subject,\n      location,\n      status,\n      user_id,\n      category,\n      ticket_id,\n      username,\n      email,\n      phone_number,\n      response,\n    } = request.body;\n    console.log('images : ' + images);\n    //console.log('videos: ' + videos);\n    let id = Number(user_id) || Number(request.body.user_id);\n    console.log('you user id : ' + id);\n    let postData = request.body;\n\n    const NewIntervention = new InterventionsModel({\n      id: new AutoincrementId(InterventionsModel).counter(),\n      user_id: request.body.user_id,\n      location: request.body.location,\n      images: request.body.images,\n      subject: request.body.subject,\n      comment: request.body.comment,\n      status: request.body.status,\n      category: reportType,\n      email: request.body.email,\n      response: request.body.response,\n      phone_number: request.body.phone_number,\n      ticket_id: request.body.ticket_id,\n      username: request.body.username,\n    });\n\n    NewIntervention.save()\n      .then(data => {\n        const intervention = data;\n        return res.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: intervention.id,\n              message: 'Created intervention record',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        res.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static allInterventions(request, response) {\n    //simple use case no promises\n    //   InterventionsModel.getAllInterventions((err, data) => {\n    //   if(err){\n    //     throw err;\n    //   }\n    //   res.json(data);\n    // });\n    InterventionsModel.find()\n      .then(data => {\n        console.log('all' + data);\n        let intervention = data;\n        if (intervention.length === 0) {\n          intervention = [\n            {\n              id: 1,\n              user_id: 1,\n              location: '6.524379, 3.379206',\n              images: ['http://localhost/UI/images/a.jpg', 'http://localhost/UI/images/a.jpg'],\n              videos: ['http://localhost/UI/videos/a.mp4', 'http://localhost/UI/videos/b.mp4'],\n              comment: 'Story for the Gods',\n              status: 'draft',\n            },\n          ];\n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                // intervention,\n                message: 'No records yet',\n              },\n            ],\n          });\n        }\n        //console.log( intervention)\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              intervention,\n              message: 'All interventions was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static interventionId(request, response) {\n    //simple use case without promises\n    //   InterventionsModel.getInterventionById(req.params.id, (err, data) => {\n    //   if(err){\n    //     throw err;\n    //   }\n    //   res.json(data);\n    // });\n    InterventionsModel.find({ id: Number(request.params.id) })\n      .then(data => {\n        console.log('specific:' + data);\n\n        const intervention = data; //related\n        if (intervention.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The intervention with the given id does not exists',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              intervention,\n              message: 'Get a specific intervention was successful',\n            },\n          ],\n        });\n      })\n      .catch(err => {\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static deleteIntervention(request, response) {\n    //simple use case without promises\n    //var id = req.params.id;\n    //   InterventionsModel.removeIntervention(id, (err, data) => {\n    //   if(err){\n    //     throw err;\n    //   }\n    //   res.json(data);\n    // });\n    InterventionsModel.find({ id: Number(request.params.id) })\n      .then(data => {\n        const interventions = data;\n\n        if (interventions.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The intervention with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The intervention with the given id does not exists',\n          });\n        }\n        InterventionsModel.remove({ id: Number(request.params.id) })\n          .then(data => {\n            const deletedIntervention = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedIntervention.id,\n                  message: 'intervention record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error => {\n            console.log(error);\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            });\n          });\n      })\n      .catch(error => {\n        console.log(error);\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static interventionLocation(request, response) {\n    //simple use case with out promises\n    //var id = req.params.id;\n    //var intervention = req.body;\n    //   InterventionsModel.updateLocation(id, intervention, {}, (err, intervention) => {\n    //   if(err){\n    //     throw err;\n    //   }\n    //   res.json(intervention);\n    // });\n    InterventionsModel.find({ id: Number(request.params.id) })\n      .then(interventionId => {\n        if (interventionId.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The intervention with the given id does not exists',\n          });\n        }\n        const { location } = request.body;\n        console.log(\n          JSON.stringify(request.user) + ' this user has record id' + interventionId[0].user_id,\n        );\n\n        if (Number(request.user.id) === Number(interventionId[0].user_id)) {\n          InterventionsModel.updateOne(\n            { id: Number(request.params.id) },\n            {\n              location: location,\n            },\n          )\n            .then(data => {\n              const editInterventionLocation = data;\n              return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    _id: editInterventionLocation._id,\n                    id: editInterventionLocation.id,\n                    editInterventionLocation,\n                    message: 'Updated intervention record’s location',\n                  },\n                ],\n              });\n            })\n            .catch(error =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n        } else {\n          return response.status(403).json({\n            status: 403,\n            error: 'You must signup or login to access this route',\n          });\n        }\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static editInterventionComment(request, response) {\n    //simple use case with out promises\n    //var id = req.params.id;\n    //var intervention = req.body;\n    //   InterventionsModel.updateComment(id, intervention, {}, (err, book) => {\n    //   if(err){\n    //     throw err;\n    //   }\n    //   res.json(book);\n    // });\n    InterventionsModel.find({ id: Number(request.params.id) })\n      .then(interventionId => {\n        if (interventionId.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The comment with the given intervention id does not exists',\n          });\n        }\n        const { comment } = request.body;\n        if (Number(request.user.id) === Number(interventionId[0].user_id)) {\n          InterventionsModel.updateOne(\n            { id: Number(request.params.id) },\n            {\n              comment: comment,\n            },\n          )\n            .then(data => {\n              const editComment = data;\n              return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    _id: editComment._id,\n                    id: editComment.id,\n                    editComment,\n                    message: 'Updated intervention record’s comment',\n                  },\n                ],\n              });\n            })\n            .catch(error =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n        } else {\n          return response.status(401).json({\n            status: 401,\n            error: 'You must signup or login to access this route',\n          });\n        }\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static updateInterventionStatus(request, response) {\n    //simple use case with out promises\n    //var id = req.params.id;\n    //var intervention = req.body;\n    //   InterventionsModel.updateStatus(id, intervention, {}, (err, book) => {\n    //   if(err){\n    //     throw err;\n    //   }\n    //   res.json(book);\n    // });\n\n    InterventionsModel.find({ id: Number(request.params.id) })\n      .then(interventionId => {\n        if (interventionId.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The status with the given intervention id was not found',\n          });\n        }\n        const { status } = request.body;\n        if (Number(request.user.id)) {\n          InterventionsModel.updateOne(\n            { id: Number(request.params.id) },\n            {\n              status: status,\n            },\n          )\n            .then(data => {\n              const interventionStatus = data;\n\n              return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    _id: interventionStatus._id,\n                    id: interventionStatus.id,\n                    message: 'Updated intervention record’s status',\n                  },\n                ],\n              });\n            })\n            .catch(err =>\n              response.status(400).json({\n                status: 400,\n                error: ErrorHandler.errors().validationError,\n              }),\n            );\n        } else {\n          return response.status(401).json({\n            status: 401,\n            error: 'You must signup or login to access this route',\n          });\n        }\n      })\n      .catch(error =>\n        response.status(400).send({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static activateSearch(request, response) {\n    let searchTerm = request.body.searchTerm;\n    let query = {\n      comment: {\n        $regex: searchTerm,\n        $options: 'i',\n      },\n    };\n\n    InterventionsModel.find(query)\n      .limit(6)\n      .then(rests => {\n        const interventions = data;\n        if (interventions.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'was not found',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              id: interventionStatus._id,\n              data: interventions,\n              message: 'success in search',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static usersInterventions(request, response) {\n    InterventionsModel.find({ user_id: Number(request.params.id) })\n\n      // UserModel.find({user_id: request.params.id})\n      .then(data => {\n        const intervention = data;\n        if (intervention.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no interventions record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              intervention,\n              type: 'Intervention',\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n}\n"],"file":"feedback_service.js"}