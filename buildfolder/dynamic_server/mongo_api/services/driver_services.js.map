{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/services/driver_services.js"],"names":["dotenv","config","csv","require","uuidv4","sendgridTransport","readHTMLFile","path","callback","fs","readFile","encoding","err","html","DriverService","request","response","body","firstname","lastname","username","email","phoneNumber","user_type","password","console","log","TokenGenerator","hashPassword","trim","Newuser","UserModel","id","AutoincrementId","counter","phone_number","is_admin","roles","save","then","data","user","result","emailT","crypto","randomBytes","toString","emailtoken","EmailTokenMakerForSignUp","_userId","email_confirm_token","message","smtpConfig","host","port","service","secure","auth","pass","transporter","nodemailer","createTransport","api_user","process","env","SENDGRID_USERNAME","api_key","SENDGRID_PASSWORD","mailOptions","from","to","subject","__dirname","template","handlebars","compile","replacements","link","headers","htmlToSend","sendMail","error","token","generateToken","status","json","ErrorHandler","errors","validationError","findOne","isVerified","checkIfPasswordMatch","_id","isAdmin","profile","avatar","notification_count","account_num","accountNumber","req","res","params","send","type","msg","sendFile","join","hashedStringToSend","Storage","setItem","ForgotModelToken","ForgotPasswordToken","email_to_reset","confirmPass","confirmPassword","getItem","find","Number","userInfo","length","passwordConfirm","certificate","test_certificate","success","CarsModel","assigned_driver_email","carsInfo","ItineraryModel","tripsInfo"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","sourcesContent":["import dotenv from 'dotenv';\ndotenv.config();\nimport Database from '../models/db';\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\nconst csv = require('csv-parser');\nconst uuidv4 = require('uuid/v4');\n\nimport { passport, express } from '../App';\nimport IndividualPlanModel from '../models/IndividualPlan.model';\nimport NotificationModel from '../models/Notification.model';\nimport FAQModel from '../models/FAQ.model';\nimport coperatePlanModel from '../models/CoperatePlan.model';\nimport { TokenGenerator } from '../helpers/token_generator';\nimport { ErrorHandler } from '../helpers/error_handler';\nimport { ResponseHandler } from '../helpers/response_handler';\n\nimport PartnersModel from '../models/Partners.model.js';\nimport UserModel from '../models/User.model.js';\nimport AutoincrementId from '../helpers/autoincrement_mongo.js';\nimport EmailTokenMakerForSignUp from '../models/Token.model.js';\nimport ForgotPasswordToken from '../models/ForgotPassword.model.js';\nimport CarsModel from '../models/Cars.model.js';\nimport SOSModel from '../models/SOS.model';\nimport InterventionsModel from '../models/Feedback.model';\nimport SendgridEmailSettingModel from '../models/SendgridEmailSettings.model';\nimport ItineraryModel from '../models/Itinerary.model';\nimport InspectionModel from '../models/Inspection.model';\nimport DriveTestModel from '../models/DriveTest.model';\nimport RolesAndPreviledgesModel from '../models/RolesAndPreviledges.model';\n\nimport nodemailer from 'nodemailer';\nimport crypto from 'crypto';\nimport path from 'path';\nconst sendgridTransport = require('nodemailer-sendgrid-transport');\n//import SocialAuthService from './social_auth_service';\nimport Storage from '../helpers/storage';\nimport multer from 'multer';\nimport Mixins from '../helpers/mixins';\nimport fs from 'fs';\nimport handlebars from 'handlebars';\n\n/*pAy stack*/\nimport request from 'request';\nimport _ from 'lodash';\n\n// import carInfo  from \"../migrations/cars_info\";\n\nvar readHTMLFile = function(path, callback) {\n  fs.readFile(path, { encoding: 'utf-8' }, function(err, html) {\n    if (err) {\n      throw err;\n      callback(err);\n    } else {\n      callback(null, html);\n    }\n  });\n};\n\nexport class DriverService {\n  static signup(request, response) {\n    // console.log(request.body)\n    let { firstname, lastname, username, email, phoneNumber, user_type, password } = request.body;\n\n    console.log(password);\n    password = TokenGenerator.hashPassword(password.trim());\n\n    const Newuser = new UserModel({\n      id: new AutoincrementId(UserModel).counter(),\n      firstname,\n      lastname,\n      user_type,\n      username,\n      email,\n      phone_number: phoneNumber,\n      password,\n      is_admin: false,\n      roles: 'Individual Driver',\n      //accountNumber: uuidv4()\n    });\n\n    Newuser.save()\n      .then(data => {\n        const user = data;\n        const result = {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n        };\n        let emailT = crypto.randomBytes(16).toString('hex');\n        // Create a verification token for this user\n        var emailtoken = new EmailTokenMakerForSignUp({\n          _userId: user.id,\n          email_confirm_token: emailT,\n        });\n\n        // Save the verification token\n        emailtoken.save(function(err) {\n          if (err) {\n            return console.log(err.message);\n          }\n          console.log(emailtoken.email_confirm_token, emailtoken._userId);\n          var smtpConfig = {\n            host: 'smtp.gmail.com',\n            port: 587,\n            service: 'gmail',\n            secure: true, // use SSL,\n            // you can try with TLS, but port is then 587\n            auth: {\n              user: 'juwavictor@gmail.com', //process.env.APPLICATION_GMAIL, // Your email id\n              pass: 'saladin123!@jhjhj#', // process.env.APPLICATION_GMAIL_PASSWORD\n            },\n          };\n\n          // Configure Nodemailer SendGrid Transporter\n          const transporter = nodemailer.createTransport(\n            sendgridTransport({\n              auth: {\n                api_user: process.env.SENDGRID_USERNAME, // SG username\n                api_key: process.env.SENDGRID_PASSWORD, // SG password\n              },\n            }),\n          );\n\n          var mailOptions = {\n            from: 'juwavictor@gmail.com', //process.env.APPLICATION_GMAIL,\n            to: user.email,\n            subject: 'Account Verification Token',\n            // text: 'Hello,\\n\\n' + 'Please verify your account by clicking the link: \\nhttp:\\/\\/' + request.headers.host + '\\/api/v1/auth/confirmation\\/' + emailtoken.email_confirm_token + '.\\n'\n            //html: ``,\n          };\n\n          readHTMLFile(__dirname + '/templates/drivers-signup-verification.html', function(\n            err,\n            html,\n          ) {\n            var template = handlebars.compile(html);\n            var replacements = {\n              username: user.firstname,\n              link:\n                'http://' +\n                request.headers.host +\n                '/api/v1/auth/drivers-confirmation/' +\n                emailtoken.email_confirm_token,\n            };\n            var htmlToSend = template(replacements);\n\n            mailOptions.html = htmlToSend;\n            transporter.sendMail(mailOptions, function(error, response) {\n              if (error) {\n                console.log(error + 'eroor here');\n                //callback(error);\n              }\n            });\n          });\n        });\n\n        const token = TokenGenerator.generateToken(result);\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              token,\n              user,\n            },\n          ],\n          message: 'User created successfully',\n        });\n      })\n      .catch(err => {\n        console.log(err + 'error here');\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        });\n      });\n  }\n\n  static login(request, response) {\n    const { email, password } = request.body;\n    UserModel.findOne({ email: email })\n      .then(data => {\n        const user = data;\n        console.log(user.isVerified);\n\n        if (!user) {\n          return response.status(422).json({\n            status: 422,\n            error: 'User does not exists',\n          });\n        }\n\n        if (!user.isVerified) {\n          return response.status(422).json({\n            status: 422,\n            error: `<h6>Email verification step is needed. please check your email for a verification link or click the link to resend you an email verification</h6> \n\n            <a href=\"http://localhost:12000/api/v1/auth/drivers-resend/${email}\">Resend </a>`,\n          });\n        }\n        // console.log(email);\n        // console.log(password);\n        if (!TokenGenerator.checkIfPasswordMatch(password, user.password)) {\n          return response.status(422).json({\n            status: 422,\n            error: 'Invalid login details. Email or password is wrong',\n          });\n        }\n\n        //request.session.user = user;\n\n        const result = {\n          id: user.id,\n          _id: user._id,\n          email: user.email,\n          isAdmin: user.is_admin,\n          isVerified: user.isVerified,\n          firstname: user.firstname,\n          username: user.username,\n          profile: user.avatar,\n          //plan: user.plan_name,\n          //balance: user.balance,\n          notification_count: user.notification_count,\n          user_type: user.user_type,\n          username: user.username,\n          phoneNumber: user.phone_number,\n          roles: user.roles,\n        };\n        const token = TokenGenerator.generateToken(result);\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              token,\n              user: {\n                id: user.id,\n                _id: user._id,\n                email: user.email,\n                isAdmin: user.is_admin,\n                isVerified: user.isVerified,\n                firstname: user.firstname,\n                username: user.username,\n                profile: user.avatar,\n                //plan_name: user.plan_name,\n                //balance: user.balance,\n                notification_count: user.notification_count,\n                user_type: user.user_type,\n                account_num: user.accountNumber,\n                username: user.username,\n                phoneNumber: user.phone_number,\n                roles: user.roles,\n              },\n            },\n          ],\n          message: 'Successfully signed in',\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static logout(request, response) {\n    //     router.post('/logout', function(req, res) {\n    //   logout.logoutUser(req, res, function(err, data) {\n    //     if (err) {\n    //       res.json({ 'error': data.error, 'message': data.message });\n    //     } else {\n    //       res.json({ 'success': data.success, 'message': data.message });\n    //     }\n    //   });\n    // });\n  }\n\n  static confirmationPost(req, res) {\n    // Find a matching token\n    EmailTokenMakerForSignUp.findOne({ email_confirm_token: req.params.id }, function(err, token) {\n      if (!token)\n        return res\n          .status(400)\n          .send({\n            type: 'not-verified',\n            msg: 'We were unable to find a valid token. Your token my have expired.',\n          });\n\n      // If we found a token, find a matching user email: req.body.email\n      UserModel.findOne({ id: token._userId }, function(err, user) {\n        if (!user) {\n          //return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\n          return res.sendFile(path.join(__dirname + '../../../../../UI/user/page-503.html'));\n        }\n        if (user.isVerified) {\n          //return res.status(201).send({ type: 'already-verified', msg: 'This user has already been verified.' });\n          return res.sendFile(path.join(__dirname + '/templates/drivers-already-verified.html'));\n        }\n\n        // Verify and save the user\n        user.isVerified = true;\n        user.save(function(err) {\n          if (err) {\n            return res.status(500).send({ msg: err.message });\n          }\n          //res.status(200).send(\"The account has been verified. Please wait...\");\n\n          return res.sendFile(path.join(__dirname + '/templates/drivers-proceed-to-login.html'));\n        });\n      });\n    });\n  }\n\n  /**\n   * POST /resend\n   */\n  static resendTokenPost(req, res) {\n    UserModel.findOne({ email: req.params.id }, function(err, user) {\n      if (!user)\n        return res.status(400).send({ msg: 'We were unable to find a user with that email.' });\n\n      if (user.isVerified)\n        return res.sendFile(path.join(__dirname + '/drivers-already-verified.html'));\n\n      // Create a verification token, save it, and send email\n      var token = new EmailTokenMakerForSignUp({\n        _userId: user.id,\n        email_confirm_token: crypto.randomBytes(16).toString('hex'),\n      });\n      // Save the token\n      token.save(function(err) {\n        if (err) {\n          return res.status(500).send({ msg: err.message });\n        }\n\n        // Send the email\n\n        const transporter = nodemailer.createTransport(\n          sendgridTransport({\n            auth: {\n              api_user: process.env.SENDGRID_USERNAME, // SG username\n              api_key: process.env.SENDGRID_PASSWORD, // SG password\n            },\n          }),\n        );\n\n        var mailOptions = {\n          from: 'juwavictor@gmail.com', //process.env.APPLICATION_GMAIL,\n          to: user.email,\n          subject: 'Account Verification Token',\n          // text: 'Hello,\\n\\n' + 'Please verify your account by clicking the link: \\nhttp:\\/\\/' + request.headers.host + '\\/api/v1/auth/confirmation\\/' + emailtoken.email_confirm_token + '.\\n'\n          //html: ``,\n        };\n\n        console.log(__dirname + '/templates/signup-verification.html');\n\n        readHTMLFile(__dirname + '/templates/drivers-signup-verification.html', function(\n          err,\n          html,\n        ) {\n          var template = handlebars.compile(html);\n          var replacements = {\n            username: user.firstname,\n            link:\n              'http://' +\n              req.headers.host +\n              '/api/v1/auth/drivers-confirmation/' +\n              token.email_confirm_token,\n          };\n          var htmlToSend = template(replacements);\n\n          mailOptions.html = htmlToSend;\n          transporter.sendMail(mailOptions, function(error, response) {\n            if (error) {\n              console.log(error + 'eroor here');\n              //callback(error);\n            }\n            // return res.status(200).send({ msg: \"sent email request\" });\n          });\n        });\n      });\n    });\n  }\n\n  static passwordForgot(req, res) {\n    let email = req.body.email;\n    UserModel.findOne({ email: email }, function(err, user) {\n      if (!user)\n        return res.status(400).send({ msg: 'We were unable to find a user with that email.' });\n      let hashedStringToSend = crypto.randomBytes(16).toString('hex');\n\n      Storage.setItem('hasher', hashedStringToSend);\n      // Create a verification token for this user\n      var ForgotModelToken = new ForgotPasswordToken({\n        _userId: user.id,\n        email_confirm_token: hashedStringToSend,\n        email_to_reset: email,\n      });\n\n      // Save the verification token\n      ForgotModelToken.save(function(err) {\n        if (err) {\n          return res.status(500).send({ msg: err.message });\n        }\n        // send email to the given users email for password reset confirmation\n        var smtpConfig = {\n          host: 'smtp.gmail.com',\n          port: 587,\n          service: 'gmail',\n          //secure: true, // use SSL,\n          // you can try with TLS, but port is then 587\n          auth: {\n            user: 'juwavictor@gmail.com', // Your email id\n            pass: 'saladin123!@#', // Your password\n          },\n        };\n\n        // Send the email\n        var transporter = nodemailer.createTransport({\n          service: 'SendGrid',\n          auth: {\n            user: process.env.SENDGRID_USERNAME,\n            pass: process.env.SENDGRID_PASSWORD,\n          },\n        });\n\n        var mailOptions = {\n          from: 'juwavictor@gmail.com', //process.env.APPLICATION_GMAIL,\n          to: user.email,\n          subject: 'Account Verification Token',\n        };\n\n        readHTMLFile(__dirname + '/templates/drivers-reset-password.html', function(err, html) {\n          var template = handlebars.compile(html);\n          var replacements = {\n            username: user.firstname,\n            link:\n              'http://' +\n              req.headers.host +\n              '/api/v1/auth/drivers-resetMyPassword/' +\n              hashedStringToSend,\n          };\n          var htmlToSend = template(replacements);\n\n          mailOptions.html = htmlToSend;\n          transporter.sendMail(mailOptions, function(error, response) {\n            if (err) {\n              return res.status(500).send({ msg: err.message });\n            }\n            return res\n              .status(200)\n              .send({ msg: 'successfully sent you a password reset link', status: 'ok' });\n          });\n        });\n      });\n    });\n  }\n\n  static confirmResetPassword(req, res) {\n    return res.sendFile(path.join(__dirname + '/drivers-pw-reset.html'));\n    //this.router.post('/auth/drivers-resetpassword', DriverController.changePasswordTrigger);\n  }\n\n  static changePasswordTrigger(req, res) {\n    let password = req.body.password;\n    let confirmPass = req.body.confirmPassword;\n    if (password != confirmPass) {\n      console.log('err here1');\n      return res.status(400).send({ msg: 'password do not match.' });\n    }\n    // console.log(req.params.id)\n\n    // Find a matching token\n    ForgotPasswordToken.findOne({ email_confirm_token: Storage.getItem('hasher') }, function(\n      err,\n      token,\n    ) {\n      console.log(token);\n      console.log(Storage.getItem('hasher'));\n      if (!token) {\n        console.log('error here 2');\n        console.log(err);\n        return res\n          .status(400)\n          .send({\n            type: 'not-verified',\n            msg: 'We were unable to find a valid token. Your token my have expired.',\n          });\n      }\n\n      // If we found a token, find a matching user email: req.body.email\n      UserModel.findOne({ email: token.email_to_reset }, function(err, user) {\n        if (!user)\n          return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\n        if (user.email != token.email_to_reset)\n          return res\n            .status(400)\n            .send({ type: 'No Reset Token', msg: 'This user reset token was not set.' });\n\n        // Verify and save the user\n        user.password = TokenGenerator.hashPassword(password.trim());\n        user.save(function(err) {\n          if (err) {\n            return res.status(500).send({ msg: err.message });\n          }\n          return res\n            .status(200)\n            .send({ msg: 'The account password has been reset. Please wait...', status: 'ok' });\n          //return  res.sendFile(path.join(__dirname + '/pw-reset-success.html'));\n        });\n      });\n    });\n  }\n\n  static showProfile(request, response) {\n    UserModel.find({ id: Number(request.params.id) })\n      .then(data => {\n        console.log('specific profile:' + data);\n\n        const userInfo = data; //related\n        if (userInfo.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The user with the given id does not exists',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              userInfo,\n              message: 'Get a specific user was successful',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static updateProfile(request, response) {\n    const {\n      firstname,\n      lastname,\n      username,\n      password,\n      passwordConfirm,\n      phoneNumber,\n      avatar,\n      certificate,\n      user_type,\n      email,\n    } = request.body;\n\n    if (password.length && passwordConfirm.length) {\n      if (password != passwordConfirm) {\n        console.log('err here1');\n        return res.status(400).send({ msg: 'password do not match.' });\n      }\n    }\n\n    UserModel.findOne({ id: request.params.id }, function(err, user) {\n      if (!user)\n        return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\n\n      if (password == 'unchanged' && passwordConfirm == 'unchanged') {\n        user.password = user.password;\n        console.log('old:' + user.password);\n      } else {\n        user.password = TokenGenerator.hashPassword(password.trim());\n        console.log('new pass: ' + user.password);\n      }\n\n      console.log(avatar);\n      // Verify and save the user\n      user.avatar = avatar || user.avatar;\n      user.username = username || user.username;\n      user.email = email || user.email;\n      (user.roles = user_type || user.roles),\n        //user.user_type= user_type|| user.user_type;\n        (user.firstname = firstname || user.firstname);\n      user.lastname = lastname || user.lastname;\n      user.phone_number = phoneNumber || user.phone_number;\n      user.test_certificate = certificate || user.test_certificate;\n      user.save(function(err, user) {\n        if (err) {\n          console.log(err);\n          return response.status(500).send({ msg: err.message });\n        }\n        console.log(user + 'hello');\n        //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\n        return response\n          .status(200)\n          .send({ success: 'ok', msg: 'Successfully updated user profile.' });\n      });\n    });\n  }\n\n  static getAssignedDriverToCars(request, response) {\n    CarsModel.find({ assigned_driver_email: request.params.id })\n      .then(data => {\n        console.log('specific car assigned:' + data);\n\n        const carsInfo = data; //related\n        // if (carsInfo.length <= 0) {\n        //         return response.status(404).json({\n        //           status: 404,\n        //           error: 'The user with the given id does not exists',\n        //         });\n        // }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              carsInfo,\n              message: 'Get a specific user was successful',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getDriversAssignedTrips(request, response) {\n    ItineraryModel.find({ assigned_driver_email: request.params.id })\n      .then(data => {\n        console.log('specific profile:' + data);\n\n        const tripsInfo = data; //related\n        // if (tripsInfo.length <= 0) {\n        //         return response.status(404).json({\n        //           status: 404,\n        //           error: 'The user with the given id does not exists',\n        //         });\n        // }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              tripsInfo,\n              message: 'Get a specific user was successful',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static completedTrips(request, response) {\n    ItineraryModel.find({ status: 'Completed' })\n      .then(data => {\n        const tripsInfo = data; //related\n        // if (tripsInfo.length <= 0) {\n        //         return response.status(404).json({\n        //           status: 404,\n        //           error: 'The user with the given id does not exists',\n        //         });\n        // }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              tripsInfo,\n              message: 'Get a specific user was successful',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n}\n"],"file":"driver_services.js"}