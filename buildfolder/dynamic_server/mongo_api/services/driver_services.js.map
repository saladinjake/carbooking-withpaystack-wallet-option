{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/services/driver_services.js"],"names":["dotenv","config","csv","require","uuidv4","sendgridTransport","readHTMLFile","path","callback","fs","readFile","encoding","err","html","DriverService","request","response","body","firstname","lastname","username","email","phoneNumber","user_type","password","console","log","TokenGenerator","hashPassword","trim","Newuser","UserModel","id","AutoincrementId","counter","phone_number","is_admin","roles","save","then","data","user","result","emailT","crypto","randomBytes","toString","emailtoken","EmailTokenMakerForSignUp","_userId","email_confirm_token","message","smtpConfig","host","port","service","secure","auth","pass","transporter","nodemailer","createTransport","api_user","process","env","SENDGRID_USERNAME","api_key","SENDGRID_PASSWORD","mailOptions","from","to","subject","__dirname","template","handlebars","compile","replacements","link","headers","htmlToSend","sendMail","error","token","generateToken","status","json","ErrorHandler","errors","validationError","findOne","isVerified","checkIfPasswordMatch","_id","isAdmin","profile","avatar","notification_count","account_num","accountNumber","req","res","params","send","type","msg","sendFile","join","hashedStringToSend","Storage","setItem","ForgotModelToken","ForgotPasswordToken","email_to_reset","confirmPass","confirmPassword","getItem","find","Number","userInfo","length","passwordConfirm","certificate","test_certificate","success","CarsModel","assigned_driver_email","carsInfo","ItineraryModel","tripsInfo"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","sourcesContent":["import dotenv from 'dotenv';\r\ndotenv.config();\r\nimport Database from '../models/db';\r\n\r\nconst csv = require('csv-parser');\r\nconst uuidv4 = require('uuid/v4');\r\n\r\n\r\nimport {passport ,express} from '../App'; \r\nimport IndividualPlanModel from '../models/IndividualPlan.model';\r\nimport NotificationModel from '../models/Notification.model'\r\nimport FAQModel from \"../models/FAQ.model\";\r\nimport coperatePlanModel from '../models/CoperatePlan.model';\r\nimport { TokenGenerator } from '../helpers/token_generator';\r\nimport { ErrorHandler } from '../helpers/error_handler';\r\nimport { ResponseHandler } from '../helpers/response_handler';\r\n\r\nimport PartnersModel from \"../models/Partners.model.js\";\r\nimport UserModel from \"../models/User.model.js\";\r\nimport AutoincrementId from '../helpers/autoincrement_mongo.js';\r\nimport EmailTokenMakerForSignUp from '../models/Token.model.js';\r\nimport ForgotPasswordToken from '../models/ForgotPassword.model.js';\r\nimport CarsModel from \"../models/Cars.model.js\";\r\nimport SOSModel from \"../models/SOS.model\";\r\nimport  InterventionsModel from '../models/Feedback.model';\r\nimport SendgridEmailSettingModel from \"../models/SendgridEmailSettings.model\";\r\nimport ItineraryModel from '../models/Itinerary.model'\r\nimport InspectionModel from \"../models/Inspection.model\";\r\nimport DriveTestModel from  \"../models/DriveTest.model\";\r\nimport RolesAndPreviledgesModel from '../models/RolesAndPreviledges.model'\r\n\r\nimport nodemailer from 'nodemailer';\r\nimport crypto from 'crypto';\r\nimport path from 'path';\r\nconst sendgridTransport = require('nodemailer-sendgrid-transport');\r\n//import SocialAuthService from './social_auth_service';\r\nimport Storage from '../helpers/storage';\r\nimport multer from 'multer';\r\nimport Mixins from '../helpers/mixins';\r\nimport fs from 'fs';\r\nimport handlebars from 'handlebars';\r\n\r\n/*pAy stack*/\r\nimport request from 'request';\r\nimport _ from 'lodash';\r\n\r\n// import carInfo  from \"../migrations/cars_info\";\r\n\r\n\r\n\r\n\r\nvar readHTMLFile = function(path, callback) {\r\n    fs.readFile(path, {encoding: 'utf-8'}, function (err, html) {\r\n        if (err) {\r\n            throw err;\r\n            callback(err);\r\n        }\r\n        else {\r\n            callback(null, html);\r\n        }\r\n    });\r\n};\r\n\r\nexport class DriverService{\r\n\tstatic signup(request, response) {\r\n    // console.log(request.body)\r\n    let { firstname, \r\n          lastname,  \r\n          username, \r\n          email, \r\n          phoneNumber,\r\n          user_type, \r\n          password \r\n    } = request.body;\r\n\r\n    console.log(password)\r\n    password = TokenGenerator.hashPassword(password.trim());\r\n\r\n    const Newuser = new UserModel({ \r\n      id: new AutoincrementId(UserModel).counter(), \r\n      firstname, \r\n      lastname, \r\n      user_type, \r\n      username, \r\n      email, \r\n      phone_number: phoneNumber, \r\n      password,\r\n      is_admin: false,\r\n      roles:'Individual Driver',\r\n      //accountNumber: uuidv4()\r\n       });\r\n\r\n\r\n     Newuser.save()\r\n      .then(data => {\r\n        const user = data;\r\n        const result = {\r\n          id: user.id,\r\n          email: user.email,\r\n          username: user.username,\r\n        };\r\n        let emailT = crypto.randomBytes(16).toString('hex');\r\n        // Create a verification token for this user\r\n        var emailtoken = new EmailTokenMakerForSignUp({ _userId: user.id, email_confirm_token: emailT });\r\n        \r\n\r\n        \r\n        // Save the verification token\r\n        emailtoken.save(function (err) {\r\n            if (err) { \r\n              return console.log(err.message );\r\n             }\r\n            console.log(emailtoken.email_confirm_token, emailtoken._userId)\r\n            var smtpConfig = {\r\n              host: 'smtp.gmail.com',\r\n              port: 587,\r\n              service:'gmail',\r\n              secure: true, // use SSL, \r\n                            // you can try with TLS, but port is then 587\r\n              auth: {\r\n                user:  'juwavictor@gmail.com',//process.env.APPLICATION_GMAIL, // Your email id\r\n                pass:  'saladin123!@jhjhj#'// process.env.APPLICATION_GMAIL_PASSWORD\r\n              }\r\n            };\r\n         \r\n\r\n            // Configure Nodemailer SendGrid Transporter\r\n            const transporter = nodemailer.createTransport(\r\n              sendgridTransport({\r\n                auth: {\r\n                  api_user: process.env.SENDGRID_USERNAME,    // SG username\r\n                  api_key: process.env.SENDGRID_PASSWORD, // SG password\r\n                },\r\n              })\r\n            );\r\n\r\n            \r\n            \r\n            var mailOptions = { \r\n              from:  'juwavictor@gmail.com', //process.env.APPLICATION_GMAIL, \r\n              to: user.email, \r\n              subject: 'Account Verification Token', \r\n              // text: 'Hello,\\n\\n' + 'Please verify your account by clicking the link: \\nhttp:\\/\\/' + request.headers.host + '\\/api/v1/auth/confirmation\\/' + emailtoken.email_confirm_token + '.\\n' \r\n              //html: ``,\r\n\r\n            };\r\n\r\n             \r\n    \r\n    \r\n  \r\n\r\n\r\n            readHTMLFile(__dirname + '/templates/drivers-signup-verification.html', function(err, html) {\r\n                var template = handlebars.compile(html);\r\n                var replacements = {\r\n                     username: user.firstname,\r\n                     link: 'http:\\/\\/' + request.headers.host + '\\/api/v1/auth/drivers-confirmation\\/' + emailtoken.email_confirm_token \r\n                };\r\n                var htmlToSend = template(replacements);\r\n                \r\n                 mailOptions.html = htmlToSend;\r\n                transporter.sendMail(mailOptions, function (error, response) {\r\n                    if (error) {\r\n                        console.log(error+\"eroor here\");\r\n                        //callback(error);\r\n                    }\r\n                });\r\n            });\r\n\r\n\r\n        });\r\n\r\n\r\n        const token = TokenGenerator.generateToken(result);\r\n        return response.status(201).json({\r\n          status: 201,\r\n          data: [\r\n            {\r\n              token,\r\n              user,\r\n            },\r\n          ],\r\n          message: 'User created successfully',\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.log(err+ 'error here')\r\n        response.status(400).json({\r\n          status: 400,\r\n          error: ErrorHandler.errors().validationError,\r\n        });\r\n      });\r\n  }\r\n\r\n  static login(request, response) {\r\n    const { email, password } = request.body;\r\n    UserModel.findOne({email: email})\r\n      .then(data => {\r\n        const user = data;\r\n        console.log(user.isVerified)\r\n\r\n\r\n        if (!user) {\r\n          return response.status(422).json({\r\n            status: 422,\r\n            error: 'User does not exists',\r\n          });\r\n\r\n          \r\n        }\r\n\r\n\r\n\r\n        if(!user.isVerified){\r\n          return response.status(422).json({\r\n            status: 422,\r\n            error: `<h6>Email verification step is needed. please check your email for a verification link or click the link to resend you an email verification</h6> \r\n\r\n            <a href=\"http://localhost:12000/api/v1/auth/drivers-resend/${email}\">Resend </a>`,\r\n          });\r\n        }\r\n        // console.log(email);\r\n        // console.log(password);\r\n        if (!TokenGenerator.checkIfPasswordMatch(password, user.password)) {\r\n          return response.status(422).json({\r\n            status: 422,\r\n            error: 'Invalid login details. Email or password is wrong',\r\n          });\r\n        }\r\n\r\n        //request.session.user = user;\r\n\r\n\r\n        const result = {\r\n          id: user.id,\r\n          _id: user._id,\r\n          email: user.email,\r\n          isAdmin: user.is_admin,\r\n          isVerified:user.isVerified,\r\n          firstname: user.firstname,\r\n          username: user.username,\r\n           profile: user.avatar,\r\n          //plan: user.plan_name,\r\n          //balance: user.balance,\r\n          notification_count: user.notification_count,\r\n          user_type: user.user_type,\r\n          username:user.username,\r\n          phoneNumber: user.phone_number,\r\n          roles: user.roles,\r\n\r\n        };\r\n        const token = TokenGenerator.generateToken(result);\r\n        return response.status(200).json({\r\n          status: 200,\r\n          data: [\r\n            {\r\n              token,\r\n              user: {\r\n                id: user.id,\r\n                 _id: user._id,\r\n                email: user.email,\r\n                isAdmin: user.is_admin,\r\n                isVerified:user.isVerified,\r\n                firstname: user.firstname,\r\n                username: user.username,\r\n                profile: user.avatar,\r\n                //plan_name: user.plan_name,\r\n                //balance: user.balance,\r\n                notification_count: user.notification_count,\r\n                 user_type: user.user_type,\r\n                 account_num: user.accountNumber,\r\n                 username:user.username,\r\n                 phoneNumber: user.phone_number,\r\n                 roles: user.roles,\r\n              },\r\n            },\r\n          ],\r\n          message: 'Successfully signed in',\r\n        });\r\n      })\r\n      .catch(err =>\r\n        response.status(400).json({\r\n          status: 400,\r\n          error: ErrorHandler.errors().validationError,\r\n        }),\r\n      );\r\n  }\r\n\r\n  static logout(request,response){\r\n//     router.post('/logout', function(req, res) {\r\n//   logout.logoutUser(req, res, function(err, data) {\r\n//     if (err) {\r\n//       res.json({ 'error': data.error, 'message': data.message });\r\n//     } else {\r\n//       res.json({ 'success': data.success, 'message': data.message });\r\n//     }\r\n//   });\r\n// });\r\n  }\r\n\r\n  static confirmationPost (req, res) {\r\n   \r\n\r\n    // Find a matching token\r\n    EmailTokenMakerForSignUp.findOne({ email_confirm_token:  req.params.id }, function (err, token) {\r\n       \r\n        if (!token) return res.status(400).send({ type: 'not-verified', msg: 'We were unable to find a valid token. Your token my have expired.' });\r\n\r\n        // If we found a token, find a matching user email: req.body.email\r\n        UserModel.findOne({ id: token._userId  }, function (err, user) {\r\n            if (!user) {\r\n              //return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\r\n              return  res.sendFile(path.join(__dirname + '../../../../../UI/user/page-503.html'));\r\n            }\r\n            if (user.isVerified) {\r\n              //return res.status(201).send({ type: 'already-verified', msg: 'This user has already been verified.' });\r\n              return  res.sendFile(path.join(__dirname + '/templates/drivers-already-verified.html'));\r\n            \r\n\r\n            }\r\n\r\n            // Verify and save the user\r\n            user.isVerified = true;\r\n            user.save(function (err) {\r\n                if (err) { return res.status(500).send({ msg: err.message }); }\r\n                //res.status(200).send(\"The account has been verified. Please wait...\");\r\n               \r\n                 return  res.sendFile(path.join(__dirname + '/templates/drivers-proceed-to-login.html'));\r\n               \r\n\r\n            });\r\n\r\n\r\n            \r\n        });\r\n    });\r\n}\r\n\r\n\r\n/**\r\n* POST /resend\r\n*/\r\nstatic resendTokenPost (req, res) {\r\n    UserModel.findOne({ email: req.params.id }, function (err, user) {\r\n        if (!user) return res.status(400).send({ msg: 'We were unable to find a user with that email.' });\r\n        \r\n        if (user.isVerified) return  res.sendFile(path.join(__dirname + '/drivers-already-verified.html'));\r\n        \r\n\r\n        // Create a verification token, save it, and send email\r\n        var token = new EmailTokenMakerForSignUp({ _userId: user.id, email_confirm_token: crypto.randomBytes(16).toString('hex') });\r\n        // Save the token\r\n        token.save(function (err) {\r\n            if (err) { return res.status(500).send({ msg: err.message }); }\r\n\r\n            // Send the email\r\n           \r\n\r\n                        const transporter = nodemailer.createTransport(\r\n              sendgridTransport({\r\n                auth: {\r\n                  api_user: process.env.SENDGRID_USERNAME,    // SG username\r\n                  api_key: process.env.SENDGRID_PASSWORD, // SG password\r\n                },\r\n              })\r\n            );\r\n\r\n            \r\n            var mailOptions = { \r\n              from:  'juwavictor@gmail.com', //process.env.APPLICATION_GMAIL, \r\n              to: user.email, \r\n              subject: 'Account Verification Token', \r\n              // text: 'Hello,\\n\\n' + 'Please verify your account by clicking the link: \\nhttp:\\/\\/' + request.headers.host + '\\/api/v1/auth/confirmation\\/' + emailtoken.email_confirm_token + '.\\n' \r\n              //html: ``,\r\n\r\n            };\r\n\r\n            console.log(__dirname + '/templates/signup-verification.html')\r\n\r\n            readHTMLFile(__dirname + '/templates/drivers-signup-verification.html', function(err, html) {\r\n                var template = handlebars.compile(html);\r\n                var replacements = {\r\n                     username: user.firstname,\r\n                     link: 'http:\\/\\/' + req.headers.host + '\\/api/v1/auth/drivers-confirmation\\/' + token.email_confirm_token \r\n                };\r\n                var htmlToSend = template(replacements);\r\n                \r\n                 mailOptions.html = htmlToSend;\r\n                transporter.sendMail(mailOptions, function (error, response) {\r\n                    if (error) {\r\n                        console.log(error+\"eroor here\");\r\n                        //callback(error);\r\n                    }\r\n                   // return res.status(200).send({ msg: \"sent email request\" });\r\n                });\r\n            });\r\n\r\n            \r\n        });\r\n\r\n    });\r\n}\r\n\r\n\r\nstatic passwordForgot(req, res){\r\n\r\n    let email = req.body.email;\r\n    UserModel.findOne({ email: email }, function (err, user) {\r\n        if (!user) return res.status(400).send({ msg: 'We were unable to find a user with that email.' });\r\n        let hashedStringToSend = crypto.randomBytes(16).toString('hex');\r\n\r\n        Storage.setItem('hasher', hashedStringToSend);\r\n            // Create a verification token for this user\r\n        var ForgotModelToken = new ForgotPasswordToken({ \r\n             _userId: user.id, \r\n             email_confirm_token: hashedStringToSend,\r\n             email_to_reset: email \r\n        });\r\n            \r\n\r\n            \r\n            // Save the verification token\r\n        ForgotModelToken.save(function (err) {\r\n            if (err) { \r\n              return res.status(500).send({ msg: err.message });\r\n            }\r\n            // send email to the given users email for password reset confirmation\r\n            var smtpConfig = {\r\n                      host: 'smtp.gmail.com',\r\n                      port: 587,\r\n                      service:'gmail',\r\n                      //secure: true, // use SSL, \r\n                                    // you can try with TLS, but port is then 587\r\n                      auth: {\r\n                        user: 'juwavictor@gmail.com', // Your email id\r\n                        pass: 'saladin123!@#' // Your password\r\n                      }\r\n            };\r\n\r\n              \r\n    \r\n           \r\n                    // Send the email\r\n           var transporter = nodemailer.createTransport({\r\n               service: 'SendGrid', \r\n               auth: { \r\n                user: process.env.SENDGRID_USERNAME,\r\n                 pass: process.env.SENDGRID_PASSWORD \r\n               } \r\n            });\r\n            \r\n            var mailOptions = { \r\n               from:  'juwavictor@gmail.com', //process.env.APPLICATION_GMAIL, \r\n               to: user.email, \r\n               subject: 'Account Verification Token', \r\n            };\r\n\r\n            readHTMLFile(__dirname + '/templates/drivers-reset-password.html', function(err, html) {\r\n                var template = handlebars.compile(html);\r\n                var replacements = {\r\n                     username: user.firstname,\r\n                     link: 'http:\\/\\/' + req.headers.host + '\\/api/v1/auth/drivers-resetMyPassword\\/' + hashedStringToSend \r\n                };\r\n                var htmlToSend = template(replacements);\r\n                \r\n                 mailOptions.html = htmlToSend;\r\n                transporter.sendMail(mailOptions, function (error, response) {\r\n                    if (err) { return res.status(500).send({ msg: err.message }); }\r\n                    return res.status(200).send({ msg: \"successfully sent you a password reset link\", status:'ok' }); \r\n                });\r\n            });\r\n\r\n        });\r\n\r\n    });\r\n\r\n  }\r\n\r\n\r\n  static confirmResetPassword (req, res) {\r\n     return  res.sendFile(path.join(__dirname + '/drivers-pw-reset.html'));\r\n          //this.router.post('/auth/drivers-resetpassword', DriverController.changePasswordTrigger);  \r\n  }\r\n\r\n  static changePasswordTrigger(req,res){\r\n    let password = req.body.password;\r\n    let confirmPass = req.body.confirmPassword;\r\n    if(password!= confirmPass){\r\n      console.log('err here1')\r\n       return res.status(400).send({ msg: 'password do not match.' });\r\n    }\r\n    // console.log(req.params.id)\r\n   \r\n    // Find a matching token\r\n    ForgotPasswordToken.findOne({  email_confirm_token:  Storage.getItem('hasher') }, function (err, token) {\r\n         console.log(token)\r\n         console.log(Storage.getItem('hasher'))\r\n        if (!token) { \r\n          console.log('error here 2');\r\n          console.log(err)\r\n          return res.status(400).send({ type: 'not-verified', msg: 'We were unable to find a valid token. Your token my have expired.' });\r\n\r\n        }\r\n\r\n        // If we found a token, find a matching user email: req.body.email\r\n        UserModel.findOne({ email: token.email_to_reset  }, function (err, user) {\r\n            if (!user) return res.status(400).send({ msg: 'We were unable to find a user for this token.' });\r\n            if (user.email != token.email_to_reset) return res.status(400).send({ type: 'No Reset Token', msg: 'This user reset token was not set.' });\r\n\r\n            // Verify and save the user\r\n            user.password = TokenGenerator.hashPassword(password.trim());\r\n            user.save(function (err) {\r\n                if (err) { return res.status(500).send({ msg: err.message }); }\r\n                return res.status(200).send({ msg:\"The account password has been reset. Please wait...\" , status:'ok'});\r\n                //return  res.sendFile(path.join(__dirname + '/pw-reset-success.html'));\r\n            }); \r\n        });\r\n    });\r\n  }\r\n\r\n \r\n  \r\n  static showProfile(request,response){\r\n\r\n    UserModel.find({id: Number(request.params.id)})\r\n      .then(data => {\r\n        console.log(\"specific profile:\" + data)\r\n        \r\n       \r\n        const userInfo = data; //related\r\n        if (userInfo.length <= 0) {\r\n                return response.status(404).json({\r\n                  status: 404,\r\n                  error: 'The user with the given id does not exists',\r\n                });\r\n        }\r\n        return response.status(200).json({\r\n                status: 200,\r\n                data: [\r\n                  {\r\n                    userInfo,\r\n                    message: 'Get a specific user was successful',\r\n                  },\r\n                ],\r\n          });\r\n      })\r\n      .catch(err =>\r\n              response.status(400).json({\r\n                status: 400,\r\n                error: ErrorHandler.errors().validationError,\r\n              }),\r\n            );\r\n    \r\n    \r\n  }\r\n\r\n\r\n  \r\n  static updateProfile(request,response){\r\n    const {\r\n      firstname,\r\n      lastname,\r\n      username,\r\n      password,\r\n      passwordConfirm,\r\n      phoneNumber,\r\n      avatar,\r\n      certificate,\r\n      user_type,\r\n      email,\r\n    } = request.body;\r\n\r\n\r\n\r\n    if(password.length && passwordConfirm.length){\r\n      if(password!= passwordConfirm){\r\n        console.log('err here1')\r\n        return res.status(400).send({ msg: 'password do not match.' });\r\n      }\r\n    }\r\n\r\n    \r\n\r\n\r\n    UserModel.findOne({ id:  request.params.id }, function (err, user) {\r\n\r\n      if (!user) return response.status(400).send({ msg: 'We were unable to find a user with that email.' });\r\n      \r\n      if(password==\"unchanged\" && passwordConfirm==\"unchanged\"){\r\n       user.password= user.password;\r\n       console.log(\"old:\" + user.password)\r\n      } else{\r\n        user.password= TokenGenerator.hashPassword(password.trim());\r\n        console.log(\"new pass: \"+ user.password)\r\n      }\r\n\r\n     \r\n      console.log(avatar)\r\n      // Verify and save the user\r\n      user.avatar= avatar || user.avatar;\r\n      user.username= username || user.username;\r\n      user.email= email || user.email;\r\n      user.roles = user_type || user.roles,\r\n      //user.user_type= user_type|| user.user_type;\r\n      user.firstname= firstname|| user.firstname;\r\n      user.lastname = lastname || user.lastname;\r\n      user.phone_number = phoneNumber|| user.phone_number;\r\n      user.test_certificate = certificate|| user.test_certificate;\r\n      user.save(function (err,user) {\r\n        if (err) { \r\n           console.log(err)\r\n          return response.status(500).send({ msg: err.message }); }\r\n        console.log(user + 'hello')\r\n          //return  response.sendFile(path.join(__dirname + '/proceed_tologin.html'));\r\n          return response.status(200).send({success:'ok', msg: 'Successfully updated user profile.' });\r\n      }); \r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  static getAssignedDriverToCars(request, response){\r\n\r\n    CarsModel.find({assigned_driver_email: request.params.id})\r\n      .then(data => {\r\n        console.log(\"specific car assigned:\" + data)\r\n        \r\n       \r\n        const carsInfo = data; //related\r\n        // if (carsInfo.length <= 0) {\r\n        //         return response.status(404).json({\r\n        //           status: 404,\r\n        //           error: 'The user with the given id does not exists',\r\n        //         });\r\n        // }\r\n        return response.status(200).json({\r\n                status: 200,\r\n                data: [\r\n                  {\r\n                    carsInfo,\r\n                    message: 'Get a specific user was successful',\r\n                  },\r\n                ],\r\n          });\r\n      })\r\n      .catch(err =>\r\n              response.status(400).json({\r\n                status: 400,\r\n                error: ErrorHandler.errors().validationError,\r\n              }),\r\n            );\r\n\r\n  }\r\n  \r\n\r\n  static getDriversAssignedTrips(request, response){\r\n\r\n    ItineraryModel.find({assigned_driver_email: request.params.id})\r\n      .then(data => {\r\n        console.log(\"specific profile:\" + data)\r\n        \r\n       \r\n        const tripsInfo = data; //related\r\n        // if (tripsInfo.length <= 0) {\r\n        //         return response.status(404).json({\r\n        //           status: 404,\r\n        //           error: 'The user with the given id does not exists',\r\n        //         });\r\n        // }\r\n        return response.status(200).json({\r\n                status: 200,\r\n                data: [\r\n                  {\r\n                    tripsInfo,\r\n                    message: 'Get a specific user was successful',\r\n                  },\r\n                ],\r\n          });\r\n      })\r\n      .catch(err =>\r\n              response.status(400).json({\r\n                status: 400,\r\n                error: ErrorHandler.errors().validationError,\r\n              }),\r\n            );\r\n\r\n\r\n  }\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n  static completedTrips(request, response) {\r\n    ItineraryModel.find({status: 'Completed'})\r\n      .then(data => {\r\n        \r\n       \r\n        const tripsInfo = data; //related\r\n        // if (tripsInfo.length <= 0) {\r\n        //         return response.status(404).json({\r\n        //           status: 404,\r\n        //           error: 'The user with the given id does not exists',\r\n        //         });\r\n        // }\r\n        return response.status(200).json({\r\n                status: 200,\r\n                data: [\r\n                  {\r\n                    tripsInfo,\r\n                    message: 'Get a specific user was successful',\r\n                  },\r\n                ],\r\n          });\r\n      })\r\n      .catch(err =>\r\n              response.status(400).json({\r\n                status: 400,\r\n                error: ErrorHandler.errors().validationError,\r\n              }),\r\n            );\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}"],"file":"driver_services.js"}