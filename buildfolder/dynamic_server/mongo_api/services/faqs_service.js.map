{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/services/faqs_service.js"],"names":["MongooseDatabase","getInstance","Database","FaqsService","request","response","body","id","car_type","car_year","color","model","partner_id","status","images","plate_number","isOwnedByCompany","uid","Number","user_id","console","log","postData","NewCars","FAQModel","AutoincrementId","counter","save","then","data","Cars","json","message","err","error","ErrorHandler","errors","validationError","find","carsAvailable","length","cars","params","Carss","JSON","stringify","removeOne","deletedCars","_id","CarsId","user","updateOne","editCarss","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","sourcesContent":["//import mongoose from 'mongoose';\nimport Database from '../models/db';\n\n\nimport { ResponseHandler } from '../helpers/response_handler';\nimport { ErrorHandler } from '../helpers/error_handler';\nimport FAQModel from '../models/FAQ.model.js';\nimport AutoincrementId from '../helpers/autoincrement_mongo.js';\n// Database.establishConnection();\nconst MongooseDatabase = Database.getInstance() || new Database();\nexport class FaqsService {\n  static createQnA(request, response) {\n    const {\n            id,\n            car_type,\n            car_year,\n            color,\n            model,\n            partner_id,\n            status,\n            images,\n            plate_number,\n            isOwnedByCompany,\n  \n    } = request.body;\n    let uid = Number(user_id) || Number(request.body.user_id);\n    console.log('you user id : ' + uid);\n    let postData = request.body;\n    const NewCars = new FAQModel({ \n            id:  new AutoincrementId(FAQModel).counter(),\n            car_type,\n            car_year,\n            color,\n            model,\n            partner_id,\n            status,\n            images,\n            plate_number ,\n           isOwnedByCompany,\n      });\n\n    NewCars.save()\n      .then(data => {\n        const Cars = data;\n        return response.status(201).json({\n          status: 201,\n          data: [\n            {\n              id: Cars.id,\n              message: 'Created car record',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static getAllQnA(request, response) {\n    FAQModel.find({status:'Active'})\n      .then(data => {\n        let carsAvailable = data;\n        console.log(carsAvailable,\"faqs\")\n        if (carsAvailable.length === 0) {\n           cars= [];\n\n          return response.status(200).json({\n            status: 200,\n            data: [\n              {\n                carsAvailable,\n                message: 'All Cars was retrieved successfully',\n              },\n            ],\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              carsAvailable,\n              message: 'All Carss was retrieved successfully',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static QnAId(request, response) {\n    FAQModel.find({id: Number(request.params.id)})\n      .then(data => {\n        const Cars = data;\n        if (Cars.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The id of the given car was not found',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              Cars,\n              message: 'Get a specific car was successful',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static deleteQnA(request, response) {\n    FAQModel.find({id: Number(request.params.id)})\n      .then(data => {\n        const Carss = data;\n\n        if ( Carss.length <= 0) {\n          console.log(\n            JSON.stringify({\n              status: 404,\n              error: 'The car with the given id does not exists',\n            }),\n          );\n          return response.status(404).json({\n            status: 404,\n            error: 'The car with the given id does not exists',\n          });\n        }\n        FAQModel.removeOne({id: Number(request.params.id)})\n          .then(data => {\n            const deletedCars = data;\n            response.status(202).json({\n              status: 202,\n              data: [\n                {\n                  id: deletedCars._id,\n                  message: 'car record has been deleted',\n                },\n              ],\n            });\n          })\n          .catch(error =>\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            }),\n          );\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  static editCars(request, response) {\n    FAQModel.find({id: Number(request.params.id)})\n      .then(CarsId => {\n        if (CarsId.length < 1) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The   given car id does not exists',\n          });\n        }\n        const { \n           car_type,\n            car_year,\n            color,\n            model,\n            partner_id,\n            status,\n            images,\n            plate_number ,\n           isOwnedByCompany, } = request.body;\n        if ( Number(request.user.id) === Number(CarsId[0].user_id) )  {\n          FAQModel.updateOne({id: Number(request.params.id)}, {\n             \n            car_type,\n            car_year,\n            color,\n            model,\n            partner_id,\n            status,\n            images,\n            plate_number ,\n           isOwnedByCompany,\n             \n           }).then(data => {\n              const editCarss = data;\n              return response.status(200).json({\n                status: 200,\n                data: [\n                  {\n                    id: editCarss._id,\n                    editCarss,\n                    message: 'Updated cars record’s detail',\n                  },\n                ],\n              });\n            })\n            .catch(error =>\n              response.status(400).json({\n                status: 400,\n                error: errors.validationError,\n              }),\n            );\n        } else {\n          return response.status(403).json({\n            status: 403,\n            error: 'You must signup or login to access this route',\n          });\n        }\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error:ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n  \n\n  static usersCars(request, response) {\n    // UserModel.find({user_id: request.params.id})\n    FAQModel.find({ user_id: Number(request.params.id) })\n    \n      .then(data => {\n        const Carss = data;\n        if (Carss.length === 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'User has no cars selected record',\n          });\n        }\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              Carss,\n              type: 'Red-flag',\n              message: 'Successful',\n            },\n          ],\n        });\n      })\n      .catch(error =>\n        response.status(400).json({\n          status: 400,\n          error: ErrorHandler.errors().validationError,\n        }),\n      );\n  }\n\n}\n"],"file":"faqs_service.js"}