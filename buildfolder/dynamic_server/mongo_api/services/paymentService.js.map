{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/services/paymentService.js"],"names":["uuidv4","require","crypto","moment","GatewayTransaction","APIError","httpStatus","Customer","Transaction","simulateGatewayCall","card","amount","status","hex","randomBytes","Math","ceil","toString","slice","auth_code","parseInt","exports","debitCard","accountNumber","gatewayResponse","gatewayTransaction","save","savedGatewayTransaction","message","PAYMENT_REQUIRED","transaction","operation","reference","transactionId","savedTransaction","findOne","savedCustomer","response","transform","customer","transformBalance"],"mappings":"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","sourcesContent":["const uuidv4 = require('uuid/v4');\nconst crypto = require('crypto');\nconst moment = require('moment-timezone');\nconst GatewayTransaction = require('../models/gatewayTransaction.model');\nconst APIError = require('../utils/APIError');\nconst httpStatus = require('http-status');\nconst Customer = require('../models/User.model');\nconst Transaction = require('../models/transaction.model');\n\nasync function simulateGatewayCall(card, amount) {\n    \n    let status = 'success';\n    if(card === '4242424242424242'){\n        status = 'failure';\n    }\n\n    const hex = crypto.randomBytes(Math.ceil(6/2))\n    .toString('hex')\n    .slice(0,6);\n    const auth_code = parseInt(hex, 16);\n\n    return {\n        'transactionId': uuidv4(),\n        'status': status,\n        'paymentDate': moment(),\n        'amount': amount,\n        'authorizationCode': auth_code,\n    };\n}\n\nexports.debitCard = async (accountNumber, card, amount) => {\n    const gatewayResponse = await simulateGatewayCall(card, amount);\n    const gatewayTransaction = new GatewayTransaction(gatewayResponse);\n    const savedGatewayTransaction = await gatewayTransaction.save();\n    if(savedGatewayTransaction.status === 'failure'){\n        throw new APIError({\n            message: 'Payment Rejected',\n            status: httpStatus.PAYMENT_REQUIRED,\n          });\n    }\n\n    const transaction = new Transaction();\n    transaction.amount = amount;\n    transaction.operation = 'deposit';\n    transaction.accountNumber = accountNumber;\n    transaction.reference = \"payment_gateway_transaction:\"+savedGatewayTransaction.transactionId;\n    const savedTransaction = await transaction.save();\n    const savedCustomer = await Customer.findOne({ 'accountNumber': accountNumber });\n    const response = { transaction: transaction.transform(), customer: savedCustomer.transformBalance() }\n    return response;\n  };"],"file":"paymentService.js"}