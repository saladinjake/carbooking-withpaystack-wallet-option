{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/services/withdrawalService.js"],"names":["uuidv4","require","crypto","moment","GatewayTransaction","APIError","httpStatus","Customer","Transaction","simulateGatewayCall","card","amount","status","hex","randomBytes","Math","ceil","toString","slice","auth_code","parseInt","exports","withdrawal","accountNumber","gatewayResponse","gatewayTransaction","save","savedGatewayTransaction","message","BAD_GATEWAY","transaction","operation","reference","transactionId","savedTransaction","findOne","savedCustomer","response","transform","customer","transformBalance"],"mappings":"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","sourcesContent":["const uuidv4 = require('uuid/v4');\nconst crypto = require('crypto');\nconst moment = require('moment-timezone');\nconst GatewayTransaction = require('../models/gatewayTransaction.model');\nconst APIError = require('../utils/APIError');\nconst httpStatus = require('http-status');\nconst Customer = require('../models/User.model');\nconst Transaction = require('../models/transaction.model');\n\nasync function simulateGatewayCall(card, amount) {\n    \n    let status = 'success';\n    if(card === '4242424242424242'){\n        status = 'failure';\n    }\n\n    const hex = crypto.randomBytes(Math.ceil(6/2))\n    .toString('hex')\n    .slice(0,6);\n    const auth_code = parseInt(hex, 16);\n\n    return {\n        'transactionId': uuidv4(),\n        'status': status,\n        'paymentDate': moment(),\n        'amount': amount,\n        'authorizationCode': auth_code,\n    };\n}\n\nexports.withdrawal = async (accountNumber, card, amount) => {\n    const gatewayResponse = await simulateGatewayCall(card, amount);\n    const gatewayTransaction = new GatewayTransaction(gatewayResponse);\n    const savedGatewayTransaction = await gatewayTransaction.save();\n    if(savedGatewayTransaction.status === 'failure'){\n        throw new APIError({\n            message: 'Withdrawal Rejected',\n            status: httpStatus.BAD_GATEWAY,\n          });\n    }\n\n    const transaction = new Transaction();\n    transaction.amount = -amount;\n    transaction.operation = 'withdrawal';\n    transaction.accountNumber = accountNumber;\n    transaction.reference = \"withdrawal_gateway_transaction:\"+savedGatewayTransaction.transactionId;\n    const savedTransaction = await transaction.save();\n    const savedCustomer = await Customer.findOne({ 'accountNumber': accountNumber });\n    const response = { transaction: transaction.transform(), customer: savedCustomer.transformBalance() }\n    return response;\n  };"],"file":"withdrawalService.js"}