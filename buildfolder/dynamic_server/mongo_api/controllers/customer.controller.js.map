{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/controllers/customer.controller.js"],"names":["httpStatus","require","omit","Customer","errorHandler","handler","exports","load","req","res","next","id","get","customer","locals","json","transform","loggedIn","create","body","save","savedCustomer","status","CREATED","checkDuplicateEmail","replace","newCustomer","ommitRole","role","newCustomerObject","toObject","update","override","upsert","findById","_id","updatedCustomer","Object","assign","then","e","list","query","customers","transformedCustomers","map","remove","NO_CONTENT","end"],"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","sourcesContent":["const httpStatus = require('http-status');\nconst { omit } = require('lodash');\nconst Customer = require('../models/customer.model');\nconst { handler: errorHandler } = require('../middlewares/error');\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\n/**\n * Load customer and append to req.\n * @public\n */\nexports.load = async (req, res, next, id) => {\n  try {\n    const customer = await Customer.get(id);\n    req.locals = { customer };\n    return next();\n  } catch (error) {\n    return errorHandler(error, req, res);\n  }\n};\n\n/**\n * Get customer\n * @public\n */\nexports.get = (req, res) => res.json(req.locals.customer.transform());\n\n/**\n * Get logged in customer info\n * @public\n */\nexports.loggedIn = (req, res) => res.json(req.customer.transform());\n\n/**\n * Create new customer\n * @public\n */\nexports.create = async (req, res, next) => {\n  try {\n    const customer = new Customer(req.body);\n    const savedCustomer = await customer.save();\n    res.status(httpStatus.CREATED);\n    res.json(savedCustomer.transform());\n  } catch (error) {\n    next(Customer.checkDuplicateEmail(error));\n  }\n};\n\n/**\n * Replace existing customer\n * @public\n */\nexports.replace = async (req, res, next) => {\n  try {\n    const { customer } = req.locals;\n    const newCustomer = new Customer(req.body);\n    const ommitRole = customer.role !== 'admin' ? 'role' : '';\n    const newCustomerObject = omit(newCustomer.toObject(), '_id', ommitRole);\n\n    await customer.update(newCustomerObject, { override: true, upsert: true });\n    const savedCustomer = await Customer.findById(customer._id);\n\n    res.json(savedCustomer.transform());\n  } catch (error) {\n    next(Customer.checkDuplicateEmail(error));\n  }\n};\n\n/**\n * Update existing customer\n * @public\n */\nexports.update = (req, res, next) => {\n  const ommitRole = req.locals.customer.role !== 'admin' ? 'role' : '';\n  const updatedCustomer = omit(req.body, ommitRole);\n  const customer = Object.assign(req.locals.customer, updatedCustomer);\n\n  customer\n    .save()\n    .then(savedCustomer => res.json(savedCustomer.transform()))\n    .catch(e => next(Customer.checkDuplicateEmail(e)));\n};\n\n/**\n * Get customer list\n * @public\n */\nexports.list = async (req, res, next) => {\n  try {\n    const customers = await Customer.list(req.query);\n    const transformedCustomers = customers.map(customer => customer.transform());\n    res.json(transformedCustomers);\n  } catch (error) {\n    next(error);\n  }\n};\n\n/**\n * Delete customer\n * @public\n */\nexports.remove = (req, res, next) => {\n  const { customer } = req.locals;\n\n  customer\n    .remove()\n    .then(() => res.status(httpStatus.NO_CONTENT).end())\n    .catch(e => next(e));\n};\n"],"file":"customer.controller.js"}