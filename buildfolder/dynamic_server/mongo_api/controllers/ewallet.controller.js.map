{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/controllers/ewallet.controller.js"],"names":["httpStatus","require","omit","UserModel","Transaction","paymentService","withdrawalService","transferService","errorHandler","handler","exports","getBalance","request","response","find","email","params","id","then","data","redFlag","length","status","json","error","accountBalance","balance","message","err","getTransactions","req","res","next","query","accountNumber","user","list","transactions","transformedTransactions","map","transaction","transform","console","log","deposit","debitCard","customer","body","card","amount","paymentResponse","transfer","destinationAccountNumber","transferResponse","withdrawal","withdrawalResponse"],"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","sourcesContent":["const httpStatus = require('http-status');\nconst { omit } = require('lodash');\nconst UserModel = require('../models/User.model');\nconst Transaction = require('../models/transaction.model');\nconst paymentService = require('../services/paymentService');\nconst withdrawalService = require('../services/withdrawalService');\nconst transferService = require('../services/transferService');\nconst { handler: errorHandler } = require('../middlewares/error');\n\n\n/**\n * Get customer balance\n * @public\n */\nexports.getBalance = (request, response) =>{\n\n  UserModel.find({email: request.params.id})\n      .then(data => {\n        const redFlag = data;\n        if (redFlag.length <= 0) {\n          return response.status(404).json({\n            status: 404,\n            error: 'The id of the given red-flag was not found',\n          });\n        }\n        const accountBalance = data[0].balance\n        return response.status(200).json({\n          status: 200,\n          data: [\n            {\n              accountBalance,\n              message: 'Get a specific red-flag was successful',\n            },\n          ],\n        });\n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: \"some error occured\",\n        }),\n      );\n} \n\n/**\n * Get customer transactions\n * @public\n */\nexports.getTransactions = async (req, res, next) => {\n  try {\n    req.query.accountNumber = req.user.accountNumber;\n    const transactions = await Transaction.list(req.query);\n    const transformedTransactions = transactions.map(transaction => transaction.transform());\n    console.log(transformedTransactions)\n    res.json(transformedTransactions);\n  } catch (error) {\n    next(error);\n  }\n};\n\n/**\n * eWallet Deposit\n * @public\n */\nexports.deposit = async (req, res, next) => {\n  try {\n    const paymentResponse = await paymentService.debitCard(req.customer.accountNumber, req.body.card, req.body.amount);        \n    res.json(paymentResponse);    \n    \n  } catch (error) {\n    next(error);\n  }\n};\n\n/**\n * eWallet Transfer\n * @public\n */\nexports.transfer = async (req, res, next) => {\n  try {    \n    const transferResponse = await transferService.transfer(req.customer.accountNumber, req.body.amount, req.body.destinationAccountNumber);    \n    res.json(transferResponse);    \n    \n  } catch (error) {\n    next(error);\n  }\n};\n\n/**\n * eWallet Withdrawal\n * @public\n */\nexports.withdrawal = async (req, res, next) => {\n  try {\n    const withdrawalResponse = await withdrawalService.withdrawal(req.customer.accountNumber, req.body.card, req.body.amount);        \n    res.json(withdrawalResponse);    \n    \n  } catch (error) {\n    next(error);\n  }\n};"],"file":"ewallet.controller.js"}