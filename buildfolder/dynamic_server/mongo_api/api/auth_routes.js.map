{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/api/auth_routes.js"],"names":["dotenv","config","url","require","google","readHTMLFile","path","callback","fs","readFile","encoding","err","html","OAuth2Data","CLIENT_ID","web","client_id","CLIENT_SECRET","client_secret","REDIRECT_URL","redirect_uris","oAuth2Client","auth","OAuth2","authed","SIGNUP_LINK","LOGIN_LINK","keyGen","keyLength","i","key","characters","charactersLength","length","substr","Math","floor","random","googleApix","scopes","generateAuthUrl","access_type","scope","join","code","getToken","credentials","setCredentials","tokens","gmail","version","users","getProfile","userId","data","googleApi","requestGmailAuth","req","res","next","generateUrl","redirect","getGmailUserInfo","qs","URL","process","env","DEPLOY_BACK_URL","searchParams","get","Error","getUserInfo","then","responseA","userpw","send","e","message","getGmailUserInfoLogin","emailAddress","UserModel","findOne","email","user","console","log","isVerified","response","status","json","error","TokenGenerator","checkIfPasswordMatch","password","result","id","_id","isAdmin","is_admin","firstname","username","profile","avatar","plan","plan_name","balance","notification_count","user_type","phone_number","roles","test_certificate","token","generateToken","templateDir","sendFile","ErrorHandler","errors","validationError","AuthRoutes","router","request","post","UserSanitizer","validateSignUp","checkIfUserExists","UserController","signup","validateLogin","checkIfUserIsBanned","login","confirmationPost","resendTokenPost","passwordForgot","confirmResetPassword","changePasswordTrigger","changePasswordTriggerMobile","logout","createToken","resultingTokenShibilish","accessToken","JWT","sign","SECRET","expiresIn","setHeader","passport","authenticate","session"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","sourcesContent":["import dotenv from 'dotenv';\ndotenv.config();\nimport UserController from '../controllers/user_controller';\nimport UserSanitizer from '../middlewares/user_sanitizer';\n\n// for social media auth\nimport JWT from 'jsonwebtoken';\n\n\nimport { passport } from  '../App';\nimport  config from  '../config/mongo_config';\nimport request from 'request';\n\n\n\nimport UserModel from '../models/User.model';\nimport { TokenGenerator } from '../helpers/token_generator';\nimport { ErrorHandler } from '../helpers/error_handler';\nimport { ResponseHandler } from '../helpers/response_handler';\n\nimport AutoincrementId from '../helpers/autoincrement_mongo.js';\n\nimport fs from 'fs';\nimport handlebars from 'handlebars';\n\n\n\nlet url = require('url');\nconst { google } = require('googleapis');\n\n\n\nvar readHTMLFile = function(path, callback) {\n  fs.readFile(path, {encoding: 'utf-8'}, function (err, html) {\n      if (err) {\n          throw err;\n          callback(err);\n      }\n      else {\n          callback(null, html);\n      }\n  });\n};\n\n\n\nlet OAuth2Data ={\n  \"web\":\n  {\n      \"client_id\":\"46702496041-pfat3fit27106mn6agmjlfvbk4aj1uph.apps.googleusercontent.com\",\n      \"project_id\":\"commutedevproja123\",\n      \"auth_uri\":\"https://accounts.google.com/o/oauth2/auth\",\n      \"token_uri\":\"https://oauth2.googleapis.com/token\",\n      \"auth_provider_x509_cert_url\":\"https://www.googleapis.com/oauth2/v1/certs\",\n      \"client_secret\":\"AqbSwS1NCdnXrERZFV73JIjk\",\n      \"redirect_uris\":[\"https://localhost:12000/api/v1/auth/google/callback\"],\n      \"javascript_origins\":[\"https://demouserapp.commute.ng\"]\n\n      }\n}\n\n\n\n\n\n\nconst CLIENT_ID = OAuth2Data.web.client_id;\nconst CLIENT_SECRET = OAuth2Data.web.client_secret;\nconst REDIRECT_URL = OAuth2Data.web.redirect_uris[0];\n\nconst oAuth2Client = new google.auth.OAuth2(CLIENT_ID, CLIENT_SECRET, REDIRECT_URL);\nvar authed = false;\n\n\n\n\n// import BridgeRoutes from './routes';\nconst SIGNUP_LINK = '/auth/signup';\nconst LOGIN_LINK = '/auth/login';\n\n\n\nfunction keyGen(keyLength) {\n  var i, key = \"\", characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\n  var charactersLength = characters.length;\n\n  for (i = 0; i < keyLength; i++) {\n      key += characters.substr(Math.floor((Math.random() * charactersLength) + 1), 1);\n  }\n\n  return key;\n}\n\n\n\n\nclass googleApix {\n  constructor(){\n      // const {client_id, client_secret, redirectUri } = credentials;\n      this.oAuth2Client = new google.auth.OAuth2(CLIENT_ID, CLIENT_SECRET, REDIRECT_URL)\n  }\n\n  generateUrl(scopes=[\"profile\", \"email\"]){\n      const url = this.oAuth2Client.generateAuthUrl({\n          access_type: 'offline',\n          scope: scopes.join(' ')\n      })\n      return url;\n  }\n\n  async getUserInfo(code){\n      const credentials = await this.oAuth2Client.getToken(code)\n      this.oAuth2Client.setCredentials(credentials.tokens);\n      // const plus = google.plus({\n      //     version: 'v1',\n      //     auth: this.oAuth2Client,\n      // });\n\n      const gmail = google.gmail({ \n                  version: 'v1',\n                   auth: this.oAuth2Client \n                });\n        \n      const data = await gmail.users.getProfile({userId: 'me'});\n      return data;\n  }\n}\n\nlet googleApi = new googleApix()\n\n\n\n\n\nconst requestGmailAuth = (req, res, next) =>{\n  let url = googleApi.generateUrl(['https://www.googleapis.com/auth/gmail.readonly'])\n  res.redirect(url);\n}\n\nconst getGmailUserInfo =  async (req, res, next) =>{\n  const qs = new url.URL(req.url, process.env.DEPLOY_BACK_URL).searchParams;\n  let code = qs.get('code')\n  if(!code){\n      next(new Error('No code provided'))\n  }\n  googleApi.getUserInfo(code)\n      .then(function(responseA){\n          // res.send(response.data)  //get user data from google\n          let userpw = keyGen(12);\n\n\n         res.send( responseA.data)\n\n      //     if(responseA.data.emailAddress){\n\n\n      //  } //end if email is returned from google\n          \n\n      }).catch(function(e){\n          next(new Error(e.message))\n  })\n}\n\n\n\n\n\n\n\n\n\nconst getGmailUserInfoLogin =  async (req, res, next) =>{\n  const qs = new url.URL(req.url, process.env.DEPLOY_BACK_URL).searchParams;\n  let code = qs.get('code')\n  if(!code){\n      next(new Error('No code provided'))\n  }\n  googleApi.getUserInfo(code)\n      .then(function(responseA){\n\n\n\n        //if the email is found\n        if(responseA.data.emailAddress){\n\n        UserModel.findOne({email: email})\n     .then(data => {\n       const user = data;\n       console.log(user.isVerified)\n\n\n       if (!user) {\n         return response.status(422).json({\n           status: 422,\n           error: 'User does not exists',\n         });\n\n         \n       }\n\n\n       \n\n\n       if(!user.isVerified){\n         return response.status(422).json({\n           status: 422,\n           error: `<h6>Email verification step is needed. please check your email for a verification link or click the link to resend you an email verification</h6> \n\n           <a href=\"https://demouserapp.commute.ng/api/v1/auth/resend/${email}\">Resend </a>`,\n         });\n       }\n       // console.log(email);\n       // console.log(password);\n       if (!TokenGenerator.checkIfPasswordMatch(password, user.password)) {\n         return response.status(422).json({\n           status: 422,\n           error: 'Invalid login details. Email or password is wrong',\n         });\n       }\n\n       //request.session.user = user;\n\n\n       \n\n       const result = {  \n         id: user.id,\n         _id: user._id,\n         email: user.email,\n         isAdmin: user.is_admin,\n         isVerified:user.isVerified,\n         firstname: user.firstname,\n         username: user.username,\n          profile: user.avatar,\n         plan: user.plan_name,\n         balance: user.balance,\n         notification_count: user.notification_count,\n         user_type: user.user_type,\n         username:user.username,\n         phoneNumber: user.phone_number,\n         roles: user.roles,\n         test_certificate: user.test_certificate\n\n       };\n       const token = TokenGenerator.generateToken(result);\n\n\n       let templateDir = '../services/views/socialauth_success.html';\n\n                    //show user page successful\n                    \n\n\n       return  res.sendFile( templateDir);\n       \n     })\n     .catch(err =>\n       response.status(400).json({\n         status: 400,\n         error: ErrorHandler.errors().validationError,\n       }),\n     );\n\n\n\n      } //end if email is returned     \n\n\n\n      }).catch(function(e){\n          next(new Error(e.message))\n  })\n}\n\n\n\nclass AuthRoutes {\n  constructor(router) {\n    // super(router);\n    this.router = router;\n  }\n\n  attachRoutes() {\n\n    this.router.get('/request/gmail/auth', requestGmailAuth)\n    this.router.get('/auth/google/callback', getGmailUserInfo)\n\n\n\n    this.router.get('/request/gmail/auth/login', requestGmailAuth)\n    this.router.get('/auth/google/callback', getGmailUserInfoLogin)\n\n    // simplelogins\n    this.router.get('/', (request, response) =>\n      response.status(200).json({\n        message: 'Welcome to commute API',\n      }),\n    );\n    this.router.post(\n      '/auth/signup',\n      UserSanitizer.validateSignUp,\n      UserSanitizer.checkIfUserExists,\n      UserController.signup,\n    );\n    this.router.post('/auth/login', \n      UserSanitizer.validateLogin,\n      UserSanitizer.checkIfUserIsBanned,\n      UserController.login\n     );\n    this.router.get('/auth/confirmation/:id', UserController.confirmationPost);\n    this.router.get('/auth/resend/:id', UserController.resendTokenPost);\n    this.router.post('/auth/forgot_password', UserController.passwordForgot);\n    this.router.get('/auth/resetMyPassword/:id', UserController.confirmResetPassword);//show form\n    this.router.post('/auth/resetpassword', UserController.changePasswordTrigger);\n    this.router.post('/auth/resetpassword/mobile', UserController.changePasswordTriggerMobile);\n\n    this.router.get('/logout', function(req, res){\n      req.logout();\n      res.redirect('/');\n    });\n  //   return this.router;\n\n\n\n \n\n//begin login steps\n//   this.router.get('/google', (req, res) => {\n//     if (!authed) {\n//         // Generate an OAuth URL and redirect there\n//         const url = oAuth2Client.generateAuthUrl({\n//             access_type: 'offline',\n//             scope: 'https://www.googleapis.com/auth/gmail.readonly'\n//         });\n//         console.log(url)\n//         res.redirect(url);\n//     } else {\n//         const gmail = google.gmail({ \n//           version: 'v1',\n//            auth: oAuth2Client \n//         });\n\n\n//         gmail.users.labels.list({\n//             userId: 'me',\n//         }, (err, res) => {\n//             if (err) return console.log('The API returned an error: ' + err);\n//             const labels = res.data.labels;\n//             if (labels.length) {\n//                 console.log('Labels:');\n//                 labels.forEach((label) => {\n//                     console.log(`- ${label.name}`);\n//                 });\n//             } else {\n//                 console.log('No labels found.');\n//             }\n//         });\n//         // res.send({\n//         //   data:data\n//         // })\n//     }\n// })\n\n\n\n// //login ends\n// this.router.get('/auth/google/callback', (req, res)  =>{\n//     const code = req.query.code\n//     if (code) {\n//         // Get an access token based on our OAuth code\n//         oAuth2Client.getToken(code, function (err, tokens) {\n//             if (err) {\n//                 console.log('Error authenticating')\n//                 console.log(err);\n//             } else {\n//                 console.log('Successfully authenticated');\n//                 oAuth2Client.setCredentials(tokens);\n//                 authed = true;\n \n                \n//                 const plus = google.plus({\n//                     version: 'v1',\n//                     auth: oAuth2Client,\n//                 });\n                \n//                 plus.people.get({userId: 'me'}, function (err,data) {\n//                   if(err){\n//                     console.log(err)\n//                   }else{\n//                     console.log(data)\n//                   }\n\n//                 });\n\n        \n       \n\n//                 res.redirect('http://localhost:4000')\n//             }\n//         });\n//     }\n// });\n\n\n  \nconst createToken = (req, res) => {\n   console.log(req.user)\n   let resultingTokenShibilish ={\n     id: req.user.id,\n     email: req.user.email,\n     username: req.user.username\n   };\n    const accessToken = JWT.sign(resultingTokenShibilish, process.env.SECRET, { expiresIn: 60 * 120 });\n   \n    req.token =  accessToken;\n    res.setHeader('x-auth-token', req.token);\n    res.status(200).json({\n                          status: 200,\n                           data: [\n                                  {\n                                      token:req.token,\n                                      user: req.user,\n                                  },\n                          ],\n                           message: 'User created successfully',\n                        });\n\n\n    //res.redirect(`/${req.roken}`);\n}\n\n\n      this.router.get('/google/start',\n         passport.authenticate('google', { session: false, scope: ['openid', 'profile', 'email'] }));\n      this.router.get('/google/redirect',\n         passport.authenticate('google', { session: false }),\n         createToken);\n\n      // this.router.get('/auth/facebook/',\n      //   passport.authenticate('facebook', { session: false, scope: ['public_profile'] }));\n      // this.router.get('/auth/facebook/callback/',\n      //    passport.authenticate('facebook', { session: false }),\n      //    createToken);\n\n\n      this.router.get('/auth/facebook/callback/',\n         (request,response,next)=>{\n           console.log(\"hit facebook\")\n         });\n\n\n       //working code...\n\n\n\n  }\n}\nexport default AuthRoutes;\n"],"file":"auth_routes.js"}