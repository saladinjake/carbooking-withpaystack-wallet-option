{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/api/auth_routes.js"],"names":["dotenv","config","SIGNUP_LINK","LOGIN_LINK","AuthRoutes","router","get","request","response","status","json","message","post","UserSanitizer","validateSignUp","checkIfUserExists","UserController","signup","validateLogin","checkIfUserIsBanned","login","confirmationPost","resendTokenPost","passwordForgot","confirmResetPassword","changePasswordTrigger","req","res","logout","redirect","createToken","accessToken","JWT","sign","id","user","process","env","SECRET","expiresIn","token","setHeader","roken","passport","authenticate","session","scope"],"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","sourcesContent":["import dotenv from 'dotenv';\ndotenv.config();\nimport UserController from '../controllers/user_controller';\nimport UserSanitizer from '../middlewares/user_sanitizer';\n\n// for social media auth\nimport JWT from 'jsonwebtoken';\nimport { TokenGenerator } from '../helpers/token_generator';\n\nimport { passport } from  '../App';\nimport  config from  '../config/mongo_config';\nimport request from 'request';\n\n\n\n// import BridgeRoutes from './routes';\nconst SIGNUP_LINK = '/auth/signup';\nconst LOGIN_LINK = '/auth/login';\nclass AuthRoutes {\n  constructor(router) {\n    // super(router);\n    this.router = router;\n  }\n\n  attachRoutes() {\n    // simplelogins\n    this.router.get('/', (request, response) =>\n      response.status(200).json({\n        message: 'Welcome to commute API',\n      }),\n    );\n    this.router.post(\n      '/auth/signup',\n      UserSanitizer.validateSignUp,\n      UserSanitizer.checkIfUserExists,\n      UserController.signup,\n    );\n    this.router.post('/auth/login', \n      UserSanitizer.validateLogin,\n      UserSanitizer.checkIfUserIsBanned,\n      UserController.login\n     );\n    this.router.get('/auth/confirmation/:id', UserController.confirmationPost);\n    this.router.get('/auth/resend/:id', UserController.resendTokenPost);\n    this.router.post('/auth/forgot_password', UserController.passwordForgot);\n    this.router.get('/auth/resetMyPassword/:id', UserController.confirmResetPassword);//show form\n    this.router.post('/auth/resetpassword', UserController.changePasswordTrigger);\n\n    this.router.get('/logout', function(req, res){\n      req.logout();\n      res.redirect('/');\n    });\n  //   return this.router;\n\n  \nconst createToken = (req, res) => {\n    const accessToken = JWT.sign({\n        id: req.user.id\n        //email\n        //username\n    }, process.env.SECRET, { expiresIn: 60 * 120 });\n   \n    req.token =  accessToken;\n    res.setHeader('x-auth-token', req.token);\n    res.status(200).json(req.token);\n    res.redirect(`/${req.roken}`);\n}\n\n\n      this.router.get('/google/start',\n         passport.authenticate('google', { session: false, scope: ['openid', 'profile', 'email'] }));\n      this.router.get('/google/redirect',\n         passport.authenticate('google', { session: false }),\n         createToken);\n\n      this.router.get('/auth/facebook',\n        passport.authenticate('facebook', { session: false, scope: ['public_profile'] }));\n      this.router.get('/auth/facebook/callback',\n         passport.authenticate('facebook', { session: false }),\n         createToken);\n\n\n       //working code...\n\n\n    // send to google to do the authentication\n    // this.router.get('/auth/facebook',\n    //     passport.authenticate('facebook'),\n    //     function(req, res){});\n    // this.router.get('/auth/facebook/callback',\n    //     passport.authenticate('facebook', {session: false, failureRedirect: '/' }),\n    //     function(req, res) {\n    //        //console.log(req.user)\n    //     if(!req.user) {\n    //         return res.send(401, 'User not authenticated');\n    //     }\n\n    //     if(req.user){\n    //       console.log(req.user)\n    //     }\n\n        \n    //     req.token = createToken(req.user);\n    //     res.setHeader('x-auth-token', req.token);\n    //     res.status(200).json(req.token);\n    //     // res.redirect(`/${req.roken}`);\n        \n    // });\n\n    // this.router.get('/auth/twitter',\n    //     passport.authenticate('twitter'),\n    //     function(req, res){});\n    // this.router.get('/auth/twitter/callback',\n    //     passport.authenticate('twitter', { failureRedirect: '/' }),\n    //     function(req, res) {\n    //       res.redirect('http://localhost:4000');\n    //     });\n\n      \n    // this.router.get('/auth/google',\n    //     passport.authenticate('google', { scope: [\n    //       'https://www.googleapis.com/auth/plus.login',\n    //       'https://www.googleapis.com/auth/plus.profile.emails.read'\n    //     ] }\n    //   ));\n    // this.router.get('/auth/google/callback',\n    //     passport.authenticate('google', { failureRedirect: '/' }),\n        \n    //     function(req, res) {\n    //       res.redirect('http://localhost:4000');\n    // });\n\n    // this.router.get('/auth/instagram',\n    //     passport.authenticate('instagram'),\n    //     function(req, res){});\n    // this.router.get('/auth/instagram/callback',\n    //     passport.authenticate('instagram', { failureRedirect: '/' }),\n    //     function(req, res) {\n    //       res.redirect('/account');\n    // });\n\n\n\n  }\n}\nexport default AuthRoutes;\n"],"file":"auth_routes.js"}