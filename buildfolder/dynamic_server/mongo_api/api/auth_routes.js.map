{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/api/auth_routes.js"],"names":["dotenv","config","url","require","google","readHTMLFile","path","callback","fs","readFile","encoding","err","html","OAuth2Data","web","client_id","project_id","auth_uri","token_uri","auth_provider_x509_cert_url","client_secret","redirect_uris","javascript_origins","CLIENT_ID","CLIENT_SECRET","REDIRECT_URL","oAuth2Client","auth","OAuth2","authed","SIGNUP_LINK","LOGIN_LINK","keyGen","keyLength","i","key","characters","charactersLength","length","substr","Math","floor","random","googleApix","scopes","generateAuthUrl","access_type","scope","join","code","getToken","credentials","setCredentials","tokens","gmail","version","users","getProfile","userId","data","googleApi","requestGmailAuth","req","res","next","generateUrl","redirect","getGmailUserInfo","qs","URL","process","env","DEPLOY_BACK_URL","searchParams","get","Error","getUserInfo","then","responseA","userpw","send","e","message","getGmailUserInfoLogin","emailAddress","UserModel","findOne","email","user","console","log","isVerified","response","status","json","error","TokenGenerator","checkIfPasswordMatch","password","result","id","_id","isAdmin","is_admin","firstname","username","profile","avatar","plan","plan_name","balance","notification_count","user_type","phone_number","roles","test_certificate","token","generateToken","templateDir","sendFile","ErrorHandler","errors","validationError","AuthRoutes","router","request","post","UserSanitizer","validateSignUp","checkIfUserExists","UserController","signup","validateLogin","checkIfUserIsBanned","login","confirmationPost","resendTokenPost","passwordForgot","confirmResetPassword","changePasswordTrigger","changePasswordTriggerMobile","logout","createToken","resultingTokenShibilish","accessToken","JWT","sign","SECRET","expiresIn","setHeader","passport","authenticate","session"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","sourcesContent":["import dotenv from 'dotenv';\ndotenv.config();\nimport UserController from '../controllers/user_controller';\nimport UserSanitizer from '../middlewares/user_sanitizer';\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\n// for social media auth\nimport JWT from 'jsonwebtoken';\n\nimport { passport } from '../App';\nimport config from '../config/mongo_config';\nimport request from 'request';\n\nimport UserModel from '../models/User.model';\nimport { TokenGenerator } from '../helpers/token_generator';\nimport { ErrorHandler } from '../helpers/error_handler';\nimport { ResponseHandler } from '../helpers/response_handler';\n\nimport AutoincrementId from '../helpers/autoincrement_mongo.js';\n\nimport fs from 'fs';\nimport handlebars from 'handlebars';\n\nlet url = require('url');\nconst { google } = require('googleapis');\n\nvar readHTMLFile = function(path, callback) {\n  fs.readFile(path, { encoding: 'utf-8' }, function(err, html) {\n    if (err) {\n      throw err;\n      callback(err);\n    } else {\n      callback(null, html);\n    }\n  });\n};\n\nlet OAuth2Data = {\n  web: {\n    client_id: '46702496041-pfat3fit27106mn6agmjlfvbk4aj1uph.apps.googleusercontent.com',\n    project_id: 'commutedevproja123',\n    auth_uri: 'https://accounts.google.com/o/oauth2/auth',\n    token_uri: 'https://oauth2.googleapis.com/token',\n    auth_provider_x509_cert_url: 'https://www.googleapis.com/oauth2/v1/certs',\n    client_secret: 'AqbSwS1NCdnXrERZFV73JIjk',\n    redirect_uris: ['https://localhost:12000/api/v1/auth/google/callback'],\n    javascript_origins: ['https://demouserapp.commute.ng'],\n  },\n};\n\nconst CLIENT_ID = OAuth2Data.web.client_id;\nconst CLIENT_SECRET = OAuth2Data.web.client_secret;\nconst REDIRECT_URL = OAuth2Data.web.redirect_uris[0];\n\nconst oAuth2Client = new google.auth.OAuth2(CLIENT_ID, CLIENT_SECRET, REDIRECT_URL);\nvar authed = false;\n\n// import BridgeRoutes from './routes';\nconst SIGNUP_LINK = '/auth/signup';\nconst LOGIN_LINK = '/auth/login';\n\nfunction keyGen(keyLength) {\n  var i,\n    key = '',\n    characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\n  var charactersLength = characters.length;\n\n  for (i = 0; i < keyLength; i++) {\n    key += characters.substr(Math.floor(Math.random() * charactersLength + 1), 1);\n  }\n\n  return key;\n}\n\nclass googleApix {\n  constructor() {\n    // const {client_id, client_secret, redirectUri } = credentials;\n    this.oAuth2Client = new google.auth.OAuth2(CLIENT_ID, CLIENT_SECRET, REDIRECT_URL);\n  }\n\n  generateUrl(scopes = ['profile', 'email']) {\n    const url = this.oAuth2Client.generateAuthUrl({\n      access_type: 'offline',\n      scope: scopes.join(' '),\n    });\n    return url;\n  }\n\n  async getUserInfo(code) {\n    const credentials = await this.oAuth2Client.getToken(code);\n    this.oAuth2Client.setCredentials(credentials.tokens);\n    // const plus = google.plus({\n    //     version: 'v1',\n    //     auth: this.oAuth2Client,\n    // });\n\n    const gmail = google.gmail({\n      version: 'v1',\n      auth: this.oAuth2Client,\n    });\n\n    const data = await gmail.users.getProfile({ userId: 'me' });\n    return data;\n  }\n}\n\nlet googleApi = new googleApix();\n\nconst requestGmailAuth = (req, res, next) => {\n  let url = googleApi.generateUrl(['https://www.googleapis.com/auth/gmail.readonly']);\n  res.redirect(url);\n};\n\nconst getGmailUserInfo = async (req, res, next) => {\n  const qs = new url.URL(req.url, process.env.DEPLOY_BACK_URL).searchParams;\n  let code = qs.get('code');\n  if (!code) {\n    next(new Error('No code provided'));\n  }\n  googleApi\n    .getUserInfo(code)\n    .then(function(responseA) {\n      // res.send(response.data)  //get user data from google\n      let userpw = keyGen(12);\n\n      res.send(responseA.data);\n\n      //     if(responseA.data.emailAddress){\n\n      //  } //end if email is returned from google\n    })\n    .catch(function(e) {\n      next(new Error(e.message));\n    });\n};\n\nconst getGmailUserInfoLogin = async (req, res, next) => {\n  const qs = new url.URL(req.url, process.env.DEPLOY_BACK_URL).searchParams;\n  let code = qs.get('code');\n  if (!code) {\n    next(new Error('No code provided'));\n  }\n  googleApi\n    .getUserInfo(code)\n    .then(function(responseA) {\n      //if the email is found\n      if (responseA.data.emailAddress) {\n        UserModel.findOne({ email: email })\n          .then(data => {\n            const user = data;\n            console.log(user.isVerified);\n\n            if (!user) {\n              return response.status(422).json({\n                status: 422,\n                error: 'User does not exists',\n              });\n            }\n\n            if (!user.isVerified) {\n              return response.status(422).json({\n                status: 422,\n                error: `<h6>Email verification step is needed. please check your email for a verification link or click the link to resend you an email verification</h6> \n\n           <a href=\"https://demouserapp.commute.ng/api/v1/auth/resend/${email}\">Resend </a>`,\n              });\n            }\n            // console.log(email);\n            // console.log(password);\n            if (!TokenGenerator.checkIfPasswordMatch(password, user.password)) {\n              return response.status(422).json({\n                status: 422,\n                error: 'Invalid login details. Email or password is wrong',\n              });\n            }\n\n            //request.session.user = user;\n\n            const result = {\n              id: user.id,\n              _id: user._id,\n              email: user.email,\n              isAdmin: user.is_admin,\n              isVerified: user.isVerified,\n              firstname: user.firstname,\n              username: user.username,\n              profile: user.avatar,\n              plan: user.plan_name,\n              balance: user.balance,\n              notification_count: user.notification_count,\n              user_type: user.user_type,\n              username: user.username,\n              phoneNumber: user.phone_number,\n              roles: user.roles,\n              test_certificate: user.test_certificate,\n            };\n            const token = TokenGenerator.generateToken(result);\n\n            let templateDir = '../services/views/socialauth_success.html';\n\n            //show user page successful\n\n            return res.sendFile(templateDir);\n          })\n          .catch(err =>\n            response.status(400).json({\n              status: 400,\n              error: ErrorHandler.errors().validationError,\n            }),\n          );\n      } //end if email is returned\n    })\n    .catch(function(e) {\n      next(new Error(e.message));\n    });\n};\n\nclass AuthRoutes {\n  constructor(router) {\n    // super(router);\n    this.router = router;\n  }\n\n  attachRoutes() {\n    this.router.get('/request/gmail/auth', requestGmailAuth);\n    this.router.get('/auth/google/callback', getGmailUserInfo);\n\n    this.router.get('/request/gmail/auth/login', requestGmailAuth);\n    this.router.get('/auth/google/callback', getGmailUserInfoLogin);\n\n    // simplelogins\n    this.router.get('/', (request, response) =>\n      response.status(200).json({\n        message: 'Welcome to commute API',\n      }),\n    );\n    this.router.post(\n      '/auth/signup',\n      UserSanitizer.validateSignUp,\n      UserSanitizer.checkIfUserExists,\n      UserController.signup,\n    );\n    this.router.post(\n      '/auth/login',\n      UserSanitizer.validateLogin,\n      UserSanitizer.checkIfUserIsBanned,\n      UserController.login,\n    );\n    this.router.get('/auth/confirmation/:id', UserController.confirmationPost);\n    this.router.get('/auth/resend/:id', UserController.resendTokenPost);\n    this.router.post('/auth/forgot_password', UserController.passwordForgot);\n    this.router.get('/auth/resetMyPassword/:id', UserController.confirmResetPassword); //show form\n    this.router.post('/auth/resetpassword', UserController.changePasswordTrigger);\n    this.router.post('/auth/resetpassword/mobile', UserController.changePasswordTriggerMobile);\n\n    this.router.get('/logout', function(req, res) {\n      req.logout();\n      res.redirect('/');\n    });\n    //   return this.router;\n\n    //begin login steps\n    //   this.router.get('/google', (req, res) => {\n    //     if (!authed) {\n    //         // Generate an OAuth URL and redirect there\n    //         const url = oAuth2Client.generateAuthUrl({\n    //             access_type: 'offline',\n    //             scope: 'https://www.googleapis.com/auth/gmail.readonly'\n    //         });\n    //         console.log(url)\n    //         res.redirect(url);\n    //     } else {\n    //         const gmail = google.gmail({\n    //           version: 'v1',\n    //            auth: oAuth2Client\n    //         });\n\n    //         gmail.users.labels.list({\n    //             userId: 'me',\n    //         }, (err, res) => {\n    //             if (err) return console.log('The API returned an error: ' + err);\n    //             const labels = res.data.labels;\n    //             if (labels.length) {\n    //                 console.log('Labels:');\n    //                 labels.forEach((label) => {\n    //                     console.log(`- ${label.name}`);\n    //                 });\n    //             } else {\n    //                 console.log('No labels found.');\n    //             }\n    //         });\n    //         // res.send({\n    //         //   data:data\n    //         // })\n    //     }\n    // })\n\n    // //login ends\n    // this.router.get('/auth/google/callback', (req, res)  =>{\n    //     const code = req.query.code\n    //     if (code) {\n    //         // Get an access token based on our OAuth code\n    //         oAuth2Client.getToken(code, function (err, tokens) {\n    //             if (err) {\n    //                 console.log('Error authenticating')\n    //                 console.log(err);\n    //             } else {\n    //                 console.log('Successfully authenticated');\n    //                 oAuth2Client.setCredentials(tokens);\n    //                 authed = true;\n\n    //                 const plus = google.plus({\n    //                     version: 'v1',\n    //                     auth: oAuth2Client,\n    //                 });\n\n    //                 plus.people.get({userId: 'me'}, function (err,data) {\n    //                   if(err){\n    //                     console.log(err)\n    //                   }else{\n    //                     console.log(data)\n    //                   }\n\n    //                 });\n\n    //                 res.redirect('http://localhost:4000')\n    //             }\n    //         });\n    //     }\n    // });\n\n    const createToken = (req, res) => {\n      console.log(req.user);\n      let resultingTokenShibilish = {\n        id: req.user.id,\n        email: req.user.email,\n        username: req.user.username,\n      };\n      const accessToken = JWT.sign(resultingTokenShibilish, process.env.SECRET, {\n        expiresIn: 60 * 120,\n      });\n\n      req.token = accessToken;\n      res.setHeader('x-auth-token', req.token);\n      res.status(200).json({\n        status: 200,\n        data: [\n          {\n            token: req.token,\n            user: req.user,\n          },\n        ],\n        message: 'User created successfully',\n      });\n\n      //res.redirect(`/${req.roken}`);\n    };\n\n    this.router.get(\n      '/google/start',\n      passport.authenticate('google', { session: false, scope: ['openid', 'profile', 'email'] }),\n    );\n    this.router.get(\n      '/google/redirect',\n      passport.authenticate('google', { session: false }),\n      createToken,\n    );\n\n    // this.router.get('/auth/facebook/',\n    //   passport.authenticate('facebook', { session: false, scope: ['public_profile'] }));\n    // this.router.get('/auth/facebook/callback/',\n    //    passport.authenticate('facebook', { session: false }),\n    //    createToken);\n\n    this.router.get('/auth/facebook/callback/', (request, response, next) => {\n      console.log('hit facebook');\n    });\n\n    //working code...\n  }\n}\nexport default AuthRoutes;\n"],"file":"auth_routes.js"}