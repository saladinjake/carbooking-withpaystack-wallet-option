{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/api/driver_routes.js"],"names":["SIGNUP_LINK","LOGIN_LINK","corsOption","origin","methods","credentials","exposedHeaders","validate","require","DriversRoutes","router","post","DriverSanitizer","validateSignUp","checkIfDriverExists","DriverController","signup","validateLogin","checkIfDriverIsBanned","login","passwordForgot","get","confirmationPost","resendTokenPost","confirmResetPassword","changePasswordTrigger","req","res","logout","redirect","TokenVerification","userAuthentication","showProfile","updateProfile","getDriversAssignedTrips","getAssignedDriverToCars","createRedFlag","usersRedflags","sendNotifications","getNotifications"],"mappings":"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","sourcesContent":["import DriverController from '../controllers/driver_controller';\r\nimport DriverSanitizer from '../middlewares/driver_sanitizer';\r\nimport DriverModel from \"../models/Driver.model\";\r\n\r\nimport TokenVerification from '../middlewares/token_validator';\r\nimport SubmitEventValidator from '../middlewares/post_sanitizer';\r\n\r\n\r\n\r\n// for social media auth\r\nimport JWT from 'jsonwebtoken';\r\nimport { TokenGenerator } from '../helpers/token_generator';\r\n\r\nimport { passport } from  '../App';\r\nimport  config from  '../config/mongo_config';\r\nimport request from 'request';\r\n\r\n\r\n\r\n// import BridgeRoutes from './routes';\r\nconst SIGNUP_LINK = '/auth/drivers-signup';\r\nconst LOGIN_LINK = '/auth/drivers-login';\r\n\r\n\r\n\r\n\r\nimport cors from 'cors';\r\nlet corsOption = {\r\n        origin: true,\r\n        methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\r\n        credentials: true,\r\n        exposedHeaders: ['x-auth-token'],\r\n        'Access-Control-Allow-Origin': '*'\r\n    };\r\n\r\n\r\n\r\n//for e wallet transactions\r\n\r\nconst validate = require('express-validation');\r\n\r\nclass DriversRoutes {\r\n  constructor(router) {\r\n    // super(router);\r\n    this.router = router;\r\n  }\r\n\r\n  attachRoutes() {\r\n    /*\r\n * Respond to GET requests to /account.\r\n * Upon request, render the 'account.html' web page in views/ directory.\r\n */\r\n\r\n\r\n  // simplelogins\r\n  \r\n    this.router.post(\r\n      '/auth/drivers-signup',\r\n      DriverSanitizer.validateSignUp,\r\n      DriverSanitizer.checkIfDriverExists,\r\n      DriverController.signup,\r\n    );\r\n    this.router.post('/auth/drivers-login', \r\n      DriverSanitizer.validateLogin,\r\n      DriverSanitizer.checkIfDriverIsBanned,\r\n      DriverController.login\r\n     );\r\n    this.router.post('/auth/drivers-forgot_password', DriverController.passwordForgot);\r\n    this.router.get('/auth/drivers-confirmation/:id', DriverController.confirmationPost);\r\n    this.router.get('/auth/drivers-resend/:id', DriverController.resendTokenPost);\r\n    \r\n    this.router.get('/auth/drivers-resetMyPassword/:id', DriverController.confirmResetPassword);//show form\r\n    this.router.post('/auth/drivers-resetpassword', DriverController.changePasswordTrigger);\r\n\r\n    this.router.get('/drivers-logout', function(req, res){\r\n      req.logout();\r\n      res.redirect('/');\r\n    });\r\n  \r\n\r\n\r\n    this.router.get('/drivers-profile/update/:id',\r\n      TokenVerification.userAuthentication,\r\n    \tDriverController.showProfile\r\n    );\r\n\r\n    this.router.post('/drivers-profile/update/:id',\r\n      TokenVerification.userAuthentication,\r\n    \tDriverSanitizer.validateSignUp,\r\n    \tDriverController.updateProfile\r\n    );\r\n\r\n\r\n    this.router.get('/drivers-assigned-user-trips/:id',\r\n      TokenVerification.userAuthentication,\r\n      DriverController.getDriversAssignedTrips\r\n    );\r\n\r\n    this.router.get('/drivers-assigned-cars/:id',\r\n      TokenVerification.userAuthentication,\r\n      DriverController.getAssignedDriverToCars\r\n    )\r\n\r\n\r\n\r\n\r\n\r\n\r\n    this.router.post(\r\n      '/drivers-sos',\r\n      TokenVerification.userAuthentication,\r\n      // SubmitEventValidator.validateSubmit,\r\n      DriverController.createRedFlag,\r\n    );\r\n\r\n    this.router.get(\r\n      '/drivers-sos/:id/users',\r\n      TokenVerification.userAuthentication,\r\n      // SubmitEventValidator.validateSubmit,\r\n      DriverController.usersRedflags,\r\n    );\r\n\r\n\r\n    this.router.post(\r\n      '/drivers-notifications',\r\n      TokenVerification.userAuthentication,\r\n      DriverController.sendNotifications,\r\n    );\r\n\r\n\r\n    this.router.get(\r\n      '/drivers-notifications/:id',\r\n      TokenVerification.userAuthentication,\r\n      DriverController.getNotifications,\r\n    );\r\n\r\n\r\n\r\n\r\n    //  this.router.post('/drivers-notification',\r\n    //   TokenVerification.userAuthentication, \r\n    //    //DriverSanitizer.checkIfUserDoesntExists,\r\n    //   DriverController.makeNotification\r\n    //   );\r\n    //  this.router.get('/drivers-notification/:id',\r\n    //   TokenVerification.userAuthentication, \r\n    //   DriverController.getUserNotification\r\n    //   );\r\n\r\n\r\n  \r\n\r\n    \r\n    \r\n\r\n    //  //drivers\r\n    //  this.router.get('/confirm-booking-request',\r\n    //   //TokenVerification.userAuthentication, \r\n    //   DriverController.driverConfirmBooking\r\n    // );\r\n\r\n\r\n\r\n    // //update driver socket id\r\n    // this.router.put(\"/driverLocationSocket/:id\", function(req, res, next){\r\n    //   var io = req.app.io;\r\n    //   if(!req.body){\r\n    //     res.status(400);\r\n    //     res.json({\r\n    //       \"error\":\"Bad Data\"\r\n    //     });\r\n    //   } else {\r\n    //     console.log(req.params.id)\r\n    //     DriverModel.updateOne({id:req.params.id},\r\n    //       {$set: {socketId:req.body.socketId}}, function(err, updateDetails) {\r\n    //         if(err){\r\n    //           res.send(err);\r\n    //         }else{\r\n    //           console.log(updateDetails )\r\n    //           res.send(updateDetails);\r\n    //         }\r\n    //     });\r\n    //   }\r\n    // });\r\n\r\n    // //get nearby driver\r\n    // this.router.get(\"/driverLocation/:latitude/:longitude\", function (req, res, next) {\r\n    //   //DriverModel.ensureIndex({\"coordinate\": \"2dsphere\"});\r\n    //   DriverModel.find({\r\n    //     \"location\": {\r\n    //      \"$near\": {\r\n    //       \"$maxDistance\": 1000,\r\n    //       \"$geometry\": {\r\n    //        \"type\": \"Point\",\r\n    //        \"coordinates\": [parseFloat(req.params.latitude), parseFloat(request.params.longitude)]\r\n    //       }\r\n    //      }\r\n    //     }\r\n    //    }, function (err, location) {\r\n    //           if (err) {\r\n    //             res.send(err);\r\n    //           } else {\r\n    //             res.send(location);\r\n    //           }\r\n    //         });\r\n    // });\r\n\r\n    // //Get Single Driver and emit track by user to driver\r\n    // this.router.get(\"/driverLocation/:id\", function (req, res, next) {\r\n    //   var io = req.app.io;\r\n    //   DriverModel.findOne({ driverId: req.params.id }, function (err, location) {\r\n    //     if (err) {\r\n    //       res.send(err);\r\n    //     }\r\n    //     res.send(location);\r\n    //     io.emit(\"trackDriver\", location);\r\n    //   });\r\n    // });\r\n\r\n    // //Update Location by driver to user\r\n    // this.router.put(\"/driverLocation/:id\", function (req, res, next) {\r\n    //   var io = req.app.io;\r\n    //   var location = req.body;\r\n    //   var latitude = parseFloat(location.latitude);\r\n    //   var longitude = parseFloat(location.longitude);\r\n    //   if (!location) {\r\n    //     res.status(400);\r\n    //     res.json({\r\n    //       \"error\": \"Bad Data\"\r\n    //     });\r\n    //   } else {\r\n    //     DriverModel.update({ _id: req.params.id }, {\r\n    //       $set: {\r\n    //         socketId: location.socketId,\r\n    //         coordinate: {\r\n    //           \"type\": \"Point\",\r\n    //           coordinates: [\r\n    //             longitude,\r\n    //             latitude\r\n    //           ]\r\n    //         }\r\n    //       }\r\n    //     }, function (err, updateDetails) {\r\n    //       if (err) {\r\n    //         console.log(updateDetails);\r\n    //         res.send(err);\r\n    //       }\r\n    //       if (updateDetails) {\r\n\r\n    //         //Get updated location\r\n    //         db.driversLocation.findOne({ _id: mongojs.ObjectId(req.params.id) }, function (error, updatedLocation) {\r\n    //           if (error) {\r\n    //             res.send(error);\r\n    //           }\r\n    //           res.send(updatedLocation);\r\n    //           io.emit(\"action\", {\r\n    //             type: \"UPDATE_DRIVER_LOCATION\",\r\n    //             payload: updatedLocation\r\n    //           });\r\n    //         });\r\n    //       }\r\n    //     });\r\n    //   }\r\n    // });\r\n\r\n\r\n    \r\n    return this.router;\r\n  }\r\n}\r\nexport default DriversRoutes;\r\n"],"file":"driver_routes.js"}