{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/api/driver_routes.js"],"names":["SIGNUP_LINK","LOGIN_LINK","corsOption","origin","methods","credentials","exposedHeaders","DriversRoutes","router","post","DriverSanitizer","validateSignUp","checkIfDriverExists","DriverController","signup","validateLogin","checkIfDriverIsBanned","login","passwordForgot","get","confirmationPost","resendTokenPost","confirmResetPassword","changePasswordTrigger","req","res","logout","redirect","TokenVerification","userAuthentication","showProfile","updateProfile","getDriversAssignedTrips","getAssignedDriverToCars","createRedFlag","usersRedflags","sendNotifications","getNotifications"],"mappings":"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","sourcesContent":["import DriverController from '../controllers/driver_controller';\nimport DriverSanitizer from '../middlewares/driver_sanitizer';\nimport DriverModel from '../models/Driver.model';\n\nimport TokenVerification from '../middlewares/token_validator';\nimport SubmitEventValidator from '../middlewares/post_sanitizer';\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\n// for social media auth\nimport JWT from 'jsonwebtoken';\nimport { TokenGenerator } from '../helpers/token_generator';\n\nimport { passport } from '../App';\nimport config from '../config/mongo_config';\nimport request from 'request';\n\n// import BridgeRoutes from './routes';\nconst SIGNUP_LINK = '/auth/drivers-signup';\nconst LOGIN_LINK = '/auth/drivers-login';\n\nimport cors from 'cors';\nlet corsOption = {\n  origin: true,\n  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n  credentials: true,\n  exposedHeaders: ['x-auth-token'],\n  'Access-Control-Allow-Origin': '*',\n};\n\n//for e wallet transactions\n\n//const validate = require('express-validation');\n\nclass DriversRoutes {\n  constructor(router) {\n    // super(router);\n    this.router = router;\n  }\n\n  attachRoutes() {\n    /*\n     * Respond to GET requests to /account.\n     * Upon request, render the 'account.html' web page in views/ directory.\n     */\n\n    // simplelogins\n\n    this.router.post(\n      '/auth/drivers-signup',\n      DriverSanitizer.validateSignUp,\n      DriverSanitizer.checkIfDriverExists,\n      DriverController.signup,\n    );\n    this.router.post(\n      '/auth/drivers-login',\n      DriverSanitizer.validateLogin,\n      DriverSanitizer.checkIfDriverIsBanned,\n      DriverController.login,\n    );\n    this.router.post('/auth/drivers-forgot_password', DriverController.passwordForgot);\n    this.router.get('/auth/drivers-confirmation/:id', DriverController.confirmationPost);\n    this.router.get('/auth/drivers-resend/:id', DriverController.resendTokenPost);\n\n    this.router.get('/auth/drivers-resetMyPassword/:id', DriverController.confirmResetPassword); //show form\n    this.router.post('/auth/drivers-resetpassword', DriverController.changePasswordTrigger);\n\n    this.router.get('/drivers-logout', function(req, res) {\n      req.logout();\n      res.redirect('/');\n    });\n\n    this.router.get(\n      '/drivers-profile/update/:id',\n      TokenVerification.userAuthentication,\n      DriverController.showProfile,\n    );\n\n    this.router.post(\n      '/drivers-profile/update/:id',\n      TokenVerification.userAuthentication,\n      DriverSanitizer.validateSignUp,\n      DriverController.updateProfile,\n    );\n\n    this.router.get(\n      '/drivers-assigned-user-trips/:id',\n      TokenVerification.userAuthentication,\n      DriverController.getDriversAssignedTrips,\n    );\n\n    this.router.get(\n      '/drivers-assigned-cars/:id',\n      TokenVerification.userAuthentication,\n      DriverController.getAssignedDriverToCars,\n    );\n\n    this.router.post(\n      '/drivers-sos',\n      TokenVerification.userAuthentication,\n      // SubmitEventValidator.validateSubmit,\n      DriverController.createRedFlag,\n    );\n\n    this.router.get(\n      '/drivers-sos/:id/users',\n      TokenVerification.userAuthentication,\n      // SubmitEventValidator.validateSubmit,\n      DriverController.usersRedflags,\n    );\n\n    this.router.post(\n      '/drivers-notifications',\n      TokenVerification.userAuthentication,\n      DriverController.sendNotifications,\n    );\n\n    this.router.get(\n      '/drivers-notifications/:id',\n      TokenVerification.userAuthentication,\n      DriverController.getNotifications,\n    );\n\n    //  this.router.post('/drivers-notification',\n    //   TokenVerification.userAuthentication,\n    //    //DriverSanitizer.checkIfUserDoesntExists,\n    //   DriverController.makeNotification\n    //   );\n    //  this.router.get('/drivers-notification/:id',\n    //   TokenVerification.userAuthentication,\n    //   DriverController.getUserNotification\n    //   );\n\n    //  //drivers\n    //  this.router.get('/confirm-booking-request',\n    //   //TokenVerification.userAuthentication,\n    //   DriverController.driverConfirmBooking\n    // );\n\n    // //update driver socket id\n    // this.router.put(\"/driverLocationSocket/:id\", function(req, res, next){\n    //   var io = req.app.io;\n    //   if(!req.body){\n    //     res.status(400);\n    //     res.json({\n    //       \"error\":\"Bad Data\"\n    //     });\n    //   } else {\n    //     console.log(req.params.id)\n    //     DriverModel.updateOne({id:req.params.id},\n    //       {$set: {socketId:req.body.socketId}}, function(err, updateDetails) {\n    //         if(err){\n    //           res.send(err);\n    //         }else{\n    //           console.log(updateDetails )\n    //           res.send(updateDetails);\n    //         }\n    //     });\n    //   }\n    // });\n\n    // //get nearby driver\n    // this.router.get(\"/driverLocation/:latitude/:longitude\", function (req, res, next) {\n    //   //DriverModel.ensureIndex({\"coordinate\": \"2dsphere\"});\n    //   DriverModel.find({\n    //     \"location\": {\n    //      \"$near\": {\n    //       \"$maxDistance\": 1000,\n    //       \"$geometry\": {\n    //        \"type\": \"Point\",\n    //        \"coordinates\": [parseFloat(req.params.latitude), parseFloat(request.params.longitude)]\n    //       }\n    //      }\n    //     }\n    //    }, function (err, location) {\n    //           if (err) {\n    //             res.send(err);\n    //           } else {\n    //             res.send(location);\n    //           }\n    //         });\n    // });\n\n    // //Get Single Driver and emit track by user to driver\n    // this.router.get(\"/driverLocation/:id\", function (req, res, next) {\n    //   var io = req.app.io;\n    //   DriverModel.findOne({ driverId: req.params.id }, function (err, location) {\n    //     if (err) {\n    //       res.send(err);\n    //     }\n    //     res.send(location);\n    //     io.emit(\"trackDriver\", location);\n    //   });\n    // });\n\n    // //Update Location by driver to user\n    // this.router.put(\"/driverLocation/:id\", function (req, res, next) {\n    //   var io = req.app.io;\n    //   var location = req.body;\n    //   var latitude = parseFloat(location.latitude);\n    //   var longitude = parseFloat(location.longitude);\n    //   if (!location) {\n    //     res.status(400);\n    //     res.json({\n    //       \"error\": \"Bad Data\"\n    //     });\n    //   } else {\n    //     DriverModel.update({ _id: req.params.id }, {\n    //       $set: {\n    //         socketId: location.socketId,\n    //         coordinate: {\n    //           \"type\": \"Point\",\n    //           coordinates: [\n    //             longitude,\n    //             latitude\n    //           ]\n    //         }\n    //       }\n    //     }, function (err, updateDetails) {\n    //       if (err) {\n    //         console.log(updateDetails);\n    //         res.send(err);\n    //       }\n    //       if (updateDetails) {\n\n    //         //Get updated location\n    //         db.driversLocation.findOne({ _id: mongojs.ObjectId(req.params.id) }, function (error, updatedLocation) {\n    //           if (error) {\n    //             res.send(error);\n    //           }\n    //           res.send(updatedLocation);\n    //           io.emit(\"action\", {\n    //             type: \"UPDATE_DRIVER_LOCATION\",\n    //             payload: updatedLocation\n    //           });\n    //         });\n    //       }\n    //     });\n    //   }\n    // });\n\n    return this.router;\n  }\n}\nexport default DriversRoutes;\n"],"file":"driver_routes.js"}