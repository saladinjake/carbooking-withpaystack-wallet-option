{"version":3,"sources":["../../../../../server/dynamic_server/mongo_api/api/services/aws_uploads.js"],"names":["aws","require","multer","multerS3","fs","dotenv","config","update","secretAccessKey","process","env","AWS_SECRET_ACCESS_KEY","accessKeyId","AWS_ACCESS_KEY_ID","region","s3","S3","fileFilter","req","file","cb","mimetype","Error","upload","storage","acl","bucket","metadata","fieldName","key","Date","now","toString","uploadFile","fileName","fileContent","readFileSync","params","Bucket","Key","ContentType","Body","err","data","console","log","Location","module","exports"],"mappingsd;AACA,IAAMG,EAAE,2BAAGH,OAAO,CAAC,IAAD,CAAV,CAAR;AAEA,IAAMI,MAAM,2BAAGJ,OAAO,CAAC,QAAD,CAAV,CAAZ;;AACAI,MAAM,CAACC,MAAP;;AAEAN,GAAG,CAACM,MAAJ,CAAWC,MAAX,CAAkB;AAChBC,EAAAA,eAAe,EAAEC,OAAO,CAACC,GAAR,CAAYC,qBADb;AAEhBC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG,iBAFT;AAGhBC,EAAAA,MAAM,EAAE;AAHQ,CAAlB;AAMA,IAAMC,EAAE,2BAAG,IAAIf,GAAG,CAACgB,EAAR,EAAH,CAAR;;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAMC,IAAN,EAAYC,EAAZ,EAAmB;AAAA;AAAA;;AACpC,MAAI,2BAAAD,IAAI,CAACE,QAAL,KAAkB,YAAlB,gCAAkCF,IAAI,CAACE,QAAL,KAAkB,WAApD,CAAJ,EAAqE;AAAA;AAAA;AACnED,IAAAA,EAAE,CAAC,IAAD,EAAO,IAAP,CAAF;AACD,GAFD,MAEO;AAAA;AAAA;AACLA,IAAAA,EAAE,CAAC,IAAIE,KAAJ,CAAU,kDAAV,CAAD,EAAgE,KAAhE,CAAF;AACD;AACF,CAND;;AAQA,IAAMC,MAAM,4BAAGrB,MAAM,CAAC;AACpBe,EAAAA,UAAU,EAAVA,UADoB;AAEpBO,EAAAA,OAAO,EAAErB,QAAQ,CAAC;AAChBsB,IAAAA,GAAG,EAAE,aADW;AAEhBV,IAAAA,EAAE,EAAFA,EAFgB;AAIhBW,IAAAA,MAAM,EAAE,gBAJQ;AAKhBC,IAAAA,QAAQ,EAAE,kBAAUT,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AAAA;AAAA;AACjCA,MAAAA,EAAE,CAAC,IAAD,EAAO;AAACQ,QAAAA,SAAS,EAAE;AAAZ,OAAP,CAAF;AACD,KAPe;AAQhBC,IAAAA,GAAG,EAAE,aAAUX,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AAAA;AAAA;AAC5BA,MAAAA,EAAE,CAAC,IAAD,EAAOU,IAAI,CAACC,GAAL,GAAWC,QAAX,EAAP,CAAF;AACD;AAVe,GAAD;AAFG,CAAD,CAAT,CAAZ,C,CAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAGA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAc;AAAA;AAC7B;AACA,MAAMC,WAAW,4BAAG/B,EAAE,CAACgC,YAAH,CAAgBF,QAAhB,CAAH,CAAjB,CAF6B,CAI7B;;AAGA,MAAMG,MAAM,4BAAG;AACXC,IAAAA,MAAM,EAAE,gBADG;AAEXC,IAAAA,GAAG,EAAE,cAFM;AAGXC,IAAAA,WAAW,EAAE,YAHF;AAGgB;AAC3BC,IAAAA,IAAI,EAAEN;AAJK,GAAH,CAAZ,CAP6B,CAc7B;;AAd6B;AAe7BpB,EAAAA,EAAE,CAACQ,MAAH,CAAUc,MAAV,EAAkB,UAASK,GAAT,EAAcC,IAAd,EAAoB;AAAA;AAAA;;AAClC,QAAID,GAAJ,EAAS;AAAA;AAAA;AACL,YAAMA,GAAN;AACH,KAFD;AAAA;AAAA;;AADkC;AAIlCE,IAAAA,OAAO,CAACC,GAAR,uCAA2CF,IAAI,CAACG,QAAhD;AACH,GALD;AAMH,CArBD;;;AAyBAC,MAAM,CAACC,OAAP,GAAkBf,UAAlB","sourcesContent":["const aws = require('aws-sdk');\nconst multer = require('multer');\nconst multerS3 = require('multer-s3');\nconst fs = require(\"fs\")\n\nconst dotenv = require(\"dotenv\");\ndotenv.config()\n\naws.config.update({\n  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n  accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n  region: 'us-east-1'\n});\n\nconst s3 = new aws.S3();\n\nconst fileFilter = (req, file, cb) => {\n  if (file.mimetype === 'image/jpeg' || file.mimetype === 'image/png') {\n    cb(null, true);\n  } else {\n    cb(new Error('Invalid file type, only JPEG and PNG is allowed!'), false);\n  }\n}\n\nconst upload = multer({\n  fileFilter,\n  storage: multerS3({\n    acl: 'public-read',\n    s3,\n\n    bucket: 'commute-bucket',\n    metadata: function (req, file, cb) {\n      cb(null, {fieldName: 'TESTING_METADATA'});\n    },\n    key: function (req, file, cb) {\n      cb(null, Date.now().toString())\n    }\n  })\n});\n\n\n\n// const uploadFile = () => {\n//   const fileName = 'create-ticket.jpg';\n//   fs.readFile(fileName, (err, data) => {\n//      if (err) throw err;\n//      const params = {\n//          Bucket: 'commute-bucket', // pass your bucket name\n//          Key: 'create-ticket.jpg', // file will be saved as commute-bucket/contacts.csv\n//          Body: JSON.stringify(data, null, 2)\n//      };\n//      s3.upload(params, function(s3Err, data) {\n//          if (s3Err) { throw s3Err; }\n//          console.log(`File uploaded successfully at ${data.Location}`)\n//      });\n//   });\n// };\n\n\nconst uploadFile = (fileName) => {\n    // read content from the file\n    const fileContent = fs.readFileSync(fileName);\n\n    // setting up s3 upload parameters\n\n\n    const params = {\n        Bucket: 'commute-bucket',\n        Key: 'avatar-1.jpg',\n        ContentType: 'image/jpeg', // file name you want to save as\n        Body: fileContent\n    };\n\n    // Uploading files to the bucket\n    s3.upload(params, function(err, data) {\n        if (err) {\n            throw err\n        }\n        console.log(`File uploaded successfully. ${data.Location}`)\n    });\n};\n\n\n\nmodule.exports =  uploadFile;"],"file":"aws_uploads.js"}