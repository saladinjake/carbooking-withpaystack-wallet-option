{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/api/api_uploads.js"],"names":["aws","require","dotenv","config","uploadFile","update","secretAccessKey","process","env","AWS_SECRET_ACCESS_KEY","accessKeyId","AWS_ACCESS_KEY_ID","region","S3_BUCKET","ApiUploads","router","get","req","res","s3","S3","fileName","query","fileType","s3Params","Bucket","Key","ContentType","getSignedUrl","err","data","console","log","end","returnData","signedRequest","url","write","JSON","stringify","put","post","body","files"],"mappings":"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","sourcesContent":["import UserController from '../controllers/user_controller';\nimport multer from 'multer';\nconst aws = require('aws-sdk');\nimport dotenv from 'dotenv';\ndotenv.config();\n// const aws_upload = require('./services/aws_uploads').upload;\n//const singleUpload = aws_upload.single('image');\nconst uploadFile = require('./services/aws_uploads');\n\n\n\n/*\n * Configure the AWS region of the target bucket.\n * Remember to change this to the relevant region.\n */\n\n\naws.config.update({\n  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n  accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n  region: 'us-east-1'\n});\n\n//aws.config.region = 'eu-west-1';\n\n/*\n * Load the S3 information from the environment variables.\n */\nconst S3_BUCKET = 'commute-bucket'//process.env.S3_BUCKET;\n\nclass ApiUploads {\n  constructor(router) {\n    this.router = router;\n  }\n  attachRoutes() {\n    // this.router.post('/image/uploads', UserController.handleImageUpload);\n    // this.router.post('/video/uploads', UserController.handleVideoUpload);\n    //this.router.post('/image/profile/avater', upload.single('image-upload'), function (req, res, next) {\n      //console.log(\"testing..\")\n  // The network path after file upload is spliced.\n       \n  // });\n\n\n\n/*\n * Respond to GET requests to /sign-s3.\n * Upon request, return JSON containing the temporarily-signed S3 request and\n * the anticipated URL of the image.\n */\n    this.router.get('/sign-s3', (req, res) => {\n      const s3 = new aws.S3();\n\n\n      const fileName = req.query['file-name'];\n      const fileType = req.query['file-type'];\n      const s3Params = {\n        Bucket: S3_BUCKET,\n        Key: fileName,\n        //Expires: 60,\n        ContentType: fileType,\n        //ACL: 'public-read'\n      };\n\n      s3.getSignedUrl('putObject', s3Params, (err, data) => {\n        if(err){\n          console.log(err);\n          return res.end();\n        }\n        const returnData = {\n          signedRequest: data,\n          url: `https://${S3_BUCKET}.s3.amazonaws.com/${fileName}`\n        };\n        res.write(JSON.stringify(returnData));\n        res.end();\n      });\n    });\n\n\n\n    /*\n     * Respond to POST requests to /submit_form.\n     * This function needs to be completed to handle the information in\n     * a way that suits your application.\n     */\n    this.router.put('/save-details', (req, res) => {\n      // TODO: Read POSTed form data and do something useful\n    });\n\n\n\n\n\n\n  this.router.post('/image-upload',function(req, res) {\n     console.log(req.body.files)\n     uploadFile(req.body.files)\n  \n  });\n\n  }\n\n  \n}\n\nexport default ApiUploads;\n\n"],"file":"api_uploads.js"}