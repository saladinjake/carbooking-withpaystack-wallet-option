{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/transaction.model.js"],"names":["mongoose","require","crypto","moment","omitBy","isNil","Customer","masterAccount","masterAccountPassword","operations","transactionSchema","Schema","operation","type","String","required","accountNumber","ref","destinationAccountNumber","amount","Number","reference","timestamps","pre","save","next","wasNew","isNew","post","doc","findOne","currentCustomer","balance","toFixed","savedCustomer","fee","tempAmount","Math","abs","transFee","Transaction","_id","savedTransFee","getMasterAccount","savedMasterAccount","method","transform","transformed","fields","forEach","field","statics","list","page","perPage","options","find","sort","createdAt","skip","limit","exec","model","module","exports"],"mappingsd;AACA,IAAMC,MAAM,0BAAGD,OAAO,CAAC,QAAD,CAAV,CAAZ;AACA,IAAME,MAAM,0BAAGF,OAAO,CAAC,iBAAD,CAAV,CAAZ;;kCAC0BA,OAAO,CAAC,QAAD,C;IAAzBG,M,QAAAA,M;IAAQC,K,QAAAA,K;;AAChB,IAAMC,QAAQ,0BAAGL,OAAO,CAAC,sBAAD,CAAV,CAAd;;mCACiDA,OAAO,CAAC,gBAAD,C;IAAhDM,a,SAAAA,a;IAAeC,qB,SAAAA,qB;AAEvB;;;;;AAGA,IAAMC,UAAU,0BAAG,CAAC,SAAD,EAAY,YAAZ,EAA0B,UAA1B,EAAsC,KAAtC,CAAH,CAAhB;AAEA;;;;;AAIA,IAAMC,iBAAiB,0BAAG,IAAIV,QAAQ,CAACW,MAAb,CAAoB;AAC5CC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAEC,MADG;AAETC,IAAAA,QAAQ,EAAE,IAFD;AAGT,YAAMN;AAHG,GADiC;AAM5CO,EAAAA,aAAa,EAAE;AACbH,IAAAA,IAAI,EAAE,QADO;AAEbI,IAAAA,GAAG,EAAE,UAFQ;AAGbF,IAAAA,QAAQ,EAAE;AAHG,GAN6B;AAW5CG,EAAAA,wBAAwB,EAAE;AACxBL,IAAAA,IAAI,EAAE,QADkB;AAExBI,IAAAA,GAAG,EAAE;AAFmB,GAXkB;AAe5CE,EAAAA,MAAM,EAAE;AACNN,IAAAA,IAAI,EAAEO,MADA;AAEN,eAAS,CAFH;AAGNL,IAAAA,QAAQ,EAAE;AAHJ,GAfoC;AAoB5CM,EAAAA,SAAS,EAAE;AACTR,IAAAA,IAAI,EAAEC;AADG;AApBiC,CAApB,EAuBvB;AACDQ,EAAAA,UAAU,EAAE;AADX,CAvBuB,CAAH,CAAvB;AA8BA;;;;;;;;AAOAZ,iBAAiB,CAACa,GAAlB,CAAsB,MAAtB,EAA8B,SAAeC,IAAf,CAAoBC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5B,eAAKC,MAAL,GAAc,KAAKC,KAAnB;AAD4B;AAAA,2CAErBF,IAAI,EAFiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA9B;;AAMAf,iBAAiB,CAACkB,IAAlB,CAAuB,MAAvB,EAA+B,SAAeJ,IAAf,CAAoBK,GAApB,EAAyBJ,IAAzB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,eAExB,KAAKC,MAFmB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,0CAGKpB,QAAQ,CAACwB,OAAT,CAAiB;AAAE,6BAAiB,KAAKd;AAAxB,WAAjB,CAHL;;AAAA;AAGnBe,UAAAA,eAHmB;AAAA;AAIzBA,UAAAA,eAAe,CAACC,OAAhB,IAA2B,KAAKb,MAAhC;AAJyB;AAKzBY,UAAAA,eAAe,CAACC,OAAhB,GAA0BD,eAAe,CAACC,OAAhB,CAAwBC,OAAxB,CAAgC,CAAhC,CAA1B;AALyB;AAAA;AAAA,0CAMGF,eAAe,CAACP,IAAhB,EANH;;AAAA;AAMnBU,UAAAA,aANmB;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA,gBAWxB,+BAAKR,MAAL,+BAAe,KAAKd,SAAL,KAAmB,UAAlC,+BAAgD,KAAKO,MAAL,GAAc,CAA9D,CAXwB;AAAA;AAAA;AAAA;;AAAA;AAYrBgB,UAAAA,GAZqB,2BAYf,CAZe;AAarBC,UAAAA,UAbqB,2BAaRC,IAAI,CAACC,GAAL,CAAS,KAAKnB,MAAd,CAbQ;AAAA;;AAezB,cAAGiB,UAAU,IAAI,IAAjB,EAAsB;AAAA;AAAA;AACpBD,YAAAA,GAAG,GAAG,IAAKC,UAAU,GAAG,IAAxB;AACD,WAFD,MAEM;AAAA;AAAA;;AAAA,gBAAG,0BAAAA,UAAU,GAAG,IAAb,+BAAqBA,UAAU,IAAI,IAAnC,CAAH,EAA2C;AAAA;AAAA;AAC/CD,cAAAA,GAAG,GAAG,IAAKC,UAAU,GAAG,KAAxB;AACD,aAFK,MAEA;AAAA;AAAA;;AAAA,kBAAG,0BAAAA,UAAU,GAAG,IAAb,+BAAqBA,UAAU,IAAI,KAAnC,CAAH,EAA4C;AAAA;AAAA;AAChDD,gBAAAA,GAAG,GAAG,IAAKC,UAAU,GAAG,IAAxB;AACD,eAFK,MAEA;AAAA;AAAA;;AAAA,oBAAGA,UAAU,GAAG,KAAhB,EAAsB;AAAA;AAAA;AAC1BD,kBAAAA,GAAG,GAAG,IAAKC,UAAU,GAAG,IAAxB;AACD,iBAFK;AAAA;AAAA;AAEL;AAAA;AAAA;;AAvBwB;;AAAA,gBA0BtBD,GAAG,GAAG,CA1BgB;AAAA;AAAA;AAAA;;AAAA;AA2BjBI,UAAAA,QA3BiB,2BA2BN,IAAIC,WAAJ,EA3BM;AAAA;AA4BvBD,UAAAA,QAAQ,CAACpB,MAAT,GAAkB,CAACgB,GAAnB;AA5BuB;AA6BvBI,UAAAA,QAAQ,CAACpB,MAAT,GAAkBoB,QAAQ,CAACpB,MAAT,CAAgBc,OAAhB,CAAwB,CAAxB,CAAlB;AA7BuB;AA8BvBM,UAAAA,QAAQ,CAAC3B,SAAT,GAAqB,KAArB;AA9BuB;AA+BvB2B,UAAAA,QAAQ,CAACvB,aAAT,GAAyB,KAAKA,aAA9B;AA/BuB;AAgCvBuB,UAAAA,QAAQ,CAAClB,SAAT,GAAqB,0BAA0B,KAAKoB,GAApD;AAhCuB;AAAA;AAAA,0CAiCKF,QAAQ,CAACf,IAAT,EAjCL;;AAAA;AAiCjBkB,UAAAA,aAjCiB;AAAA;AAAA;AAAA,0CAmCKpC,QAAQ,CAACqC,gBAAT,EAnCL;;AAAA;AAmCjBpC,UAAAA,cAnCiB;AAAA;AAoCvBA,UAAAA,cAAa,CAACyB,OAAd,IAAyBU,aAAa,CAACvB,MAAvC;AApCuB;AAAA;AAAA,0CAqCUZ,cAAa,CAACiB,IAAd,EArCV;;AAAA;AAqCjBoB,UAAAA,kBArCiB;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,4CA2CpBnB,IAAI,EA3CgB;;AAAA;AAAA;AAAA;AAAA;AAAA,4CA6CpBA,IAAI,cA7CgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA/B;AAkDA;;;;;AAGAf,iBAAiB,CAACmC,MAAlB,CAAyB;AACvBC,EAAAA,SADuB,uBACX;AAAA;;AAAA;AACV,QAAMC,WAAW,2BAAG,EAAH,CAAjB;AACA,QAAMC,MAAM,2BAAG,CAAC,IAAD,EAAO,eAAP,EAAwB,0BAAxB,EAAoD,WAApD,EAAiE,QAAjE,EAA2E,WAA3E,EAAwF,WAAxF,CAAH,CAAZ;AAFU;AAIVA,IAAAA,MAAM,CAACC,OAAP,CAAe,UAACC,KAAD,EAAW;AAAA;AAAA;AACxBH,MAAAA,WAAW,CAACG,KAAD,CAAX,GAAqB,KAAI,CAACA,KAAD,CAAzB;AACD,KAFD;AAJU;AAQV,WAAOH,WAAP;AACD;AAVsB,CAAzB;AAcA;;;;;AAGArC,iBAAiB,CAACyC,OAAlB,GAA4B;AACxB;;;;;;;AAOAC,EAAAA,IARwB,uBAUrB;AAAA,2BADDC,IACC;AAAA,QADDA,IACC,sDADM,CACN;AAAA,8BADSC,OACT;AAAA,QADSA,OACT,yDADmB,EACnB;AAAA,QADuBtC,aACvB,SADuBA,aACvB;AAAA;AACD,QAAIuC,OAAO,2BAAGnD,MAAM,CAAC;AAAEY,MAAAA,aAAa,EAAbA;AAAF,KAAD,EAAoBX,KAApB,CAAT,CAAX;AADC;;AAED,QAAIW,aAAa,IAAIT,aAArB,EAAmC;AAAA;AAAA;AACjCgD,MAAAA,OAAO,GAAG;AAAC3C,QAAAA,SAAS,EAAE;AAAZ,OAAV;AACD,KAFD;AAAA;AAAA;;AAFC;AAMD,WAAO,KAAK4C,IAAL,CAAUD,OAAV,EACJE,IADI,CACC;AAAEC,MAAAA,SAAS,EAAE,CAAC;AAAd,KADD,EAEJC,IAFI,CAECL,OAAO,IAAID,IAAI,GAAG,CAAX,CAFR,EAGJO,KAHI,CAGEN,OAHF,EAIJO,IAJI,EAAP;AAKD;AArBuB,CAA5B;AA0BE,IAAMrB,WAAW,2BAAGxC,QAAQ,CAAC8D,KAAT,CAAe,aAAf,EAA8BpD,iBAA9B,CAAH,CAAjB;;AAEFqD,MAAM,CAACC,OAAP,GAAiBxB,WAAjB","sourcesContent":["const mongoose = require('mongoose');\nconst crypto = require('crypto');\nconst moment = require('moment-timezone');\nconst { omitBy, isNil } = require('lodash');\nconst Customer = require('../models/User.model');\nconst { masterAccount, masterAccountPassword } = require('../config/vars');\n\n/**\n* Indicates type of operation\n*/\nconst operations = ['deposit', 'withdrawal', 'transfer', 'fee'];\n\n/**\n * Transaction Schema\n * @private\n */\nconst transactionSchema = new mongoose.Schema({\n  operation: {\n    type: String,\n    required: true,\n    enum: operations,\n  },\n  accountNumber: {\n    type: 'Number',\n    ref: 'Customer',\n    required: true,\n  },\n  destinationAccountNumber: {\n    type: 'Number',\n    ref: 'Customer'\n  },\n  amount: {\n    type: Number,\n    default: 0,\n    required: true,\n  },\n  reference: {\n    type: String,\n  },\n}, {\n  timestamps: true,\n});\n\n\n\n\n/**\n * Add your\n * - pre-save hooks\n * - validations\n * - virtuals\n */\n\ntransactionSchema.pre('save', async function save(next) {\n  this.wasNew = this.isNew;\n  return next();\n});\n\n\ntransactionSchema.post('save', async function save(doc, next) {\n  try{\n    if(this.wasNew){\n      const currentCustomer = await Customer.findOne({ 'accountNumber': this.accountNumber });      \n      currentCustomer.balance += this.amount;\n      currentCustomer.balance = currentCustomer.balance.toFixed(2);      \n      const savedCustomer = await currentCustomer.save();     \n      \n    }\n\n\n    if(this.wasNew && this.operation === 'transfer' && this.amount < 0){\n      let fee = 0;\n      let tempAmount = Math.abs(this.amount);\n\n      if(tempAmount <= 1000){\n        fee = 8 + (tempAmount * 0.03);\n      }else if(tempAmount > 1000 && tempAmount <= 5000){\n        fee = 6 + (tempAmount * 0.025);\n      }else if(tempAmount > 5000 && tempAmount <= 10000){\n        fee = 4 + (tempAmount * 0.02);\n      }else if(tempAmount > 10000){\n        fee = 3 + (tempAmount * 0.01);\n      }\n      \n\n      if(fee > 0){\n        const transFee = new Transaction();\n        transFee.amount = -fee;\n        transFee.amount = transFee.amount.toFixed(2);\n        transFee.operation = 'fee';\n        transFee.accountNumber = this.accountNumber;\n        transFee.reference = 'fee_from_transaction:' + this._id;\n        const savedTransFee = await transFee.save();\n\n        const masterAccount = await Customer.getMasterAccount();   \n        masterAccount.balance -= savedTransFee.amount;\n        const savedMasterAccount = await masterAccount.save();\n\n      }\n\n    }\n\n    return next();\n  } catch (error) {\n    return next(error);\n  }\n\n});\n\n/**\n * Methods\n */\ntransactionSchema.method({\n  transform() {\n    const transformed = {};\n    const fields = ['id', 'accountNumber', 'destinationAccountNumber', 'operation', 'amount', 'reference', 'createdAt'];\n\n    fields.forEach((field) => {\n      transformed[field] = this[field];\n    });\n\n    return transformed;\n  },\n});\n\n\n/**\n * Statics\n */\ntransactionSchema.statics = { \n    /**\n     * List customers transactions in descending order of 'createdAt' timestamp.\n     *\n     * @param {number} skip - Number of transactions to be skipped.\n     * @param {number} limit - Limit number of transactions to be returned.\n     * @returns {Promise<Transaction[]>}\n     */\n    list({\n      page = 1, perPage = 30, accountNumber,\n    }) {\n      let options = omitBy({ accountNumber }, isNil);\n      if (accountNumber == masterAccount){\n        options = {operation: 'fee'};\n      }\n  \n      return this.find(options)\n        .sort({ createdAt: -1 })\n        .skip(perPage * (page - 1))\n        .limit(perPage)\n        .exec();\n    },\n  \n    \n  };\n\n  const Transaction = mongoose.model('Transaction', transactionSchema);\n  \nmodule.exports = Transaction;"],"file":"transaction.model.js"}