{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/UserPlan.model.js"],"names":["Promise","require","UserPlanSchema","mongoose","Schema","id","type","Number","plan_id","String","status","payment_status","user_id","plan_name","price","plan_category_name","duration","individual_id","coperate_id","itineries","Array","cars_on_plan","username","email","phone_number","has_updated","createdDateOfQuotation","Date","no_hours","created_at","now","updated_at","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addPlanToUser","user","callback","create","get","findOne","exec","then","plan","err","Error","reject","listPlan","skip","limit","find","sort","module","exports","model"],"mappings":"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","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from  'mongoose';\n\nlet UserPlanSchema = new mongoose.Schema({\n        id :{\n          type: Number,\n          default: 0\n        },\n        plan_id:{\n          type: String,\n      \n        },\n\n        status: {\n          type:String,\n          enum:[\n           'Unpaid',\n           'Paid',\n           'Failed',\n           'Ongoing',\n           'Pending',\n           'Completed'\n          ],\n          default: 'Unpaid',\n        },\n\n\n\n        payment_status:{\n          type:String,\n          default:'Unpaid'\n        },\n        user_id:{\n          type: String,\n          \n        },\n        plan_name: {\n          type: String,\n      \n        },\n        price:{\n          type:String,\n          default:'Awaiting  cost estimate',\n        },\n      \n\n        plan_category_name: {\n          type: String,\n          \n        },\n\n        duration:{\n          type:String\n        },\n\n        individual_id:{\n          type: Number,\n        },\n        coperate_id:{\n          type: Number,\n        },\n        itineries:{\n          type:Array,\n          default:[]\n        },\n        \n        cars_on_plan:{\n          type:Array,\n      \n        },\n        username:{\n          type:String\n         },\n\n         email:{\n          type:String\n         },\n         phone_number: {\n          type:String\n         },\n         has_updated: {\n          type: String,\n          enum:[\n           'Yes',\n           'No'\n          ],\n          default: 'No'\n         },\n\n         createdDateOfQuotation:{\n          type: Date,\n         },\n        // _car:{\n        //    type: mongoose.Schema.Types.ObjectId, \n        //    ref: 'CarModel' , \n        // },\n\n        // _plan:{\n        //    type: mongoose.Schema.Types.ObjectId, \n        //    ref: 'PlanModel' , \n        // },\n\n        // _user: {\n        //    type: mongoose.Schema.Types.ObjectId, \n        //    ref: 'UserModel' , \n          \n        //  },\n\n        //  _individual: {\n        //    type: mongoose.Schema.Types.ObjectId, \n        //    ref: 'IndividualPlanModel' , \n          \n        //  },\n\n        //  _coperate: {\n        //    type: mongoose.Schema.Types.ObjectId, \n        //    ref: 'CoperatePlanModel' , \n          \n        //  },\n        no_hours:{\n         type:String\n        },\n\n        created_at : {\n          type: Date,\n          default: Date.now\n        },\n        updated_at :{\n          type: Date,\n          default: Date.now\n        },\n       \n      },{\n        collection: 'userplans_collections',\n        timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' }\n});\n\nUserPlanSchema.set('toJSON', {getters: true, virtuals: true});\n\n\n\nUserPlanSchema.statics = {\n             // Add Intervention\n            addPlanToUser  (user, callback)  {\n              return this.create(user, callback);\n            },\n\n            get(id) {\n              return this.findOne(id)\n                .exec()\n                .then((plan) => {\n                  if (plan) {\n                    return plan;\n                  }\n                  const err = new Error('No such plan exists!');\n                  return Promise.reject(err);\n                });\n            },\n\n            \n            listPlan({ skip = 0, limit = 50 } = {}) {\n              return this.find()\n                .sort({ created_at: -1 })\n                .skip(+skip)\n                .limit(+limit)\n                .exec();\n            },\n\n       \n      }\n     \n\nmodule.exports = mongoose.model('UserPlanModel', UserPlanSchema);\n\n\n"],"file":"UserPlan.model.js"}