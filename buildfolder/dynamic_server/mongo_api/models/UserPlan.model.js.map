{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/UserPlan.model.js"],"names":["Promise","require","UserPlanSchema","mongoose","Schema","id","type","Number","plan_id","String","status","payment_status","user_id","plan_name","price","plan_category_name","duration","individual_id","coperate_id","itineries","Array","cars_on_plan","username","email","phone_number","has_updated","createdDateOfQuotation","Date","no_hours","created_at","now","updated_at","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addPlanToUser","user","callback","create","get","findOne","exec","then","plan","err","Error","reject","listPlan","skip","limit","find","sort","module","exports","model"],"mappings":"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","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from 'mongoose';\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\nlet UserPlanSchema = new mongoose.Schema(\n  {\n    id: {\n      type: Number,\n      default: 0,\n    },\n    plan_id: {\n      type: String,\n    },\n\n    status: {\n      type: String,\n      enum: ['Unpaid', 'Paid', 'Failed', 'Ongoing', 'Pending', 'Completed'],\n      default: 'Unpaid',\n    },\n\n    payment_status: {\n      type: String,\n      default: 'Unpaid',\n    },\n    user_id: {\n      type: String,\n    },\n    plan_name: {\n      type: String,\n    },\n    price: {\n      type: String,\n      default: 'Awaiting  cost estimate',\n    },\n\n    plan_category_name: {\n      type: String,\n    },\n\n    duration: {\n      type: String,\n    },\n\n    individual_id: {\n      type: Number,\n    },\n    coperate_id: {\n      type: Number,\n    },\n    itineries: {\n      type: Array,\n      default: [],\n    },\n\n    cars_on_plan: {\n      type: Array,\n    },\n    username: {\n      type: String,\n    },\n\n    email: {\n      type: String,\n    },\n    phone_number: {\n      type: String,\n    },\n    has_updated: {\n      type: String,\n      enum: ['Yes', 'No'],\n      default: 'No',\n    },\n\n    createdDateOfQuotation: {\n      type: Date,\n    },\n    // _car:{\n    //    type: mongoose.Schema.Types.ObjectId,\n    //    ref: 'CarModel' ,\n    // },\n\n    // _plan:{\n    //    type: mongoose.Schema.Types.ObjectId,\n    //    ref: 'PlanModel' ,\n    // },\n\n    // _user: {\n    //    type: mongoose.Schema.Types.ObjectId,\n    //    ref: 'UserModel' ,\n\n    //  },\n\n    //  _individual: {\n    //    type: mongoose.Schema.Types.ObjectId,\n    //    ref: 'IndividualPlanModel' ,\n\n    //  },\n\n    //  _coperate: {\n    //    type: mongoose.Schema.Types.ObjectId,\n    //    ref: 'CoperatePlanModel' ,\n\n    //  },\n    no_hours: {\n      type: String,\n    },\n\n    created_at: {\n      type: Date,\n      default: Date.now,\n    },\n    updated_at: {\n      type: Date,\n      default: Date.now,\n    },\n  },\n  {\n    collection: 'userplans_collections',\n    timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' },\n  },\n);\n\nUserPlanSchema.set('toJSON', { getters: true, virtuals: true });\n\nUserPlanSchema.statics = {\n  // Add Intervention\n  addPlanToUser(user, callback) {\n    return this.create(user, callback);\n  },\n\n  get(id) {\n    return this.findOne(id)\n      .exec()\n      .then(plan => {\n        if (plan) {\n          return plan;\n        }\n        const err = new Error('No such plan exists!');\n        return Promise.reject(err);\n      });\n  },\n\n  listPlan({ skip = 0, limit = 50 } = {}) {\n    return this.find()\n      .sort({ created_at: -1 })\n      .skip(+skip)\n      .limit(+limit)\n      .exec();\n  },\n};\n\nmodule.exports = mongoose.model('UserPlanModel', UserPlanSchema);\n"],"file":"UserPlan.model.js"}