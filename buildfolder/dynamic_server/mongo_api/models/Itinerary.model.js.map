{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/Itinerary.model.js"],"names":["Promise","require","ItinerarySchema","mongoose","Schema","id","type","Number","plan_id","String","plan_category","status","certificate_id","certificate_date","Date","user_id","assigned_driver_id","assigned_driver_name","assigned_driver_email","assigned_driver_phone","user_plan_id","start_location","destination","start_time","pickup_time","end_time","drive_option","travel_option","no_hours","drivingschool","_user","Types","ObjectId","ref","username","email","phone_number","has_received_quote","has_received_payments","created_at","now","updated_at","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addItinerary","user","callback","create","get","findOne","exec","then","plan","err","Error","reject","listPlan","skip","limit","find","sort","module","exports","model"],"mappings":"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","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from  'mongoose';\n\nlet ItinerarySchema = new mongoose.Schema({\n     \n        id :{\n          type: Number,\n          default: 0\n        },\n\n        plan_id: {\n          type: String\n        },\n        \n        plan_category:{\n          type: String\n        },\n\n        status:{\n          type:String,\n          default: \"Pending\"\n        },\n        certificate_id: {\n          type:String,\n          default: \"No date\"\n          \n        },\n        certificate_date:{\n          type:Date\n        },\n        user_id:{\n          type: String,\n        \n        },\n\n         assigned_driver_id:{\n          type:String,\n         }, \n\n         assigned_driver_name:{\n          type:String,\n         }, \n\n         assigned_driver_email: {\n          type:String,\n         }, \n         assigned_driver_phone: {\n          type:String,\n         },\n        user_plan_id: {\n           type: String,\n        \n        },\n        start_location:{\n          type: String\n         },\n        destination:{\n          type: String\n         },\n        start_time:{\n          type: Date\n         },\n\n         pickup_time:{\n          type:String\n         },\n        end_time:{\n          type: String\n         },\n        drive_option:{\n          type: String,\n          default: 'Driver Required'\n         },\n        travel_option:{\n          type:String,\n          default: 'intracity'\n        },\n        no_hours:{\n          type: String\n        },\n         drivingschool:{\n          type: String\n         },\n        _user: {\n           type: mongoose.Schema.Types.ObjectId, \n           ref: 'UserModel' , \n         },\n\n         username:{\n          type:String\n         },\n\n         email:{\n          type:String\n         },\n         phone_number: {\n          type:String\n         },\n         has_received_quote:{\n          type: String,\n          default:'No',\n         },\n         has_received_payments:{\n          type:String,\n          default:'No',\n         },\n\n         // status: {\n         //  type:String,\n         //  enum:[\"unpaid\",\"pending\",\"paid\"],\n         //  default: \"unprocessed\"\n         // },\n\n      \n        created_at : {\n          type: Date,\n          default: Date.now\n        },\n        updated_at :{\n          type: Date,\n          default: Date.now\n        },\n       \n      },{\n        collection: 'useritinerary_collections',\n        timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' }\n});\n\nItinerarySchema.set('toJSON', {getters: true, virtuals: true});\n\nItinerarySchema.statics = {\n             // Add Intervention\n            addItinerary(user, callback)  {\n              return this.create(user, callback);\n            },\n\n            get(id) {\n              return this.findOne(id)\n                .exec()\n                .then((plan) => {\n                  if (plan) {\n                    return plan;\n                  }\n                  const err = new Error('No such itinerary exists!');\n                  return Promise.reject(err);\n                });\n            },\n\n            \n            listPlan({ skip = 0, limit = 50 } = {}) {\n              return this.find()\n                .sort({ created_at: -1 })\n                .skip(+skip)\n                .limit(+limit)\n                .exec();\n            },\n\n       \n      }\n \nmodule.exports = mongoose.model('ItineraryModel', ItinerarySchema);\n\n\n"],"file":"Itinerary.model.js"}