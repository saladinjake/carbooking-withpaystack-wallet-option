{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/Repairs.model.js"],"names":["Promise","require","MechSchema","mongoose","Schema","id","type","Number","user_id","location","String","address","status","email","firstname","lastname","carbrand","description","images","Array","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addMech","user","callback","create","get","findOne","exec","then","err","Error","reject","listPlan","skip","limit","find","sort","created_at","module","exports","model"],"mappings":"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","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from  'mongoose';\n\nlet MechSchema = new mongoose.Schema({\n        id :{\n          type: Number,\n         \n          default: 0\n        },\n        user_id:{\n          type:Number\n        }, location:{\n          type: String\n        }, address:{\n          type:String\n        }, status:{\n          type: String,\n          enum: ['pending', 'resolved','denied',\"completed\"],\n          default:\"pending\"\n        }, email:{\n           type:String\n        }, firstname: {\n            type: String\n        }, lastname: {\n           type:String\n        }, carbrand:{\n           type:String\n        }, description:{\n           type:String\n        }, images:{\n            type:Array\n        },\n       \n      },{\n        collection: 'mech_collections',\n        timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' }\n});\n\nMechSchema.set('toJSON', {getters: true, virtuals: true});\n\n      \n      /**\n       * Statics\n       */\nMechSchema.statics = {\n             // Add Intervention\n            addMech(user, callback)  {\n              return this.create(user, callback);\n            },\n\n            get(id) {\n              return this.findOne(id)\n                .exec()\n                .then((user) => {\n                  if (user) {\n                    return user;\n                  }\n                  const err = new Error('No such mech request category exists!');\n                  return Promise.reject(err);\n                });\n            },\n\n            \n            listPlan({ skip = 0, limit = 50 } = {}) {\n              return this.find()\n                .sort({ created_at: -1 })\n                .skip(+skip)\n                .limit(+limit)\n                .exec();\n            },\n\n           \n      }\n\n     \n\nmodule.exports = mongoose.model('MechModel', MechSchema);\n\n\n\n\n\n"],"file":"Repairs.model.js"}