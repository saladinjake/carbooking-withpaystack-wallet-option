{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/Driver.model.js"],"names":["Promise","require","DriverSchema","mongoose","Schema","id","type","Number","firstname","String","lastname","identity_card","test_certificate","status","roles","isVerified","Boolean","is_active","avatar","car_assigned_name","Array","assigned_car_plate_number","assigned_driver_location","geometry","coordinates","index","location","socket_id","passwordResetToken","passwordResetExpires","Date","username","email","password","phone_number","is_admin","created_at","now","updated_at","googleProvider","token","select","facebookProvider","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","method","statics","addUser","user","callback","create","get","findOne","exec","then","err","Error","reject","listUsers","skip","limit","find","sort","upsertFbUser","accessToken","refreshToken","profile","cb","that","newUser","fullName","displayName","emails","value","save","error","savedUser","console","log","upsertGoogleUser","module","exports","model"],"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","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from  'mongoose';\n\n//const  SetUpUserMigrations = () =>{\n      /**\n       * User Schema\n       */\nlet DriverSchema = new mongoose.Schema({\n      id :{\n          type: Number, \n          default: 0\n      },\n      firstname: {\n          type: String,\n          \n      },\n      lastname : {\n          type: String,\n          \n      },\n      identity_card:{\n        type: String,\n        \n      },\n      test_certificate:{\n        type: String,\n        \n      },\n\n      status:{\n        type:String,\n        enum:[\n         \"Active\",\n         \"Dormant\",\n         \"Disabled\",\n         \"Suspended\"\n        ],\n        default: \"Active\"\n      },\n\n   \n\n      roles: { \n        type: String , \n       \n        default:'driver'\n            \n      },\n\n\n\n      isVerified: { \n          type: Boolean, \n    \n           default: false \n      },\n      is_active: {\n          type:String, \n          default: true\n      },\n      avatar:{\n        type: String\n      },\n\n      car_assigned_name: {\n        type: Array,\n      },\n\n      assigned_car_plate_number:{\n       type:String\n      },\n\n      assigned_driver_location:{\n          type: String,\n        },\n\n      geometry: {\n          coordinates: { type: [Number], index: '2dsphere'}\n      },\n\n      location: {\n       type: { type: String },\n       coordinates: []\n      },\n\n        socket_id: {\n          type: String\n        },\n  \n      passwordResetToken: { type: String},\n      passwordResetExpires: { type: Date },\n        // othernames : {\n        //   type: String,\n        //   required: true\n        // },\n        username : {\n          type: String,\n          \n        },\n        email : {\n          type: String,\n        \n        },\n        password :{\n          type: String,\n    \n        },\n        phone_number : {\n          type: String,\n        \n          //match: [/^[1-9][0-9]{9}$/, 'The value of path {PATH} ({VALUE}) is not a valid mobile number.']\n        },\n        is_admin: Boolean,\n        created_at : {\n          type: Date,\n          default: Date.now\n        },\n        updated_at :{\n          type: Date,\n          default: Date.now\n        },\n        \n        googleProvider: {\n            type: {\n                id: String,\n                token: String\n            },\n            select: false\n        },\n\n         facebookProvider: {\n            type: {\n                id: String,\n                token: String\n            },\n            select: false\n        }\n\n      },{\n        collection: 'driver_collections',\n        timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' }\n});\n\nDriverSchema.set('toJSON', {getters: true, virtuals: true});\n\nDriverSchema.index({ location: \"2dsphere\" });     \n      /**\n       * Methods\n       */\n      DriverSchema.method({\n      });\n\n      /**\n       * Statics\n       */\n      DriverSchema.statics = {\n             // Add Intervention\n            addUser  (user, callback)  {\n              return this.create(user, callback);\n            },\n\n            get(id) {\n              return this.findOne(id)\n                .exec()\n                .then((user) => {\n                  if (user) {\n                    return user;\n                  }\n                  const err = new Error('No such user exists!');\n                  return Promise.reject(err);\n                });\n            },\n\n            \n            listUsers({ skip = 0, limit = 50 } = {}) {\n              return this.find()\n                .sort({ created_at: -1 })\n                .skip(+skip)\n                .limit(+limit)\n                .exec();\n            },\n\n            \n        upsertFbUser(accessToken, refreshToken, profile, cb) {\n            var that = this;\n            return this.findOne({\n                'facebookProvider.id': profile.id\n            }, function(err, user) {\n                // no user was found, lets create a new one\n                if (!user) {\n                    var newUser = new that({\n                        fullName: profile.displayName,\n                        email: profile.emails[0].value,\n                        facebookProvider: {\n                            id: profile.id,\n                            token: accessToken\n                        }\n                    });\n\n                    newUser.save(function(error, savedUser) {\n                        if (error) {\n                            console.log(error);\n                        }\n                        return cb(error, savedUser);\n                    });\n                } else {\n                    return cb(err, user);\n                }\n            });\n        },\n\n        upsertGoogleUser(accessToken, refreshToken, profile, cb) {\n            var that = this;\n            return this.findOne({\n                'googleProvider.id': profile.id\n            }, function(err, user) {\n                // no user was found, lets create a new one\n                if (!user) {\n                    var newUser = new that({\n                        fullName: profile.displayName,\n                        email: profile.emails[0].value,\n                        googleProvider: {\n                            id: profile.id,\n                            token: accessToken\n                        }\n                    });\n\n                    newUser.save(function(error, savedUser) {\n                        if (error) {\n                            console.log(error);\n                        }\n                        return cb(error, savedUser);\n                    });\n                } else {\n                    return cb(err, user);\n                }\n            });\n        },\n      }\n\n     \n\nmodule.exports = mongoose.model('DriverModel', DriverSchema);\n\n\n"],"file":"Driver.model.js"}