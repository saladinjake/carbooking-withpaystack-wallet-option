{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/Cars.model.js"],"names":["Promise","require","CarsSchema","mongoose","Schema","id","type","Number","hasBeenRevoked","Boolean","car","Object","manufacturer","String","carModel","carYear","vehicleColor","plateNo","inspectionDate","Date","inspectionTime","confirmedInspectionDate","confirmedInspectionTime","creator","Types","ObjectId","ref","carDescription","imagePath","date_created","now","car_type","car_year","color","model","model_make_id","license","partner_id","partnerEmail","vehicleIdentificationNumber","car_status","health_status","status","images","description","inspection_detail","assigned_driver_name","assigned_driver_email","assigned_driver_location","socket_id","assigned_driver_phone","assigned_driver_id","plate_number","isOwnedByCompany","created_at","updated_at","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addCars","user","callback","create","get","findOne","exec","then","err","Error","reject","listCars","skip","limit","find","sort","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from 'mongoose';\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\nlet CarsSchema = new mongoose.Schema(\n  {\n    id: {\n      type: Number,\n\n      default: 0,\n    },\n\n    hasBeenRevoked: {\n      type: Boolean,\n      default: false,\n    },\n\n    car: {\n      type: Object,\n    },\n    manufacturer: {\n      type: String,\n    },\n    carModel: {\n      type: String,\n    },\n    carYear: {\n      type: String,\n    },\n    vehicleColor: {\n      type: String,\n    },\n    plateNo: {\n      type: String,\n    },\n    inspectionDate: {\n      type: String,\n      default: new Date(),\n    },\n    inspectionTime: {\n      type: String,\n      default: '10.00 AM',\n    },\n\n    confirmedInspectionDate: {\n      type: String,\n      default: new Date(),\n    },\n    confirmedInspectionTime: {\n      type: String,\n      default: '10.00 AM',\n    },\n    creator: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'users',\n    },\n\n    carDescription: {\n      // required: false,\n      type: String,\n    },\n    imagePath: {\n      type: String,\n    },\n\n    date_created: {\n      type: Date,\n      default: Date.now,\n    },\n    car_type: {\n      type: String,\n      // required:true\n    },\n    car_year: {\n      type: String,\n      // required:true\n    },\n    color: {\n      type: String,\n      // required: true\n    },\n    model: {\n      type: String,\n      // required: true\n    },\n    model_make_id: {\n      type: String,\n    },\n    license: {\n      type: String,\n    },\n\n    partner_id: {\n      type: String,\n    },\n\n    partnerEmail: {\n      type: String,\n    },\n\n    vehicleIdentificationNumber: {\n      type: String,\n    },\n\n    car_status: {\n      type: String,\n      enum: ['Active', 'Disabled', 'Suspended'],\n      default: 'Active',\n    },\n\n    //Inspection Status\n    health_status: {\n      type: String,\n      enum: ['Completed', 'Pending'],\n      default: 'Pending',\n    },\n    //booking status\n    status: {\n      type: String,\n      enum: [\n        'Booked',\n        'Available',\n        'Pending', //added\n      ],\n      default: 'Pending',\n    },\n    images: {\n      type: String,\n      // required: true\n    },\n\n    description: {\n      type: String,\n      default: 'No description',\n    },\n    inspection_detail: {\n      type: String,\n    },\n\n    assigned_driver_name: {\n      type: String,\n    },\n\n    assigned_driver_email: {\n      type: String,\n    },\n\n    assigned_driver_location: {\n      type: String,\n    },\n\n    socket_id: {\n      type: String,\n    },\n    assigned_driver_phone: {\n      type: String,\n    },\n\n    assigned_driver_id: {\n      type: String,\n    },\n\n    plate_number: {\n      type: String,\n      // required: true\n    },\n\n    isOwnedByCompany: { type: Boolean, default: false },\n\n    created_at: {\n      type: Date,\n      default: Date.now,\n    },\n    updated_at: {\n      type: Date,\n      default: Date.now,\n    },\n  },\n  {\n    collection: 'cars_collections',\n    timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' },\n  },\n);\n\nCarsSchema.set('toJSON', { getters: true, virtuals: true });\n\n/**\n * Statics\n */\nCarsSchema.statics = {\n  // Add Intervention\n  addCars(user, callback) {\n    return this.create(user, callback);\n  },\n\n  get(id) {\n    return this.findOne(id)\n      .exec()\n      .then(user => {\n        if (user) {\n          return user;\n        }\n        const err = new Error('No such user exists!');\n        return Promise.reject(err);\n      });\n  },\n\n  listCars({ skip = 0, limit = 50 } = {}) {\n    return this.find()\n      .sort({ created_at: -1 })\n      .skip(+skip)\n      .limit(+limit)\n      .exec();\n  },\n};\n\nmodule.exports = mongoose.model('CarsModel', CarsSchema);\n"],"file":"Cars.model.js"}