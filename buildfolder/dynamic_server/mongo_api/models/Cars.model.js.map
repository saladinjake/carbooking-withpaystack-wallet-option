{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/Cars.model.js"],"names":["Promise","require","CarsSchema","mongoose","Schema","id","type","Number","car_type","String","required","car_year","color","model","model_make_id","license","partner_id","status","images","description","inspection_detail","assigned_driver_name","assigned_driver_email","assigned_driver_location","socket_id","assigned_driver_phone","assigned_driver_id","plate_number","isOwnedByCompany","Boolean","created_at","Date","now","updated_at","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addCars","user","callback","create","get","findOne","exec","then","err","Error","reject","listCars","skip","limit","find","sort","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from  'mongoose';\n\nlet CarsSchema = new mongoose.Schema({\n        id :{\n          type: Number,\n         \n          default: 0\n        },\n        car_type:{\n          type: String,\n          required:true\n        },\n        car_year:{\n          type: String,\n          required:true\n        },\n        color:{\n          type: String,\n          // required: true\n        },\n        model: {\n          type: String,\n          // required: true\n        },\n        model_make_id:{\n          type:String,\n        },\n        license:{\n          type:String,\n        },\n        \n        partner_id:{\n          type: String\n        },\n        status:{\n          type:String,\n          enum:[\n           'Booked',\n           'Available',\n           'UnAvailable',\n           'Active'\n          ]\n        },\n        images: {\n          type: String,\n          // required: true\n        },\n\n        description: {\n          type:String,\n          default: \"No description\"\n        },\n        inspection_detail:{\n          type:String\n        },\n\n        assigned_driver_name: {\n          type: String\n          \n        },\n\n        assigned_driver_email:{\n          type:String\n        },\n\n        assigned_driver_location:{\n          type: String,\n        },\n\n        socket_id: {\n          type: String\n        },\n        assigned_driver_phone: {\n          type:String\n        },\n\n        assigned_driver_id: {\n          type: String,\n        },\n\n\n\n        plate_number : {\n          type: String,\n          // required: true\n        },\n        \n       isOwnedByCompany: { type: Boolean, default: false },\n  \n        created_at : {\n          type: Date,\n          default: Date.now\n        },\n        updated_at :{\n          type: Date,\n          default: Date.now\n        },\n       \n      },{\n        collection: 'cars_collections',\n        timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' }\n});\n\nCarsSchema.set('toJSON', {getters: true, virtuals: true});\n\n      \n      /**\n       * Statics\n       */\nCarsSchema.statics = {\n             // Add Intervention\n            addCars  (user, callback)  {\n              return this.create(user, callback);\n            },\n\n            get(id) {\n              return this.findOne(id)\n                .exec()\n                .then((user) => {\n                  if (user) {\n                    return user;\n                  }\n                  const err = new Error('No such user exists!');\n                  return Promise.reject(err);\n                });\n            },\n\n            \n            listCars({ skip = 0, limit = 50 } = {}) {\n              return this.find()\n                .sort({ created_at: -1 })\n                .skip(+skip)\n                .limit(+limit)\n                .exec();\n            },\n\n           \n      }\n\n     \n\nmodule.exports = mongoose.model('CarsModel', CarsSchema);\n\n\n"],"file":"Cars.model.js"}