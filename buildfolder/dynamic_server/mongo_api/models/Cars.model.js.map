{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/Cars.model.js"],"names":["Promise","require","CarsSchema","mongoose","Schema","id","type","Number","hasBeenRevoked","Boolean","car","Object","manufacturer","String","carModel","carYear","vehicleColor","plateNo","inspectionDate","Date","inspectionTime","confirmedInspectionDate","confirmedInspectionTime","creator","Types","ObjectId","ref","carDescription","imagePath","date_created","now","car_type","car_year","color","model","model_make_id","license","partner_id","partnerEmail","vehicleIdentificationNumber","car_status","health_status","status","images","description","inspection_detail","assigned_driver_name","assigned_driver_email","assigned_driver_location","socket_id","assigned_driver_phone","assigned_driver_id","plate_number","isOwnedByCompany","created_at","updated_at","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addCars","user","callback","create","get","findOne","exec","then","err","Error","reject","listCars","skip","limit","find","sort","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from  'mongoose';\n\nlet CarsSchema = new mongoose.Schema({\n        id :{\n          type: Number,\n         \n          default: 0\n        },\n\n        hasBeenRevoked:{\n          type:Boolean,\n          default: false,\n        },\n\n        car: {\n    type: Object\n  },\n  manufacturer: {\n    type: String,\n    \n  },\n  carModel: {\n    type: String,\n    \n  },\n  carYear: {\n    type: String,\n    \n  },\n  vehicleColor: {\n    type: String,\n    \n  },\n  plateNo: {\n    \n    type: String\n  },\n  inspectionDate: {\n    type: String,\n    default: new Date()\n    \n  },\n  inspectionTime: {\n    type: String,\n    default:'10.00 AM'\n    \n  },\n  \n\n  confirmedInspectionDate: {\n    type: String,\n    default: new Date()\n  },\n  confirmedInspectionTime: {\n     type: String,\n    default:'10.00 AM'\n  },\n  creator: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: \"users\",\n    \n  },\n\n\n  carDescription: {\n    // required: false,\n    type: String\n  },\n  imagePath: {\n    type: String\n  },\n  \n  date_created: {\n    type: Date,\n    default: Date.now\n  },\n        car_type:{\n          type: String,\n          // required:true\n        },\n        car_year:{\n          type: String,\n          // required:true\n        },\n        color:{\n          type: String,\n          // required: true\n        },\n        model: {\n          type: String,\n          // required: true\n        },\n        model_make_id:{\n          type:String,\n        },\n        license:{\n          type:String,\n        },\n        \n        partner_id:{\n          type: String\n        },\n\n        partnerEmail:{\n          type:String,\n        },\n\n        vehicleIdentificationNumber: {\n          type: String,\n        },\n\n      \n       car_status:{\n        type:String,\n          enum:[\n           'Active',\n           'Disabled',\n           'Suspended'\n          ],\n          default:'Active'\n\n       },\n\n\n        //Inspection Status \n        health_status:{\n          type:String,\n          enum:[\n           \n           'Completed',\n           'Pending'\n          ],\n          default:'Pending'\n        },\n        //booking status\n        status:{\n          type:String,\n          enum:[\n           'Booked',\n           'Available',\n           \n          ],\n          default:'Pending'\n        },\n        images: {\n          type: String,\n          // required: true\n        },\n\n        description: {\n          type:String,\n          default: \"No description\"\n        },\n        inspection_detail:{\n          type:String\n        },\n\n        assigned_driver_name: {\n          type: String\n          \n        },\n\n        assigned_driver_email:{\n          type:String\n        },\n\n        assigned_driver_location:{\n          type: String,\n        },\n\n        socket_id: {\n          type: String\n        },\n        assigned_driver_phone: {\n          type:String\n        },\n\n        assigned_driver_id: {\n          type: String,\n        },\n\n\n\n        plate_number : {\n          type: String,\n          // required: true\n        },\n        \n       isOwnedByCompany: { type: Boolean, default: false },\n  \n        created_at : {\n          type: Date,\n          default: Date.now\n        },\n        updated_at :{\n          type: Date,\n          default: Date.now\n        },\n       \n      },{\n        collection: 'cars_collections',\n        timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' }\n});\n\nCarsSchema.set('toJSON', {getters: true, virtuals: true});\n\n      \n      /**\n       * Statics\n       */\nCarsSchema.statics = {\n             // Add Intervention\n            addCars  (user, callback)  {\n              return this.create(user, callback);\n            },\n\n            get(id) {\n              return this.findOne(id)\n                .exec()\n                .then((user) => {\n                  if (user) {\n                    return user;\n                  }\n                  const err = new Error('No such user exists!');\n                  return Promise.reject(err);\n                });\n            },\n\n            \n            listCars({ skip = 0, limit = 50 } = {}) {\n              return this.find()\n                .sort({ created_at: -1 })\n                .skip(+skip)\n                .limit(+limit)\n                .exec();\n            },\n\n           \n      }\n\n     \n\nmodule.exports = mongoose.model('CarsModel', CarsSchema);\n\n\n"],"file":"Cars.model.js"}