{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/User.model.js"],"names":["Promise","require","httpStatus","omitBy","isNil","APIError","autoIncrement","env","jwtSecret","jwtExpirationInterval","masterAccount","masterAccountPassword","uuidv4","initialize","db","getInstance","getEstablishedConnection","roles","UserSchema","mongoose","Schema","id","type","Number","firstname","String","fb_id","google_id","ratings_average","status","user_type","plan_name","lastname","for_users","Boolean","usergroup_set","Array","test_certificate","test_center","test_center_address","isVerified","is_active","avatar","notification_count","balance","old_balance","view_payments","view_transactions","view_quotations","view_cars","view_drivers","view_partners","view_sos","view_package","view_bookings","view_tickets","view_faqs","view_settings","view_users","view_admins","view_car_inspection","view_drive_test","manage_payments","manage_transactions","manage_quotations","manage_cars","manage_drivers","manage_partners","manage_sos","manage_package","manage_bookings","manage_tickets","manage_faqs","manage_settings","manage_users","manage_admins","manage_car_inspection","manage_drive_test","passwordResetToken","passwordResetExpires","Date","username","email","password","phone_number","is_admin","created_at","now","updated_at","facebook","token","name","google","amount","reference","identity_card","car_assigned_name","assigned_car_plate_number","assigned_driver_location","geometry","coordinates","index","location","socket_id","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","method","transform","transformed","fields","forEach","field","statics","transformBalance","user","addUser","callback","create","get","findOne","exec","then","err","Error","reject","listUsers","skip","limit","find","sort","upsertFbUser","accessToken","refreshToken","profile","cb","that","newUser","fullName","displayName","emails","value","facebookProvider","save","error","savedUser","console","log","getId","Types","ObjectId","isValid","findById","customer","message","NOT_FOUND","getMasterAccount","masterAccountData","accountNumber","role","findAndGenerateToken","options","refreshObject","UNAUTHORIZED","isPublic","passwordMatches","customerEmail","list","page","perPage","checkDuplicateEmail","code","errors","messages","CONFLICT","stack","upsertGoogleUser","googleProvider","plugin","model","startAt","incrementBy","module","exports"],"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","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from 'mongoose';\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\nconst httpStatus = require('http-status');\nconst { omitBy, isNil } = require('lodash');\nconst APIError = require('../utils/APIError');\nconst autoIncrement = require('../services/mongooseAutoIncrement');\nconst {\n  env,\n  jwtSecret,\n  jwtExpirationInterval,\n  masterAccount,\n  masterAccountPassword,\n} = require('../config/vars');\nconst uuidv4 = require('uuid/v4');\nimport db from './db';\n\nautoIncrement.initialize(db.getInstance().getEstablishedConnection());\n\n/**\n * Customer Roles\n */\nconst roles = ['user', 'admin'];\n\n//const  SetUpUserMigrations = () =>{\n/**\n * User Schema\n */\nlet UserSchema = new mongoose.Schema(\n  {\n    id: {\n      type: Number,\n      default: 0,\n    },\n    firstname: {\n      type: String,\n    },\n    fb_id: {\n      type: String,\n    },\n    google_id: {\n      type: String,\n    },\n    ratings_average: {\n      type: String,\n      default: 0,\n    },\n\n    status: {\n      type: String,\n      enum: ['Active', 'Dormant', 'Disabled', 'Suspended'],\n      default: 'Active',\n    },\n    user_type: {\n      type: String,\n      // enum:[\n      // 'Individual',\n      // 'Corporate',\n\n      // ],\n      default: 'Individual',\n    },\n    plan_name: {\n      type: String,\n      default: 'commute saver',\n    },\n    lastname: {\n      type: String,\n    },\n    roles: {\n      type: String,\n      // enum: [\n      //        'user',\n      //        'simple_admin',\n      //        'super_admin',\n      //        'Simple Admin',\n      //        'Moderator Admin',\n      //        'Super Admin',\n      // ],\n      default: 'user',\n    },\n\n    for_users: {\n      type: Boolean,\n      default: true,\n    },\n\n    usergroup_set: {\n      type: Array,\n      default: [\n        'Simple Admin',\n        'Moderator Admin',\n        'Super Admin',\n        'Inspection Manager',\n        'Partners Manager',\n        'Hr',\n        'Accountant',\n      ],\n    },\n    test_certificate: {\n      type: String,\n      default: 'NO-CERTIFICATE-ISSUED',\n    },\n\n    test_center: {\n      type: String,\n      default: 'NO-CERTER-YET',\n    },\n\n    test_center_address: {\n      type: String,\n      default: 'NO-TESTCENTER-ADDRESS-YET',\n    },\n    isVerified: {\n      type: Boolean,\n\n      default: false,\n    },\n    is_active: {\n      type: String,\n      default: true,\n    },\n    avatar: {\n      type: String,\n      default: '',\n    },\n    notification_count: {\n      type: Number,\n      default: 0,\n    },\n    balance: {\n      type: String,\n      default: '0.00',\n    },\n    old_balance: {\n      type: String,\n      default: '0.00',\n    },\n\n    // previledges_rules: {\n    //   type: Array,\n    // },\n\n    view_payments: {\n      type: String,\n      default: 'yes',\n    },\n    view_transactions: {\n      type: String,\n      //default:'yes',\n    },\n    // view_payments:{\n    //  type: String,\n    //       //default:'yes',\n    //  },\n    view_quotations: {\n      type: String,\n      //default:'yes',\n    },\n    view_cars: {\n      type: String,\n      //default:'yes',\n    },\n    view_drivers: {\n      type: String,\n      //default:'yes',\n    },\n    view_partners: {\n      type: String,\n      //default:'yes',\n    },\n    view_sos: {\n      type: String,\n      //default:'yes',\n    },\n    view_package: {\n      type: String,\n      //default:'yes',\n    },\n    view_bookings: {\n      type: String,\n      //default:'yes',\n    },\n\n    view_tickets: {\n      type: String,\n      //default:'yes',\n    },\n\n    view_faqs: {\n      type: String,\n      //default:'yes',\n    },\n\n    view_settings: {\n      type: String,\n      //default:'yes',\n    },\n\n    view_users: {\n      type: String,\n      //default:'yes',\n    },\n\n    view_admins: {\n      type: String,\n      //default:'yes',\n    },\n\n    view_car_inspection: {\n      type: String,\n      // default:'yes',\n    },\n    view_drive_test: {\n      type: String,\n      //default:'yes',\n    },\n\n    manage_payments: {\n      type: String,\n      default: 'yes',\n    },\n    manage_transactions: {\n      type: String,\n      //default:'yes',\n    },\n    manage_quotations: {\n      type: String,\n      //default:'yes',\n    },\n    manage_cars: {\n      type: String,\n      //default:'yes',\n    },\n    manage_drivers: {\n      type: String,\n      //default:'yes',\n    },\n    manage_partners: {\n      type: String,\n      //default:'yes',\n    },\n    manage_sos: {\n      type: String,\n      //default:'yes',\n    },\n    manage_package: {\n      type: String,\n      //default:'yes',\n    },\n    manage_bookings: {\n      type: String,\n      //default:'yes',\n    },\n\n    manage_tickets: {\n      type: String,\n      //default:'yes',\n    },\n\n    manage_faqs: {\n      type: String,\n      //default:'yes',\n    },\n\n    manage_settings: {\n      type: String,\n      //default:'yes',\n    },\n\n    manage_users: {\n      type: String,\n      //default:'yes',\n    },\n\n    manage_admins: {\n      type: String,\n      //default:'yes',\n    },\n\n    manage_car_inspection: {\n      type: String,\n      //default:'yes',\n    },\n    manage_drive_test: {\n      type: String,\n      //default:'yes',\n    },\n\n    passwordResetToken: { type: String },\n    passwordResetExpires: { type: Date },\n\n    username: {\n      type: String,\n    },\n    email: {\n      type: String,\n    },\n    password: {\n      type: String,\n    },\n    phone_number: {\n      type: String,\n\n      //match: [/^[1-9][0-9]{9}$/, 'The value of path {PATH} ({VALUE}) is not a valid mobile number.']\n    },\n    is_admin: {\n      type: Boolean,\n      default: false,\n    },\n    created_at: {\n      type: Date,\n      default: Date.now,\n    },\n    updated_at: {\n      type: Date,\n      default: Date.now,\n    },\n\n    facebook: {\n      id: String,\n      token: String,\n      email: String,\n      name: String,\n    },\n    google: {\n      id: String,\n      token: String,\n      email: String,\n      name: String,\n    },\n\n    amount: {\n      type: Number,\n    },\n    reference: {\n      type: String,\n    },\n\n    //if user is a driver\n\n    identity_card: {\n      type: String,\n    },\n\n    car_assigned_name: {\n      type: Array,\n    },\n\n    assigned_car_plate_number: {\n      type: String,\n    },\n\n    assigned_driver_location: {\n      type: String,\n    },\n\n    geometry: {\n      coordinates: { type: [Number], index: '2dsphere' },\n    },\n\n    location: {\n      type: { type: String },\n      coordinates: [],\n    },\n\n    socket_id: {\n      type: String,\n    },\n  },\n  {\n    collection: 'users_collections',\n    timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' },\n  },\n);\n\nUserSchema.set('toJSON', { getters: true, virtuals: true });\n\n/**\n * Methods\n */\nUserSchema.method({\n  transform() {\n    const transformed = {};\n    const fields = ['id', 'accountNumber', 'name', 'email', 'role', 'created_at'];\n\n    fields.forEach(field => {\n      transformed[field] = this[field];\n    });\n\n    return transformed;\n  },\n});\n\n/**\n * Statics\n */\nUserSchema.statics = {\n  transformBalance(user) {\n    return user.balance;\n  },\n  // Add Intervention\n  addUser(user, callback) {\n    return this.create(user, callback);\n  },\n\n  get(id) {\n    return this.findOne(id)\n      .exec()\n      .then(user => {\n        if (user) {\n          return user;\n        }\n        const err = new Error('No such user exists!');\n        return Promise.reject(err);\n      });\n  },\n\n  listUsers({ skip = 0, limit = 50 } = {}) {\n    return this.find()\n      .sort({ created_at: -1 })\n      .skip(+skip)\n      .limit(+limit)\n      .exec();\n  },\n\n  upsertFbUser(accessToken, refreshToken, profile, cb) {\n    var that = this;\n    return this.findOne(\n      {\n        'facebookProvider.id': profile.id,\n      },\n      function(err, user) {\n        // no user was found, lets create a new one\n        if (!user) {\n          var newUser = new that({\n            fullName: profile.displayName,\n            email: profile.emails[0].value,\n            facebookProvider: {\n              id: profile.id,\n              token: accessToken,\n            },\n          });\n\n          newUser.save(function(error, savedUser) {\n            if (error) {\n              console.log(error);\n            }\n            return cb(error, savedUser);\n          });\n        } else {\n          return cb(err, user);\n        }\n      },\n    );\n  },\n\n  async getId(id) {\n    try {\n      let customer;\n\n      if (mongoose.Types.ObjectId.isValid(id)) {\n        customer = await this.findById(id).exec();\n      }\n      if (customer) {\n        return customer;\n      }\n\n      throw new APIError({\n        message: 'Customer does not exist',\n        status: httpStatus.NOT_FOUND,\n      });\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  /**\n   * Get Master Account\n   *\n   * @returns {Promise<Customer>}\n   */\n  async getMasterAccount() {\n    const masterAccountData = {\n      accountNumber: masterAccount,\n      role: 'admin',\n      name: 'Master Account',\n      email: 'master_account@bank.com',\n      password: masterAccountPassword,\n    };\n    try {\n      let customer = await this.findOne({ accountNumber: masterAccountData.accountNumber }).exec();\n\n      if (customer) {\n        return customer;\n      } else {\n        return await this.create(masterAccountData);\n      }\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  /**\n   * Find customer by email and tries to generate a JWT token\n   *\n   * @param {ObjectId} id - The objectId of customer.\n   * @returns {Promise<Customer, APIError>}\n   */\n  async findAndGenerateToken(options) {\n    const { email, password, refreshObject } = options;\n    if (!email) throw new APIError({ message: 'An email is required to generate a token' });\n\n    const customer = await this.findOne({ email }).exec();\n    const err = {\n      status: httpStatus.UNAUTHORIZED,\n      isPublic: true,\n    };\n    if (password) {\n      if (customer && (await customer.passwordMatches(password))) {\n        return { customer, accessToken: customer.token() };\n      }\n      err.message = 'Incorrect email or password';\n    } else if (refreshObject && refreshObject.customerEmail === email) {\n      return { customer, accessToken: customer.token() };\n    } else {\n      err.message = 'Incorrect email or refreshToken';\n    }\n    throw new APIError(err);\n  },\n\n  /**\n   * List customers in descending order of 'createdAt' timestamp.\n   *\n   * @param {number} skip - Number of customers to be skipped.\n   * @param {number} limit - Limit number of customers to be returned.\n   * @returns {Promise<Customer[]>}\n   */\n  list({ page = 1, perPage = 30, name, email, role }) {\n    const options = omitBy({ name, email, role }, isNil);\n\n    return this.find(options)\n      .sort({ createdAt: -1 })\n      .skip(perPage * (page - 1))\n      .limit(perPage)\n      .exec();\n  },\n\n  /**\n   * Return new validation error\n   * if error is a mongoose duplicate key error\n   *\n   * @param {Error} error\n   * @returns {Error|APIError}\n   */\n  checkDuplicateEmail(error) {\n    if (error.name === 'MongoError' && error.code === 11000) {\n      return new APIError({\n        message: 'Validation Error',\n        errors: [\n          {\n            field: 'email',\n            location: 'body',\n            messages: ['\"email\" already exists'],\n          },\n        ],\n        status: httpStatus.CONFLICT,\n        isPublic: true,\n        stack: error.stack,\n      });\n    }\n    return error;\n  },\n\n  upsertGoogleUser(accessToken, refreshToken, profile, cb) {\n    var that = this;\n    return this.findOne(\n      {\n        'googleProvider.id': profile.id,\n      },\n      function(err, user) {\n        // no user was found, lets create a new one\n        if (!user) {\n          var newUser = new that({\n            fullName: profile.displayName,\n            email: profile.emails[0].value,\n            googleProvider: {\n              id: profile.id,\n              token: accessToken,\n            },\n          });\n\n          newUser.save(function(error, savedUser) {\n            if (error) {\n              console.log(error);\n            }\n            return cb(error, savedUser);\n          });\n        } else {\n          return cb(err, user);\n        }\n      },\n    );\n  },\n};\n\nUserSchema.plugin(autoIncrement.plugin, {\n  model: 'UserModel',\n  field: 'accountNumber',\n  startAt: 1001,\n  incrementBy: 1,\n});\n\nmodule.exports = mongoose.model('UserModel', UserSchema);\n"],"file":"User.model.js"}