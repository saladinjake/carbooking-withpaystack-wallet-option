{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/User.model.js"],"names":["Promise","require","httpStatus","omitBy","isNil","APIError","autoIncrement","env","jwtSecret","jwtExpirationInterval","masterAccount","masterAccountPassword","uuidv4","initialize","db","getInstance","getEstablishedConnection","roles","UserSchema","mongoose","Schema","id","type","Number","firstname","String","fb_id","google_id","ratings_average","status","user_type","plan_name","lastname","for_users","Boolean","usergroup_set","Array","test_certificate","test_center","test_center_address","isVerified","is_active","avatar","notification_count","balance","old_balance","view_payments","view_transactions","view_quotations","view_cars","view_drivers","view_partners","view_sos","view_package","view_bookings","view_tickets","view_faqs","view_settings","view_users","view_admins","view_car_inspection","view_drive_test","manage_payments","manage_transactions","manage_quotations","manage_cars","manage_drivers","manage_partners","manage_sos","manage_package","manage_bookings","manage_tickets","manage_faqs","manage_settings","manage_users","manage_admins","manage_car_inspection","manage_drive_test","passwordResetToken","passwordResetExpires","Date","username","email","password","phone_number","is_admin","created_at","now","updated_at","facebook","token","name","google","amount","reference","identity_card","car_assigned_name","assigned_car_plate_number","assigned_driver_location","geometry","coordinates","index","location","socket_id","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","method","transform","transformed","fields","forEach","field","statics","transformBalance","user","addUser","callback","create","get","findOne","exec","then","err","Error","reject","listUsers","skip","limit","find","sort","upsertFbUser","accessToken","refreshToken","profile","cb","that","newUser","fullName","displayName","emails","value","facebookProvider","save","error","savedUser","console","log","getId","Types","ObjectId","isValid","findById","customer","message","NOT_FOUND","getMasterAccount","masterAccountData","accountNumber","role","findAndGenerateToken","options","refreshObject","UNAUTHORIZED","isPublic","passwordMatches","customerEmail","list","page","perPage","checkDuplicateEmail","code","errors","messages","CONFLICT","stack","upsertGoogleUser","googleProvider","plugin","model","startAt","incrementBy","module","exports"],"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","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from  'mongoose';\n\nconst httpStatus = require('http-status');\nconst { omitBy, isNil } = require('lodash');\nconst APIError = require('../utils/APIError');\nconst autoIncrement = require('../services/mongooseAutoIncrement');\nconst { env, jwtSecret, jwtExpirationInterval, masterAccount, masterAccountPassword } = require('../config/vars');\nconst uuidv4 = require('uuid/v4');\nimport db from './db';\n\nautoIncrement.initialize(db.getInstance().getEstablishedConnection());\n\n/**\n* Customer Roles\n*/\nconst roles = ['user', 'admin'];\n\n//const  SetUpUserMigrations = () =>{\n      /**\n       * User Schema\n       */\nlet UserSchema = new mongoose.Schema({\n      id :{\n          type: Number, \n          default: 0\n      },\n      firstname: {\n          type: String,\n          \n      },\n      fb_id:{\n        type:String\n      },\n      google_id:{\n        type:String,\n      },\n      ratings_average:{\n        type:String,\n      },\n\n      status:{\n        type:String,\n        enum:[\n         \"Active\",\n         \"Dormant\",\n         \"Disabled\",\n         \"Suspended\"\n        ],\n        default: \"Active\"\n      },\n      user_type: {\n        type: String,\n        enum:[\n        'Individual', \n        'Corporate',\n        \n\n        ],\n        default: 'Individual'\n      },\n      plan_name:{\n        type:String,\n        default: \"commute saver\"\n      },\n      lastname : {\n        type: String,\n        \n      },\n      roles: { \n        type: String , \n        // enum: [\n        //        'user', \n        //        'simple_admin', \n        //        'super_admin',\n        //        'Simple Admin',\n        //        'Moderator Admin',\n        //        'Super Admin', \n        // ], \n        default:'user'\n            \n      },\n\n      for_users: {\n        type:Boolean,\n        default:true,\n      },\n\n      usergroup_set:{\n        type:Array,\n        default:[\n        'Simple Admin', \n          'Moderator Admin',\n          'Super Admin', \n          'Inspection Manager',\n          'Partners Manager',\n          'Hr',\n          'Accountant',\n        ]\n      },\n      test_certificate:{\n        type: String,\n        default:\"NO-CERTIFICATE-ISSUED\"\n      \n      },\n\n      test_center:{\n        type: String,\n        default:\"NO-CERTER-YET\"\n        \n      \n      },\n\n      test_center_address:{\n        type:String,\n        default:\"NO-TESTCENTER-ADDRESS-YET\"\n    \n      \n      },\n      isVerified: { \n          type: Boolean, \n        \n          default: false \n      },\n      is_active: {\n        type:String, \n        default: true\n      },\n      avatar:{\n        type: String,\n        default:\"\"\n      },\n      notification_count: {\n        type:Number,\n        default:0\n      },\n      balance: {\n        type: String,\n        default: '0.00'\n      },\n      old_balance:{\n        type:String,\n        default:'0.00'\n      },\n\n      // previledges_rules: {\n      //   type: Array,\n      // },\n\n\n      view_payments:{\n         type: String,\n        default: 'yes',\n       }, \n        view_transactions:{\n         type: String,\n             //default:'yes',\n        },\n        // view_payments:{\n        //  type: String,\n        //       //default:'yes',\n        //  },\n        view_quotations:{\n         type: String,\n              //default:'yes',\n         },\n        view_cars:{\n         type: String,\n              //default:'yes',\n         },\n        view_drivers:{\n         type: String,\n              //default:'yes',\n         },\n        view_partners:{\n         type: String,\n         //default:'yes',\n         },\n        view_sos:{\n         type: String,\n              //default:'yes',\n         },\n        view_package:{\n         type: String,\n             //default:'yes',\n        },\n        view_bookings:{\n         type: String,\n             //default:'yes',\n      },\n\n\n      view_tickets:{\n         type: String,\n             //default:'yes',\n      },\n\n      view_faqs:{\n         type: String,\n             //default:'yes',\n      },\n\n      view_settings:{\n         type: String,\n             //default:'yes',\n      },\n\n      view_users:{\n         type: String,\n             //default:'yes',\n      },\n\n      view_admins:{\n         type: String,\n             //default:'yes',\n      },\n\n       view_car_inspection:{\n         type: String,\n            // default:'yes',\n      },\n      view_drive_test:{\n         type: String,\n             //default:'yes',\n\n      },\n\n\n\n\n\n\n      manage_payments:{\n         type: String,\n        default: 'yes',\n       }, \n        manage_transactions:{\n         type: String,\n             //default:'yes',\n        },\n        manage_quotations:{\n         type: String,\n              //default:'yes',\n         },\n        manage_cars:{\n         type: String,\n              //default:'yes',\n         },\n        manage_drivers:{\n         type: String,\n              //default:'yes',\n         },\n        manage_partners:{\n         type: String,\n         //default:'yes',\n         },\n        manage_sos:{\n         type: String,\n              //default:'yes',\n         },\n        manage_package:{\n         type: String,\n             //default:'yes',\n        },\n        manage_bookings:{\n         type: String,\n             //default:'yes',\n      },\n\n\n      manage_tickets:{\n         type: String,\n             //default:'yes',\n      },\n\n      manage_faqs:{\n         type: String,\n             //default:'yes',\n      },\n\n      manage_settings:{\n         type: String,\n             //default:'yes',\n      },\n\n      manage_users:{\n         type: String,\n             //default:'yes',\n      },\n\n      manage_admins:{\n         type: String,\n             //default:'yes',\n      },\n\n      manage_car_inspection:{\n         type: String,\n             //default:'yes',\n      },\n      manage_drive_test:{\n         type: String,\n             //default:'yes',\n\n      },\n\n      passwordResetToken: { type: String},\n      passwordResetExpires: { type: Date },\n       \n      username : {\n          type: String,\n          \n      },\n      email : {\n        type: String,\n          \n      },\n        password :{\n          type: String,   \n        },\n        phone_number : {\n          type: String,\n        \n          //match: [/^[1-9][0-9]{9}$/, 'The value of path {PATH} ({VALUE}) is not a valid mobile number.']\n        },\n        is_admin:{ \n          type:Boolean,\n          default:false\n        },\n        created_at : {\n          type: Date,\n          default: Date.now\n        },\n        updated_at :{\n          type: Date,\n          default: Date.now\n        },\n        \n        facebook: {\n          id: String,\n          token: String,\n          email: String,\n          name: String\n        },\n        google: {\n            id: String,\n            token: String,\n            email: String,\n            name: String\n        },\n\n        amount: {\n        type: Number, \n       \n    },\n    reference: {\n        type: String, \n        \n    },\n\n    //if user is a driver\n\n    identity_card:{\n        type: String,\n        \n      },\n      \n\n\n      car_assigned_name: {\n        type: Array,\n      },\n\n      assigned_car_plate_number:{\n       type:String\n      },\n\n      assigned_driver_location:{\n          type: String,\n        },\n\n      geometry: {\n          coordinates: { type: [Number], index: '2dsphere'}\n      },\n\n      location: {\n       type: { type: String },\n       coordinates: []\n      },\n\n        socket_id: {\n          type: String\n        },\n  \n\n      },{\n        collection: 'users_collections',\n        timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' }\n});\n\nUserSchema.set('toJSON', {getters: true, virtuals: true});\n\n      \n      /**\n       * Methods\n       */\n      UserSchema.method({\n        \n          transform() {\n            const transformed = {};\n            const fields = ['id', 'accountNumber', 'name', 'email', 'role', 'created_at'];\n\n            fields.forEach((field) => {\n              transformed[field] = this[field];\n            });\n\n            return transformed;\n          },\n      });\n\n      /**\n       * Statics\n       */\n      UserSchema.statics = {\n              transformBalance(user) {\n            \n              \n\n               return user.balance;\n             },\n             // Add Intervention\n            addUser  (user, callback)  {\n              return this.create(user, callback);\n            },\n\n            get(id) {\n              return this.findOne(id)\n                .exec()\n                .then((user) => {\n                  if (user) {\n                    return user;\n                  }\n                  const err = new Error('No such user exists!');\n                  return Promise.reject(err);\n                });\n            },\n\n            \n            listUsers({ skip = 0, limit = 50 } = {}) {\n              return this.find()\n                .sort({ created_at: -1 })\n                .skip(+skip)\n                .limit(+limit)\n                .exec();\n            },\n\n            \n        upsertFbUser(accessToken, refreshToken, profile, cb) {\n            var that = this;\n            return this.findOne({\n                'facebookProvider.id': profile.id\n            }, function(err, user) {\n                // no user was found, lets create a new one\n                if (!user) {\n                    var newUser = new that({\n                        fullName: profile.displayName,\n                        email: profile.emails[0].value,\n                        facebookProvider: {\n                            id: profile.id,\n                            token: accessToken\n                        }\n                    });\n\n                    newUser.save(function(error, savedUser) {\n                        if (error) {\n                            console.log(error);\n                        }\n                        return cb(error, savedUser);\n                    });\n                } else {\n                    return cb(err, user);\n                }\n            });\n        },\n\n    async getId(id) {\n    try {\n      let customer;\n\n      if (mongoose.Types.ObjectId.isValid(id)) {\n        customer = await this.findById(id).exec();\n      }\n      if (customer) {\n        return customer;\n      }\n\n      throw new APIError({\n        message: 'Customer does not exist',\n        status: httpStatus.NOT_FOUND,\n      });\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  /**\n   * Get Master Account\n   *\n   * @returns {Promise<Customer>}\n   */\n  async getMasterAccount() {\n    const masterAccountData = {\n      accountNumber: masterAccount,\n      role: 'admin',\n      name: 'Master Account',\n      email: 'master_account@bank.com',\n      password: masterAccountPassword,\n    };\n    try {\n      let customer = await this.findOne({ 'accountNumber': masterAccountData.accountNumber }).exec();\n      \n      if (customer) {\n        return customer;\n      }else{\n        return await this.create(masterAccountData);\n      }      \n    } catch (error) {\n      throw error;\n    }\n  },\n\n  /**\n   * Find customer by email and tries to generate a JWT token\n   *\n   * @param {ObjectId} id - The objectId of customer.\n   * @returns {Promise<Customer, APIError>}\n   */\n  async findAndGenerateToken(options) {\n    const { email, password, refreshObject } = options;\n    if (!email) throw new APIError({ message: 'An email is required to generate a token' });\n\n    const customer = await this.findOne({ email }).exec();\n    const err = {\n      status: httpStatus.UNAUTHORIZED,\n      isPublic: true,\n    };\n    if (password) {\n      if (customer && await customer.passwordMatches(password)) {\n        return { customer, accessToken: customer.token() };\n      }\n      err.message = 'Incorrect email or password';\n    } else if (refreshObject && refreshObject.customerEmail === email) {\n      return { customer, accessToken: customer.token() };\n    } else {\n      err.message = 'Incorrect email or refreshToken';\n    }\n    throw new APIError(err);\n  },\n\n  /**\n   * List customers in descending order of 'createdAt' timestamp.\n   *\n   * @param {number} skip - Number of customers to be skipped.\n   * @param {number} limit - Limit number of customers to be returned.\n   * @returns {Promise<Customer[]>}\n   */\n  list({\n    page = 1, perPage = 30, name, email, role,\n  }) {\n    const options = omitBy({ name, email, role }, isNil);\n\n    return this.find(options)\n      .sort({ createdAt: -1 })\n      .skip(perPage * (page - 1))\n      .limit(perPage)\n      .exec();\n  },\n\n  /**\n   * Return new validation error\n   * if error is a mongoose duplicate key error\n   *\n   * @param {Error} error\n   * @returns {Error|APIError}\n   */\n  checkDuplicateEmail(error) {\n    if (error.name === 'MongoError' && error.code === 11000) {\n      return new APIError({\n        message: 'Validation Error',\n        errors: [{\n          field: 'email',\n          location: 'body',\n          messages: ['\"email\" already exists'],\n        }],\n        status: httpStatus.CONFLICT,\n        isPublic: true,\n        stack: error.stack,\n      });\n    }\n    return error;\n  },\n\n  upsertGoogleUser(accessToken, refreshToken, profile, cb) {\n      var that = this;\n      return this.findOne({\n                'googleProvider.id': profile.id\n      }, function(err, user) {\n                // no user was found, lets create a new one\n                if (!user) {\n                    var newUser = new that({\n                        fullName: profile.displayName,\n                        email: profile.emails[0].value,\n                        googleProvider: {\n                            id: profile.id,\n                            token: accessToken\n                        }\n                    });\n\n                    newUser.save(function(error, savedUser) {\n                        if (error) {\n                            console.log(error);\n                        }\n                        return cb(error, savedUser);\n                    });\n                } else {\n                    return cb(err, user);\n                }\n            });\n        },\n}\n\nUserSchema.plugin(autoIncrement.plugin, {\n  model: 'UserModel',\n  field: 'accountNumber',\n  startAt: 1001,\n  incrementBy: 1\n});     \n\nmodule.exports = mongoose.model('UserModel', UserSchema);\n\n\n\n\n\n"],"file":"User.model.js"}