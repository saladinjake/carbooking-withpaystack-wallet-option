{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/Partners.model.js"],"names":["Promise","require","PartnerSchema","mongoose","Schema","businessName","type","String","firstName","lastName","address","bankAccount","bankAccountName","bankAccountNumber","status","email","password","phoneNumber","phone","passwordResetToken","passwordResetExpires","Date","avatar","totalCars","Number","userName","roles","isVerified","Boolean","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","method","statics","addUser","user","callback","create","get","id","findOne","exec","then","err","Error","reject","listUsers","skip","limit","find","sort","created_at","upsertFbUser","accessToken","refreshToken","profile","cb","that","newUser","fullName","displayName","emails","value","facebookProvider","token","save","error","savedUser","console","log","upsertGoogleUser","googleProvider","module","exports","model"],"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","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from  'mongoose';\n\n//Partner has many cars\n      /**\n       * Partner Schema\n       */\n\n\n\nlet PartnerSchema = new mongoose.Schema({\n\n  businessName: {\n        type: String,\n       \n    },\n    firstName: {\n        type: String,\n       \n    },\n    lastName: {\n      type: String,\n      \n  },\n  address:{\n    type:String\n  },\n  bankAccount:{type : String},\n  bankAccountName:{type: String},\n  bankAccountNumber: { type: String},\n  status:{\n        type:String,\n        enum:[\n         \"Active\",\n         \"Dormant\",\n         \"Disabled\",\n         \"Suspended\"\n        ],\n        default: \"Active\"\n      },\n    email: {\n        type: String,\n       \n    },\n    password: {\n        type: String,\n        \n        \n    },\n    phoneNumber: {\n        type: String,\n  \n        \n    },\n    phone:{\n      type: String\n    },\n    passwordResetToken: { type: String},\n    passwordResetExpires: { type: Date },\n    avatar:{\n      type: String\n    },\n    totalCars:{\n      type:Number,\n      default:0\n    },\n\n    userName:{\n      type:String\n    },\n\n    roles:{\n      type:String,\n      enum:[\n         \"Individual Partner\",\n         \"Organizational Partner\",\n        \n        ],\n        default: \"Individual Partner\"\n    },\n    isVerified: {\n      type:Boolean,\n      default:false\n    }\n\n    \n\n\n\n},\n{\n  collection: 'partner_collections',\n  timestamps: {\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt'\n  }\n});\n\nPartnerSchema.set('toJSON', {getters: true, virtuals: true});\n\n      \n      /**\n       * Methods\n       */\n      PartnerSchema.method({\n      });\n\n      /**\n       * Statics\n       */\n      PartnerSchema.statics = {\n             // Add Intervention\n            addUser  (user, callback)  {\n              return this.create(user, callback);\n            },\n\n            get(id) {\n              return this.findOne(id)\n                .exec()\n                .then((user) => {\n                  if (user) {\n                    return user;\n                  }\n                  const err = new Error('No such user exists!');\n                  return Promise.reject(err);\n                });\n            },\n\n            \n            listUsers({ skip = 0, limit = 50 } = {}) {\n              return this.find()\n                .sort({ created_at: -1 })\n                .skip(+skip)\n                .limit(+limit)\n                .exec();\n            },\n\n            \n        upsertFbUser(accessToken, refreshToken, profile, cb) {\n            var that = this;\n            return this.findOne({\n                'facebookProvider.id': profile.id\n            }, function(err, user) {\n                // no user was found, lets create a new one\n                if (!user) {\n                    var newUser = new that({\n                        fullName: profile.displayName,\n                        email: profile.emails[0].value,\n                        facebookProvider: {\n                            id: profile.id,\n                            token: accessToken\n                        }\n                    });\n\n                    newUser.save(function(error, savedUser) {\n                        if (error) {\n                            console.log(error);\n                        }\n                        return cb(error, savedUser);\n                    });\n                } else {\n                    return cb(err, user);\n                }\n            });\n        },\n\n        upsertGoogleUser(accessToken, refreshToken, profile, cb) {\n            var that = this;\n            return this.findOne({\n                'googleProvider.id': profile.id\n            }, function(err, user) {\n                // no user was found, lets create a new one\n                if (!user) {\n                    var newUser = new that({\n                        fullName: profile.displayName,\n                        email: profile.emails[0].value,\n                        googleProvider: {\n                            id: profile.id,\n                            token: accessToken\n                        }\n                    });\n\n                    newUser.save(function(error, savedUser) {\n                        if (error) {\n                            console.log(error);\n                        }\n                        return cb(error, savedUser);\n                    });\n                } else {\n                    return cb(err, user);\n                }\n            });\n        },\n      }\n\n     \n\nmodule.exports = mongoose.model('PartnerModel', PartnerSchema);\n\n\n"],"file":"Partners.model.js"}