{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/FAQ.model.js"],"names":["Promise","require","FAQSchema","mongoose","Schema","id","type","Number","question","String","answer","status","created_at","Date","now","updated_at","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addFaq","faq","callback","create","get","findOne","exec","then","plan","err","Error","reject","listPlan","skip","limit","find","sort","module","exports","model"],"mappings":"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","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from  'mongoose';\n\nlet FAQSchema = new mongoose.Schema({\n     \n        id :{\n          type: Number,\n          default: 0\n        },\n        question: {\n          type:String,\n          \n        },\n        answer:{\n          type:String,\n          \n        },\n\n        status:{\n          type:String,\n          enum:[\n            'Active',\n            'Disabled'\n          ],\n          default:'Active',\n        },\n        \n\n      \n        created_at : {\n          type: Date,\n          default: Date.now\n        },\n        updated_at :{\n          type: Date,\n          default: Date.now\n        },\n       \n      },{\n        collection: 'faq_collections',\n        timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' }\n});\n\nFAQSchema.set('toJSON', {getters: true, virtuals: true});\nFAQSchema.statics = {\n             // Add Intervention\n            addFaq(faq, callback)  {\n              return this.create(faq, callback);\n            },\n\n            get(id) {\n              return this.findOne(id)\n                .exec()\n                .then((plan) => {\n                  if (plan) {\n                    return plan;\n                  }\n                  const err = new Error('No such itinerary exists!');\n                  return Promise.reject(err);\n                });\n            },\n\n            \n            listPlan({ skip = 0, limit = 50 } = {}) {\n              return this.find()\n                .sort({ created_at: -1 })\n                .skip(+skip)\n                .limit(+limit)\n                .exec();\n            },\n\n       \n      }\n \nmodule.exports = mongoose.model('FAQModel', FAQSchema);\n\n\n"],"file":"FAQ.model.js"}