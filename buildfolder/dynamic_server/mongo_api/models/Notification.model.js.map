{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/Notification.model.js"],"names":["Promise","require","NotificationSchema","mongoose","Schema","id","type","Number","user_id","String","status","for_users","Boolean","isViewed","description","created_at","Date","now","updated_at","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addNotification","user","callback","create","get","findOne","exec","then","err","Error","reject","listCars","skip","limit","find","sort","module","exports","model"],"mappings":"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","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from 'mongoose';\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\nlet NotificationSchema = new mongoose.Schema(\n  {\n    id: {\n      type: Number,\n\n      default: 0,\n    },\n    user_id: {\n      type: String,\n    },\n\n    status: {\n      type: String,\n      default: 'new',\n    },\n\n    for_users: {\n      type: Boolean,\n      default: true,\n    },\n    isViewed: {\n      type: Boolean,\n      default: false,\n    },\n    // message:{\n    //   type: String,\n\n    // },\n    type: {\n      type: String,\n      enum: [\n        'success',\n        'failure',\n        'pending',\n        'error',\n        'information',\n        'payment',\n        'ticket',\n        'quotation',\n      ],\n      default: 'information',\n    },\n    description: {\n      type: String,\n    },\n\n    created_at: {\n      type: Date,\n      default: Date.now,\n    },\n    updated_at: {\n      type: Date,\n      default: Date.now,\n    },\n  },\n  {\n    collection: 'notifcation_collections',\n    timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' },\n  },\n);\n\nNotificationSchema.set('toJSON', { getters: true, virtuals: true });\n\n/**\n * Statics\n */\nNotificationSchema.statics = {\n  // Add Intervention\n  addNotification(user, callback) {\n    return this.create(user, callback);\n  },\n\n  get(id) {\n    return this.findOne(id)\n      .exec()\n      .then(user => {\n        if (user) {\n          return user;\n        }\n        const err = new Error('No such user exists!');\n        return Promise.reject(err);\n      });\n  },\n\n  listCars({ skip = 0, limit = 50 } = {}) {\n    return this.find()\n      .sort({ created_at: -1 })\n      .skip(+skip)\n      .limit(+limit)\n      .exec();\n  },\n};\n\nmodule.exports = mongoose.model('NotificationModel', NotificationSchema);\n"],"file":"Notification.model.js"}