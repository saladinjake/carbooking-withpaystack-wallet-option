{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/Notification.model.js"],"names":["Promise","require","NotificationSchema","mongoose","Schema","id","type","Number","user_id","String","status","for_users","Boolean","isViewed","description","created_at","Date","now","updated_at","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addNotification","user","callback","create","get","findOne","exec","then","err","Error","reject","listCars","skip","limit","find","sort","module","exports","model"],"mappings":"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","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from  'mongoose';\n\nlet NotificationSchema = new mongoose.Schema({\n        id :{\n          type: Number,\n         \n          default: 0\n        },\n        user_id:{\n          type: String,\n    \n        },\n\n        status:{\n          type:String,\n          default: \"new\"\n        },\n\n        for_users:{\n\n          type:Boolean,\n          default:true\n        },\n         isViewed: {\n    type: Boolean,\n    default: false,\n  },\n        // message:{\n        //   type: String,\n          \n        // },\n        type:{\n          type: String,\n          enum: ['success','failure','pending','error','information','payment','ticket', 'quotation'],\n          default:'information'\n        },\n        description: {\n          type: String,\n         \n        },\n        \n        \n        created_at : {\n          type: Date,\n          default: Date.now\n        },\n        updated_at :{\n          type: Date,\n          default: Date.now\n        },\n       \n      },{\n        collection: 'notifcation_collections',\n        timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' }\n});\n\nNotificationSchema.set('toJSON', {getters: true, virtuals: true});\n\n      \n      /**\n       * Statics\n       */\nNotificationSchema.statics = {\n             // Add Intervention\n            addNotification (user, callback)  {\n              return this.create(user, callback);\n            },\n\n            get(id) {\n              return this.findOne(id)\n                .exec()\n                .then((user) => {\n                  if (user) {\n                    return user;\n                  }\n                  const err = new Error('No such user exists!');\n                  return Promise.reject(err);\n                });\n            },\n\n            \n            listCars({ skip = 0, limit = 50 } = {}) {\n              return this.find()\n                .sort({ created_at: -1 })\n                .skip(+skip)\n                .limit(+limit)\n                .exec();\n            },\n\n           \n      }\n\n     \n\nmodule.exports = mongoose.model('NotificationModel', NotificationSchema);\n\n\n"],"file":"Notification.model.js"}