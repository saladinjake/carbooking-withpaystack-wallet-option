{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/DriversNotifications.model.js"],"names":["Promise","require","DriversNotificationsSchema","mongoose","Schema","id","type","Number","user_id","String","description","created_at","Date","now","updated_at","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addDriversNotifications","user","callback","create","get","findOne","exec","then","err","Error","reject","listCars","skip","limit","find","sort","module","exports","model"],"mappings":"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","sourcesContent":["'use strict';\r\nconst Promise = require('bluebird');\r\nimport mongoose from  'mongoose';\r\n\r\nlet DriversNotificationsSchema = new mongoose.Schema({\r\n        id :{\r\n          type: Number,\r\n         \r\n          default: 0\r\n        },\r\n        user_id:{\r\n          type: String,\r\n    \r\n        },\r\n        // message:{\r\n        //   type: String,\r\n          \r\n        // },\r\n        type:{\r\n          type: String,\r\n          enum: ['success','failure','pending','error','information','payment'],\r\n          default:'information'\r\n        },\r\n        description: {\r\n          type: String,\r\n         \r\n        },\r\n        \r\n        \r\n        created_at : {\r\n          type: Date,\r\n          default: Date.now\r\n        },\r\n        updated_at :{\r\n          type: Date,\r\n          default: Date.now\r\n        },\r\n       \r\n      },{\r\n        collection: 'drvnotifcation_collections',\r\n        timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' }\r\n});\r\n\r\nDriversNotificationsSchema.set('toJSON', {getters: true, virtuals: true});\r\n\r\n      \r\n      /**\r\n       * Statics\r\n       */\r\nDriversNotificationsSchema.statics = {\r\n             // Add Intervention\r\n            addDriversNotifications (user, callback)  {\r\n              return this.create(user, callback);\r\n            },\r\n\r\n            get(id) {\r\n              return this.findOne(id)\r\n                .exec()\r\n                .then((user) => {\r\n                  if (user) {\r\n                    return user;\r\n                  }\r\n                  const err = new Error('No such user exists!');\r\n                  return Promise.reject(err);\r\n                });\r\n            },\r\n\r\n            \r\n            listCars({ skip = 0, limit = 50 } = {}) {\r\n              return this.find()\r\n                .sort({ created_at: -1 })\r\n                .skip(+skip)\r\n                .limit(+limit)\r\n                .exec();\r\n            },\r\n\r\n           \r\n      }\r\n\r\n     \r\n\r\nmodule.exports = mongoose.model('DriversNotificationsModel', DriversNotificationsSchema);\r\n\r\n\r\n"],"file":"DriversNotifications.model.js"}