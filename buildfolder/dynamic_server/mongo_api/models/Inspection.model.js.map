{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/Inspection.model.js"],"names":["Promise","require","InspectionSchema","mongoose","Schema","id","type","Number","car_id","String","status","description","required","username","email","time","createdDate","phone_number","created_at","Date","now","updated_at","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addInspection","user","callback","create","module","exports","model"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AADA,IAAMA,OAAO,2BAAGC,OAAO,CAAC,UAAD,CAAV,CAAb;AAGA,IAAIC,gBAAgB,2BAAG,IAAIC,qBAASC,MAAb,CAAoB;AACnCC,EAAAA,EAAE,EAAE;AACFC,IAAAA,IAAI,EAAEC,MADJ;AAGF,eAAS;AAHP,GAD+B;AAUnCC,EAAAA,MAAM,EAAE;AACNF,IAAAA,IAAI,EAACG;AADC,GAV2B;AAanCC,EAAAA,MAAM,EAAC;AACLJ,IAAAA,IAAI,EAAEG,MADD;AAEL,YAAK,CACJ,SADI,EAEJ,WAFI;AAFA,GAb4B;AAoBnCE,EAAAA,WAAW,EAAC;AACVL,IAAAA,IAAI,EAAEG,MADI;AAEVG,IAAAA,QAAQ,EAAC;AAFC,GApBuB;AAyBnCC,EAAAA,QAAQ,EAAG;AACTP,IAAAA,IAAI,EAAEG;AADG,GAzBwB;AA6BnCK,EAAAA,KAAK,EAAG;AACNR,IAAAA,IAAI,EAAEG;AADA,GA7B2B;AAkCnCM,EAAAA,IAAI,EAAE;AACJT,IAAAA,IAAI,EAAEG;AADF,GAlC6B;AAsCnCO,EAAAA,WAAW,EAAC;AACVV,IAAAA,IAAI,EAACG;AADK,GAtCuB;AA0CnCQ,EAAAA,YAAY,EAAG;AACbX,IAAAA,IAAI,EAAEG;AADO,GA1CoB;AA+CnCS,EAAAA,UAAU,EAAG;AACXZ,IAAAA,IAAI,EAAEa,IADK;AAEX,eAASA,IAAI,CAACC;AAFH,GA/CsB;AAmDnCC,EAAAA,UAAU,EAAE;AACVf,IAAAA,IAAI,EAAEa,IADI;AAEV,eAASA,IAAI,CAACC;AAFJ;AAnDuB,CAApB,EAwDf;AACAE,EAAAA,UAAU,EAAE,wBADZ;AAEAC,EAAAA,UAAU,EAAE;AAAEC,IAAAA,SAAS,EAAE,YAAb;AAA2BC,IAAAA,SAAS,EAAE;AAAtC;AAFZ,CAxDe,CAAH,CAApB;;AA6DAvB,gBAAgB,CAACwB,GAAjB,CAAqB,QAArB,EAA+B;AAACC,EAAAA,OAAO,EAAE,IAAV;AAAgBC,EAAAA,QAAQ,EAAE;AAA1B,CAA/B;;AAKA1B,gBAAgB,CAAC2B,OAAjB,GAA2B;AAEd;AACDC,EAAAA,aAHe,yBAGDC,IAHC,EAGKC,QAHL,EAGgB;AAAA;AAAA;AAC7B,WAAO,KAAKC,MAAL,CAAYF,IAAZ,EAAkBC,QAAlB,CAAP;AACD;AALc,CAA3B;;AAWAE,MAAM,CAACC,OAAP,GAAiBhC,qBAASiC,KAAT,CAAe,iBAAf,EAAkClC,gBAAlC,CAAjB","sourcesContent":["'use strict';\r\nconst Promise = require('bluebird');\r\nimport mongoose from  'mongoose';\r\n\r\nlet InspectionSchema = new mongoose.Schema({\r\n        id :{\r\n          type: Number,\r\n         \r\n          default: 0\r\n        },\r\n\r\n            \r\n            \r\n\r\n        car_id: {\r\n          type:String,\r\n        },\r\n        status:{\r\n          type: String,\r\n          enum:[\r\n           'Pending',\r\n           'Completed'\r\n          ]\r\n        },\r\n        description:{\r\n          type: String,\r\n          required:true\r\n        },\r\n\r\n        username : {\r\n          type: String,\r\n          \r\n        },\r\n        email : {\r\n          type: String,\r\n        \r\n        },\r\n\r\n        time: {\r\n          type: String\r\n        },\r\n\r\n        createdDate:{\r\n          type:String\r\n        },\r\n        \r\n        phone_number : {\r\n          type: String,\r\n        \r\n        \r\n        },\r\n        created_at : {\r\n          type: Date,\r\n          default: Date.now\r\n        },\r\n        updated_at :{\r\n          type: Date,\r\n          default: Date.now\r\n        },\r\n       \r\n      },{\r\n        collection: 'inspection_collections',\r\n        timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' }\r\n});\r\n\r\nInspectionSchema.set('toJSON', {getters: true, virtuals: true});\r\n\r\n \r\n\r\n\r\nInspectionSchema.statics = {\r\n             \r\n             // Add Intervention\r\n            addInspection(user, callback)  {\r\n              return this.create(user, callback);\r\n            },\r\n\r\n     \r\n};    \r\n     \r\n\r\nmodule.exports = mongoose.model('InspectionModel', InspectionSchema);\r\n\r\n\r\n"],"file":"Inspection.model.js"}