{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/DriversSOS.model.js"],"names":["DriversSOSSchema","mongoose","Schema","id","type","Number","user_id","String","username","email","phone_number","plate_number","location","_user","Types","ObjectId","ref","address","media","Array","status","created_at","Date","now","updated_at","collection","timestamps","createdAt","updatedAt","statics","get","findOne","exec","then","user","err","Error","Promise","reject","getAllRedflags","callback","limit","find","getRedflagById","addRedflag","intervention","create","updateRedflagLocation","options","query","_id","update","findOneAndUpdate","updateRedflagComment","comment","updateRedflagStatus","removeRedflag","remove","module","exports","model"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AACM;AACN,IAAIA,gBAAgB,2BAAG,IAAIC,qBAASC,MAAb,CAAoB;AACnCC,EAAAA,EAAE,EAAE;AACHC,IAAAA,IAAI,EAAEC;AADH,GAD+B;AAKnCC,EAAAA,OAAO,EAAI;AACTF,IAAAA,IAAI,EAAEG;AADG,GALwB;AAUnCC,EAAAA,QAAQ,EAAC;AACPJ,IAAAA,IAAI,EAACG;AADE,GAV0B;AAanCE,EAAAA,KAAK,EAAC;AACJL,IAAAA,IAAI,EAACG;AADD,GAb6B;AAgBnCG,EAAAA,YAAY,EAAC;AACXN,IAAAA,IAAI,EAACG;AADM,GAhBsB;AAoBnCI,EAAAA,YAAY,EAAC;AACXP,IAAAA,IAAI,EAACG;AADM,GApBsB;AAwBnCK,EAAAA,QAAQ,EAAI;AACVR,IAAAA,IAAI,EAAEG;AADI,GAxBuB;AA4BnCM,EAAAA,KAAK,EAAE;AACJT,IAAAA,IAAI,EAAEH,qBAASC,MAAT,CAAgBY,KAAhB,CAAsBC,QADxB;AAEJC,IAAAA,GAAG,EAAE;AAFD,GA5B4B;AAiCnCC,EAAAA,OAAO,EAAG;AACRb,IAAAA,IAAI,EAAEG;AADE,GAjCyB;AAqCnCW,EAAAA,KAAK,EAAE;AACLd,IAAAA,IAAI,EAAEe;AADD,GArC4B;AAwCnCC,EAAAA,MAAM,EAAIb,MAxCyB;AAyCnCc,EAAAA,UAAU,EAAG;AACXjB,IAAAA,IAAI,EAAEkB,IADK;AAEX,eAASA,IAAI,CAACC;AAFH,GAzCsB;AA6CnCC,EAAAA,UAAU,EAAE;AACVpB,IAAAA,IAAI,EAAEkB,IADI;AAEV,eAASA,IAAI,CAACC;AAFJ;AA7CuB,CAApB,EAkDf;AACAE,EAAAA,UAAU,EAAE,qBADZ;AAEAC,EAAAA,UAAU,EAAE;AAAEC,IAAAA,SAAS,EAAE,YAAb;AAA2BC,IAAAA,SAAS,EAAE;AAAtC;AAFZ,CAlDe,CAAH,CAApB;AA0DM;;;;;;;AAOA;;;;AAKA;;;;;AAGA5B,gBAAgB,CAAC6B,OAAjB,GAA2B;AACvB;;;;;AAKAC,EAAAA,GANuB,eAMnB3B,EANmB,EAMf;AAAA;AAAA;AACN,WAAO,KAAK4B,OAAL,CAAa5B,EAAb,EACJ6B,IADI,GAEJC,IAFI,CAEC,UAACC,IAAD,EAAU;AAAA;AAAA;;AACd,UAAIA,IAAJ,EAAU;AAAA;AAAA;AACR,eAAOA,IAAP;AACD,OAFD;AAAA;AAAA;;AAGA,UAAMC,GAAG,2BAAG,IAAIC,KAAJ,CAAU,sBAAV,CAAH,CAAT;AAJc;AAKd,aAAOC,OAAO,CAACC,MAAR,CAAeH,GAAf,CAAP;AACD,KARI,CAAP;AASD,GAhBsB;AAmBtB;AAED;AACA;AACAI,EAAAA,cAvBuB,0BAuBNC,QAvBM,EAuBIC,KAvBJ,EAuBY;AAAA;AAAA;AACjC,WAAO,KAAKC,IAAL,CAAUF,QAAV,EAAoBC,KAApB,CAA0BA,KAA1B,CAAP;AACD,GAzBsB;AA2BvB;AACAE,EAAAA,cA5BuB,0BA4BNxC,EA5BM,EA4BFqC,QA5BE,EA4BS;AAAA;AAAA;AAC9B,WAAO,KAAKT,OAAL,CAAa5B,EAAb,EAAiBqC,QAAjB,CAAP;AACD,GA9BsB;AAgCvB;AACAI,EAAAA,UAjCuB,sBAiCVC,YAjCU,EAiCIL,QAjCJ,EAiCe;AAAA;AAAA;AACpC,WAAO,KAAKM,MAAL,CAAYD,YAAZ,EAA0BL,QAA1B,CAAP;AACD,GAnCsB;AAqCvB;AACAO,EAAAA,qBAtCuB,iCAsCC5C,EAtCD,EAsCK0C,YAtCL,EAsCmBG,OAtCnB,EAsC4BR,QAtC5B,EAsCsC;AAAA;AAC3D,QAAIS,KAAK,4BAAG;AAACC,MAAAA,GAAG,EAAE/C;AAAN,KAAH,CAAT;AACA,QAAIgD,MAAM,4BAAG;AACXvC,MAAAA,QAAQ,EAAEiC,YAAY,CAACjC;AADZ,KAAH,CAAV;AAF2D;AAK3D,WAAO,KAAKwC,gBAAL,CAAsBH,KAAtB,EAA6BE,MAA7B,EAAqCH,OAArC,EAA8CR,QAA9C,CAAP;AACD,GA5CsB;AA+CvBa,EAAAA,oBA/CuB,gCA+CDlD,EA/CC,EA+CG0C,YA/CH,EA+CiBG,OA/CjB,EA+C0BR,QA/C1B,EA+CoC;AAAA;AACzD,QAAIS,KAAK,4BAAG;AAACC,MAAAA,GAAG,EAAE/C;AAAN,KAAH,CAAT;AACA,QAAIgD,MAAM,4BAAG;AACXG,MAAAA,OAAO,EAAET,YAAY,CAACS;AADX,KAAH,CAAV;AAFyD;AAKzD,WAAO,KAAKF,gBAAL,CAAsBH,KAAtB,EAA6BE,MAA7B,EAAqCH,OAArC,EAA8CR,QAA9C,CAAP;AACD,GArDsB;AAwDvBe,EAAAA,mBAxDuB,+BAwDHpD,EAxDG,EAwDC0C,YAxDD,EAwDeG,OAxDf,EAwDwBR,QAxDxB,EAwDkC;AAAA;AACvD,QAAIS,KAAK,4BAAG;AAACC,MAAAA,GAAG,EAAE/C;AAAN,KAAH,CAAT;AACA,QAAIgD,MAAM,4BAAG;AACX/B,MAAAA,MAAM,EAAEyB,YAAY,CAACzB;AADV,KAAH,CAAV;AAFuD;AAKvD,WAAO,KAAKgC,gBAAL,CAAsBH,KAAtB,EAA6BE,MAA7B,EAAqCH,OAArC,EAA8CR,QAA9C,CAAP;AACD,GA9DsB;AAgEvB;AACAgB,EAAAA,aAjEuB,yBAiERrD,EAjEQ,EAiEJqC,QAjEI,EAiEO;AAAA;AAC5B,QAAIS,KAAK,4BAAG;AAACC,MAAAA,GAAG,EAAE/C;AAAN,KAAH,CAAT;AAD4B;AAE5B,WAAO,KAAKsD,MAAL,CAAYR,KAAZ,EAAmBT,QAAnB,CAAP;AACD;AApEsB,CAA3B;;AAyENkB,MAAM,CAACC,OAAP,GAAiB1D,qBAAS2D,KAAT,CAAe,iBAAf,EAAiC5D,gBAAjC,CAAjB","sourcesContent":["import mongoose from  'mongoose';\r\n\r\n// const  SetUpRedFlagsMigrations = () =>{\r\n      // import UserSchema from './User.model.js'\r\nlet DriversSOSSchema = new mongoose.Schema({\r\n        id :{\r\n         type: Number,\r\n          \r\n        },\r\n        user_id  : {\r\n          type: String,\r\n         \r\n        },\r\n\r\n        username:{\r\n          type:String,\r\n        },\r\n        email:{\r\n          type:String,\r\n        },\r\n        phone_number:{\r\n          type:String,\r\n        },\r\n\r\n        plate_number:{\r\n          type:String\r\n        },\r\n        \r\n        location  : {\r\n          type: String,\r\n         \r\n        },\r\n        _user: {\r\n           type: mongoose.Schema.Types.ObjectId, \r\n           ref: 'UserModel' , \r\n          \r\n         },\r\n        address : {\r\n          type: String,\r\n          \r\n        },\r\n        media: {\r\n          type: Array,\r\n        },\r\n        status  : String,\r\n        created_at : {\r\n          type: Date,\r\n          default: Date.now\r\n        },\r\n        updated_at :{\r\n          type: Date,\r\n          default: Date.now\r\n        }\r\n        \r\n      },{\r\n        collection: 'DRVSOSs_collections',\r\n        timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' }\r\n      });\r\n       \r\n\r\n\r\n\r\n      /**\r\n       * Add your\r\n       * - pre-save hooks\r\n       * - validations\r\n       * - virtuals\r\n       */\r\n\r\n      /**\r\n       * Methods\r\n       */\r\n      \r\n\r\n      /**\r\n       * Statics\r\n       */\r\n      DriversSOSSchema.statics = {\r\n          /**\r\n           * Get user\r\n           * @param {ObjectId} id - The objectId of user.\r\n           * @returns {Promise<User, APIError>}\r\n           */\r\n          get(id) {\r\n            return this.findOne(id)\r\n              .exec()\r\n              .then((user) => {\r\n                if (user) {\r\n                  return user;\r\n                }\r\n                const err = new Error('No such user exists!');\r\n                return Promise.reject(err);\r\n              });\r\n          },\r\n\r\n        \r\n           //Not In Use but just here for example purposes becouse am using mongoose promise \r\n\r\n          // in order to use this you have to comment the code  mongoose.Promise = Promise; in db.js\r\n          // Get Interventions\r\n          getAllRedflags  (callback, limit)  {\r\n            return this.find(callback).limit(limit);\r\n          },\r\n\r\n          // Get Intervention\r\n          getRedflagById  (id, callback)  {\r\n            return this.findOne(id, callback);\r\n          },\r\n\r\n          // Add Intervention\r\n          addRedflag  (intervention, callback)  {\r\n            return this.create(intervention, callback);\r\n          },\r\n\r\n          // Update Intervention\r\n          updateRedflagLocation  (id, intervention, options, callback) {\r\n            var query = {_id: id};\r\n            var update = {\r\n              location: intervention.location,\r\n            }\r\n            return this.findOneAndUpdate(query, update, options, callback);\r\n          },\r\n\r\n\r\n          updateRedflagComment (id, intervention, options, callback) {\r\n            var query = {_id: id};\r\n            var update = {\r\n              comment: intervention.comment,\r\n            }\r\n            return this.findOneAndUpdate(query, update, options, callback);\r\n          },\r\n\r\n\r\n          updateRedflagStatus(id, intervention, options, callback) {\r\n            var query = {_id: id};\r\n            var update = {\r\n              status: intervention.status,\r\n            }\r\n            return this.findOneAndUpdate(query, update, options, callback);\r\n          },\r\n\r\n          // Delete Intervention\r\n          removeRedflag (id, callback)  {\r\n            var query = {_id: id};\r\n            return this.remove(query, callback);\r\n          },\r\n      };\r\n\r\n \r\n\r\nmodule.exports = mongoose.model('DriversSOSModel',DriversSOSSchema);"],"file":"DriversSOS.model.js"}