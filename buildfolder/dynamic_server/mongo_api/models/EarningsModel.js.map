{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/EarningsModel.js"],"names":["Promise","require","EarningsSchema","mongoose","Schema","id","type","Number","paymentDate","String","paymentStatus","paymentAmount","paymentReference","partnerId","partnerEmail","partnerBankAccount","Object","vehicleId","vehicleName","vehiclePlateNo","partner","Types","ObjectId","ref","vehicle","created_at","Date","now","updated_at","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addEarnings","faq","callback","create","get","findOne","exec","then","plan","err","Error","reject","listPlan","skip","limit","find","sort","module","exports","model"],"mappings":"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","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from 'mongoose';\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\nlet EarningsSchema = new mongoose.Schema(\n  {\n    id: {\n      type: Number,\n      default: 0,\n    },\n    paymentDate: { type: String },\n    paymentStatus: { type: String },\n    paymentAmount: { type: Number },\n    paymentReference: { type: String },\n    partnerId: { type: String },\n    partnerEmail: { type: String },\n    partnerBankAccount: { type: Object },\n    vehicleId: { type: String },\n    vehicleName: { type: String },\n    vehiclePlateNo: { type: String },\n    partner: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'partner_collections',\n    },\n    vehicle: { type: mongoose.Schema.Types.ObjectId, ref: 'cars_collections' },\n\n    created_at: {\n      type: Date,\n      default: Date.now,\n    },\n    updated_at: {\n      type: Date,\n      default: Date.now,\n    },\n  },\n  {\n    collection: 'earnings_collections',\n    timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' },\n  },\n);\n\nEarningsSchema.set('toJSON', { getters: true, virtuals: true });\nEarningsSchema.statics = {\n  // Add Intervention\n  addEarnings(faq, callback) {\n    return this.create(faq, callback);\n  },\n\n  get(id) {\n    return this.findOne(id)\n      .exec()\n      .then(plan => {\n        if (plan) {\n          return plan;\n        }\n        const err = new Error('No such itinerary exists!');\n        return Promise.reject(err);\n      });\n  },\n\n  listPlan({ skip = 0, limit = 50 } = {}) {\n    return this.find()\n      .sort({ created_at: -1 })\n      .skip(+skip)\n      .limit(+limit)\n      .exec();\n  },\n};\n\nmodule.exports = mongoose.model('EarningsModel', EarningsSchema);\n"],"file":"EarningsModel.js"}