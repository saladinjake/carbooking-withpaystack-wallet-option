{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/EarningsModel.js"],"names":["Promise","require","EarningsSchema","mongoose","Schema","id","type","Number","paymentDate","String","paymentStatus","paymentAmount","paymentReference","partnerId","partnerEmail","partnerBankAccount","Object","vehicleId","vehicleName","vehiclePlateNo","partner","Types","ObjectId","ref","vehicle","created_at","Date","now","updated_at","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addEarnings","faq","callback","create","get","findOne","exec","then","plan","err","Error","reject","listPlan","skip","limit","find","sort","module","exports","model"],"mappings":"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","sourcesContent":["'use strict';\r\nconst Promise = require('bluebird');\r\nimport mongoose from  'mongoose';\r\n\r\nlet EarningsSchema = new mongoose.Schema({\r\n     \r\n        id :{\r\n          type: Number,\r\n          default: 0\r\n        },\r\n        paymentDate:{type: String},\r\npaymentStatus:{type: String},\r\npaymentAmount:{type: Number},\r\npaymentReference:{type: String},\r\npartnerId:{type: String},\r\npartnerEmail:{type: String},\r\npartnerBankAccount:{type: Object},\r\nvehicleId:{type: String},\r\nvehicleName:{type: String},\r\nvehiclePlateNo:{type: String},\r\n        partner: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: \"partner_collections\",\r\n\r\n  },\r\n  vehicle:{type: mongoose.Schema.Types.ObjectId,\r\n    ref: \"cars_collections\",\r\n  },\r\n\r\n      \r\n        created_at : {\r\n          type: Date,\r\n          default: Date.now\r\n        },\r\n        updated_at :{\r\n          type: Date,\r\n          default: Date.now\r\n        },\r\n       \r\n      },{\r\n        collection: 'earnings_collections',\r\n        timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' }\r\n});\r\n\r\nEarningsSchema.set('toJSON', {getters: true, virtuals: true});\r\nEarningsSchema.statics = {\r\n             // Add Intervention\r\n            addEarnings(faq, callback)  {\r\n              return this.create(faq, callback);\r\n            },\r\n\r\n            get(id) {\r\n              return this.findOne(id)\r\n                .exec()\r\n                .then((plan) => {\r\n                  if (plan) {\r\n                    return plan;\r\n                  }\r\n                  const err = new Error('No such itinerary exists!');\r\n                  return Promise.reject(err);\r\n                });\r\n            },\r\n\r\n            \r\n            listPlan({ skip = 0, limit = 50 } = {}) {\r\n              return this.find()\r\n                .sort({ created_at: -1 })\r\n                .skip(+skip)\r\n                .limit(+limit)\r\n                .exec();\r\n            },\r\n\r\n       \r\n      }\r\n \r\nmodule.exports = mongoose.model('EarningsModel', EarningsSchema);\r\n\r\n\r\n"],"file":"EarningsModel.js"}