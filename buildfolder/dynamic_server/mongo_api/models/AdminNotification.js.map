{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/AdminNotification.js"],"names":["Promise","require","AdminNotificationSchema","mongoose","Schema","id","type","Number","user_id","String","status","for_users","Boolean","isViewed","description","created_at","Date","now","updated_at","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addNotification","user","callback","create","get","findOne","exec","then","err","Error","reject","listCars","skip","limit","find","sort","module","exports","model"],"mappings":"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","sourcesContent":["'use strict';\r\nconst Promise = require('bluebird');\r\nimport mongoose from  'mongoose';\r\n\r\nlet AdminNotificationSchema = new mongoose.Schema({\r\n        id :{\r\n          type: Number,\r\n         \r\n          default: 0\r\n        },\r\n        user_id:{\r\n          type: String,\r\n    \r\n        },\r\n\r\n        status:{\r\n          type:String,\r\n          default: \"new\"\r\n        },\r\n\r\n        for_users:{\r\n\r\n          type:Boolean,\r\n          default:true\r\n        },\r\n         isViewed: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n        // message:{\r\n        //   type: String,\r\n          \r\n        // },\r\n        type:{\r\n          type: String,\r\n          enum: ['success','failure','pending','error','information','payment','ticket', 'quotation'],\r\n          default:'information'\r\n        },\r\n        description: {\r\n          type: String,\r\n         \r\n        },\r\n        \r\n        \r\n        created_at : {\r\n          type: Date,\r\n          default: Date.now\r\n        },\r\n        updated_at :{\r\n          type: Date,\r\n          default: Date.now\r\n        },\r\n       \r\n      },{\r\n        collection: 'notifcation_collections',\r\n        timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' }\r\n});\r\n\r\nAdminNotificationSchema.set('toJSON', {getters: true, virtuals: true});\r\n\r\n      \r\n      /**\r\n       * Statics\r\n       */\r\nAdminNotificationSchema.statics = {\r\n             // Add Intervention\r\n            addNotification (user, callback)  {\r\n              return this.create(user, callback);\r\n            },\r\n\r\n            get(id) {\r\n              return this.findOne(id)\r\n                .exec()\r\n                .then((user) => {\r\n                  if (user) {\r\n                    return user;\r\n                  }\r\n                  const err = new Error('No such user exists!');\r\n                  return Promise.reject(err);\r\n                });\r\n            },\r\n\r\n            \r\n            listCars({ skip = 0, limit = 50 } = {}) {\r\n              return this.find()\r\n                .sort({ created_at: -1 })\r\n                .skip(+skip)\r\n                .limit(+limit)\r\n                .exec();\r\n            },\r\n\r\n           \r\n      }\r\n\r\n     \r\n\r\nmodule.exports = mongoose.model('AdminNotificationModel', AdminNotificationSchema);\r\n\r\n\r\n"],"file":"AdminNotification.js"}