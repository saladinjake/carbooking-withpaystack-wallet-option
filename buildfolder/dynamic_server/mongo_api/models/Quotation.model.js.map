{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/Quotation.model.js"],"names":["Promise","require","QuotationsSchema","mongoose","Schema","id","type","String","full_name","status","plan_id","quotation_id","email","amount","Number","reference","createdDate","Date","phone_number","userId","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","method","statics","addToWallet","data","callback","create","module","exports","model"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AADA,IAAMA,OAAO,0BAAGC,OAAO,CAAC,UAAD,CAAV,CAAb;AAEA,IAAMC,gBAAgB,0BAAG,IAAIC,qBAASC,MAAb,CAAoB;AACzCC,EAAAA,EAAE,EAAE;AACEC,IAAAA,IAAI,EAAEC,MADR;AAGE,eAAS;AAHX,GADqC;AAMzCC,EAAAA,SAAS,EAAE;AACPF,IAAAA,IAAI,EAAEC;AADC,GAN8B;AAUzCE,EAAAA,MAAM,EAAE;AACNH,IAAAA,IAAI,EAAEC,MADA;AAEN,YAAM,CACN,YADM,EAEN,QAFM,EAGN,QAHM,EAIN,MAJM,CAFA;AAQN,eAAS;AARH,GAViC;AAoBzCG,EAAAA,OAAO,EAAC;AACNJ,IAAAA,IAAI,EAACC,MADC;AAEN,eAAS;AAFH,GApBiC;AAwBzCI,EAAAA,YAAY,EAAC;AACZL,IAAAA,IAAI,EAACC,MADO;AAEX,eAAS;AAFE,GAxB4B;AA4BzCK,EAAAA,KAAK,EAAE;AACHN,IAAAA,IAAI,EAAEC;AADH,GA5BkC;AA+BzCM,EAAAA,MAAM,EAAE;AACJP,IAAAA,IAAI,EAAEQ;AADF,GA/BiC;AAkCzCC,EAAAA,SAAS,EAAE;AACPT,IAAAA,IAAI,EAAEC;AADC,GAlC8B;AAuCzCS,EAAAA,WAAW,EAAC;AACRV,IAAAA,IAAI,EAAEW,IADE;AAER,eAAS,IAAIA,IAAJ;AAFD,GAvC6B;AA4CxCC,EAAAA,YAAY,EAAC;AACZZ,IAAAA,IAAI,EAAEC;AADM,GA5C2B;AAgDzCY,EAAAA,MAAM,EAAC;AACHb,IAAAA,IAAI,EAACC;AADF;AAhDkC,CAApB,EAmDvB;AACMa,EAAAA,UAAU,EAAE,uBADlB;AAEMC,EAAAA,UAAU,EAAE;AAAEC,IAAAA,SAAS,EAAE,YAAb;AAA2BC,IAAAA,SAAS,EAAE;AAAtC;AAFlB,CAnDuB,CAAH,CAAtB;;AA0DArB,gBAAgB,CAACsB,GAAjB,CAAqB,QAArB,EAA+B;AAACC,EAAAA,OAAO,EAAE,IAAV;AAAgBC,EAAAA,QAAQ,EAAE;AAA1B,CAA/B;AAGM;;;;;AAGAxB,gBAAgB,CAACyB,MAAjB,CAAwB,EAAxB;AAIA;;;;;AAGCzB,gBAAgB,CAAC0B,OAAjB,GAA2B;AAErB;AACDC,EAAAA,WAHsB,uBAGRC,IAHQ,EAGFC,QAHE,EAGS;AAAA;AAAA;AAC7B,WAAO,KAAKC,MAAL,CAAYF,IAAZ,EAAiBC,QAAjB,CAAP;AACD;AALqB,CAA3B;;AAWPE,MAAM,CAACC,OAAP,GAAiB/B,qBAASgC,KAAT,CAAe,iBAAf,EAAkCjC,gBAAlC,CAAjB","sourcesContent":["const Promise = require('bluebird');\r\nimport mongoose from  'mongoose';\r\nconst QuotationsSchema = new mongoose.Schema({\r\n    id :{\r\n          type: String,\r\n         \r\n          default: \"0\"\r\n        },\r\n    full_name: {\r\n        type: String,    \r\n    },\r\n\r\n    status: {\r\n      type: String,\r\n      enum: [\r\n      'Successful',\r\n      'Failed',\r\n      'Unpaid',\r\n      'Paid'\r\n      ],\r\n      default: 'Successful',\r\n    },\r\n    plan_id:{\r\n      type:String,\r\n      default: 'No plan assigned yet'\r\n    },\r\n    quotation_id:{\r\n     type:String,\r\n      default: 'No quotation assigned yet'\r\n    },\r\n    email: {\r\n        type: String, \r\n    },\r\n    amount: {\r\n        type: Number, \r\n    },\r\n    reference: {\r\n        type: String, \r\n       \r\n    },\r\n\r\n    createdDate:{\r\n        type: Date,\r\n        default: new Date()\r\n    }, \r\n\r\n     phone_number:{\r\n      type: String\r\n    },\r\n\r\n    userId:{\r\n        type:String\r\n    }\r\n},{\r\n        collection: 'abiquotes_collections',\r\n        timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' }\r\n});\r\n\r\n\r\n\r\nQuotationsSchema.set('toJSON', {getters: true, virtuals: true});\r\n\r\n      \r\n      /**\r\n       * Methods\r\n       */\r\n      QuotationsSchema.method({\r\n        \r\n      });\r\n\r\n      /**\r\n       * Statics\r\n       */\r\n       QuotationsSchema.statics = {\r\n            \r\n             // Add Intervention\r\n            addToWallet  (data, callback)  {\r\n              return this.create(data,callback);\r\n            },\r\n\r\n    };\r\n\r\n\r\n\r\nmodule.exports = mongoose.model('QuotationsModel', QuotationsSchema);"],"file":"Quotation.model.js"}