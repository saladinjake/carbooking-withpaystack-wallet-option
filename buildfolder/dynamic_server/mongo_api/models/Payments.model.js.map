{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/Payments.model.js"],"names":["Promise","require","PaymentsSchema","mongoose","Schema","id","type","String","full_name","status","plan_id","quotation_id","email","amount","Number","reference","phone_number","createdDate","Date","userId","collection","set","getters","virtuals","method","statics","addToWallet","data","callback","create","module","exports","model"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AADA,IAAMA,OAAO,2BAAGC,OAAO,CAAC,UAAD,CAAV,CAAb;AAEA,IAAMC,cAAc,2BAAG,IAAIC,qBAASC,MAAb,CAAoB;AACvCC,EAAAA,EAAE,EAAE;AACEC,IAAAA,IAAI,EAAEC,MADR;AAGE,eAAS;AAHX,GADmC;AAMvCC,EAAAA,SAAS,EAAE;AACPF,IAAAA,IAAI,EAAEC;AADC,GAN4B;AAUvCE,EAAAA,MAAM,EAAE;AACNH,IAAAA,IAAI,EAAEC,MADA;AAEN,YAAM,CACN,YADM,EAEN,QAFM,EAGN,QAHM,CAFA;AAON,eAAS;AAPH,GAV+B;AAmBvCG,EAAAA,OAAO,EAAC;AACNJ,IAAAA,IAAI,EAACC,MADC;AAEN,eAAS;AAFH,GAnB+B;AAuBvCI,EAAAA,YAAY,EAAC;AACZL,IAAAA,IAAI,EAACC,MADO;AAEX,eAAS;AAFE,GAvB0B;AA2BvCK,EAAAA,KAAK,EAAE;AACHN,IAAAA,IAAI,EAAEC;AADH,GA3BgC;AA8BvCM,EAAAA,MAAM,EAAE;AACJP,IAAAA,IAAI,EAAEQ;AADF,GA9B+B;AAiCvCC,EAAAA,SAAS,EAAE;AACPT,IAAAA,IAAI,EAAEC;AADC,GAjC4B;AAqCtCS,EAAAA,YAAY,EAAC;AACZV,IAAAA,IAAI,EAAEC;AADM,GArCyB;AAyCvCU,EAAAA,WAAW,EAAC;AACRX,IAAAA,IAAI,EAAEY,IADE;AAER,eAAS,IAAIA,IAAJ;AAFD,GAzC2B;AA8CvCC,EAAAA,MAAM,EAAC;AACHb,IAAAA,IAAI,EAACC;AADF;AA9CgC,CAApB,EAiDrB;AACMa,EAAAA,UAAU,EAAE,iBADlB,CAEM;;AAFN,CAjDqB,CAAH,CAApB;;AAwDAlB,cAAc,CAACmB,GAAf,CAAmB,QAAnB,EAA6B;AAACC,EAAAA,OAAO,EAAE,IAAV;AAAgBC,EAAAA,QAAQ,EAAE;AAA1B,CAA7B;AAGM;;;;;AAGArB,cAAc,CAACsB,MAAf,CAAsB,EAAtB;AAIA;;;;;AAGCtB,cAAc,CAACuB,OAAf,GAAyB;AAEnB;AACDC,EAAAA,WAHoB,uBAGNC,IAHM,EAGAC,QAHA,EAGW;AAAA;AAAA;AAC7B,WAAO,KAAKC,MAAL,CAAYF,IAAZ,EAAiBC,QAAjB,CAAP;AACD;AALmB,CAAzB;;AAWPE,MAAM,CAACC,OAAP,GAAiB5B,qBAAS6B,KAAT,CAAe,cAAf,EAA+B9B,cAA/B,CAAjB","sourcesContent":["const Promise = require('bluebird');\r\nimport mongoose from  'mongoose';\r\nconst PaymentsSchema = new mongoose.Schema({\r\n    id :{\r\n          type: String,\r\n         \r\n          default: \"0\"\r\n        },\r\n    full_name: {\r\n        type: String,    \r\n    },\r\n\r\n    status: {\r\n      type: String,\r\n      enum: [\r\n      'Successful',\r\n      'Failed',\r\n      'Unpaid'\r\n      ],\r\n      default: 'Successful',\r\n    },\r\n    plan_id:{\r\n      type:String,\r\n      default: 'No plan assigned yet'\r\n    },\r\n    quotation_id:{\r\n     type:String,\r\n      default: 'No quotation assigned yet'\r\n    },\r\n    email: {\r\n        type: String, \r\n    },\r\n    amount: {\r\n        type: Number, \r\n    },\r\n    reference: {\r\n        type: String, \r\n       \r\n    },\r\n     phone_number:{\r\n      type: String\r\n    },\r\n\r\n    createdDate:{\r\n        type: Date,\r\n        default: new Date()\r\n    }, \r\n\r\n    userId:{\r\n        type:String\r\n    }\r\n},{\r\n        collection: 'pay_collections',\r\n        //timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' }\r\n});\r\n\r\n\r\n\r\nPaymentsSchema.set('toJSON', {getters: true, virtuals: true});\r\n\r\n      \r\n      /**\r\n       * Methods\r\n       */\r\n      PaymentsSchema.method({\r\n        \r\n      });\r\n\r\n      /**\r\n       * Statics\r\n       */\r\n       PaymentsSchema.statics = {\r\n            \r\n             // Add Intervention\r\n            addToWallet  (data, callback)  {\r\n              return this.create(data,callback);\r\n            },\r\n\r\n    };\r\n\r\n\r\n\r\nmodule.exports = mongoose.model('PaymentModel', PaymentsSchema);"],"file":"Payments.model.js"}