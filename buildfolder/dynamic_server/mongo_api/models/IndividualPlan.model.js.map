{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/models/IndividualPlan.model.js"],"names":["Promise","require","IndividualPlanSchema","mongoose","Schema","id","type","Number","car_max","status","String","plan_name","plan_categories","description","required","price","created_at","Date","now","updated_at","collection","timestamps","createdAt","updatedAt","set","getters","virtuals","statics","addIndividualPlan","user","callback","create","get","findOne","exec","then","plan","err","Error","reject","listPlan","skip","limit","find","sort","module","exports","model"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AADA,IAAMA,OAAO,2BAAGC,OAAO,CAAC,UAAD,CAAV,CAAb;AAGA,IAAIC,oBAAoB,2BAAG,IAAIC,qBAASC,MAAb,CAAoB;AACvCC,EAAAA,EAAE,EAAE;AACFC,IAAAA,IAAI,EAAEC,MADJ;AAGF,eAAS;AAHP,GADmC;AAOvCC,EAAAA,OAAO,EAAC;AACNF,IAAAA,IAAI,EAACC,MADC;AAEN,eAAQ;AAFF,GAP+B;AAavCE,EAAAA,MAAM,EAAC;AACPH,IAAAA,IAAI,EAACI,MADE;AAEP,YAAK,CACJ,QADI,EAEJ,SAFI,EAGJ,UAHI,EAIJ,WAJI,CAFE;AAQP,eAAS;AARF,GAbgC;AAwBvCC,EAAAA,SAAS,EAAC;AACRL,IAAAA,IAAI,EAAEI,MADE;AAER,eAAQ;AAFA,GAxB6B;AA6BvCE,EAAAA,eAAe,EAAC;AACdN,IAAAA,IAAI,EAAEI,MADQ;AAEd;AACA,eAAS;AAHK,GA7BuB;AAoCvCG,EAAAA,WAAW,EAAC;AACVP,IAAAA,IAAI,EAAEI,MADI;AAEVI,IAAAA,QAAQ,EAAC;AAFC,GApC2B;AA0CvCC,EAAAA,KAAK,EAAC;AACJT,IAAAA,IAAI,EAAEI,MADF;AAEJI,IAAAA,QAAQ,EAAC;AAFL,GA1CiC;AAmDvCE,EAAAA,UAAU,EAAG;AACXV,IAAAA,IAAI,EAAEW,IADK;AAEX,eAASA,IAAI,CAACC;AAFH,GAnD0B;AAuDvCC,EAAAA,UAAU,EAAE;AACVb,IAAAA,IAAI,EAAEW,IADI;AAEV,eAASA,IAAI,CAACC;AAFJ;AAvD2B,CAApB,EA4DnB;AACAE,EAAAA,UAAU,EAAE,4BADZ;AAEAC,EAAAA,UAAU,EAAE;AAAEC,IAAAA,SAAS,EAAE,YAAb;AAA2BC,IAAAA,SAAS,EAAE;AAAtC;AAFZ,CA5DmB,CAAH,CAAxB;;AAiEArB,oBAAoB,CAACsB,GAArB,CAAyB,QAAzB,EAAmC;AAACC,EAAAA,OAAO,EAAE,IAAV;AAAgBC,EAAAA,QAAQ,EAAE;AAA1B,CAAnC;;AAGKxB,oBAAoB,CAACyB,OAArB,GAA+B;AACvB;AACDC,EAAAA,iBAFwB,6BAENC,IAFM,EAEAC,QAFA,EAEW;AAAA;AAAA;AACjC,WAAO,KAAKC,MAAL,CAAYF,IAAZ,EAAkBC,QAAlB,CAAP;AACD,GAJuB;AAMxBE,EAAAA,GANwB,eAMpB3B,EANoB,EAMhB;AAAA;AAAA;AACN,WAAO,KAAK4B,OAAL,CAAa5B,EAAb,EACJ6B,IADI,GAEJC,IAFI,CAEC,UAACC,IAAD,EAAU;AAAA;AAAA;;AACd,UAAIA,IAAJ,EAAU;AAAA;AAAA;AACR,eAAOA,IAAP;AACD,OAFD;AAAA;AAAA;;AAGA,UAAMC,GAAG,2BAAG,IAAIC,KAAJ,CAAU,sBAAV,CAAH,CAAT;AAJc;AAKd,aAAOtC,OAAO,CAACuC,MAAR,CAAeF,GAAf,CAAP;AACD,KARI,CAAP;AASD,GAhBuB;AAmBxBG,EAAAA,QAnBwB,sBAmBgB;AAAA,8GAAJ,EAAI;AAAA,yBAA7BC,IAA6B;AAAA,QAA7BA,IAA6B,qDAAtB,CAAsB;AAAA,0BAAnBC,KAAmB;AAAA,QAAnBA,KAAmB,sDAAX,EAAW;;AAAA;AAAA;AACtC,WAAO,KAAKC,IAAL,GACJC,IADI,CACC;AAAE5B,MAAAA,UAAU,EAAE,CAAC;AAAf,KADD,EAEJyB,IAFI,CAEC,CAACA,IAFF,EAGJC,KAHI,CAGE,CAACA,KAHH,EAIJR,IAJI,EAAP;AAKD;AAzBuB,CAA/B;;AA+BLW,MAAM,CAACC,OAAP,GAAiB3C,qBAAS4C,KAAT,CAAe,qBAAf,EAAsC7C,oBAAtC,CAAjB","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nimport mongoose from  'mongoose';\n\nlet IndividualPlanSchema = new mongoose.Schema({\n        id :{\n          type: Number,\n         \n          default: 0\n        },\n\n        car_max:{\n          type:Number,\n          default:3\n\n        },\n\n        status:{\n        type:String,\n        enum:[\n         \"Active\",\n         \"Dormant\",\n         \"Disabled\",\n         \"Suspended\"\n        ],\n        default: \"Active\"\n      },\n\n        plan_name:{\n          type: String,\n          default:'Individual'\n        },\n\n        plan_categories:{\n          type: String,\n          //enum:['Saver', 'Richly', 'Premium'],\n          default: 'Saver'\n        },\n\n        \n        description:{\n          type: String,\n          required:true\n        },\n\n\n        price:{\n          type: String,\n          required:true\n        },\n\n       \n\n        \n\n        created_at : {\n          type: Date,\n          default: Date.now\n        },\n        updated_at :{\n          type: Date,\n          default: Date.now\n        },\n       \n      },{\n        collection: 'individualplan_collections',\n        timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' }\n});\n\nIndividualPlanSchema.set('toJSON', {getters: true, virtuals: true});\n\n     \n     IndividualPlanSchema.statics = {\n             // Add Intervention\n            addIndividualPlan(user, callback)  {\n              return this.create(user, callback);\n            },\n\n            get(id) {\n              return this.findOne(id)\n                .exec()\n                .then((plan) => {\n                  if (plan) {\n                    return plan;\n                  }\n                  const err = new Error('No such plan exists!');\n                  return Promise.reject(err);\n                });\n            },\n\n            \n            listPlan({ skip = 0, limit = 50 } = {}) {\n              return this.find()\n                .sort({ created_at: -1 })\n                .skip(+skip)\n                .limit(+limit)\n                .exec();\n            },\n\n       \n      }\n\n\nmodule.exports = mongoose.model('IndividualPlanModel', IndividualPlanSchema);\n\n\n"],"file":"IndividualPlan.model.js"}