{"version":3,"sources":["../../../server/dynamic_server/mongo_api/App.js"],"names":["require","config","debug","util","io","connect","Chat","chatRouter","getApiAndEmit","socket","response","Date","emit","MongoAppDemo","express","use","allowedOrigins","corsOption","methods","credentials","exposedHeaders","secret","process","env","SECRET","resave","saveUninitialized","passport","initialize","bodyParser","json","disable","urlencoded","extended","serializeUser","user","done","deserializeUser","obj","router","BridgeRouter","attachRoutes","port","PORT","request","next","status","error","__dirname","set","pug","that","app","httpServer","http","createServer","listen","console","log","handlePreflightRequest","req","res","headers","origin","writeHead","end","interval","locationMap","Map","on","id","clearInterval","setInterval","pos","Array","from","data","broadcast","message","msg","then","db","chatMessage","sender","save"],"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","sourcesContent":["require('dotenv').config();\n// import dotenv from \"dotenv\"\nimport express, { Router } from 'express';\nimport mongoose from 'mongoose';\nimport cors from 'cors';\nconst debug = require('debug')('commute-dev-Proj-repo:server/server');\nconst util = require('util');\nimport bodyParser from 'body-parser';\nimport logger from 'morgan';\nimport BridgeRouter from './api/routes';\nimport config from './config/mongo_config.js';\nimport DbMongoose from './models/db';\nimport cookieParser from 'cookie-parser';\nimport passport from 'passport';\nimport session from 'express-session';\nimport methodOverride from 'method-override';\nimport fs from 'fs';\nimport path from 'path';\nimport compression from 'compression';\n// import helmet from 'helmet'; // csrf xcrf security\nimport pug from 'pug';\n//var config = require('./oauth.js');\nimport UserModel from './models/User.model';\nimport error from './middlewares/error';\nimport http from 'http';\nimport https from 'https';\nimport socket_io from 'socket.io';\nimport socketIo from 'socket.io';\nrequire('./config/passport'); // pass passport for configuration\n\nvar io = socketIo();\n//database connection\nconst connect = require('./dbconnect');\nconst Chat = require('./models/Chat');\nconst chatRouter = require('./route/chatroute');\n\nconst getApiAndEmit = socket => {\n  const response = new Date();\n  // console.log(\"emit me frm server to user\")\n  // Emitting a new message. Will be consumed by the client\n  socket.emit('FromAPI', response);\n};\n\nclass MongoAppDemo {\n  constructor() {\n    this.express = express();\n    this.express.use(logger('dev'));\n\n    //this.express.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\n    // let corsOption = {\n    //     origin: true,\n    //     methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n    //     credentials: true,\n    //     exposedHeaders: ['x-auth-token']\n    // };\n\n    var allowedOrigins = [\n      'http://localhost:4001',\n      'https://checkout.paystack.com',\n      'https://google.com',\n      'https:mail.google.com',\n      'https://facebook.com',\n      'https://twitter.com',\n      'https://instagram.com',\n    ];\n\n    let corsOption = {\n      'Access-Control-Allow-Origin': '*',\n      methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n      credentials: true,\n      exposedHeaders: ['x-auth-token'],\n      'Access-Control-Allow-Credentials': 'true',\n      'Access-Control-Allow-Origin': 'http://localhost:4001/',\n    };\n    this.express.use(cors(corsOption));\n    // gzip compression\n    this.express.use(compression());\n    // secure apps by setting various HTTP headers\n    // this.express.use(helmet());\n    // if error is not an instanceOf APIError, convert it.\n    //     this.express.use(error.converter);\n    // // catch 404 and forward to error handler\n    //     this.express.use(error.notFound);\n    // // error handler, send stacktrace only during development\n    //     this.express.use(error.handler);\n    //     this.express.options(\"/*\", function(req, res, next){\n    //   res.header('Access-Control-Allow-Origin', '*');\n    //   res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n    //   res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With');\n    //   res.sendStatus(200);\n    // });\n    // this.express.use(cors());\n\n    // required for passport\n    this.express.use(\n      session({\n        secret: process.env.SECRET,\n        resave: true,\n        saveUninitialized: true,\n      }),\n    ); // session secret\n    this.express.use(passport.initialize());\n\n    //this.express.use(cors(corsOption));\n    this.express.use(bodyParser.json()); //\n    // this.express.use(methodOverride());\n    this.express.disable('x-powered-by');\n    this.express.use(\n      bodyParser.urlencoded({\n        extended: false,\n      }),\n    );\n    this.express.use(cookieParser());\n    // serialize and deserialize\n    // passport.serializeUser(function(user, done) {\n    //   console.log('serializeUser: ' + user.id);\n    //   done(null, user.id);\n    // });\n    // passport.deserializeUser(function(id, done) {\n    //   UserModel.findById(id, function(err, user){\n    //     console.log(user);\n    //       if(!err) done(null, user);\n    //       else done(err, null);\n    //     });\n    // });\n\n    passport.serializeUser(function(user, done) {\n      done(null, user);\n    });\n\n    passport.deserializeUser(function(obj, done) {\n      done(null, obj);\n    });\n    const router = Router();\n    new BridgeRouter(router).attachRoutes();\n    this.port = process.env.PORT || 12000;\n    //define the route real path\n    this.express.use('/api/v1', router);\n    //routes\n    this.express.use('/api/v1/chats', chatRouter);\n    this.express.use((request, response, next) => {\n      response.status(404).json({\n        status: 404,\n        error: 'User has no record',\n      });\n      next();\n    });\n    this.express.disable('x-powered-by');\n    this.express.use(express.static(__dirname + '../../public'));\n    // app.use(express.static(path.join(__dirname, 'public/')));\n    this.express.set('view engine', pug);\n  }\n\n  initialize() {}\n\n  run(port = 12000) {\n    const that = this;\n    if (port) {\n      this.port = port;\n      this.port = port;\n    }\n\n    let app = that.express;\n    // Listen both http & https ports\n    const httpServer = http.createServer(app);\n    //const httpsServer = https.createServer({\n    //    key: fs.readFileSync('/etc/letsencrypt/live/demouserapp.commute.ng/privkey.pem'),\n    //     cert: fs.readFileSync('/etc/letsencrypt/live/demouserapp.commute.ng/fullchain.pem'),\n    //\n    //    requestCert: false,\n    //    rejectUnauthorized: false\n    //   }, app);\n\n    httpServer.listen(12000, () => {\n      console.log('HTTP Server running on port 12000');\n    });\n\n    // const io = socketIo(httpServer);\n\n     const io = require(\"socket.io\")(httpServer, {\n        handlePreflightRequest: (req, res) => {\n            const headers = {\n                \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\n                \"Access-Control-Allow-Origin\": req.headers.origin, //or the specific origin you want to give access to,\n                \"Access-Control-Allow-Credentials\": true\n            };\n            res.writeHead(200, headers);\n            res.end();\n        }\n    });\n\n    let interval;\n    const locationMap = new Map();\n    io.on('connection', socket => {\n      console.log('New client connected' + socket.id);\n      if (interval) {\n        clearInterval(interval);\n      }\n      interval = setInterval(() => getApiAndEmit(socket), 1000);\n\n      socket.on('updateLocation', pos => {\n        locationMap.set(socket.id, pos);\n      });\n      socket.on('requestLocations', () => {\n        socket.emit('locationsUpdate', Array.from(locationMap));\n      });\n\n      //server communication for chat message\n      //Someone is typing\n      socket.on('typing', data => {\n        socket.broadcast.emit('notifyTyping', {\n          user: data.user,\n          message: data.message,\n        });\n      });\n\n      //when soemone stops typing\n      socket.on('stopTyping', () => {\n        socket.broadcast.emit('notifyStopTyping');\n      });\n\n      socket.on('chat message', function(msg) {\n        console.log('message: ' + msg);\n        //broadcast message to everyone in port:5000 except yourself.\n        socket.broadcast.emit('received', { message: msg });\n        //save chat to the database\n        connect.then(db => {\n          console.log('connected correctly to the server');\n          let chatMessage = new Chat({ message: msg, sender: 'Anonymous' });\n\n          chatMessage.save();\n        });\n      });\n      socket.on('disconnect', () => {\n        console.log('Client disconnected');\n        clearInterval(interval);\n\n        locationMap.delete(socket.id);\n      });\n    });\n\n    // httpServer.listen(12000, () => console.log(`Listening on port ${that.port}`));\n\n    // httpServer.listen(12000, () => console.log(`Listening on port ${that.port}`));\n\n    // httpsServer.listen(12000, () => {\n    //     console.log('HTTPS Server running on port 443');\n    // });\n\n    // io.listen(\n    //    // that.express.listen(that.port, err => {\n    //    //    if (err) {\n    //    //      return console.log(err);\n    //    //    }\n    //    //    console.log(`server is listening on ${that.port}`);\n    //    // })\n    // );\n\n    // that.express.io = io.on(\"connection\", function(socket){\n    //   console.log(\"Socket connected: \" + socket.id);\n    // });\n\n    // });\n  }\n}\n\nexport { passport };\nexport default MongoAppDemo;\n"],"file":"App.js"}