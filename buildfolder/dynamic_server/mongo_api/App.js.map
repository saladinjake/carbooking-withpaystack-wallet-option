{"version":3,"sources":["../../../server/dynamic_server/mongo_api/App.js"],"names":["require","config","debug","util","pug","error","http","https","socket_io","socketIo","io","Chat","connect","chatRouter","getApiAndEmit","socket","response","Date","emit","MongoAppDemo","express","use","allowedOrigins","corsOption","methods","credentials","exposedHeaders","secret","process","env","SECRET","resave","saveUninitialized","passport","initialize","bodyParser","json","disable","urlencoded","extended","serializeUser","user","done","deserializeUser","obj","router","BridgeRouter","attachRoutes","port","PORT","request","next","status","__dirname","set","that","app","httpServer","createServer","listen","console","log","handlePreflightRequest","req","res","headers","origin","writeHead","end","interval","locationMap","Map","on","id","clearInterval","setInterval","pos","Array","from","data","broadcast","message","msg","then","db","chatMessage","sender","save"],"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","sourcesContent":["require('dotenv').config();\nimport express, { Router } from 'express';\nimport mongoose from 'mongoose'\nimport cors from 'cors';\nconst debug = require('debug')('ireport:server/server');\nconst util = require('util');\nimport bodyParser from 'body-parser';\nimport logger from 'morgan';\nimport BridgeRouter from './api/routes';\nimport config from './config/mongo_config.js';\nimport DbMongoose from './models/db';\nimport cookieParser from 'cookie-parser';\nimport passport from 'passport';\nimport session from 'express-session';\nimport methodOverride from 'method-override';\nimport fs from 'fs';\nimport path from 'path';\nimport compression from 'compression';\n// import helmet from 'helmet'; // csrf xcrf security\nconst pug = require('pug');\n//var config = require('./oauth.js');\nimport UserModel from './models/User.model';\n\nconst error = require('./middlewares/error');\n\n\nconst http = require('http')\nconst https = require('https');\n\n\nvar socket_io = require(\"socket.io\");\n\nvar socketIo = require(\"socket.io\");\nvar io = socketIo();\n\n//database connection\nconst Chat = require(\"./models/Chat\");\nconst connect = require(\"./dbconnect\");\n\nconst chatRouter = require(\"./route/chatroute\");\n\n//import favicon from 'serve-favicon';\n//const exphbs = require('express-handlebars');\n\nrequire('./config/passport'); // pass passport for configuration\n\n\n\nconst getApiAndEmit = socket => {\n  const response = new Date();\n  // console.log(\"emit me frm server to user\")\n  // Emitting a new message. Will be consumed by the client\n  socket.emit(\"FromAPI\", response);\n};\n\n\n\nclass MongoAppDemo {\n  constructor() {\n    this.express = express();\n    this.express.use(logger('dev'));\n  \n    //this.express.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\n    // let corsOption = {\n    //     origin: true,\n    //     methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n    //     credentials: true,\n    //     exposedHeaders: ['x-auth-token']\n    // };\n\n    var allowedOrigins = [\n      'http://localhost:4000',\n      'https://checkout.paystack.com',\n      \"https://google.com\",\n      \"https:mail.google.com\",\n      \"https://facebook.com\",\n      \"https://twitter.com\",\n      \"https://instagram.com\"\n    ];\n\n    let corsOption = {\n       'Access-Control-Allow-Origin': '*',\n        \n        methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n        credentials: true,\n        exposedHeaders: ['x-auth-token'],\n         \"Access-Control-Allow-Credentials\" :\"true\"\n        \n    };\n    this.express.use(cors(corsOption));\n\n    // gzip compression\n    this.express.use(compression());\n// secure apps by setting various HTTP headers\n    // this.express.use(helmet());\n\n    // if error is not an instanceOf APIError, convert it.\n//     this.express.use(error.converter);\n\n// // catch 404 and forward to error handler\n//     this.express.use(error.notFound);\n\n// // error handler, send stacktrace only during development\n//     this.express.use(error.handler);\n\n//     this.express.options(\"/*\", function(req, res, next){\n//   res.header('Access-Control-Allow-Origin', '*');\n//   res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n//   res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With');\n//   res.sendStatus(200);\n// });\n   // this.express.use(cors());\n    \n    // required for passport\n    this.express.use(session({ secret: process.env.SECRET, \n          resave: true,\n          saveUninitialized: true \n    })); // session secret\n    this.express.use(passport.initialize());\n    \n    //this.express.use(cors(corsOption));\n        \n    this.express.use(bodyParser.json());//\n    \n    // this.express.use(methodOverride());\n    this.express.disable('x-powered-by');\n    this.express.use(\n          bodyParser.urlencoded({\n            extended: false,\n          }),\n    );\n    this.express.use(cookieParser());\n\n    // serialize and deserialize\n    // passport.serializeUser(function(user, done) {\n    //   console.log('serializeUser: ' + user.id);\n    //   done(null, user.id);\n    // });\n    // passport.deserializeUser(function(id, done) {\n    //   UserModel.findById(id, function(err, user){\n    //     console.log(user);\n    //       if(!err) done(null, user);\n    //       else done(err, null);\n    //     });\n    // });\n\n    passport.serializeUser(function(user, done) {\n      done(null, user);\n    });\n\n    passport.deserializeUser(function(obj, done) {\n      done(null, obj);\n    });\n\n    \n\n    const router = Router();\n    new BridgeRouter(router).attachRoutes();\n\n    this.port = process.env.PORT || 12000;\n    //define the route real path\n    this.express.use('/api/v1', router);\n    //routes\n    this.express.use(\"/api/v1/chats\", chatRouter);\n\n    this.express.use((request, response, next) => {\n      response.status(404).json({\n        status: 404,\n        error: 'User has no record',\n      });\n      next();\n    });\n    this.express.disable('x-powered-by');\n    this.express.use(express.static(__dirname +'../../../public'));\n\n\n      // app.use(express.static(path.join(__dirname, 'public/')));\n      this.express.set('view engine', pug);\n\n\n  \n    \n  }\n\n  initialize() {}\n\n  run(port = 12000) {\n    const that = this;\n    if (port) {\n      this.port = port;\n      this.port = port;\n    }\n\n\n     let app = that.express; \n\n\n     // Listen both http & https ports\n\n         const httpServer = http.createServer(app);\n      // const httpsServer = https.createServer({\n      //    key: fs.readFileSync('/etc/letsencrypt/live/demouserapp.commute.ng/privkey.pem'),\n      //     cert: fs.readFileSync('/etc/letsencrypt/live/demouserapp.commute.ng/fullchain.pem'),\n        \n      //    requestCert: false, \n      //    rejectUnauthorized: false \n      //   }, app);\n\n httpServer.listen(12000, () => {\n    console.log('HTTP Server running on port 12000');\n}); \n\n\n\n// const io = socketIo(httpServer);\n\n\n const io = require(\"socket.io\")(httpServer, {\n    handlePreflightRequest: (req, res) => {\n        const headers = {\n            \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\n            \"Access-Control-Allow-Origin\": req.headers.origin, //or the specific origin you want to give access to,\n            \"Access-Control-Allow-Credentials\": true\n        };\n        res.writeHead(200, headers);\n        res.end();\n    }\n});\n  \n\nlet interval;\n\n\n\n\nconst locationMap = new Map()\n\n\nio.on('connection', socket => {\n  console.log(\"New client connected\" + socket.id);\n  if (interval) {\n    clearInterval(interval);\n  }\n  interval = setInterval(() => getApiAndEmit(socket), 1000);\n  \n\n\n  socket.on('updateLocation', pos => {\n    locationMap.set(socket.id, pos)\n  })\n\n  socket.on('requestLocations', () => {\n    socket.emit('locationsUpdate', Array.from(locationMap))\n  })\n\n\n\n\n\n\n\n\n  //server communication for chat message\n\n\n\n  //Someone is typing\n  socket.on(\"typing\", data => {\n    socket.broadcast.emit(\"notifyTyping\", {\n      user: data.user,\n      message: data.message\n    });\n  });\n\n  //when soemone stops typing\n  socket.on(\"stopTyping\", () => {\n    socket.broadcast.emit(\"notifyStopTyping\");\n  });\n\n  socket.on(\"chat message\", function(msg) {\n    console.log(\"message: \" + msg);\n\n    //broadcast message to everyone in port:5000 except yourself.\n    socket.broadcast.emit(\"received\", { message: msg });\n\n    //save chat to the database\n    connect.then(db => {\n      console.log(\"connected correctly to the server\");\n      let chatMessage = new Chat({ message: msg, sender: \"Anonymous\" });\n\n      chatMessage.save();\n    });\n  });\n\n\n\n\n\n\n\n  socket.on('disconnect', () => {\n    console.log(\"Client disconnected\");\n    clearInterval(interval);\n    \n    locationMap.delete(socket.id)\n  })\n\n\n\n})\n\n\n\n    // httpServer.listen(12000, () => console.log(`Listening on port ${that.port}`));\n\n  // httpServer.listen(12000, () => console.log(`Listening on port ${that.port}`));\n\n\n\n\n\n\n// httpsServer.listen(12000, () => {\n//     console.log('HTTPS Server running on port 443');\n// });\n   \n\n\n\n\n\n\n\n    // io.listen(\n    //    // that.express.listen(that.port, err => {\n    //    //    if (err) {\n    //    //      return console.log(err);\n    //    //    }\n    //    //    console.log(`server is listening on ${that.port}`);\n    //    // })\n    // );\n\n    // that.express.io = io.on(\"connection\", function(socket){\n    //   console.log(\"Socket connected: \" + socket.id);\n    // });\n\n\n// }); \n\n \n\n   }\n\n}\n\n\n\nexport { passport };\nexport default MongoAppDemo;\n"],"file":"App.js"}