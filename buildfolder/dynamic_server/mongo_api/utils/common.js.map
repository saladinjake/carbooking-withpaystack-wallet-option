{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/utils/common.js"],"names":["Utils","validatePassword","password","userPassword","bcrypt","compareSync","hashPassword","salt","genSaltSync","pwd","hashSync","jwtSigner","payload","jwt","sign","process","env","JWT_SECRET","expiresIn","stripNull","obj","cleanObj","Object","keys","forEach","val","newVal"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;AACA;;AACA;;AACA;AACA,IAAMA,KAAK,2BAAG;AACZ;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,gBAPY,4BAOKC,QAPL,EAOeC,YAPf,EAO6B;AAAA;AAAA;AACvC,WAAOC,mBAAOC,WAAP,CAAmBH,QAAnB,EAA6BC,YAA7B,CAAP;AACD,GATW;;AAUZ;AACF;AACA;AACA;AACA;AACEG,EAAAA,YAfY,wBAeCJ,QAfD,EAeW;AAAA;AACrB,QAAMK,IAAI,2BAAGH,mBAAOI,WAAP,CAAmB,EAAnB,CAAH,CAAV;AACA,QAAMC,GAAG,2BAAGL,mBAAOM,QAAP,CAAgBR,QAAhB,EAA0BK,IAA1B,CAAH,CAAT;AAFqB;AAGrB,WAAOE,GAAP;AACD,GAnBW;;AAoBZ;AACF;AACA;AACA;AACEE,EAAAA,SAxBY,qBAwBFC,OAxBE,EAwBO;AAAA;AAAA;AACjB,WAAOC,yBAAIC,IAAJ,CAASF,OAAT,EAAkBG,OAAO,CAACC,GAAR,CAAYC,UAA9B,EAA0C;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAA1C,CAAP;AACD,GA1BW;;AA2BZ;AACF;AACA;AACA;AACA;AACEC,EAAAA,SAhCY,qBAgCFC,GAhCE,EAgCG;AAAA;AACb,QAAIC,QAAQ,2BAAG,EAAH,CAAZ;AADa;AAGbC,IAAAA,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBI,OAAjB,CAAyB,UAAAC,GAAG,EAAI;AAAA;AAC9B,UAAMC,MAAM,2BAAGN,GAAG,CAACK,GAAD,CAAN,CAAZ;AAD8B;AAE9BJ,MAAAA,QAAQ,GAAGK,MAAM,8DAAQL,QAAR,4CAAmBI,GAAnB,EAAyBC,MAAzB,iCAAoCL,QAApC,CAAjB;AACD,KAHD;AAHa;AAQb,WAAOA,QAAP;AACD;AAzCW,CAAH,CAAX;eA4CerB,K","sourcesContent":["import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\n/****************************************************************/\n/******* @author saladin jake (Victor juwa) ********************************/\n/******* @desc Express js || ****************/\nconst Utils = {\n  /**\n   * @description - validate password by comparing password with hash password\n   * @param {string} password\n   * @param {string} hashpassword\n   * @returns {boolean} boolean to show if password match or not\n   */\n  validatePassword(password, userPassword) {\n    return bcrypt.compareSync(password, userPassword);\n  },\n  /**\n   * @description - encypt password\n   * @param {object} password\n   * @returns {object} hashpassword\n   */\n  hashPassword(password) {\n    const salt = bcrypt.genSaltSync(15);\n    const pwd = bcrypt.hashSync(password, salt);\n    return pwd;\n  },\n  /**\n   * @description - signs token\n   * @param {object} payload\n   */\n  jwtSigner(payload) {\n    return jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '24h' });\n  },\n  /**\n   * @description - remove null key from ab object\n   * @param {object}\n   * @returns {object}\n   */\n  stripNull(obj) {\n    let cleanObj = {};\n\n    Object.keys(obj).forEach(val => {\n      const newVal = obj[val];\n      cleanObj = newVal ? { ...cleanObj, [val]: newVal } : cleanObj;\n    });\n\n    return cleanObj;\n  },\n};\n\nexport default Utils;\n"],"file":"common.js"}