{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/middlewares/user_sanitizer.js"],"names":["validNameRegex","user_typeRegex","usernameRegex","emailRegex","passwordRegex","phoneNumberRegex","lastnameRegex","handleError","response","message","code","status","json","error","SubmitEventValidator","request","next","body","email","test","console","log","UserModel","find","then","result","userExists","length","JSON","stringify","err","DriverModel","PartnerModel","firstname","lastname","user_type","username","phoneNumber","password","terms_and_cond"],"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","sourcesContent":["import Database from '../models/db';\nimport ResponseHandler from '../helpers/response_handler';\nimport UserModel from '../models/User.model';\nimport DriverModel from \"../models/Driver.model\";\nimport PartnerModel from \"../models/Partners.model\";\nconst validNameRegex = /^[A-Za-z]{3,30}$/;\nconst user_typeRegex = /^[a-zA-Z]'?([a-zA-Z]|\\.| |-){3,}$/;\nconst usernameRegex = /^[A-Za-z0-9]{3,20}$/;\nconst emailRegex = /\\S+@\\S+\\.\\S+/;\nconst passwordRegex = /^[A-Za-z0-9]{6,}$/;\nconst phoneNumberRegex = /^(\\+?234|0)?[789]\\d{9}$/;\nconst lastnameRegex=/^[A-Za-z\\d_-]+$/;\n\nconst handleError = (response, message, code = 422) =>\n  response.status(code).json({\n    status: code,\n    error: message,\n  });\n\nexport default class SubmitEventValidator {\n\n  static checkIfUserDoesntExists(request, response, next) {\n    const { email } = request.body;\n\n    if(!emailRegex.test(email)){\n\n      return response.status(422).json({\n            status: 422,\n            error: 'Invalid email sent',\n          });\n\n    }\n    console.log(\"email to check: \"+ email)\n    UserModel.find({email:email} )\n  \n      .then(result => {\n       \n        const userExists = result;\n        if ( userExists.length>0 ) {\n          return next();\n          \n        }else{\n\n           console.log(\"this user does not : \" + JSON.stringify(result))\n          return response.status(422).json({\n            status: 422,\n            error: 'User does not exist on this platform',\n          });\n          \n        }\n        \n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: 'Email or Username must be unique: '+ err,\n        }),\n      );\n  }\n\n  static checkIfUserExists(request, response, next) {\n    const { email } = request.body;\n\n    if(!emailRegex.test(email)){\n\n      return response.status(422).json({\n            status: 422,\n            error: 'Invalid email sent',\n          });\n\n    }\n    console.log(\"email to check: \"+ email)\n    UserModel.find({email:email} )\n  \n      .then(result => {\n       \n        const userExists = result;\n        if ( userExists.length>0 ) {\n           console.log(\"this user exist : \" + JSON.stringify(result))\n          return response.status(409).json({\n            status: 409,\n            error: 'Email already exists',\n          });\n        }else{\n          return next();\n        }\n        \n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: 'Email or Username must be unique: '+ err,\n        }),\n      );\n  }\n\n  static checkIfUserIsBanned(request, response, next) {\n\n    const { email } = request.body;\n\n    if(!emailRegex.test(email)){\n\n      return response.status(422).json({\n            status: 422,\n            error: 'Invalid email sent',\n          });\n\n    }\n    console.log(\"email to check: \"+ email)\n    UserModel.find({email:email,status:\"Active\"} )\n  \n      .then(result => {\n       \n        const userExists = result;\n        if ( userExists.length<=0 ) {\n           console.log(\"this user exist : \" + JSON.stringify(result))\n          return response.status(409).json({\n            status: 409,\n            error: 'User is either banned or suspended on this platform',\n          });\n        }else{\n          return next();\n        }\n        \n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: 'Email or Username must be unique: '+ err,\n        }),\n      );\n\n  }\n\n  static checkIfDriverExists(request, response, next) {\n    const { email } = request.body;\n\n    if(!emailRegex.test(email)){\n\n      return response.status(422).json({\n            status: 422,\n            error: 'Invalid email sent',\n          });\n\n    }\n    console.log(\"email to check: \"+ email)\n    DriverModel.find({email:email} )\n  \n      .then(result => {\n       \n        const userExists = result;\n        if ( userExists.length>0 ) {\n           console.log(\"this user exist : \" + JSON.stringify(result))\n          return response.status(409).json({\n            status: 409,\n            error: 'Email already exists',\n          });\n        }else{\n          return next();\n        }\n        \n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: 'Email or Username must be unique: '+ err,\n        }),\n      );\n  }\n\n  static checkIfPartnerExists(request, response, next) {\n    const { email } = request.body;\n\n    if(!emailRegex.test(email)){\n\n      return response.status(422).json({\n            status: 422,\n            error: 'Invalid email sent',\n          });\n\n    }\n    console.log(\"email to check: \"+ email)\n    PartnerModel.find({email:email} )\n  \n      .then(result => {\n       \n        const userExists = result;\n        if ( userExists.length>0 ) {\n           console.log(\"this user exist : \" + JSON.stringify(result))\n          return response.status(409).json({\n            status: 409,\n            error: 'Email already exists',\n          });\n        }else{\n          return next();\n        }\n        \n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: 'Email or Username must be unique: '+ err,\n        }),\n      );\n  }\n\n  static validateSignUp(request, response, next) {\n    const {\n      firstname,\n      lastname,\n      user_type,\n      username,\n      email,\n      phoneNumber,\n      password,\n      terms_and_cond\n    } = request.body;\n    \n    if (terms_and_cond==\"not selected\") {\n      console.log('err terms')\n      return response.status(422).json({\n        status: 422,\n        error: 'Terms and conditions must be checked to sign up',\n      });\n    }\n    if (!(firstname && firstname.length)) {\n      console.log('err fn')\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter your firstname',\n      });\n    }\n    if (!validNameRegex.test(firstname)) {\n      console.log('err fn1')\n      return response.status(422).json({\n        status: 422,\n        error: 'firstname must be between 3 and 30 characters only',\n      });\n    }\n    if (!(lastname && lastname.length)) {\n      console.log('err ln')\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter your lastname',\n      });\n    }\n    if (!lastnameRegex.test(lastname)) {\n      console.log('err ln2')\n      return response.status(422).json({\n        status: 422,\n        error: 'lastname must be between 3 and 30 characters only',\n      });\n    }\n\n    if (!(user_type && user_type.length)) {\n      \n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter your user_type',\n      });\n    }\n    if ((user_type==\"Select Category\")) {\n      \n      return response.status(422).json({\n        status: 422,\n        error: 'Please choose a plan category',\n      });\n    }\n\n\n\n    console.log(user_type)\n\n    if (!user_typeRegex.test(user_type)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'user_type must be a minimum of 3 charcaters',\n      });\n    }\n\n    if (!(username && username.length)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter your username',\n      });\n    }\n\n    if (!usernameRegex.test(username)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'username must contain between 3 and 30 alphanumeric characters only',\n      });\n    }\n    if (!(email && email.length)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter your email',\n      });\n    }\n\n    if (!emailRegex.test(email)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter a valid email',\n      });\n    }\n\n    if (!(phoneNumber && phoneNumber.length)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter your phone number',\n      });\n    }\n\n    if (!phoneNumberRegex.test(phoneNumber)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter a valid phone number',\n      });\n    }\n\n    if (!(password && password.length)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter your password',\n      });\n    }\n\n    if (!passwordRegex.test(password)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Password must be a minimum of 6 alphanumeric characters',\n      });\n    }\n\n    return next();\n  }\n\n  static validateLogin(request, response, next) {\n    const { email, password } = request.body;\n    if (!(email && email.length)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'email is required',\n      });\n    }\n     if (!emailRegex.test(email)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'Please enter a valid email',\n      });\n    }\n    if (!(password && password.length)) {\n      return response.status(422).json({\n        status: 422,\n        error: 'password is required',\n      });\n    }\n\n    if(!emailRegex.test(email)){\n\n      return response.status(422).json({\n            status: 422,\n            error: 'Invalid email sent',\n          });\n\n    }\n    console.log(\"email to check: \"+ email)\n    var error = false;\n    UserModel.find({email:email} )\n      .then(result => {\n        console.log(\"this user exist : \" + JSON.stringify(result))\n        const userExists = result;\n        if ( userExists.length<0 ) {\n          return response.status(404).json({\n            status: 404,\n            error: 'Email does not exists',\n          });\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        else if(userExists[0].email){\n          return next();\n        }else {\n          return  response.status(422).json({\n          status: 422,\n          error: 'Invalid credentials',\n        })\n        }\n        \n      })\n      .catch(err =>\n        response.status(400).json({\n          status: 400,\n          error: 'Email or Username must be unique',\n        }),\n      );\n     \n  }\n}\n"],"file":"user_sanitizer.js"}