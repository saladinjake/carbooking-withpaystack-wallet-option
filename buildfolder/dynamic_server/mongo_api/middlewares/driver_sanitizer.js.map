{"version":3,"sources":["../../../../server/dynamic_server/mongo_api/middlewares/driver_sanitizer.js"],"names":["validNameRegex","user_typeRegex","usernameRegex","emailRegex","passwordRegex","phoneNumberRegex","lastnameRegex","handleError","response","message","code","status","json","error","SubmitEventValidator","request","next","body","email","test","console","log","UserModel","find","then","result","userExists","length","JSON","stringify","err","firstname","lastname","user_type","username","phoneNumber","password","terms_and_cond"],"mappingscAAc,0BAAG,kBAAH,CAApB;AACA,IAAMC,cAAc,0BAAG,mCAAH,CAApB;AACA,IAAMC,aAAa,0BAAG,qBAAH,CAAnB;AACA,IAAMC,UAAU,0BAAG,cAAH,CAAhB;AACA,IAAMC,aAAa,0BAAG,mBAAH,CAAnB;AACA,IAAMC,gBAAgB,0BAAG,yBAAH,CAAtB;AACA,IAAMC,aAAa,0BAAC,iBAAD,CAAnB;;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD,EAAWC,OAAX,EAClB;AAAA,MADsCC,IACtC,iGAD6C,GAC7C;AAAA;AAAA;AAAA,SAAAF,QAAQ,CAACG,MAAT,CAAgBD,IAAhB,EAAsBE,IAAtB,CAA2B;AACzBD,IAAAA,MAAM,EAAED,IADiB;AAEzBG,IAAAA,KAAK,EAAEJ;AAFkB,GAA3B;AAGE,CAJJ;;IAMqBK,oB;;;;;;;;;8CAEcC,O,EAASP,Q,EAAUQ,I,EAAM;AAAA;;AAAA,wCACtCD,OAAO,CAACE,IAD8B;AAAA,UAChDC,KADgD,QAChDA,KADgD;;AAAA;;AAGxD,UAAG,CAACf,UAAU,CAACgB,IAAX,CAAgBD,KAAhB,CAAJ,EAA2B;AAAA;AAAA;AAEzB,eAAOV,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC3BD,UAAAA,MAAM,EAAE,GADmB;AAE3BE,UAAAA,KAAK,EAAE;AAFoB,SAA1B,CAAP;AAKD,OAPD;AAAA;AAAA;;AAHwD;AAWxDO,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAoBH,KAAhC;AAXwD;;AAYxDI,uBAAUC,IAAV,CAAe;AAACL,QAAAA,KAAK,EAACA;AAAP,OAAf,EAEGM,IAFH,CAEQ,UAAAC,MAAM,EAAI;AAAA;AAEd,YAAMC,UAAU,2BAAGD,MAAH,CAAhB;AAFc;;AAGd,YAAKC,UAAU,CAACC,MAAX,GAAkB,CAAvB,EAA2B;AAAA;AAAA;AACzB,iBAAOX,IAAI,EAAX;AAED,SAHD,MAGK;AAAA;AAAA;AAEFI,UAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BO,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAtC;AAFE;AAGH,iBAAOjB,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,YAAAA,MAAM,EAAE,GADuB;AAE/BE,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAKD;AAEF,OAlBH,WAmBS,UAAAiB,GAAG,EACR;AAAA;AAAA;AAAA,eAAAtB,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AACxBD,UAAAA,MAAM,EAAE,GADgB;AAExBE,UAAAA,KAAK,EAAE,uCAAsCiB;AAFrB,SAA1B;AAGE,OAvBN;AAyBD;;;0CAI4Bf,O,EAASP,Q,EAAUQ,I,EAAM;AAAA;;AAAA,0CAElCD,OAAO,CAACE,IAF0B;AAAA,UAE5CC,KAF4C,SAE5CA,KAF4C;;AAAA;;AAIpD,UAAG,CAACf,UAAU,CAACgB,IAAX,CAAgBD,KAAhB,CAAJ,EAA2B;AAAA;AAAA;AAEzB,eAAOV,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC3BD,UAAAA,MAAM,EAAE,GADmB;AAE3BE,UAAAA,KAAK,EAAE;AAFoB,SAA1B,CAAP;AAKD,OAPD;AAAA;AAAA;;AAJoD;AAYpDO,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAoBH,KAAhC;AAZoD;;AAapDI,uBAAUC,IAAV,CAAe;AAACL,QAAAA,KAAK,EAACA,KAAP;AAAaP,QAAAA,MAAM,EAAC;AAApB,OAAf,EAEGa,IAFH,CAEQ,UAAAC,MAAM,EAAI;AAAA;AAEd,YAAMC,UAAU,2BAAGD,MAAH,CAAhB;AAFc;;AAGd,YAAKC,UAAU,CAACC,MAAX,IAAmB,CAAxB,EAA4B;AAAA;AAAA;AACzBP,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBO,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAnC;AADyB;AAE1B,iBAAOjB,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,YAAAA,MAAM,EAAE,GADuB;AAE/BE,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SAND,MAMK;AAAA;AAAA;AACH,iBAAOG,IAAI,EAAX;AACD;AAEF,OAfH,WAgBS,UAAAc,GAAG,EACR;AAAA;AAAA;AAAA,eAAAtB,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AACxBD,UAAAA,MAAM,EAAE,GADgB;AAExBE,UAAAA,KAAK,EAAE,uCAAsCiB;AAFrB,SAA1B;AAGE,OApBN;AAuBD;;;wCAE0Bf,O,EAASP,Q,EAAUQ,I,EAAM;AAAA;;AAAA,0CAChCD,OAAO,CAACE,IADwB;AAAA,UAC1CC,KAD0C,SAC1CA,KAD0C;;AAAA;;AAGlD,UAAG,CAACf,UAAU,CAACgB,IAAX,CAAgBD,KAAhB,CAAJ,EAA2B;AAAA;AAAA;AAEzB,eAAOV,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC3BD,UAAAA,MAAM,EAAE,GADmB;AAE3BE,UAAAA,KAAK,EAAE;AAFoB,SAA1B,CAAP;AAKD,OAPD;AAAA;AAAA;;AAHkD;AAWlDO,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAoBH,KAAhC;AAXkD;;AAYlDI,uBAAUC,IAAV,CAAe;AAACL,QAAAA,KAAK,EAACA;AAAP,OAAf,EAEGM,IAFH,CAEQ,UAAAC,MAAM,EAAI;AAAA;AAEd,YAAMC,UAAU,2BAAGD,MAAH,CAAhB;AAFc;;AAGd,YAAKC,UAAU,CAACC,MAAX,GAAkB,CAAvB,EAA2B;AAAA;AAAA;AACxBP,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBO,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAnC;AADwB;AAEzB,iBAAOjB,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,YAAAA,MAAM,EAAE,GADuB;AAE/BE,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SAND,MAMK;AAAA;AAAA;AACH,iBAAOG,IAAI,EAAX;AACD;AAEF,OAfH,WAgBS,UAAAc,GAAG,EACR;AAAA;AAAA;AAAA,eAAAtB,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AACxBD,UAAAA,MAAM,EAAE,GADgB;AAExBE,UAAAA,KAAK,EAAE,uCAAsCiB;AAFrB,SAA1B;AAGE,OApBN;AAsBD;;;mCAGqBf,O,EAASP,Q,EAAUQ,I,EAAM;AAAA;;AAAA,0CAUzCD,OAAO,CAACE,IAViC;AAAA,UAE3Cc,SAF2C,SAE3CA,SAF2C;AAAA,UAG3CC,QAH2C,SAG3CA,QAH2C;AAAA,UAI3CC,SAJ2C,SAI3CA,SAJ2C;AAAA,UAK3CC,QAL2C,SAK3CA,QAL2C;AAAA,UAM3ChB,KAN2C,SAM3CA,KAN2C;AAAA,UAO3CiB,WAP2C,SAO3CA,WAP2C;AAAA,UAQ3CC,QAR2C,SAQ3CA,QAR2C;AAAA,UAS3CC,cAT2C,SAS3CA,cAT2C;;AAAA;;AAY7C,UAAIA,cAAc,IAAE,cAApB,EAAoC;AAAA;AAAA;AAClCjB,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AADkC;AAElC,eAAOb,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OAND;AAAA;AAAA;;AAZ6C;;AAmB7C,UAAI,EAAE,0BAAAkB,SAAS,+BAAIA,SAAS,CAACJ,MAAd,CAAX,CAAJ,EAAsC;AAAA;AAAA;AACpCP,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AADoC;AAEpC,eAAOb,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OAND;AAAA;AAAA;;AAnB6C;;AA0B7C,UAAI,CAACb,cAAc,CAACmB,IAAf,CAAoBY,SAApB,CAAL,EAAqC;AAAA;AAAA;AACnCX,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AADmC;AAEnC,eAAOb,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OAND;AAAA;AAAA;;AA1B6C;;AAiC7C,UAAI,EAAE,2BAAAmB,QAAQ,gCAAIA,QAAQ,CAACL,MAAb,CAAV,CAAJ,EAAoC;AAAA;AAAA;AAClCP,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AADkC;AAElC,eAAOb,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OAND;AAAA;AAAA;;AAjC6C;;AAwC7C,UAAI,CAACP,aAAa,CAACa,IAAd,CAAmBa,QAAnB,CAAL,EAAmC;AAAA;AAAA;AACjCZ,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AADiC;AAEjC,eAAOb,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OAND;AAAA;AAAA;;AAxC6C;;AAgD7C,UAAI,EAAE,2BAAAoB,SAAS,gCAAIA,SAAS,CAACN,MAAd,CAAX,CAAJ,EAAsC;AAAA;AAAA;AAEpC,eAAOnB,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OAND;AAAA;AAAA;;AAhD6C;;AAuD7C,UAAKoB,SAAS,IAAE,iBAAhB,EAAoC;AAAA;AAAA;AAElC,eAAOzB,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OAND;AAAA;AAAA;;AAvD6C;AAiE7CO,MAAAA,OAAO,CAACC,GAAR,CAAYY,SAAZ;AAjE6C;;AAmE7C,UAAI,CAAChC,cAAc,CAACkB,IAAf,CAAoBc,SAApB,CAAL,EAAqC;AAAA;AAAA;AACnC,eAAOzB,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OALD;AAAA;AAAA;;AAnE6C;;AA0E7C,UAAI,EAAE,2BAAAqB,QAAQ,gCAAIA,QAAQ,CAACP,MAAb,CAAV,CAAJ,EAAoC;AAAA;AAAA;AAClC,eAAOnB,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OALD;AAAA;AAAA;;AA1E6C;;AAiF7C,UAAI,CAACX,aAAa,CAACiB,IAAd,CAAmBe,QAAnB,CAAL,EAAmC;AAAA;AAAA;AACjC,eAAO1B,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OALD;AAAA;AAAA;;AAjF6C;;AAuF7C,UAAI,EAAE,2BAAAK,KAAK,gCAAIA,KAAK,CAACS,MAAV,CAAP,CAAJ,EAA8B;AAAA;AAAA;AAC5B,eAAOnB,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OALD;AAAA;AAAA;;AAvF6C;;AA8F7C,UAAI,CAACV,UAAU,CAACgB,IAAX,CAAgBD,KAAhB,CAAL,EAA6B;AAAA;AAAA;AAC3B,eAAOV,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OALD;AAAA;AAAA;;AA9F6C;;AAqG7C,UAAI,EAAE,2BAAAsB,WAAW,gCAAIA,WAAW,CAACR,MAAhB,CAAb,CAAJ,EAA0C;AAAA;AAAA;AACxC,eAAOnB,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OALD;AAAA;AAAA;;AArG6C;;AA4G7C,UAAI,CAACR,gBAAgB,CAACc,IAAjB,CAAsBgB,WAAtB,CAAL,EAAyC;AAAA;AAAA;AACvC,eAAO3B,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OALD;AAAA;AAAA;;AA5G6C;;AAmH7C,UAAI,EAAE,2BAAAuB,QAAQ,gCAAIA,QAAQ,CAACT,MAAb,CAAV,CAAJ,EAAoC;AAAA;AAAA;AAClC,eAAOnB,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OALD;AAAA;AAAA;;AAnH6C;;AA0H7C,UAAI,CAACT,aAAa,CAACe,IAAd,CAAmBiB,QAAnB,CAAL,EAAmC;AAAA;AAAA;AACjC,eAAO5B,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OALD;AAAA;AAAA;;AA1H6C;AAiI7C,aAAOG,IAAI,EAAX;AACD;;;kCAEoBD,O,EAASP,Q,EAAUQ,I,EAAM;AAAA;;AAAA,0CAChBD,OAAO,CAACE,IADQ;AAAA,UACpCC,KADoC,SACpCA,KADoC;AAAA,UAC7BkB,QAD6B,SAC7BA,QAD6B;;AAAA;;AAE5C,UAAI,EAAE,2BAAAlB,KAAK,gCAAIA,KAAK,CAACS,MAAV,CAAP,CAAJ,EAA8B;AAAA;AAAA;AAC5B,eAAOnB,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OALD;AAAA;AAAA;;AAF4C;;AAQ3C,UAAI,CAACV,UAAU,CAACgB,IAAX,CAAgBD,KAAhB,CAAL,EAA6B;AAAA;AAAA;AAC5B,eAAOV,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OALA;AAAA;AAAA;;AAR2C;;AAc5C,UAAI,EAAE,2BAAAuB,QAAQ,gCAAIA,QAAQ,CAACT,MAAb,CAAV,CAAJ,EAAoC;AAAA;AAAA;AAClC,eAAOnB,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,UAAAA,MAAM,EAAE,GADuB;AAE/BE,UAAAA,KAAK,EAAE;AAFwB,SAA1B,CAAP;AAID,OALD;AAAA;AAAA;;AAd4C;;AAqB5C,UAAG,CAACV,UAAU,CAACgB,IAAX,CAAgBD,KAAhB,CAAJ,EAA2B;AAAA;AAAA;AAEzB,eAAOV,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC3BD,UAAAA,MAAM,EAAE,GADmB;AAE3BE,UAAAA,KAAK,EAAE;AAFoB,SAA1B,CAAP;AAKD,OAPD;AAAA;AAAA;;AArB4C;AA6B5CO,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAoBH,KAAhC;AACA,UAAIL,KAAK,2BAAG,KAAH,CAAT;AA9B4C;;AA+B5CS,uBAAUC,IAAV,CAAe;AAACL,QAAAA,KAAK,EAACA;AAAP,OAAf,EACGM,IADH,CACQ,UAAAC,MAAM,EAAI;AAAA;AAAA;AACdL,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBO,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAnC;AACA,YAAMC,UAAU,2BAAGD,MAAH,CAAhB;AAFc;;AAGd,YAAKC,UAAU,CAACC,MAAX,GAAkB,CAAvB,EAA2B;AAAA;AAAA;AACzB,iBAAOnB,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,YAAAA,MAAM,EAAE,GADuB;AAE/BE,YAAAA,KAAK,EAAE;AAFwB,WAA1B,CAAP;AAID,SALD,MAOK;AAAA;AAAA;;AAAA,cAAGa,UAAU,CAAC,CAAD,CAAV,CAAcR,KAAjB,EAAuB;AAAA;AAAA;AAC1B,mBAAOF,IAAI,EAAX;AACD,WAFI,MAEC;AAAA;AAAA;AACJ,mBAAQR,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAClCD,cAAAA,MAAM,EAAE,GAD0B;AAElCE,cAAAA,KAAK,EAAE;AAF2B,aAA1B,CAAR;AAID;AAAA;AAEF,OApBH,WAqBS,UAAAiB,GAAG,EACR;AAAA;AAAA;AAAA,eAAAtB,QAAQ,CAACG,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AACxBD,UAAAA,MAAM,EAAE,GADgB;AAExBE,UAAAA,KAAK,EAAE;AAFiB,SAA1B;AAGE,OAzBN;AA4BD","sourcesContent":["import Database from '../models/db';\r\nimport ResponseHandler from '../helpers/response_handler';\r\n\r\nimport UserModel from \"../models/User.model\";\r\nimport PartnerModel from \"../models/Partners.model\";\r\nconst validNameRegex = /^[A-Za-z]{3,30}$/;\r\nconst user_typeRegex = /^[a-zA-Z]'?([a-zA-Z]|\\.| |-){3,}$/;\r\nconst usernameRegex = /^[A-Za-z0-9]{3,20}$/;\r\nconst emailRegex = /\\S+@\\S+\\.\\S+/;\r\nconst passwordRegex = /^[A-Za-z0-9]{6,}$/;\r\nconst phoneNumberRegex = /^(\\+?234|0)?[789]\\d{9}$/;\r\nconst lastnameRegex=/^[A-Za-z\\d_-]+$/;\r\n\r\nconst handleError = (response, message, code = 422) =>\r\n  response.status(code).json({\r\n    status: code,\r\n    error: message,\r\n  });\r\n\r\nexport default class SubmitEventValidator {\r\n\r\n  static checkIfDriverDoesntExists(request, response, next) {\r\n    const { email } = request.body;\r\n\r\n    if(!emailRegex.test(email)){\r\n\r\n      return response.status(422).json({\r\n            status: 422,\r\n            error: 'Invalid email sent',\r\n          });\r\n\r\n    }\r\n    console.log(\"email to check: \"+ email)\r\n    UserModel.find({email:email} )\r\n  \r\n      .then(result => {\r\n       \r\n        const userExists = result;\r\n        if ( userExists.length>0 ) {\r\n          return next();\r\n          \r\n        }else{\r\n\r\n           console.log(\"this user does not : \" + JSON.stringify(result))\r\n          return response.status(422).json({\r\n            status: 422,\r\n            error: 'User does not exist on this platform',\r\n          });\r\n          \r\n        }\r\n        \r\n      })\r\n      .catch(err =>\r\n        response.status(400).json({\r\n          status: 400,\r\n          error: 'Email or Username must be unique: '+ err,\r\n        }),\r\n      );\r\n  }\r\n\r\n  \r\n\r\n  static checkIfDriverIsBanned(request, response, next) {\r\n\r\n    const { email } = request.body;\r\n\r\n    if(!emailRegex.test(email)){\r\n\r\n      return response.status(422).json({\r\n            status: 422,\r\n            error: 'Invalid email sent',\r\n          });\r\n\r\n    }\r\n    console.log(\"email to check: \"+ email)\r\n    UserModel.find({email:email,status:\"Active\"} )\r\n  \r\n      .then(result => {\r\n       \r\n        const userExists = result;\r\n        if ( userExists.length<=0 ) {\r\n           console.log(\"this user exist : \" + JSON.stringify(result))\r\n          return response.status(409).json({\r\n            status: 409,\r\n            error: 'User is either banned or suspended on this platform',\r\n          });\r\n        }else{\r\n          return next();\r\n        }\r\n        \r\n      })\r\n      .catch(err =>\r\n        response.status(400).json({\r\n          status: 400,\r\n          error: 'Email or Username must be unique: '+ err,\r\n        }),\r\n      );\r\n\r\n  }\r\n\r\n  static checkIfDriverExists(request, response, next) {\r\n    const { email } = request.body;\r\n\r\n    if(!emailRegex.test(email)){\r\n\r\n      return response.status(422).json({\r\n            status: 422,\r\n            error: 'Invalid email sent',\r\n          });\r\n\r\n    }\r\n    console.log(\"email to check: \"+ email)\r\n    UserModel.find({email:email} )\r\n  \r\n      .then(result => {\r\n       \r\n        const userExists = result;\r\n        if ( userExists.length>0 ) {\r\n           console.log(\"this user exist : \" + JSON.stringify(result))\r\n          return response.status(409).json({\r\n            status: 409,\r\n            error: 'Email already exists',\r\n          });\r\n        }else{\r\n          return next();\r\n        }\r\n        \r\n      })\r\n      .catch(err =>\r\n        response.status(400).json({\r\n          status: 400,\r\n          error: 'Email or Username must be unique: '+ err,\r\n        }),\r\n      );\r\n  }\r\n\r\n  \r\n  static validateSignUp(request, response, next) {\r\n    const {\r\n      firstname,\r\n      lastname,\r\n      user_type,\r\n      username,\r\n      email,\r\n      phoneNumber,\r\n      password,\r\n      terms_and_cond\r\n    } = request.body;\r\n    \r\n    if (terms_and_cond==\"not selected\") {\r\n      console.log('err terms')\r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'Terms and conditions must be checked to sign up',\r\n      });\r\n    }\r\n    if (!(firstname && firstname.length)) {\r\n      console.log('err fn')\r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'Please enter your firstname',\r\n      });\r\n    }\r\n    if (!validNameRegex.test(firstname)) {\r\n      console.log('err fn1')\r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'firstname must be between 3 and 30 characters only',\r\n      });\r\n    }\r\n    if (!(lastname && lastname.length)) {\r\n      console.log('err ln')\r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'Please enter your lastname',\r\n      });\r\n    }\r\n    if (!lastnameRegex.test(lastname)) {\r\n      console.log('err ln2')\r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'lastname must be between 3 and 30 characters only',\r\n      });\r\n    }\r\n\r\n    if (!(user_type && user_type.length)) {\r\n      \r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'Please enter your user_type',\r\n      });\r\n    }\r\n    if ((user_type==\"Select Category\")) {\r\n      \r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'Please choose a plan category',\r\n      });\r\n    }\r\n\r\n\r\n\r\n    console.log(user_type)\r\n\r\n    if (!user_typeRegex.test(user_type)) {\r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'user_type must be a minimum of 3 charcaters',\r\n      });\r\n    }\r\n\r\n    if (!(username && username.length)) {\r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'Please enter your username',\r\n      });\r\n    }\r\n\r\n    if (!usernameRegex.test(username)) {\r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'username must contain between 3 and 30 alphanumeric characters only',\r\n      });\r\n    }\r\n    if (!(email && email.length)) {\r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'Please enter your email',\r\n      });\r\n    }\r\n\r\n    if (!emailRegex.test(email)) {\r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'Please enter a valid email',\r\n      });\r\n    }\r\n\r\n    if (!(phoneNumber && phoneNumber.length)) {\r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'Please enter your phone number',\r\n      });\r\n    }\r\n\r\n    if (!phoneNumberRegex.test(phoneNumber)) {\r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'Please enter a valid phone number',\r\n      });\r\n    }\r\n\r\n    if (!(password && password.length)) {\r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'Please enter your password',\r\n      });\r\n    }\r\n\r\n    if (!passwordRegex.test(password)) {\r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'Password must be a minimum of 6 alphanumeric characters',\r\n      });\r\n    }\r\n\r\n    return next();\r\n  }\r\n\r\n  static validateLogin(request, response, next) {\r\n    const { email, password } = request.body;\r\n    if (!(email && email.length)) {\r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'email is required',\r\n      });\r\n    }\r\n     if (!emailRegex.test(email)) {\r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'Please enter a valid email',\r\n      });\r\n    }\r\n    if (!(password && password.length)) {\r\n      return response.status(422).json({\r\n        status: 422,\r\n        error: 'password is required',\r\n      });\r\n    }\r\n\r\n    if(!emailRegex.test(email)){\r\n\r\n      return response.status(422).json({\r\n            status: 422,\r\n            error: 'Invalid email sent',\r\n          });\r\n\r\n    }\r\n    console.log(\"email to check: \"+ email)\r\n    var error = false;\r\n    UserModel.find({email:email} )\r\n      .then(result => {\r\n        console.log(\"this user exist : \" + JSON.stringify(result))\r\n        const userExists = result;\r\n        if ( userExists.length<0 ) {\r\n          return response.status(404).json({\r\n            status: 404,\r\n            error: 'Email does not exists',\r\n          });\r\n        }\r\n\r\n        else if(userExists[0].email){\r\n          return next();\r\n        }else {\r\n          return  response.status(422).json({\r\n          status: 422,\r\n          error: 'Invalid credentials',\r\n        })\r\n        }\r\n        \r\n      })\r\n      .catch(err =>\r\n        response.status(400).json({\r\n          status: 400,\r\n          error: 'Email or Username must be unique',\r\n        }),\r\n      );\r\n     \r\n  }\r\n}\r\n"],"file":"driver_sanitizer.js"}